

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Apr 20 19:49:33 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=3
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=3
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77  0000                     
    78                           ; Version 2.20
    79                           ; Generated 12/02/2020 GMT
    80                           ; 
    81                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F4520 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  00378A                     __pidataCOMRAM:
   115                           	callstack 0
   116                           
   117                           ;initializer for _INCREMENT
   118  00378A  0A                 	db	10
   119                           
   120                           ;initializer for _newMessage
   121  00378B  01                 	db	1
   122                           
   123                           ;initializer for _filter_bt_min_lv2_incr
   124  00378C  000A               	dw	10
   125                           
   126                           ;initializer for _filter_bt_min_lv1_incr
   127  00378E  000A               	dw	10
   128                           
   129                           ;initializer for _filter_bt_on_off_pump
   130  003790  000A               	dw	10
   131                           
   132                           ;initializer for _filter_bt_operation_mode
   133  003792  000A               	dw	10
   134                           
   135                           	psect	smallconst
   136  000600                     __psmallconst:
   137                           	callstack 0
   138  000600  00                 	db	0
   139  000601                     _dpowers:
   140                           	callstack 0
   141  000601  0001               	dw	1
   142  000603  000A               	dw	10
   143  000605  0064               	dw	100
   144  000607  03E8               	dw	1000
   145  000609  2710               	dw	10000
   146  00060B                     __end_of_dpowers:
   147                           	callstack 0
   148  00060B                     _hexpowers:
   149                           	callstack 0
   150  00060B  0001               	dw	1
   151  00060D  0010               	dw	16
   152  00060F  0100               	dw	256
   153  000611  1000               	dw	4096
   154  000613                     __end_of_hexpowers:
   155                           	callstack 0
   156  0000                     _RCONbits	set	4048
   157  0000                     _PIE1	set	3997
   158  0000                     _SPBRG	set	4015
   159  0000                     _BAUDCONbits	set	4024
   160  0000                     _RCSTAbits	set	4011
   161  0000                     _TRISCbits	set	3988
   162  0000                     _RCSTA	set	4011
   163  0000                     _TXSTA	set	4012
   164  0000                     _TRISBbits	set	3987
   165  0000                     _TXREG	set	4013
   166  0000                     _TXSTAbits	set	4012
   167  0000                     _LATBbits	set	3978
   168  0000                     _TMR0L	set	4054
   169  0000                     _TMR0H	set	4055
   170  0000                     _ADRESL	set	4035
   171  0000                     _ADRESH	set	4036
   172  0000                     _ADCON0bits	set	4034
   173  0000                     _ADCON2	set	4032
   174  0000                     _ADCON0	set	4034
   175  0000                     _ADCON1	set	4033
   176  0000                     _LATE	set	3981
   177  0000                     _PORTE	set	3972
   178  0000                     _LATD	set	3980
   179  0000                     _PORTD	set	3971
   180  0000                     _LATB	set	3978
   181  0000                     _LATA	set	3977
   182  0000                     _PORTA	set	3968
   183  0000                     _TRISE	set	3990
   184  0000                     _TRISD	set	3989
   185  0000                     _TRISC	set	3988
   186  0000                     _TRISB	set	3987
   187  0000                     _TRISA	set	3986
   188  0000                     _INTCON2bits	set	4081
   189  0000                     _T1CON	set	4045
   190  0000                     _PIE1bits	set	3997
   191  0000                     _PORTC	set	3970
   192  0000                     _LATDbits	set	3980
   193  0000                     _T0CONbits	set	4053
   194  0000                     _INTCONbits	set	4082
   195  0000                     _RCREG	set	4014
   196  0000                     _TMR1H	set	4047
   197  0000                     _TMR1L	set	4046
   198  0000                     _PIR1bits	set	3998
   199  0000                     _PORTB	set	3969
   200  0000                     _PORTEbits	set	3972
   201  0000                     _PORTDbits	set	3971
   202  0000                     _TRISEbits	set	3990
   203  0000                     _TRISDbits	set	3989
   204  0000                     _LATC	set	3979
   205  0000                     _PEIE	set	32662
   206  000613                     STR_9:
   207  000613  25                 	db	37
   208  000614  30                 	db	48	;'0'
   209  000615  32                 	db	50	;'2'
   210  000616  58                 	db	88	;'X'
   211  000617  20                 	db	32
   212  000618  25                 	db	37
   213  000619  30                 	db	48	;'0'
   214  00061A  32                 	db	50	;'2'
   215  00061B  58                 	db	88	;'X'
   216  00061C  20                 	db	32
   217  00061D  25                 	db	37
   218  00061E  30                 	db	48	;'0'
   219  00061F  32                 	db	50	;'2'
   220  000620  58                 	db	88	;'X'
   221  000621  20                 	db	32
   222  000622  25                 	db	37
   223  000623  30                 	db	48	;'0'
   224  000624  32                 	db	50	;'2'
   225  000625  58                 	db	88	;'X'
   226  000626  20                 	db	32
   227  000627  20                 	db	32
   228  000628  20                 	db	32
   229  000629  20                 	db	32
   230  00062A  20                 	db	32
   231  00062B  00                 	db	0
   232  00062C                     STR_1:
   233  00062C  43                 	db	67	;'C'
   234  00062D  55                 	db	85	;'U'
   235  00062E  52                 	db	82	;'R'
   236  00062F  52                 	db	82	;'R'
   237  000630  45                 	db	69	;'E'
   238  000631  4E                 	db	78	;'N'
   239  000632  54                 	db	84	;'T'
   240  000633  20                 	db	32
   241  000634  4C                 	db	76	;'L'
   242  000635  56                 	db	86	;'V'
   243  000636  31                 	db	49	;'1'
   244  000637  3A                 	db	58	;':'
   245  000638  20                 	db	32
   246  000639  25                 	db	37
   247  00063A  64                 	db	100	;'d'
   248  00063B  25                 	db	37
   249  00063C  25                 	db	37
   250  00063D  20                 	db	32
   251  00063E  20                 	db	32
   252  00063F  00                 	db	0
   253  000640                     STR_2:
   254  000640  43                 	db	67	;'C'
   255  000641  55                 	db	85	;'U'
   256  000642  52                 	db	82	;'R'
   257  000643  52                 	db	82	;'R'
   258  000644  45                 	db	69	;'E'
   259  000645  4E                 	db	78	;'N'
   260  000646  54                 	db	84	;'T'
   261  000647  20                 	db	32
   262  000648  4C                 	db	76	;'L'
   263  000649  56                 	db	86	;'V'
   264  00064A  32                 	db	50	;'2'
   265  00064B  3A                 	db	58	;':'
   266  00064C  20                 	db	32
   267  00064D  25                 	db	37
   268  00064E  64                 	db	100	;'d'
   269  00064F  25                 	db	37
   270  000650  25                 	db	37
   271  000651  20                 	db	32
   272  000652  20                 	db	32
   273  000653  00                 	db	0
   274  000654                     STR_6:
   275  000654  4C                 	db	76	;'L'
   276  000655  56                 	db	86	;'V'
   277  000656  5F                 	db	95	;'_'
   278  000657  4D                 	db	77	;'M'
   279  000658  49                 	db	73	;'I'
   280  000659  4E                 	db	78	;'N'
   281  00065A  5F                 	db	95	;'_'
   282  00065B  31                 	db	49	;'1'
   283  00065C  3A                 	db	58	;':'
   284  00065D  20                 	db	32
   285  00065E  25                 	db	37
   286  00065F  64                 	db	100	;'d'
   287  000660  25                 	db	37
   288  000661  25                 	db	37
   289  000662  20                 	db	32
   290  000663  20                 	db	32
   291  000664  20                 	db	32
   292  000665  00                 	db	0
   293  000666                     STR_7:
   294  000666  4C                 	db	76	;'L'
   295  000667  56                 	db	86	;'V'
   296  000668  5F                 	db	95	;'_'
   297  000669  4D                 	db	77	;'M'
   298  00066A  49                 	db	73	;'I'
   299  00066B  4E                 	db	78	;'N'
   300  00066C  5F                 	db	95	;'_'
   301  00066D  32                 	db	50	;'2'
   302  00066E  3A                 	db	58	;':'
   303  00066F  20                 	db	32
   304  000670  25                 	db	37
   305  000671  64                 	db	100	;'d'
   306  000672  25                 	db	37
   307  000673  25                 	db	37
   308  000674  20                 	db	32
   309  000675  20                 	db	32
   310  000676  20                 	db	32
   311  000677  00                 	db	0
   312  000678                     STR_10:
   313  000678  30                 	db	48	;'0'
   314  000679  31                 	db	49	;'1'
   315  00067A  32                 	db	50	;'2'
   316  00067B  33                 	db	51	;'3'
   317  00067C  34                 	db	52	;'4'
   318  00067D  35                 	db	53	;'5'
   319  00067E  36                 	db	54	;'6'
   320  00067F  37                 	db	55	;'7'
   321  000680  38                 	db	56	;'8'
   322  000681  39                 	db	57	;'9'
   323  000682  41                 	db	65	;'A'
   324  000683  42                 	db	66	;'B'
   325  000684  43                 	db	67	;'C'
   326  000685  44                 	db	68	;'D'
   327  000686  45                 	db	69	;'E'
   328  000687  46                 	db	70	;'F'
   329  000688  00                 	db	0
   330  000689                     STR_8:
   331  000689  4D                 	db	77	;'M'
   332  00068A  4F                 	db	79	;'O'
   333  00068B  44                 	db	68	;'D'
   334  00068C  42                 	db	66	;'B'
   335  00068D  55                 	db	85	;'U'
   336  00068E  53                 	db	83	;'S'
   337  00068F  3A                 	db	58	;':'
   338  000690  20                 	db	32
   339  000691  20                 	db	32
   340  000692  20                 	db	32
   341  000693  20                 	db	32
   342  000694  20                 	db	32
   343  000695  20                 	db	32
   344  000696  20                 	db	32
   345  000697  20                 	db	32
   346  000698  20                 	db	32
   347  000699  00                 	db	0
   348  00069A                     STR_3:
   349  00069A  4F                 	db	79	;'O'
   350  00069B  50                 	db	80	;'P'
   351  00069C  45                 	db	69	;'E'
   352  00069D  52                 	db	82	;'R'
   353  00069E  41                 	db	65	;'A'
   354  00069F  54                 	db	84	;'T'
   355  0006A0  49                 	db	73	;'I'
   356  0006A1  4F                 	db	79	;'O'
   357  0006A2  4E                 	db	78	;'N'
   358  0006A3  20                 	db	32
   359  0006A4  4D                 	db	77	;'M'
   360  0006A5  4F                 	db	79	;'O'
   361  0006A6  44                 	db	68	;'D'
   362  0006A7  45                 	db	69	;'E'
   363  0006A8  3A                 	db	58	;':'
   364  0006A9  20                 	db	32
   365  0006AA  00                 	db	0
   366  0006AB                     STR_5:
   367  0006AB  4D                 	db	77	;'M'
   368  0006AC  41                 	db	65	;'A'
   369  0006AD  4E                 	db	78	;'N'
   370  0006AE  55                 	db	85	;'U'
   371  0006AF  41                 	db	65	;'A'
   372  0006B0  4C                 	db	76	;'L'
   373  0006B1  20                 	db	32
   374  0006B2  20                 	db	32
   375  0006B3  20                 	db	32
   376  0006B4  20                 	db	32
   377  0006B5  20                 	db	32
   378  0006B6  20                 	db	32
   379  0006B7  20                 	db	32
   380  0006B8  20                 	db	32
   381  0006B9  20                 	db	32
   382  0006BA  00                 	db	0
   383  0006BB                     STR_4:
   384  0006BB  41                 	db	65	;'A'
   385  0006BC  55                 	db	85	;'U'
   386  0006BD  54                 	db	84	;'T'
   387  0006BE  4F                 	db	79	;'O'
   388  0006BF  4D                 	db	77	;'M'
   389  0006C0  41                 	db	65	;'A'
   390  0006C1  54                 	db	84	;'T'
   391  0006C2  49                 	db	73	;'I'
   392  0006C3  43                 	db	67	;'C'
   393  0006C4  20                 	db	32
   394  0006C5  20                 	db	32
   395  0006C6  20                 	db	32
   396  0006C7  20                 	db	32
   397  0006C8  20                 	db	32
   398  0006C9  20                 	db	32
   399  0006CA  00                 	db	0
   400  0006CB  00                 	db	0	; dummy byte at the end
   401  0000                     
   402                           ; #config settings
   403                           
   404                           	psect	cinit
   405  003448                     __pcinit:
   406                           	callstack 0
   407  003448                     start_initialization:
   408                           	callstack 0
   409  003448                     __initialization:
   410                           	callstack 0
   411                           
   412                           ; Initialize objects allocated to COMRAM (10 bytes)
   413                           ; load TBLPTR registers with __pidataCOMRAM
   414  003448  0E8A               	movlw	low __pidataCOMRAM
   415  00344A  6EF6               	movwf	tblptrl,c
   416  00344C  0E37               	movlw	high __pidataCOMRAM
   417  00344E  6EF7               	movwf	tblptrh,c
   418  003450  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   419  003452  6EF8               	movwf	tblptru,c
   420  003454  EE00  F066         	lfsr	0,__pdataCOMRAM
   421  003458  EE10 F00A          	lfsr	1,10
   422  00345C                     copy_data0:
   423  00345C  0009               	tblrd		*+
   424  00345E  CFF5 FFEE          	movff	tablat,postinc0
   425  003462  50E5               	movf	postdec1,w,c
   426  003464  50E1               	movf	fsr1l,w,c
   427  003466  E1FA               	bnz	copy_data0
   428                           
   429                           ; Clear objects allocated to BANK2 (82 bytes)
   430  003468  EE02  F000         	lfsr	0,__pbssBANK2
   431  00346C  0E52               	movlw	82
   432  00346E                     clear_0:
   433  00346E  6AEE               	clrf	postinc0,c
   434  003470  06E8               	decf	wreg,f,c
   435  003472  E1FD               	bnz	clear_0
   436                           
   437                           ; Clear objects allocated to BANK1 (225 bytes)
   438  003474  EE01  F000         	lfsr	0,__pbssBANK1
   439  003478  0EE1               	movlw	225
   440  00347A                     clear_1:
   441  00347A  6AEE               	clrf	postinc0,c
   442  00347C  06E8               	decf	wreg,f,c
   443  00347E  E1FD               	bnz	clear_1
   444                           
   445                           ; Clear objects allocated to BANK0 (125 bytes)
   446  003480  EE00  F080         	lfsr	0,__pbssBANK0
   447  003484  0E7D               	movlw	125
   448  003486                     clear_2:
   449  003486  6AEE               	clrf	postinc0,c
   450  003488  06E8               	decf	wreg,f,c
   451  00348A  E1FD               	bnz	clear_2
   452                           
   453                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   454  00348C  6A70               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   455                           
   456                           ; Clear objects allocated to COMRAM (43 bytes)
   457  00348E  EE00  F03B         	lfsr	0,__pbssCOMRAM
   458  003492  0E2B               	movlw	43
   459  003494                     clear_3:
   460  003494  6AEE               	clrf	postinc0,c
   461  003496  06E8               	decf	wreg,f,c
   462  003498  E1FD               	bnz	clear_3
   463  00349A                     end_of_initialization:
   464                           	callstack 0
   465  00349A                     __end_of__initialization:
   466                           	callstack 0
   467  00349A  9071               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   468  00349C  9271               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   469  00349E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   470  0034A0  6EF8               	movwf	tblptru,c
   471  0034A2  0100               	movlb	0
   472  0034A4  EF7E  F015         	goto	_main	;jump to C main() function
   473                           
   474                           	psect	bitbssCOMRAM
   475  000380                     __pbitbssCOMRAM:
   476                           	callstack 0
   477  000380                     _refresh_display:
   478                           	callstack 0
   479  000380                     	ds	1
   480                           
   481                           	psect	bssCOMRAM
   482  00003B                     __pbssCOMRAM:
   483                           	callstack 0
   484  00003B                     _tank2:
   485                           	callstack 0
   486  00003B                     	ds	12
   487  000047                     _tank1:
   488                           	callstack 0
   489  000047                     	ds	12
   490  000053                     _count_refresh_display:
   491                           	callstack 0
   492  000053                     	ds	2
   493  000055                     _count_screen:
   494                           	callstack 0
   495  000055                     	ds	2
   496  000057                     _screen:
   497                           	callstack 0
   498  000057                     	ds	1
   499  000058                     _operation:
   500                           	callstack 0
   501  000058                     	ds	1
   502  000059                     _z:
   503                           	callstack 0
   504  000059                     	ds	1
   505  00005A                     _modbusMessage:
   506                           	callstack 0
   507  00005A                     	ds	1
   508  00005B                     _messageLength:
   509                           	callstack 0
   510  00005B                     	ds	1
   511  00005C                     _timerCount:
   512                           	callstack 0
   513  00005C                     	ds	1
   514  00005D                     _endOfMessage:
   515                           	callstack 0
   516  00005D                     	ds	1
   517  00005E                     _bt_min_lv2_incr_press:
   518                           	callstack 0
   519  00005E                     	ds	2
   520  000060                     _bt_min_lv1_incr_press:
   521                           	callstack 0
   522  000060                     	ds	2
   523  000062                     _bt_on_off_pump_press:
   524                           	callstack 0
   525  000062                     	ds	2
   526  000064                     _bt_operation_mode_press:
   527                           	callstack 0
   528  000064                     	ds	2
   529                           
   530                           	psect	dataCOMRAM
   531  000066                     __pdataCOMRAM:
   532                           	callstack 0
   533  000066                     _INCREMENT:
   534                           	callstack 0
   535  000066                     	ds	1
   536  000067                     _newMessage:
   537                           	callstack 0
   538  000067                     	ds	1
   539  000068                     _filter_bt_min_lv2_incr:
   540                           	callstack 0
   541  000068                     	ds	2
   542  00006A                     _filter_bt_min_lv1_incr:
   543                           	callstack 0
   544  00006A                     	ds	2
   545  00006C                     _filter_bt_on_off_pump:
   546                           	callstack 0
   547  00006C                     	ds	2
   548  00006E                     _filter_bt_operation_mode:
   549                           	callstack 0
   550  00006E                     	ds	2
   551                           
   552                           	psect	bssBANK0
   553  000080                     __pbssBANK0:
   554                           	callstack 0
   555  000080                     _response:
   556                           	callstack 0
   557  000080                     	ds	125
   558                           
   559                           	psect	bssBANK1
   560  000100                     __pbssBANK1:
   561                           	callstack 0
   562  000100                     _received:
   563                           	callstack 0
   564  000100                     	ds	125
   565  00017D                     _holdingReg:
   566                           	callstack 0
   567  00017D                     	ds	100
   568                           
   569                           	psect	bssBANK2
   570  000200                     __pbssBANK2:
   571                           	callstack 0
   572  000200                     _coils:
   573                           	callstack 0
   574  000200                     	ds	50
   575  000232                     _display:
   576                           	callstack 0
   577  000232                     	ds	32
   578                           
   579                           	psect	cstackCOMRAM
   580  000001                     __pcstackCOMRAM:
   581                           	callstack 0
   582  000001                     ??_isr:
   583  000001                     
   584                           ; 1 bytes @ 0x0
   585  000001                     	ds	2
   586  000003                     ??_Lcd_Cmd:
   587  000003                     ??_Lcd_Chr_CP:
   588  000003                     ??_OpnUSART:
   589  000003                     ??_checkCRC:
   590  000003                     ??_isdigit:
   591  000003                     ?_CheckBit:
   592                           	callstack 0
   593  000003                     ?_adc_amostra:
   594                           	callstack 0
   595  000003                     ?_generateCRC:
   596                           	callstack 0
   597  000003                     ?___wmul:
   598                           	callstack 0
   599  000003                     ?___lwdiv:
   600                           	callstack 0
   601  000003                     ?___fladd:
   602                           	callstack 0
   603  000003                     ?___fltol:
   604                           	callstack 0
   605  000003                     ?___xxtofl:
   606                           	callstack 0
   607  000003                     SetBit@port:
   608                           	callstack 0
   609  000003                     ClearBit@port:
   610                           	callstack 0
   611  000003                     TougleBit@port:
   612                           	callstack 0
   613  000003                     CheckBit@port:
   614                           	callstack 0
   615  000003                     ___wmul@multiplier:
   616                           	callstack 0
   617  000003                     ___lwdiv@dividend:
   618                           	callstack 0
   619  000003                     strcpy@to:
   620                           	callstack 0
   621  000003                     ___fltol@f1:
   622                           	callstack 0
   623  000003                     ___fladd@b:
   624                           	callstack 0
   625  000003                     ___xxtofl@val:
   626                           	callstack 0
   627                           
   628                           ; 4 bytes @ 0x2
   629  000003                     	ds	1
   630  000004                     _isdigit$2043:
   631                           	callstack 0
   632  000004                     OpnUSART@spbrg:
   633                           	callstack 0
   634                           
   635                           ; 4 bytes @ 0x3
   636  000004                     	ds	1
   637  000005                     ??_adc_amostra:
   638  000005                     ??_generateCRC:
   639  000005                     Lcd_Chr_CP@data:
   640                           	callstack 0
   641  000005                     Lcd_Cmd@data:
   642                           	callstack 0
   643  000005                     isdigit@c:
   644                           	callstack 0
   645  000005                     SetBit@pin:
   646                           	callstack 0
   647  000005                     ClearBit@pin:
   648                           	callstack 0
   649  000005                     TougleBit@pin:
   650                           	callstack 0
   651  000005                     CheckBit@pin:
   652                           	callstack 0
   653  000005                     ___wmul@multiplicand:
   654                           	callstack 0
   655  000005                     ___lwdiv@divisor:
   656                           	callstack 0
   657  000005                     strcpy@from:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x4
   661  000005                     	ds	1
   662  000006                     ??_Lcd_Init:
   663  000006                     Lcd_Out@x:
   664                           	callstack 0
   665                           
   666                           ; 1 bytes @ 0x5
   667  000006                     	ds	1
   668  000007                     ??_TougleBit:
   669  000007                     ??_CheckBit:
   670  000007                     ??_ClearBit:
   671  000007                     ??_SetBit:
   672  000007                     ??___fltol:
   673  000007                     ??___xxtofl:
   674  000007                     Lcd_Init@data:
   675                           	callstack 0
   676  000007                     Lcd_Out@buffer:
   677                           	callstack 0
   678  000007                     ___wmul@product:
   679                           	callstack 0
   680  000007                     ___lwdiv@quotient:
   681                           	callstack 0
   682  000007                     strcpy@cp:
   683                           	callstack 0
   684  000007                     ___fladd@a:
   685                           	callstack 0
   686                           
   687                           ; 4 bytes @ 0x6
   688  000007                     	ds	1
   689  000008                     clearResponse@i:
   690                           	callstack 0
   691  000008                     checkCRC@crcHigh:
   692                           	callstack 0
   693                           
   694                           ; 2 bytes @ 0x7
   695  000008                     	ds	1
   696  000009                     Lcd_Out@y:
   697                           	callstack 0
   698  000009                     adc_amostra@canal:
   699                           	callstack 0
   700  000009                     ___lwdiv@counter:
   701                           	callstack 0
   702                           
   703                           ; 1 bytes @ 0x8
   704  000009                     	ds	1
   705  00000A                     ?___lwmod:
   706                           	callstack 0
   707  00000A                     Lcd_Out@data:
   708                           	callstack 0
   709  00000A                     generateCRC@messageLength:
   710                           	callstack 0
   711  00000A                     checkCRC@crcLow:
   712                           	callstack 0
   713  00000A                     ___lwmod@dividend:
   714                           	callstack 0
   715                           
   716                           ; 2 bytes @ 0x9
   717  00000A                     	ds	1
   718  00000B                     ??___fladd:
   719  00000B                     ___fltol@sign1:
   720                           	callstack 0
   721  00000B                     ___xxtofl@sign:
   722                           	callstack 0
   723  00000B                     generateCRC@crcLow:
   724                           	callstack 0
   725  00000B                     Show_Display@display:
   726                           	callstack 0
   727                           
   728                           ; 32 bytes @ 0xA
   729  00000B                     	ds	1
   730  00000C                     ??_Change_Mode:
   731  00000C                     ___fltol@exp1:
   732                           	callstack 0
   733  00000C                     ___xxtofl@exp:
   734                           	callstack 0
   735  00000C                     checkCRC@j:
   736                           	callstack 0
   737  00000C                     ___lwmod@divisor:
   738                           	callstack 0
   739                           
   740                           ; 2 bytes @ 0xB
   741  00000C                     	ds	1
   742  00000D                     generateCRC@crcHigh:
   743                           	callstack 0
   744  00000D                     ___xxtofl@arg:
   745                           	callstack 0
   746                           
   747                           ; 4 bytes @ 0xC
   748  00000D                     	ds	1
   749  00000E                     ___lwmod@counter:
   750                           	callstack 0
   751  00000E                     checkCRC@crc:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0xD
   755  00000E                     	ds	1
   756  00000F                     ?_sprintf:
   757                           	callstack 0
   758  00000F                     ___fladd@signs:
   759                           	callstack 0
   760  00000F                     generateCRC@i:
   761                           	callstack 0
   762  00000F                     sprintf@sp:
   763                           	callstack 0
   764                           
   765                           ; 2 bytes @ 0xE
   766  00000F                     	ds	1
   767  000010                     ___fladd@aexp:
   768                           	callstack 0
   769  000010                     checkCRC@i:
   770                           	callstack 0
   771                           
   772                           ; 2 bytes @ 0xF
   773  000010                     	ds	1
   774  000011                     ?___fldiv:
   775                           	callstack 0
   776  000011                     ___fladd@bexp:
   777                           	callstack 0
   778  000011                     generateCRC@j:
   779                           	callstack 0
   780  000011                     sprintf@f:
   781                           	callstack 0
   782  000011                     ___fldiv@b:
   783                           	callstack 0
   784                           
   785                           ; 4 bytes @ 0x10
   786  000011                     	ds	1
   787  000012                     ___fladd@grs:
   788                           	callstack 0
   789                           
   790                           ; 1 bytes @ 0x11
   791  000012                     	ds	1
   792  000013                     generateCRC@crc:
   793                           	callstack 0
   794  000013                     ___flge@ff1:
   795                           	callstack 0
   796                           
   797                           ; 4 bytes @ 0x12
   798  000013                     	ds	2
   799  000015                     ??_readCoil:
   800  000015                     ??_readInputCoil:
   801  000015                     ??_readReg:
   802  000015                     ??_readInputReg:
   803  000015                     writeReg@wr_AddressLow:
   804                           	callstack 0
   805  000015                     writeCoil@wc_AddressLow:
   806                           	callstack 0
   807  000015                     ___fldiv@a:
   808                           	callstack 0
   809                           
   810                           ; 4 bytes @ 0x14
   811  000015                     	ds	2
   812  000017                     readReg@crc:
   813                           	callstack 0
   814  000017                     readInputReg@crc:
   815                           	callstack 0
   816  000017                     writeReg@wr_AddressHigh:
   817                           	callstack 0
   818  000017                     writeCoil@wc_AddressHigh:
   819                           	callstack 0
   820  000017                     ___flge@ff2:
   821                           	callstack 0
   822                           
   823                           ; 4 bytes @ 0x16
   824  000017                     	ds	2
   825  000019                     ??___fldiv:
   826  000019                     readReg@rr_Address:
   827                           	callstack 0
   828  000019                     readInputReg@rr_Address:
   829                           	callstack 0
   830  000019                     writeReg@wr_valToWriteLow:
   831                           	callstack 0
   832  000019                     readCoil@rc_Address:
   833                           	callstack 0
   834  000019                     readInputCoil@rc_Address:
   835                           	callstack 0
   836  000019                     writeCoil@wc_valToWriteLow:
   837                           	callstack 0
   838                           
   839                           ; 2 bytes @ 0x18
   840  000019                     	ds	2
   841  00001B                     ??_sprintf:
   842  00001B                     ??___flge:
   843  00001B                     readReg@rr_numRegs:
   844                           	callstack 0
   845  00001B                     readInputReg@rr_numRegs:
   846                           	callstack 0
   847  00001B                     writeReg@wr_valToWriteHigh:
   848                           	callstack 0
   849  00001B                     readCoil@crc:
   850                           	callstack 0
   851  00001B                     readInputCoil@crc:
   852                           	callstack 0
   853  00001B                     writeCoil@wc_valToWriteHigh:
   854                           	callstack 0
   855                           
   856                           ; 2 bytes @ 0x1A
   857  00001B                     	ds	2
   858  00001D                     readCoil@remainder:
   859                           	callstack 0
   860  00001D                     readInputCoil@remainder:
   861                           	callstack 0
   862  00001D                     readReg@i:
   863                           	callstack 0
   864  00001D                     readInputReg@i:
   865                           	callstack 0
   866  00001D                     writeReg@wr_Address:
   867                           	callstack 0
   868  00001D                     writeCoil@wc_valToWrite:
   869                           	callstack 0
   870  00001D                     ___fldiv@rem:
   871                           	callstack 0
   872                           
   873                           ; 4 bytes @ 0x1C
   874  00001D                     	ds	1
   875  00001E                     readCoil@rc_numCoils:
   876                           	callstack 0
   877  00001E                     readInputCoil@rc_numCoils:
   878                           	callstack 0
   879                           
   880                           ; 2 bytes @ 0x1D
   881  00001E                     	ds	1
   882  00001F                     Automatic_Mode@isFull:
   883                           	callstack 0
   884  00001F                     readReg@j:
   885                           	callstack 0
   886  00001F                     readInputReg@j:
   887                           	callstack 0
   888  00001F                     writeReg@wr_valToWrite:
   889                           	callstack 0
   890  00001F                     writeCoil@crc:
   891                           	callstack 0
   892  00001F                     sprintf@cp:
   893                           	callstack 0
   894                           
   895                           ; 2 bytes @ 0x1E
   896  00001F                     	ds	1
   897  000020                     readCoil@howManyBytes:
   898                           	callstack 0
   899  000020                     readInputCoil@howManyBytes:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x1F
   903  000020                     	ds	1
   904  000021                     readCoil@l:
   905                           	callstack 0
   906  000021                     readInputCoil@l:
   907                           	callstack 0
   908  000021                     sprintf@idx:
   909                           	callstack 0
   910  000021                     ___fldiv@sign:
   911                           	callstack 0
   912  000021                     writeReg@crc:
   913                           	callstack 0
   914  000021                     writeCoil@wc_Address:
   915                           	callstack 0
   916                           
   917                           ; 2 bytes @ 0x20
   918  000021                     	ds	1
   919  000022                     readCoil@lsb:
   920                           	callstack 0
   921  000022                     readInputCoil@lsb:
   922                           	callstack 0
   923  000022                     sprintf@ap:
   924                           	callstack 0
   925  000022                     ___fldiv@new_exp:
   926                           	callstack 0
   927                           
   928                           ; 2 bytes @ 0x21
   929  000022                     	ds	1
   930  000023                     readCoil@i:
   931                           	callstack 0
   932  000023                     readInputCoil@i:
   933                           	callstack 0
   934  000023                     writeReg@i:
   935                           	callstack 0
   936  000023                     writeCoil@i:
   937                           	callstack 0
   938                           
   939                           ; 2 bytes @ 0x22
   940  000023                     	ds	1
   941  000024                     readCoil@j:
   942                           	callstack 0
   943  000024                     readInputCoil@j:
   944                           	callstack 0
   945  000024                     sprintf@len:
   946                           	callstack 0
   947  000024                     ___fldiv@grs:
   948                           	callstack 0
   949                           
   950                           ; 4 bytes @ 0x23
   951  000024                     	ds	1
   952  000025                     readCoil@k:
   953                           	callstack 0
   954  000025                     readInputCoil@k:
   955                           	callstack 0
   956                           
   957                           ; 1 bytes @ 0x24
   958  000025                     	ds	1
   959  000026                     sprintf@prec:
   960                           	callstack 0
   961                           
   962                           ; 1 bytes @ 0x25
   963  000026                     	ds	1
   964  000027                     sprintf@val:
   965                           	callstack 0
   966                           
   967                           ; 2 bytes @ 0x26
   968  000027                     	ds	1
   969  000028                     ___fldiv@bexp:
   970                           	callstack 0
   971                           
   972                           ; 1 bytes @ 0x27
   973  000028                     	ds	1
   974  000029                     sprintf@flag:
   975                           	callstack 0
   976  000029                     ___fldiv@aexp:
   977                           	callstack 0
   978                           
   979                           ; 1 bytes @ 0x28
   980  000029                     	ds	1
   981  00002A                     Read_Level@adcTank1:
   982                           	callstack 0
   983  00002A                     sprintf@width:
   984                           	callstack 0
   985                           
   986                           ; 2 bytes @ 0x29
   987  00002A                     	ds	1
   988  00002B                     
   989                           ; 1 bytes @ 0x2A
   990  00002B                     	ds	1
   991  00002C                     sprintf@c:
   992                           	callstack 0
   993  00002C                     Read_Level@adcTank2:
   994                           	callstack 0
   995                           
   996                           ; 2 bytes @ 0x2B
   997  00002C                     	ds	1
   998  00002D                     _Set_Display_Message$750:
   999                           	callstack 0
  1000                           
  1001                           ; 2 bytes @ 0x2C
  1002  00002D                     	ds	2
  1003  00002F                     Debounce@port:
  1004                           	callstack 0
  1005                           
  1006                           ; 2 bytes @ 0x2E
  1007  00002F                     	ds	2
  1008  000031                     Debounce@pin:
  1009                           	callstack 0
  1010                           
  1011                           ; 2 bytes @ 0x30
  1012  000031                     	ds	2
  1013  000033                     Debounce@bt_press:
  1014                           	callstack 0
  1015                           
  1016                           ; 2 bytes @ 0x32
  1017  000033                     	ds	2
  1018  000035                     Debounce@filter:
  1019                           	callstack 0
  1020                           
  1021                           ; 2 bytes @ 0x34
  1022  000035                     	ds	2
  1023  000037                     Debounce@ptr_f:
  1024                           	callstack 0
  1025                           
  1026                           ; 2 bytes @ 0x36
  1027  000037                     	ds	2
  1028  000039                     
  1029                           ; 1 bytes @ 0x38
  1030  000039                     	ds	2
  1031  00003B                     
  1032                           ; 1 bytes @ 0x3A
  1033 ;;
  1034 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1035 ;;
  1036 ;; *************** function _main *****************
  1037 ;; Defined at:
  1038 ;;		line 100 in file "main.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;		None
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1052 ;;      Params:         0       0       0       0       0       0       0
  1053 ;;      Locals:         0       0       0       0       0       0       0
  1054 ;;      Temps:          0       0       0       0       0       0       0
  1055 ;;      Totals:         0       0       0       0       0       0       0
  1056 ;;Total ram usage:        0 bytes
  1057 ;; Hardware stack levels required when called: 9
  1058 ;; This function calls:
  1059 ;;		_Automatic_Mode
  1060 ;;		_ConfigInterrupts
  1061 ;;		_Configure_Registers
  1062 ;;		_Debounce
  1063 ;;		_Initialize_Tanks
  1064 ;;		_Lcd_Cmd
  1065 ;;		_Lcd_Init
  1066 ;;		_Manual_Mode
  1067 ;;		_OpnUSART
  1068 ;;		_Read_Level
  1069 ;;		_Receive_Message
  1070 ;;		_Refresh_Screen
  1071 ;;		_Write_Message
  1072 ;;		_adc_init
  1073 ;;		_decodeIt
  1074 ;; This function is called by:
  1075 ;;		Startup code after reset
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text0
  1080  002AFC                     __ptext0:
  1081                           	callstack 0
  1082  002AFC                     _main:
  1083                           	callstack 22
  1084  002AFC                     
  1085                           ;main.c: 101: Configure_Registers();
  1086  002AFC  EC54  F01A         	call	_Configure_Registers	;wreg free
  1087                           
  1088                           ;main.c: 102: adc_init();
  1089  002B00  ECB2  F01B         	call	_adc_init	;wreg free
  1090  002B04                     
  1091                           ;main.c: 103: Lcd_Init();
  1092  002B04  ECE2  F012         	call	_Lcd_Init	;wreg free
  1093  002B08                     
  1094                           ;main.c: 104: Lcd_Cmd(12);
  1095  002B08  0E0C               	movlw	12
  1096  002B0A  ECBC  F011         	call	_Lcd_Cmd
  1097                           
  1098                           ;main.c: 105: Initialize_Tanks();
  1099  002B0E  ECF3  F019         	call	_Initialize_Tanks	;wreg free
  1100  002B12                     
  1101                           ;main.c: 108: OpnUSART();
  1102  002B12  EC8A  F019         	call	_OpnUSART	;wreg free
  1103  002B16                     
  1104                           ;main.c: 109: ConfigInterrupts();
  1105  002B16  ECBF  F01B         	call	_ConfigInterrupts	;wreg free
  1106  002B1A                     l201:
  1107  002B1A  0004               	clrwdt		;# 
  1108  002B1C                     
  1109                           ;main.c: 115: if (modbusMessage)
  1110  002B1C  505A               	movf	_modbusMessage^0,w,c	;volatile
  1111  002B1E  B4D8               	btfsc	status,2,c
  1112  002B20  EF94  F015         	goto	u4311
  1113  002B24  EF96  F015         	goto	u4310
  1114  002B28                     u4311:
  1115  002B28  EF9A  F015         	goto	l4696
  1116  002B2C                     u4310:
  1117  002B2C                     
  1118                           ;main.c: 116: {;main.c: 117: decodeIt();
  1119  002B2C  EC70  F016         	call	_decodeIt	;wreg free
  1120  002B30                     
  1121                           ;main.c: 118: Receive_Message();
  1122  002B30  EC45  F018         	call	_Receive_Message	;wreg free
  1123  002B34                     l4696:
  1124                           
  1125                           ;main.c: 119: };main.c: 120: Write_Message();
  1126  002B34  EC99  F01A         	call	_Write_Message	;wreg free
  1127  002B38                     
  1128                           ;main.c: 122: Read_Level();
  1129  002B38  ECEA  F017         	call	_Read_Level	;wreg free
  1130  002B3C                     
  1131                           ;main.c: 124: Debounce(PORTB, 0, &bt_operation_mode_press, &filter_bt_operation_mode, Ch
      +                          ange_Mode);
  1132  002B3C  CF81 F02F          	movff	3969,Debounce@port	;volatile
  1133  002B40  6A30               	clrf	(Debounce@port+1)^0,c
  1134  002B42  0E00               	movlw	0
  1135  002B44  6E32               	movwf	(Debounce@pin+1)^0,c
  1136  002B46  0E00               	movlw	0
  1137  002B48  6E31               	movwf	Debounce@pin^0,c
  1138  002B4A  0E64               	movlw	low _bt_operation_mode_press
  1139  002B4C  6E33               	movwf	Debounce@bt_press^0,c
  1140  002B4E  0E00               	movlw	high _bt_operation_mode_press
  1141  002B50  6E34               	movwf	(Debounce@bt_press+1)^0,c
  1142  002B52  0E6E               	movlw	low _filter_bt_operation_mode
  1143  002B54  6E35               	movwf	Debounce@filter^0,c
  1144  002B56  0E00               	movlw	high _filter_bt_operation_mode
  1145  002B58  6E36               	movwf	(Debounce@filter+1)^0,c
  1146  002B5A  0E9E               	movlw	low _Change_Mode
  1147  002B5C  6E37               	movwf	Debounce@ptr_f^0,c
  1148  002B5E  0E31               	movlw	high _Change_Mode
  1149  002B60  6E38               	movwf	(Debounce@ptr_f+1)^0,c
  1150  002B62  ECD4  F016         	call	_Debounce	;wreg free
  1151  002B66                     
  1152                           ;main.c: 126: if (operation == AUTOMATIC) Automatic_Mode(); else Manual_Mode();
  1153  002B66  5058               	movf	_operation^0,w,c	;volatile
  1154  002B68  A4D8               	btfss	status,2,c
  1155  002B6A  EFB9  F015         	goto	u4321
  1156  002B6E  EFBB  F015         	goto	u4320
  1157  002B72                     u4321:
  1158  002B72  EFBF  F015         	goto	l4706
  1159  002B76                     u4320:
  1160  002B76  EC70  F013         	call	_Automatic_Mode	;wreg free
  1161  002B7A  EFC1  F015         	goto	l204
  1162  002B7E                     l4706:
  1163  002B7E  EC33  F01B         	call	_Manual_Mode	;wreg free
  1164  002B82                     l204:
  1165                           
  1166                           ;main.c: 128: Debounce(PORTB, 3, &bt_min_lv1_incr_press, &filter_bt_min_lv1_incr, Min_Lv
      +                          1_Incr);
  1167  002B82  CF81 F02F          	movff	3969,Debounce@port	;volatile
  1168  002B86  6A30               	clrf	(Debounce@port+1)^0,c
  1169  002B88  0E00               	movlw	0
  1170  002B8A  6E32               	movwf	(Debounce@pin+1)^0,c
  1171  002B8C  0E03               	movlw	3
  1172  002B8E  6E31               	movwf	Debounce@pin^0,c
  1173  002B90  0E60               	movlw	low _bt_min_lv1_incr_press
  1174  002B92  6E33               	movwf	Debounce@bt_press^0,c
  1175  002B94  0E00               	movlw	high _bt_min_lv1_incr_press
  1176  002B96  6E34               	movwf	(Debounce@bt_press+1)^0,c
  1177  002B98  0E6A               	movlw	low _filter_bt_min_lv1_incr
  1178  002B9A  6E35               	movwf	Debounce@filter^0,c
  1179  002B9C  0E00               	movlw	high _filter_bt_min_lv1_incr
  1180  002B9E  6E36               	movwf	(Debounce@filter+1)^0,c
  1181  002BA0  0E1C               	movlw	low _Min_Lv1_Incr
  1182  002BA2  6E37               	movwf	Debounce@ptr_f^0,c
  1183  002BA4  0E2F               	movlw	high _Min_Lv1_Incr
  1184  002BA6  6E38               	movwf	(Debounce@ptr_f+1)^0,c
  1185  002BA8  ECD4  F016         	call	_Debounce	;wreg free
  1186                           
  1187                           ;main.c: 129: Debounce(PORTB, 4, &bt_min_lv2_incr_press, &filter_bt_min_lv2_incr, Min_Lv
      +                          2_Incr);
  1188  002BAC  CF81 F02F          	movff	3969,Debounce@port	;volatile
  1189  002BB0  6A30               	clrf	(Debounce@port+1)^0,c
  1190  002BB2  0E00               	movlw	0
  1191  002BB4  6E32               	movwf	(Debounce@pin+1)^0,c
  1192  002BB6  0E04               	movlw	4
  1193  002BB8  6E31               	movwf	Debounce@pin^0,c
  1194  002BBA  0E5E               	movlw	low _bt_min_lv2_incr_press
  1195  002BBC  6E33               	movwf	Debounce@bt_press^0,c
  1196  002BBE  0E00               	movlw	high _bt_min_lv2_incr_press
  1197  002BC0  6E34               	movwf	(Debounce@bt_press+1)^0,c
  1198  002BC2  0E68               	movlw	low _filter_bt_min_lv2_incr
  1199  002BC4  6E35               	movwf	Debounce@filter^0,c
  1200  002BC6  0E00               	movlw	high _filter_bt_min_lv2_incr
  1201  002BC8  6E36               	movwf	(Debounce@filter+1)^0,c
  1202  002BCA  0E64               	movlw	low _Min_Lv2_Incr
  1203  002BCC  6E37               	movwf	Debounce@ptr_f^0,c
  1204  002BCE  0E2E               	movlw	high _Min_Lv2_Incr
  1205  002BD0  6E38               	movwf	(Debounce@ptr_f+1)^0,c
  1206  002BD2  ECD4  F016         	call	_Debounce	;wreg free
  1207  002BD6                     
  1208                           ;main.c: 131: if (refresh_display) Refresh_Screen();
  1209  002BD6  A070               	btfss	(_refresh_display/(0+8))^0,_refresh_display& (0+7),c	;volatile
  1210  002BD8  EFF0  F015         	goto	u4331
  1211  002BDC  EFF2  F015         	goto	u4330
  1212  002BE0                     u4331:
  1213  002BE0  EF8D  F015         	goto	l201
  1214  002BE4                     u4330:
  1215  002BE4  EC83  F01B         	call	_Refresh_Screen	;wreg free
  1216  002BE8  EF8D  F015         	goto	l201
  1217  002BEC  EF07  F000         	goto	start
  1218  002BF0                     __end_of_main:
  1219                           	callstack 0
  1220                           
  1221 ;; *************** function _decodeIt *****************
  1222 ;; Defined at:
  1223 ;;		line 47 in file "modbus.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1237 ;;      Params:         0       0       0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0
  1240 ;;      Totals:         0       0       0       0       0       0       0
  1241 ;;Total ram usage:        0 bytes
  1242 ;; Hardware stack levels used: 1
  1243 ;; Hardware stack levels required when called: 6
  1244 ;; This function calls:
  1245 ;;		_checkCRC
  1246 ;;		_readCoil
  1247 ;;		_readInputCoil
  1248 ;;		_readInputReg
  1249 ;;		_readReg
  1250 ;;		_writeCoil
  1251 ;;		_writeReg
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text1
  1258  002CE0                     __ptext1:
  1259                           	callstack 0
  1260  002CE0                     _decodeIt:
  1261                           	callstack 24
  1262  002CE0                     
  1263                           ;modbus.c: 49: if(received[0] == 1){
  1264  002CE0  0101               	movlb	1	; () banked
  1265  002CE2  0500               	decf	_received& (0+255),w,b	;volatile
  1266  002CE4  A4D8               	btfss	status,2,c
  1267  002CE6  EF77  F016         	goto	u4161
  1268  002CEA  EF79  F016         	goto	u4160
  1269  002CEE                     u4161:
  1270  002CEE  EFD1  F016         	goto	l4636
  1271  002CF2                     u4160:
  1272  002CF2                     
  1273                           ; BSR set to: 1
  1274                           ;modbus.c: 50: if(checkCRC()){
  1275  002CF2  EC27  F011         	call	_checkCRC	;wreg free
  1276  002CF6  0900               	iorlw	0
  1277  002CF8  B4D8               	btfsc	status,2,c
  1278  002CFA  EF81  F016         	goto	u4171
  1279  002CFE  EF83  F016         	goto	u4170
  1280  002D02                     u4171:
  1281  002D02  EFD1  F016         	goto	l4636
  1282  002D06                     u4170:
  1283  002D06                     
  1284                           ;modbus.c: 51: if(received[1] == 0x01){
  1285  002D06  0101               	movlb	1	; () banked
  1286  002D08  0501               	decf	(_received+1)& (0+255),w,b	;volatile
  1287  002D0A  A4D8               	btfss	status,2,c
  1288  002D0C  EF8A  F016         	goto	u4181
  1289  002D10  EF8C  F016         	goto	u4180
  1290  002D14                     u4181:
  1291  002D14  EF90  F016         	goto	l4616
  1292  002D18                     u4180:
  1293  002D18                     
  1294                           ; BSR set to: 1
  1295                           ;modbus.c: 52: readCoil();
  1296  002D18  EC3C  F00B         	call	_readCoil	;wreg free
  1297                           
  1298                           ;modbus.c: 53: }
  1299  002D1C  EFD1  F016         	goto	l4636
  1300  002D20                     l4616:
  1301                           
  1302                           ; BSR set to: 1
  1303                           ;modbus.c: 54: else if(received[1] == 0x02){
  1304  002D20  0E02               	movlw	2
  1305  002D22  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1306  002D24  A4D8               	btfss	status,2,c
  1307  002D26  EF97  F016         	goto	u4191
  1308  002D2A  EF99  F016         	goto	u4190
  1309  002D2E                     u4191:
  1310  002D2E  EF9D  F016         	goto	l4620
  1311  002D32                     u4190:
  1312  002D32                     
  1313                           ; BSR set to: 1
  1314                           ;modbus.c: 55: readInputCoil();
  1315  002D32  EC26  F00A         	call	_readInputCoil	;wreg free
  1316                           
  1317                           ;modbus.c: 56: }
  1318  002D36  EFD1  F016         	goto	l4636
  1319  002D3A                     l4620:
  1320                           
  1321                           ; BSR set to: 1
  1322                           ;modbus.c: 57: else if(received[1] == 0x03){
  1323  002D3A  0E03               	movlw	3
  1324  002D3C  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1325  002D3E  A4D8               	btfss	status,2,c
  1326  002D40  EFA4  F016         	goto	u4201
  1327  002D44  EFA6  F016         	goto	u4200
  1328  002D48                     u4201:
  1329  002D48  EFAA  F016         	goto	l4624
  1330  002D4C                     u4200:
  1331  002D4C                     
  1332                           ; BSR set to: 1
  1333                           ;modbus.c: 58: readReg();
  1334  002D4C  EC52  F00C         	call	_readReg	;wreg free
  1335                           
  1336                           ;modbus.c: 59: }
  1337  002D50  EFD1  F016         	goto	l4636
  1338  002D54                     l4624:
  1339                           
  1340                           ; BSR set to: 1
  1341                           ;modbus.c: 60: else if(received[1] == 0x04){
  1342  002D54  0E04               	movlw	4
  1343  002D56  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1344  002D58  A4D8               	btfss	status,2,c
  1345  002D5A  EFB1  F016         	goto	u4211
  1346  002D5E  EFB3  F016         	goto	u4210
  1347  002D62                     u4211:
  1348  002D62  EFB7  F016         	goto	l4628
  1349  002D66                     u4210:
  1350  002D66                     
  1351                           ; BSR set to: 1
  1352                           ;modbus.c: 61: readInputReg();
  1353  002D66  EC34  F00D         	call	_readInputReg	;wreg free
  1354                           
  1355                           ;modbus.c: 62: }
  1356  002D6A  EFD1  F016         	goto	l4636
  1357  002D6E                     l4628:
  1358                           
  1359                           ; BSR set to: 1
  1360                           ;modbus.c: 63: else if(received[1] == 0x05){
  1361  002D6E  0E05               	movlw	5
  1362  002D70  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1363  002D72  A4D8               	btfss	status,2,c
  1364  002D74  EFBE  F016         	goto	u4221
  1365  002D78  EFC0  F016         	goto	u4220
  1366  002D7C                     u4221:
  1367  002D7C  EFC4  F016         	goto	l4632
  1368  002D80                     u4220:
  1369  002D80                     
  1370                           ; BSR set to: 1
  1371                           ;modbus.c: 64: writeCoil();
  1372  002D80  EC51  F012         	call	_writeCoil	;wreg free
  1373                           
  1374                           ;modbus.c: 65: }
  1375  002D84  EFD1  F016         	goto	l4636
  1376  002D88                     l4632:
  1377                           
  1378                           ; BSR set to: 1
  1379                           ;modbus.c: 66: else if(received[1] == 0x06){
  1380  002D88  0E06               	movlw	6
  1381  002D8A  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1382  002D8C  A4D8               	btfss	status,2,c
  1383  002D8E  EFCB  F016         	goto	u4231
  1384  002D92  EFCD  F016         	goto	u4230
  1385  002D96                     u4231:
  1386  002D96  EFD1  F016         	goto	l416
  1387  002D9A                     u4230:
  1388  002D9A                     
  1389                           ; BSR set to: 1
  1390                           ;modbus.c: 67: writeReg();
  1391  002D9A  ECF6  F013         	call	_writeReg	;wreg free
  1392  002D9E  EFD1  F016         	goto	l4636
  1393  002DA2                     l416:
  1394  002DA2                     l4636:
  1395                           
  1396                           ;modbus.c: 68: };modbus.c: 69: };modbus.c: 70: };modbus.c: 71: modbusMessage = 0;
  1397  002DA2  0E00               	movlw	0
  1398  002DA4  6E5A               	movwf	_modbusMessage^0,c	;volatile
  1399  002DA6  0012               	return		;funcret
  1400  002DA8                     __end_of_decodeIt:
  1401                           	callstack 0
  1402                           
  1403 ;; *************** function _writeReg *****************
  1404 ;; Defined at:
  1405 ;;		line 182 in file "modbus.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;		None
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;  i               2   34[COMRAM] unsigned int 
  1410 ;;  crc             2   32[COMRAM] unsigned int 
  1411 ;;  wr_valToWrit    2   30[COMRAM] unsigned int 
  1412 ;;  wr_Address      2   28[COMRAM] unsigned int 
  1413 ;;  wr_valToWrit    2   26[COMRAM] unsigned int 
  1414 ;;  wr_valToWrit    2   24[COMRAM] unsigned int 
  1415 ;;  wr_AddressHi    2   22[COMRAM] unsigned int 
  1416 ;;  wr_AddressLo    2   20[COMRAM] unsigned int 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      void 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1426 ;;      Params:         0       0       0       0       0       0       0
  1427 ;;      Locals:        16       0       0       0       0       0       0
  1428 ;;      Temps:          0       0       0       0       0       0       0
  1429 ;;      Totals:        16       0       0       0       0       0       0
  1430 ;;Total ram usage:       16 bytes
  1431 ;; Hardware stack levels used: 1
  1432 ;; Hardware stack levels required when called: 5
  1433 ;; This function calls:
  1434 ;;		_clearResponse
  1435 ;;		_generateCRC
  1436 ;; This function is called by:
  1437 ;;		_decodeIt
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text2
  1442  0027EC                     __ptext2:
  1443                           	callstack 0
  1444  0027EC                     _writeReg:
  1445                           	callstack 24
  1446  0027EC                     
  1447                           ;modbus.c: 188: unsigned int wr_AddressHigh = 0;
  1448  0027EC  0E00               	movlw	0
  1449  0027EE  6E18               	movwf	(writeReg@wr_AddressHigh+1)^0,c
  1450  0027F0  0E00               	movlw	0
  1451  0027F2  6E17               	movwf	writeReg@wr_AddressHigh^0,c
  1452                           
  1453                           ;modbus.c: 189: unsigned int wr_Address = 0;
  1454  0027F4  0E00               	movlw	0
  1455  0027F6  6E1E               	movwf	(writeReg@wr_Address+1)^0,c
  1456  0027F8  0E00               	movlw	0
  1457  0027FA  6E1D               	movwf	writeReg@wr_Address^0,c
  1458                           
  1459                           ;modbus.c: 191: unsigned int wr_valToWrite = 0;
  1460  0027FC  0E00               	movlw	0
  1461  0027FE  6E20               	movwf	(writeReg@wr_valToWrite+1)^0,c
  1462  002800  0E00               	movlw	0
  1463  002802  6E1F               	movwf	writeReg@wr_valToWrite^0,c
  1464                           
  1465                           ;modbus.c: 192: unsigned int wr_valToWriteLow = 0;
  1466  002804  0E00               	movlw	0
  1467  002806  6E1A               	movwf	(writeReg@wr_valToWriteLow+1)^0,c
  1468  002808  0E00               	movlw	0
  1469  00280A  6E19               	movwf	writeReg@wr_valToWriteLow^0,c
  1470                           
  1471                           ;modbus.c: 193: unsigned int wr_valToWriteHigh = 0;
  1472  00280C  0E00               	movlw	0
  1473  00280E  6E1C               	movwf	(writeReg@wr_valToWriteHigh+1)^0,c
  1474  002810  0E00               	movlw	0
  1475  002812  6E1B               	movwf	writeReg@wr_valToWriteHigh^0,c
  1476                           
  1477                           ;modbus.c: 195: unsigned int crc = 0;
  1478  002814  0E00               	movlw	0
  1479  002816  6E22               	movwf	(writeReg@crc+1)^0,c
  1480  002818  0E00               	movlw	0
  1481  00281A  6E21               	movwf	writeReg@crc^0,c
  1482                           
  1483                           ;modbus.c: 196: unsigned int i = 0;
  1484  00281C  0E00               	movlw	0
  1485  00281E  6E24               	movwf	(writeReg@i+1)^0,c
  1486  002820  0E00               	movlw	0
  1487  002822  6E23               	movwf	writeReg@i^0,c
  1488  002824                     
  1489                           ;modbus.c: 199: wr_Address = received[2];
  1490  002824  C102  F01D         	movff	_received+2,writeReg@wr_Address	;volatile
  1491  002828  6A1E               	clrf	(writeReg@wr_Address+1)^0,c
  1492                           
  1493                           ;modbus.c: 200: wr_Address <<= 8;
  1494  00282A  501D               	movf	writeReg@wr_Address^0,w,c
  1495  00282C  6E1E               	movwf	(writeReg@wr_Address+1)^0,c
  1496  00282E  6A1D               	clrf	writeReg@wr_Address^0,c
  1497  002830                     
  1498                           ;modbus.c: 201: wr_Address |= received[3];
  1499  002830  0101               	movlb	1	; () banked
  1500  002832  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  1501  002834  121D               	iorwf	writeReg@wr_Address^0,f,c
  1502  002836                     
  1503                           ; BSR set to: 1
  1504                           ;modbus.c: 203: wr_AddressLow = received[3];
  1505  002836  C103  F015         	movff	_received+3,writeReg@wr_AddressLow	;volatile
  1506  00283A  6A16               	clrf	(writeReg@wr_AddressLow+1)^0,c
  1507  00283C                     
  1508                           ; BSR set to: 1
  1509                           ;modbus.c: 204: wr_AddressHigh = received[2];
  1510  00283C  C102  F017         	movff	_received+2,writeReg@wr_AddressHigh	;volatile
  1511  002840  6A18               	clrf	(writeReg@wr_AddressHigh+1)^0,c
  1512  002842                     
  1513                           ; BSR set to: 1
  1514                           ;modbus.c: 207: wr_valToWrite = received[4];
  1515  002842  C104  F01F         	movff	_received+4,writeReg@wr_valToWrite	;volatile
  1516  002846  6A20               	clrf	(writeReg@wr_valToWrite+1)^0,c
  1517  002848                     
  1518                           ; BSR set to: 1
  1519                           ;modbus.c: 208: wr_valToWrite <<= 8;
  1520  002848  501F               	movf	writeReg@wr_valToWrite^0,w,c
  1521  00284A  6E20               	movwf	(writeReg@wr_valToWrite+1)^0,c
  1522  00284C  6A1F               	clrf	writeReg@wr_valToWrite^0,c
  1523                           
  1524                           ;modbus.c: 209: wr_valToWrite |= received[5];
  1525  00284E  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  1526  002850  121F               	iorwf	writeReg@wr_valToWrite^0,f,c
  1527  002852                     
  1528                           ; BSR set to: 1
  1529                           ;modbus.c: 211: wr_valToWriteLow = received[5];
  1530  002852  C105  F019         	movff	_received+5,writeReg@wr_valToWriteLow	;volatile
  1531  002856  6A1A               	clrf	(writeReg@wr_valToWriteLow+1)^0,c
  1532  002858                     
  1533                           ; BSR set to: 1
  1534                           ;modbus.c: 212: wr_valToWriteHigh = received[4];
  1535  002858  C104  F01B         	movff	_received+4,writeReg@wr_valToWriteHigh	;volatile
  1536  00285C  6A1C               	clrf	(writeReg@wr_valToWriteHigh+1)^0,c
  1537  00285E                     
  1538                           ; BSR set to: 1
  1539                           ;modbus.c: 214: holdingReg[wr_Address] = wr_valToWrite;
  1540  00285E  90D8               	bcf	status,0,c
  1541  002860  341D               	rlcf	writeReg@wr_Address^0,w,c
  1542  002862  6ED9               	movwf	fsr2l,c
  1543  002864  341E               	rlcf	(writeReg@wr_Address+1)^0,w,c
  1544  002866  6EDA               	movwf	fsr2h,c
  1545  002868  0E7D               	movlw	low _holdingReg
  1546  00286A  26D9               	addwf	fsr2l,f,c
  1547  00286C  0E01               	movlw	high _holdingReg
  1548  00286E  22DA               	addwfc	fsr2h,f,c
  1549  002870  C01F  FFDE         	movff	writeReg@wr_valToWrite,postinc2
  1550  002874  C020  FFDD         	movff	writeReg@wr_valToWrite+1,postdec2
  1551  002878                     
  1552                           ; BSR set to: 1
  1553                           ;modbus.c: 216: response[0] = 1;
  1554  002878  0E01               	movlw	1
  1555  00287A  0100               	movlb	0	; () banked
  1556  00287C  6F80               	movwf	_response& (0+255),b	;volatile
  1557  00287E                     
  1558                           ; BSR set to: 0
  1559                           ;modbus.c: 217: response[1] = 0x06;
  1560  00287E  0E06               	movlw	6
  1561  002880  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  1562  002882                     
  1563                           ; BSR set to: 0
  1564                           ;modbus.c: 218: response[3] = wr_AddressLow;
  1565  002882  C015  F083         	movff	writeReg@wr_AddressLow,_response+3	;volatile
  1566  002886                     
  1567                           ; BSR set to: 0
  1568                           ;modbus.c: 219: response[2] = wr_AddressHigh;
  1569  002886  C017  F082         	movff	writeReg@wr_AddressHigh,_response+2	;volatile
  1570  00288A                     
  1571                           ; BSR set to: 0
  1572                           ;modbus.c: 222: response[4] = wr_valToWriteHigh;
  1573  00288A  C01B  F084         	movff	writeReg@wr_valToWriteHigh,_response+4	;volatile
  1574  00288E                     
  1575                           ; BSR set to: 0
  1576                           ;modbus.c: 223: response[5] = wr_valToWriteLow;
  1577  00288E  C019  F085         	movff	writeReg@wr_valToWriteLow,_response+5	;volatile
  1578  002892                     
  1579                           ; BSR set to: 0
  1580                           ;modbus.c: 225: crc = generateCRC(8);
  1581  002892  0E08               	movlw	8
  1582  002894  ECF8  F015         	call	_generateCRC
  1583  002898  C003  F021         	movff	?_generateCRC,writeReg@crc
  1584  00289C  C004  F022         	movff	?_generateCRC+1,writeReg@crc+1
  1585  0028A0                     
  1586                           ;modbus.c: 227: response[6] = crc >> 8;
  1587  0028A0  5022               	movf	(writeReg@crc+1)^0,w,c
  1588  0028A2  0100               	movlb	0	; () banked
  1589  0028A4  6F86               	movwf	(_response+6)& (0+255),b	;volatile
  1590  0028A6                     
  1591                           ; BSR set to: 0
  1592                           ;modbus.c: 228: response[7] = crc;
  1593  0028A6  C021  F087         	movff	writeReg@crc,_response+7	;volatile
  1594  0028AA                     
  1595                           ; BSR set to: 0
  1596                           ;modbus.c: 230: LATBbits.LATB7 = 1;
  1597  0028AA  8E8A               	bsf	138,7,c	;volatile
  1598  0028AC                     
  1599                           ; BSR set to: 0
  1600                           ;modbus.c: 231: for(i=0;i!=9;i++){
  1601  0028AC  0E00               	movlw	0
  1602  0028AE  6E24               	movwf	(writeReg@i+1)^0,c
  1603  0028B0  0E00               	movlw	0
  1604  0028B2  6E23               	movwf	writeReg@i^0,c
  1605  0028B4                     l455:
  1606  0028B4  A2AC               	btfss	172,1,c	;volatile
  1607  0028B6  EF5F  F014         	goto	u3801
  1608  0028BA  EF61  F014         	goto	u3800
  1609  0028BE                     u3801:
  1610  0028BE  EF5A  F014         	goto	l455
  1611  0028C2                     u3800:
  1612  0028C2                     
  1613                           ;modbus.c: 233: TXREG = response[i];
  1614  0028C2  0E80               	movlw	low _response
  1615  0028C4  2423               	addwf	writeReg@i^0,w,c
  1616  0028C6  6ED9               	movwf	fsr2l,c
  1617  0028C8  0E00               	movlw	high _response
  1618  0028CA  2024               	addwfc	(writeReg@i+1)^0,w,c
  1619  0028CC  6EDA               	movwf	fsr2h,c
  1620  0028CE  50DF               	movf	indf2,w,c
  1621  0028D0  6EAD               	movwf	173,c	;volatile
  1622  0028D2  4A23               	infsnz	writeReg@i^0,f,c
  1623  0028D4  2A24               	incf	(writeReg@i+1)^0,f,c
  1624  0028D6  0E09               	movlw	9
  1625  0028D8  1823               	xorwf	writeReg@i^0,w,c
  1626  0028DA  1024               	iorwf	(writeReg@i+1)^0,w,c
  1627  0028DC  A4D8               	btfss	status,2,c
  1628  0028DE  EF73  F014         	goto	u3811
  1629  0028E2  EF75  F014         	goto	u3810
  1630  0028E6                     u3811:
  1631  0028E6  EF5A  F014         	goto	l455
  1632  0028EA                     u3810:
  1633  0028EA                     
  1634                           ;modbus.c: 234: };modbus.c: 235: LATBbits.LATB7 = 0;
  1635  0028EA  9E8A               	bcf	138,7,c	;volatile
  1636  0028EC                     
  1637                           ;modbus.c: 236: clearResponse();
  1638  0028EC  ECEB  F01A         	call	_clearResponse	;wreg free
  1639  0028F0  0012               	return		;funcret
  1640  0028F2                     __end_of_writeReg:
  1641                           	callstack 0
  1642                           
  1643 ;; *************** function _writeCoil *****************
  1644 ;; Defined at:
  1645 ;;		line 399 in file "modbus.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;  i               2   34[COMRAM] int 
  1650 ;;  wc_Address      2   32[COMRAM] unsigned int 
  1651 ;;  crc             2   30[COMRAM] unsigned int 
  1652 ;;  wc_valToWrit    2   28[COMRAM] unsigned int 
  1653 ;;  wc_valToWrit    2   26[COMRAM] unsigned int 
  1654 ;;  wc_valToWrit    2   24[COMRAM] unsigned int 
  1655 ;;  wc_AddressHi    2   22[COMRAM] unsigned int 
  1656 ;;  wc_AddressLo    2   20[COMRAM] unsigned int 
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  1    wreg      void 
  1659 ;; Registers used:
  1660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1666 ;;      Params:         0       0       0       0       0       0       0
  1667 ;;      Locals:        16       0       0       0       0       0       0
  1668 ;;      Temps:          0       0       0       0       0       0       0
  1669 ;;      Totals:        16       0       0       0       0       0       0
  1670 ;;Total ram usage:       16 bytes
  1671 ;; Hardware stack levels used: 1
  1672 ;; Hardware stack levels required when called: 5
  1673 ;; This function calls:
  1674 ;;		_clearResponse
  1675 ;;		_generateCRC
  1676 ;; This function is called by:
  1677 ;;		_decodeIt
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text3
  1682  0024A2                     __ptext3:
  1683                           	callstack 0
  1684  0024A2                     _writeCoil:
  1685                           	callstack 24
  1686  0024A2                     
  1687                           ;modbus.c: 405: unsigned int wc_AddressHigh = 0;
  1688  0024A2  0E00               	movlw	0
  1689  0024A4  6E18               	movwf	(writeCoil@wc_AddressHigh+1)^0,c
  1690  0024A6  0E00               	movlw	0
  1691  0024A8  6E17               	movwf	writeCoil@wc_AddressHigh^0,c
  1692                           
  1693                           ;modbus.c: 406: unsigned int wc_Address = 0;
  1694  0024AA  0E00               	movlw	0
  1695  0024AC  6E22               	movwf	(writeCoil@wc_Address+1)^0,c
  1696  0024AE  0E00               	movlw	0
  1697  0024B0  6E21               	movwf	writeCoil@wc_Address^0,c
  1698                           
  1699                           ;modbus.c: 408: unsigned int wc_valToWrite = 0;
  1700  0024B2  0E00               	movlw	0
  1701  0024B4  6E1E               	movwf	(writeCoil@wc_valToWrite+1)^0,c
  1702  0024B6  0E00               	movlw	0
  1703  0024B8  6E1D               	movwf	writeCoil@wc_valToWrite^0,c
  1704                           
  1705                           ;modbus.c: 409: unsigned int wc_valToWriteLow = 0;
  1706  0024BA  0E00               	movlw	0
  1707  0024BC  6E1A               	movwf	(writeCoil@wc_valToWriteLow+1)^0,c
  1708  0024BE  0E00               	movlw	0
  1709  0024C0  6E19               	movwf	writeCoil@wc_valToWriteLow^0,c
  1710                           
  1711                           ;modbus.c: 410: unsigned int wc_valToWriteHigh = 0;
  1712  0024C2  0E00               	movlw	0
  1713  0024C4  6E1C               	movwf	(writeCoil@wc_valToWriteHigh+1)^0,c
  1714  0024C6  0E00               	movlw	0
  1715  0024C8  6E1B               	movwf	writeCoil@wc_valToWriteHigh^0,c
  1716                           
  1717                           ;modbus.c: 411: int i = 0;
  1718  0024CA  0E00               	movlw	0
  1719  0024CC  6E24               	movwf	(writeCoil@i+1)^0,c
  1720  0024CE  0E00               	movlw	0
  1721  0024D0  6E23               	movwf	writeCoil@i^0,c
  1722                           
  1723                           ;modbus.c: 412: unsigned int crc = 0;
  1724  0024D2  0E00               	movlw	0
  1725  0024D4  6E20               	movwf	(writeCoil@crc+1)^0,c
  1726  0024D6  0E00               	movlw	0
  1727  0024D8  6E1F               	movwf	writeCoil@crc^0,c
  1728  0024DA                     
  1729                           ;modbus.c: 415: wc_Address = received[2];
  1730  0024DA  C102  F021         	movff	_received+2,writeCoil@wc_Address	;volatile
  1731  0024DE  6A22               	clrf	(writeCoil@wc_Address+1)^0,c
  1732                           
  1733                           ;modbus.c: 416: wc_Address <<= 8;
  1734  0024E0  5021               	movf	writeCoil@wc_Address^0,w,c
  1735  0024E2  6E22               	movwf	(writeCoil@wc_Address+1)^0,c
  1736  0024E4  6A21               	clrf	writeCoil@wc_Address^0,c
  1737  0024E6                     
  1738                           ;modbus.c: 417: wc_Address |= received[3];
  1739  0024E6  0101               	movlb	1	; () banked
  1740  0024E8  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  1741  0024EA  1221               	iorwf	writeCoil@wc_Address^0,f,c
  1742  0024EC                     
  1743                           ; BSR set to: 1
  1744                           ;modbus.c: 419: wc_AddressLow = received[3];
  1745  0024EC  C103  F015         	movff	_received+3,writeCoil@wc_AddressLow	;volatile
  1746  0024F0  6A16               	clrf	(writeCoil@wc_AddressLow+1)^0,c
  1747  0024F2                     
  1748                           ; BSR set to: 1
  1749                           ;modbus.c: 420: wc_AddressHigh = received[2];
  1750  0024F2  C102  F017         	movff	_received+2,writeCoil@wc_AddressHigh	;volatile
  1751  0024F6  6A18               	clrf	(writeCoil@wc_AddressHigh+1)^0,c
  1752  0024F8                     
  1753                           ; BSR set to: 1
  1754                           ;modbus.c: 423: wc_valToWrite = received[4];
  1755  0024F8  C104  F01D         	movff	_received+4,writeCoil@wc_valToWrite	;volatile
  1756  0024FC  6A1E               	clrf	(writeCoil@wc_valToWrite+1)^0,c
  1757  0024FE                     
  1758                           ; BSR set to: 1
  1759                           ;modbus.c: 424: wc_valToWrite <<= 8;
  1760  0024FE  501D               	movf	writeCoil@wc_valToWrite^0,w,c
  1761  002500  6E1E               	movwf	(writeCoil@wc_valToWrite+1)^0,c
  1762  002502  6A1D               	clrf	writeCoil@wc_valToWrite^0,c
  1763                           
  1764                           ;modbus.c: 425: wc_valToWrite |= received[5];
  1765  002504  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  1766  002506  121D               	iorwf	writeCoil@wc_valToWrite^0,f,c
  1767  002508                     
  1768                           ; BSR set to: 1
  1769                           ;modbus.c: 427: wc_valToWriteLow = received[5];
  1770  002508  C105  F019         	movff	_received+5,writeCoil@wc_valToWriteLow	;volatile
  1771  00250C  6A1A               	clrf	(writeCoil@wc_valToWriteLow+1)^0,c
  1772  00250E                     
  1773                           ; BSR set to: 1
  1774                           ;modbus.c: 428: wc_valToWriteHigh = received[4];
  1775  00250E  C104  F01B         	movff	_received+4,writeCoil@wc_valToWriteHigh	;volatile
  1776  002512  6A1C               	clrf	(writeCoil@wc_valToWriteHigh+1)^0,c
  1777                           
  1778                           ;modbus.c: 430: if(wc_valToWrite){
  1779  002514  501D               	movf	writeCoil@wc_valToWrite^0,w,c
  1780  002516  101E               	iorwf	(writeCoil@wc_valToWrite+1)^0,w,c
  1781  002518  B4D8               	btfsc	status,2,c
  1782  00251A  EF91  F012         	goto	u3771
  1783  00251E  EF93  F012         	goto	u3770
  1784  002522                     u3771:
  1785  002522  EF9D  F012         	goto	l4278
  1786  002526                     u3770:
  1787  002526                     
  1788                           ; BSR set to: 1
  1789                           ;modbus.c: 431: coils[wc_Address] = 0xFF;
  1790  002526  0E00               	movlw	low _coils
  1791  002528  2421               	addwf	writeCoil@wc_Address^0,w,c
  1792  00252A  6ED9               	movwf	fsr2l,c
  1793  00252C  0E02               	movlw	high _coils
  1794  00252E  2022               	addwfc	(writeCoil@wc_Address+1)^0,w,c
  1795  002530  6EDA               	movwf	fsr2h,c
  1796  002532  0EFF               	movlw	255
  1797  002534  6EDF               	movwf	indf2,c
  1798                           
  1799                           ;modbus.c: 432: }
  1800  002536  EFA5  F012         	goto	l4280
  1801  00253A                     l4278:
  1802                           
  1803                           ; BSR set to: 1
  1804                           ;modbus.c: 433: else{;modbus.c: 434: coils[wc_Address] = 0x00;
  1805  00253A  0E00               	movlw	low _coils
  1806  00253C  2421               	addwf	writeCoil@wc_Address^0,w,c
  1807  00253E  6ED9               	movwf	fsr2l,c
  1808  002540  0E02               	movlw	high _coils
  1809  002542  2022               	addwfc	(writeCoil@wc_Address+1)^0,w,c
  1810  002544  6EDA               	movwf	fsr2h,c
  1811  002546  0E00               	movlw	0
  1812  002548  6EDF               	movwf	indf2,c
  1813  00254A                     l4280:
  1814                           
  1815                           ; BSR set to: 1
  1816                           ;modbus.c: 435: };modbus.c: 437: response[0] = 1;
  1817  00254A  0E01               	movlw	1
  1818  00254C  0100               	movlb	0	; () banked
  1819  00254E  6F80               	movwf	_response& (0+255),b	;volatile
  1820  002550                     
  1821                           ; BSR set to: 0
  1822                           ;modbus.c: 438: response[1] = 0x05;
  1823  002550  0E05               	movlw	5
  1824  002552  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  1825  002554                     
  1826                           ; BSR set to: 0
  1827                           ;modbus.c: 439: response[3] = wc_AddressLow;
  1828  002554  C015  F083         	movff	writeCoil@wc_AddressLow,_response+3	;volatile
  1829  002558                     
  1830                           ; BSR set to: 0
  1831                           ;modbus.c: 440: response[2] = wc_AddressHigh;
  1832  002558  C017  F082         	movff	writeCoil@wc_AddressHigh,_response+2	;volatile
  1833  00255C                     
  1834                           ; BSR set to: 0
  1835                           ;modbus.c: 443: response[4] = wc_valToWriteHigh;
  1836  00255C  C01B  F084         	movff	writeCoil@wc_valToWriteHigh,_response+4	;volatile
  1837  002560                     
  1838                           ; BSR set to: 0
  1839                           ;modbus.c: 444: response[5] = wc_valToWriteLow;
  1840  002560  C019  F085         	movff	writeCoil@wc_valToWriteLow,_response+5	;volatile
  1841  002564                     
  1842                           ; BSR set to: 0
  1843                           ;modbus.c: 446: crc = generateCRC(8);
  1844  002564  0E08               	movlw	8
  1845  002566  ECF8  F015         	call	_generateCRC
  1846  00256A  C003  F01F         	movff	?_generateCRC,writeCoil@crc
  1847  00256E  C004  F020         	movff	?_generateCRC+1,writeCoil@crc+1
  1848  002572                     
  1849                           ;modbus.c: 448: response[6] = crc >> 8;
  1850  002572  5020               	movf	(writeCoil@crc+1)^0,w,c
  1851  002574  0100               	movlb	0	; () banked
  1852  002576  6F86               	movwf	(_response+6)& (0+255),b	;volatile
  1853  002578                     
  1854                           ; BSR set to: 0
  1855                           ;modbus.c: 449: response[7] = crc;
  1856  002578  C01F  F087         	movff	writeCoil@crc,_response+7	;volatile
  1857  00257C                     
  1858                           ; BSR set to: 0
  1859                           ;modbus.c: 451: LATBbits.LATB7 = 1;
  1860  00257C  8E8A               	bsf	138,7,c	;volatile
  1861  00257E                     
  1862                           ; BSR set to: 0
  1863                           ;modbus.c: 452: for(i=0;i!=9;i++){
  1864  00257E  0E00               	movlw	0
  1865  002580  6E24               	movwf	(writeCoil@i+1)^0,c
  1866  002582  0E00               	movlw	0
  1867  002584  6E23               	movwf	writeCoil@i^0,c
  1868  002586                     l511:
  1869  002586  A2AC               	btfss	172,1,c	;volatile
  1870  002588  EFC8  F012         	goto	u3781
  1871  00258C  EFCA  F012         	goto	u3780
  1872  002590                     u3781:
  1873  002590  EFC3  F012         	goto	l511
  1874  002594                     u3780:
  1875  002594                     
  1876                           ;modbus.c: 454: TXREG = response[i];
  1877  002594  0E80               	movlw	low _response
  1878  002596  2423               	addwf	writeCoil@i^0,w,c
  1879  002598  6ED9               	movwf	fsr2l,c
  1880  00259A  0E00               	movlw	high _response
  1881  00259C  2024               	addwfc	(writeCoil@i+1)^0,w,c
  1882  00259E  6EDA               	movwf	fsr2h,c
  1883  0025A0  50DF               	movf	indf2,w,c
  1884  0025A2  6EAD               	movwf	173,c	;volatile
  1885  0025A4  4A23               	infsnz	writeCoil@i^0,f,c
  1886  0025A6  2A24               	incf	(writeCoil@i+1)^0,f,c
  1887  0025A8  0E09               	movlw	9
  1888  0025AA  1823               	xorwf	writeCoil@i^0,w,c
  1889  0025AC  1024               	iorwf	(writeCoil@i+1)^0,w,c
  1890  0025AE  A4D8               	btfss	status,2,c
  1891  0025B0  EFDC  F012         	goto	u3791
  1892  0025B4  EFDE  F012         	goto	u3790
  1893  0025B8                     u3791:
  1894  0025B8  EFC3  F012         	goto	l511
  1895  0025BC                     u3790:
  1896  0025BC                     
  1897                           ;modbus.c: 455: };modbus.c: 456: LATBbits.LATB7 = 0;
  1898  0025BC  9E8A               	bcf	138,7,c	;volatile
  1899  0025BE                     
  1900                           ;modbus.c: 457: clearResponse();
  1901  0025BE  ECEB  F01A         	call	_clearResponse	;wreg free
  1902  0025C2  0012               	return		;funcret
  1903  0025C4                     __end_of_writeCoil:
  1904                           	callstack 0
  1905                           
  1906 ;; *************** function _readReg *****************
  1907 ;; Defined at:
  1908 ;;		line 74 in file "modbus.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;  i               2   28[COMRAM] unsigned int 
  1913 ;;  rr_numRegs      2   26[COMRAM] unsigned int 
  1914 ;;  rr_Address      2   24[COMRAM] unsigned int 
  1915 ;;  crc             2   22[COMRAM] unsigned int 
  1916 ;;  j               1   30[COMRAM] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1926 ;;      Params:         0       0       0       0       0       0       0
  1927 ;;      Locals:         9       0       0       0       0       0       0
  1928 ;;      Temps:          2       0       0       0       0       0       0
  1929 ;;      Totals:        11       0       0       0       0       0       0
  1930 ;;Total ram usage:       11 bytes
  1931 ;; Hardware stack levels used: 1
  1932 ;; Hardware stack levels required when called: 5
  1933 ;; This function calls:
  1934 ;;		_clearResponse
  1935 ;;		_generateCRC
  1936 ;; This function is called by:
  1937 ;;		_decodeIt
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text4
  1942  0018A4                     __ptext4:
  1943                           	callstack 0
  1944  0018A4                     _readReg:
  1945                           	callstack 24
  1946  0018A4                     
  1947                           ;modbus.c: 77: unsigned int rr_numRegs = 0;
  1948  0018A4  0E00               	movlw	0
  1949  0018A6  6E1C               	movwf	(readReg@rr_numRegs+1)^0,c
  1950  0018A8  0E00               	movlw	0
  1951  0018AA  6E1B               	movwf	readReg@rr_numRegs^0,c
  1952                           
  1953                           ;modbus.c: 78: unsigned char j = 3;
  1954  0018AC  0E03               	movlw	3
  1955  0018AE  6E1F               	movwf	readReg@j^0,c
  1956                           
  1957                           ;modbus.c: 79: unsigned int crc = 0;
  1958  0018B0  0E00               	movlw	0
  1959  0018B2  6E18               	movwf	(readReg@crc+1)^0,c
  1960  0018B4  0E00               	movlw	0
  1961  0018B6  6E17               	movwf	readReg@crc^0,c
  1962                           
  1963                           ;modbus.c: 80: unsigned int i = 0;
  1964  0018B8  0E00               	movlw	0
  1965  0018BA  6E1E               	movwf	(readReg@i+1)^0,c
  1966  0018BC  0E00               	movlw	0
  1967  0018BE  6E1D               	movwf	readReg@i^0,c
  1968  0018C0                     
  1969                           ;modbus.c: 83: rr_Address = received[2];
  1970  0018C0  C102  F019         	movff	_received+2,readReg@rr_Address	;volatile
  1971  0018C4  6A1A               	clrf	(readReg@rr_Address+1)^0,c
  1972                           
  1973                           ;modbus.c: 84: rr_Address <<= 8;
  1974  0018C6  5019               	movf	readReg@rr_Address^0,w,c
  1975  0018C8  6E1A               	movwf	(readReg@rr_Address+1)^0,c
  1976  0018CA  6A19               	clrf	readReg@rr_Address^0,c
  1977  0018CC                     
  1978                           ;modbus.c: 85: rr_Address |= received[3];
  1979  0018CC  0101               	movlb	1	; () banked
  1980  0018CE  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  1981  0018D0  1219               	iorwf	readReg@rr_Address^0,f,c
  1982  0018D2                     
  1983                           ; BSR set to: 1
  1984                           ;modbus.c: 88: rr_numRegs = received[4];
  1985  0018D2  C104  F01B         	movff	_received+4,readReg@rr_numRegs	;volatile
  1986  0018D6  6A1C               	clrf	(readReg@rr_numRegs+1)^0,c
  1987  0018D8                     
  1988                           ; BSR set to: 1
  1989                           ;modbus.c: 89: rr_numRegs <<= 8;
  1990  0018D8  501B               	movf	readReg@rr_numRegs^0,w,c
  1991  0018DA  6E1C               	movwf	(readReg@rr_numRegs+1)^0,c
  1992  0018DC  6A1B               	clrf	readReg@rr_numRegs^0,c
  1993                           
  1994                           ;modbus.c: 90: rr_numRegs |= received[5];
  1995  0018DE  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  1996  0018E0  121B               	iorwf	readReg@rr_numRegs^0,f,c
  1997  0018E2                     
  1998                           ; BSR set to: 1
  1999                           ;modbus.c: 92: response[0] = 1;
  2000  0018E2  0E01               	movlw	1
  2001  0018E4  0100               	movlb	0	; () banked
  2002  0018E6  6F80               	movwf	_response& (0+255),b	;volatile
  2003  0018E8                     
  2004                           ; BSR set to: 0
  2005                           ;modbus.c: 93: response[1] = 0x03;
  2006  0018E8  0E03               	movlw	3
  2007  0018EA  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  2008                           
  2009                           ;modbus.c: 94: response[2] = rr_numRegs*2;
  2010  0018EC  501B               	movf	readReg@rr_numRegs^0,w,c
  2011  0018EE  241B               	addwf	readReg@rr_numRegs^0,w,c
  2012  0018F0  6F82               	movwf	(_response+2)& (0+255),b	;volatile
  2013  0018F2                     
  2014                           ; BSR set to: 0
  2015                           ;modbus.c: 96: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  2016  0018F2  C019  F01D         	movff	readReg@rr_Address,readReg@i
  2017  0018F6  C01A  F01E         	movff	readReg@rr_Address+1,readReg@i+1
  2018  0018FA  EFDD  F00C         	goto	l4172
  2019  0018FE                     l4154:
  2020                           
  2021                           ;modbus.c: 97: if(holdingReg[i] > 255){
  2022  0018FE  90D8               	bcf	status,0,c
  2023  001900  341D               	rlcf	readReg@i^0,w,c
  2024  001902  6ED9               	movwf	fsr2l,c
  2025  001904  341E               	rlcf	(readReg@i+1)^0,w,c
  2026  001906  6EDA               	movwf	fsr2h,c
  2027  001908  0E7D               	movlw	low _holdingReg
  2028  00190A  26D9               	addwf	fsr2l,f,c
  2029  00190C  0E01               	movlw	high _holdingReg
  2030  00190E  22DA               	addwfc	fsr2h,f,c
  2031  001910  0E00               	movlw	0
  2032  001912  5CDE               	subwf	postinc2,w,c
  2033  001914  0E01               	movlw	1
  2034  001916  58DE               	subwfb	postinc2,w,c
  2035  001918  A0D8               	btfss	status,0,c
  2036  00191A  EF91  F00C         	goto	u3691
  2037  00191E  EF93  F00C         	goto	u3690
  2038  001922                     u3691:
  2039  001922  EFC0  F00C         	goto	l4162
  2040  001926                     u3690:
  2041  001926                     
  2042                           ;modbus.c: 99: response[j] = holdingReg[i] >> 8;
  2043  001926  0E80               	movlw	low _response
  2044  001928  241F               	addwf	readReg@j^0,w,c
  2045  00192A  6ED9               	movwf	fsr2l,c
  2046  00192C  6ADA               	clrf	fsr2h,c
  2047  00192E  0E00               	movlw	high _response
  2048  001930  22DA               	addwfc	fsr2h,f,c
  2049  001932  90D8               	bcf	status,0,c
  2050  001934  341D               	rlcf	readReg@i^0,w,c
  2051  001936  6EE1               	movwf	fsr1l,c
  2052  001938  341E               	rlcf	(readReg@i+1)^0,w,c
  2053  00193A  6EE2               	movwf	fsr1h,c
  2054  00193C  0E7D               	movlw	low _holdingReg
  2055  00193E  26E1               	addwf	fsr1l,f,c
  2056  001940  0E01               	movlw	high _holdingReg
  2057  001942  22E2               	addwfc	fsr1h,f,c
  2058  001944  CFE6 F015          	movff	postinc1,??_readReg
  2059  001948  CFE5 F016          	movff	postdec1,??_readReg+1
  2060  00194C  C016  F015         	movff	??_readReg+1,??_readReg
  2061  001950  6A16               	clrf	(??_readReg+1)^0,c
  2062  001952  5015               	movf	??_readReg^0,w,c
  2063  001954  6EDF               	movwf	indf2,c
  2064  001956                     
  2065                           ;modbus.c: 100: j++;
  2066  001956  2A1F               	incf	readReg@j^0,f,c
  2067  001958                     
  2068                           ;modbus.c: 101: response[j] = holdingReg[i];
  2069  001958  90D8               	bcf	status,0,c
  2070  00195A  341D               	rlcf	readReg@i^0,w,c
  2071  00195C  6ED9               	movwf	fsr2l,c
  2072  00195E  341E               	rlcf	(readReg@i+1)^0,w,c
  2073  001960  6EDA               	movwf	fsr2h,c
  2074  001962  0E7D               	movlw	low _holdingReg
  2075  001964  26D9               	addwf	fsr2l,f,c
  2076  001966  0E01               	movlw	high _holdingReg
  2077  001968  22DA               	addwfc	fsr2h,f,c
  2078  00196A  0E80               	movlw	low _response
  2079  00196C  241F               	addwf	readReg@j^0,w,c
  2080  00196E  6EE1               	movwf	fsr1l,c
  2081  001970  6AE2               	clrf	fsr1h,c
  2082  001972  0E00               	movlw	high _response
  2083  001974  22E2               	addwfc	fsr1h,f,c
  2084  001976  CFDF FFE7          	movff	indf2,indf1
  2085                           
  2086                           ;modbus.c: 102: j++;
  2087  00197A  2A1F               	incf	readReg@j^0,f,c
  2088                           
  2089                           ;modbus.c: 103: }
  2090  00197C  EFDB  F00C         	goto	l4170
  2091  001980                     l4162:
  2092                           
  2093                           ;modbus.c: 104: else{;modbus.c: 105: response[j] = 0x00;
  2094  001980  0E80               	movlw	low _response
  2095  001982  241F               	addwf	readReg@j^0,w,c
  2096  001984  6ED9               	movwf	fsr2l,c
  2097  001986  6ADA               	clrf	fsr2h,c
  2098  001988  0E00               	movlw	high _response
  2099  00198A  22DA               	addwfc	fsr2h,f,c
  2100  00198C  0E00               	movlw	0
  2101  00198E  6EDF               	movwf	indf2,c
  2102  001990                     
  2103                           ;modbus.c: 106: j++;
  2104  001990  2A1F               	incf	readReg@j^0,f,c
  2105  001992                     
  2106                           ;modbus.c: 107: response[j] = holdingReg[i];
  2107  001992  90D8               	bcf	status,0,c
  2108  001994  341D               	rlcf	readReg@i^0,w,c
  2109  001996  6ED9               	movwf	fsr2l,c
  2110  001998  341E               	rlcf	(readReg@i+1)^0,w,c
  2111  00199A  6EDA               	movwf	fsr2h,c
  2112  00199C  0E7D               	movlw	low _holdingReg
  2113  00199E  26D9               	addwf	fsr2l,f,c
  2114  0019A0  0E01               	movlw	high _holdingReg
  2115  0019A2  22DA               	addwfc	fsr2h,f,c
  2116  0019A4  0E80               	movlw	low _response
  2117  0019A6  241F               	addwf	readReg@j^0,w,c
  2118  0019A8  6EE1               	movwf	fsr1l,c
  2119  0019AA  6AE2               	clrf	fsr1h,c
  2120  0019AC  0E00               	movlw	high _response
  2121  0019AE  22E2               	addwfc	fsr1h,f,c
  2122  0019B0  CFDF FFE7          	movff	indf2,indf1
  2123  0019B4                     
  2124                           ;modbus.c: 108: j++;
  2125  0019B4  2A1F               	incf	readReg@j^0,f,c
  2126  0019B6                     l4170:
  2127  0019B6  4A1D               	infsnz	readReg@i^0,f,c
  2128  0019B8  2A1E               	incf	(readReg@i+1)^0,f,c
  2129  0019BA                     l4172:
  2130  0019BA  501B               	movf	readReg@rr_numRegs^0,w,c
  2131  0019BC  2419               	addwf	readReg@rr_Address^0,w,c
  2132  0019BE  6E15               	movwf	??_readReg^0,c
  2133  0019C0  501C               	movf	(readReg@rr_numRegs+1)^0,w,c
  2134  0019C2  201A               	addwfc	(readReg@rr_Address+1)^0,w,c
  2135  0019C4  6E16               	movwf	(??_readReg+1)^0,c
  2136  0019C6  5015               	movf	??_readReg^0,w,c
  2137  0019C8  5C1D               	subwf	readReg@i^0,w,c
  2138  0019CA  5016               	movf	(??_readReg+1)^0,w,c
  2139  0019CC  581E               	subwfb	(readReg@i+1)^0,w,c
  2140  0019CE  A0D8               	btfss	status,0,c
  2141  0019D0  EFEC  F00C         	goto	u3701
  2142  0019D4  EFEE  F00C         	goto	u3700
  2143  0019D8                     u3701:
  2144  0019D8  EF7F  F00C         	goto	l4154
  2145  0019DC                     u3700:
  2146  0019DC                     
  2147                           ;modbus.c: 109: };modbus.c: 110: };modbus.c: 111: crc = generateCRC(j+2);
  2148  0019DC  501F               	movf	readReg@j^0,w,c
  2149  0019DE  0F02               	addlw	2
  2150  0019E0  ECF8  F015         	call	_generateCRC
  2151  0019E4  C003  F017         	movff	?_generateCRC,readReg@crc
  2152  0019E8  C004  F018         	movff	?_generateCRC+1,readReg@crc+1
  2153  0019EC                     
  2154                           ;modbus.c: 112: response[j] = crc >> 8;
  2155  0019EC  0E80               	movlw	low _response
  2156  0019EE  241F               	addwf	readReg@j^0,w,c
  2157  0019F0  6ED9               	movwf	fsr2l,c
  2158  0019F2  6ADA               	clrf	fsr2h,c
  2159  0019F4  0E00               	movlw	high _response
  2160  0019F6  22DA               	addwfc	fsr2h,f,c
  2161  0019F8  5018               	movf	(readReg@crc+1)^0,w,c
  2162  0019FA  6EDF               	movwf	indf2,c
  2163  0019FC                     
  2164                           ;modbus.c: 113: j++;
  2165  0019FC  2A1F               	incf	readReg@j^0,f,c
  2166  0019FE                     
  2167                           ;modbus.c: 114: response[j] = crc;
  2168  0019FE  0E80               	movlw	low _response
  2169  001A00  241F               	addwf	readReg@j^0,w,c
  2170  001A02  6ED9               	movwf	fsr2l,c
  2171  001A04  6ADA               	clrf	fsr2h,c
  2172  001A06  0E00               	movlw	high _response
  2173  001A08  22DA               	addwfc	fsr2h,f,c
  2174  001A0A  C017  FFDF         	movff	readReg@crc,indf2
  2175  001A0E                     
  2176                           ;modbus.c: 115: j+=2;
  2177  001A0E  0E02               	movlw	2
  2178  001A10  261F               	addwf	readReg@j^0,f,c
  2179  001A12                     
  2180                           ;modbus.c: 117: LATBbits.LATB7 = 1;
  2181  001A12  8E8A               	bsf	138,7,c	;volatile
  2182  001A14                     
  2183                           ;modbus.c: 118: for(i=0;i!=j;i++){
  2184  001A14  0E00               	movlw	0
  2185  001A16  6E1E               	movwf	(readReg@i+1)^0,c
  2186  001A18  0E00               	movlw	0
  2187  001A1A  6E1D               	movwf	readReg@i^0,c
  2188  001A1C  EF21  F00D         	goto	l4192
  2189  001A20                     l432:
  2190  001A20  A2AC               	btfss	172,1,c	;volatile
  2191  001A22  EF15  F00D         	goto	u3711
  2192  001A26  EF17  F00D         	goto	u3710
  2193  001A2A                     u3711:
  2194  001A2A  EF10  F00D         	goto	l432
  2195  001A2E                     u3710:
  2196  001A2E                     
  2197                           ;modbus.c: 120: TXREG = response[i];
  2198  001A2E  0E80               	movlw	low _response
  2199  001A30  241D               	addwf	readReg@i^0,w,c
  2200  001A32  6ED9               	movwf	fsr2l,c
  2201  001A34  0E00               	movlw	high _response
  2202  001A36  201E               	addwfc	(readReg@i+1)^0,w,c
  2203  001A38  6EDA               	movwf	fsr2h,c
  2204  001A3A  50DF               	movf	indf2,w,c
  2205  001A3C  6EAD               	movwf	173,c	;volatile
  2206  001A3E  4A1D               	infsnz	readReg@i^0,f,c
  2207  001A40  2A1E               	incf	(readReg@i+1)^0,f,c
  2208  001A42                     l4192:
  2209  001A42  501F               	movf	readReg@j^0,w,c
  2210  001A44  6E15               	movwf	??_readReg^0,c
  2211  001A46  6A16               	clrf	(??_readReg+1)^0,c
  2212  001A48  501D               	movf	readReg@i^0,w,c
  2213  001A4A  1815               	xorwf	??_readReg^0,w,c
  2214  001A4C  E107               	bnz	u3721
  2215  001A4E  501E               	movf	(readReg@i+1)^0,w,c
  2216  001A50  1816               	xorwf	(??_readReg+1)^0,w,c
  2217  001A52  A4D8               	btfss	status,2,c
  2218  001A54  EF2E  F00D         	goto	u3721
  2219  001A58  EF30  F00D         	goto	u3720
  2220  001A5C                     u3721:
  2221  001A5C  EF10  F00D         	goto	l432
  2222  001A60                     u3720:
  2223  001A60                     
  2224                           ;modbus.c: 121: };modbus.c: 122: LATBbits.LATB7 = 0;
  2225  001A60  9E8A               	bcf	138,7,c	;volatile
  2226  001A62                     
  2227                           ;modbus.c: 125: clearResponse();
  2228  001A62  ECEB  F01A         	call	_clearResponse	;wreg free
  2229  001A66  0012               	return		;funcret
  2230  001A68                     __end_of_readReg:
  2231                           	callstack 0
  2232                           
  2233 ;; *************** function _readInputReg *****************
  2234 ;; Defined at:
  2235 ;;		line 128 in file "modbus.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;		None
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;  i               2   28[COMRAM] unsigned int 
  2240 ;;  rr_numRegs      2   26[COMRAM] unsigned int 
  2241 ;;  rr_Address      2   24[COMRAM] unsigned int 
  2242 ;;  crc             2   22[COMRAM] unsigned int 
  2243 ;;  j               1   30[COMRAM] unsigned char 
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2253 ;;      Params:         0       0       0       0       0       0       0
  2254 ;;      Locals:         9       0       0       0       0       0       0
  2255 ;;      Temps:          2       0       0       0       0       0       0
  2256 ;;      Totals:        11       0       0       0       0       0       0
  2257 ;;Total ram usage:       11 bytes
  2258 ;; Hardware stack levels used: 1
  2259 ;; Hardware stack levels required when called: 5
  2260 ;; This function calls:
  2261 ;;		_clearResponse
  2262 ;;		_generateCRC
  2263 ;; This function is called by:
  2264 ;;		_decodeIt
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text5
  2269  001A68                     __ptext5:
  2270                           	callstack 0
  2271  001A68                     _readInputReg:
  2272                           	callstack 24
  2273  001A68                     
  2274                           ;modbus.c: 131: unsigned int rr_numRegs = 0;
  2275  001A68  0E00               	movlw	0
  2276  001A6A  6E1C               	movwf	(readInputReg@rr_numRegs+1)^0,c
  2277  001A6C  0E00               	movlw	0
  2278  001A6E  6E1B               	movwf	readInputReg@rr_numRegs^0,c
  2279                           
  2280                           ;modbus.c: 132: unsigned char j = 3;
  2281  001A70  0E03               	movlw	3
  2282  001A72  6E1F               	movwf	readInputReg@j^0,c
  2283                           
  2284                           ;modbus.c: 133: unsigned int crc = 0;
  2285  001A74  0E00               	movlw	0
  2286  001A76  6E18               	movwf	(readInputReg@crc+1)^0,c
  2287  001A78  0E00               	movlw	0
  2288  001A7A  6E17               	movwf	readInputReg@crc^0,c
  2289                           
  2290                           ;modbus.c: 134: unsigned int i = 0;
  2291  001A7C  0E00               	movlw	0
  2292  001A7E  6E1E               	movwf	(readInputReg@i+1)^0,c
  2293  001A80  0E00               	movlw	0
  2294  001A82  6E1D               	movwf	readInputReg@i^0,c
  2295  001A84                     
  2296                           ;modbus.c: 137: rr_Address = received[2];
  2297  001A84  C102  F019         	movff	_received+2,readInputReg@rr_Address	;volatile
  2298  001A88  6A1A               	clrf	(readInputReg@rr_Address+1)^0,c
  2299                           
  2300                           ;modbus.c: 138: rr_Address <<= 8;
  2301  001A8A  5019               	movf	readInputReg@rr_Address^0,w,c
  2302  001A8C  6E1A               	movwf	(readInputReg@rr_Address+1)^0,c
  2303  001A8E  6A19               	clrf	readInputReg@rr_Address^0,c
  2304  001A90                     
  2305                           ;modbus.c: 139: rr_Address |= received[3];
  2306  001A90  0101               	movlb	1	; () banked
  2307  001A92  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  2308  001A94  1219               	iorwf	readInputReg@rr_Address^0,f,c
  2309  001A96                     
  2310                           ; BSR set to: 1
  2311                           ;modbus.c: 142: rr_numRegs = received[4];
  2312  001A96  C104  F01B         	movff	_received+4,readInputReg@rr_numRegs	;volatile
  2313  001A9A  6A1C               	clrf	(readInputReg@rr_numRegs+1)^0,c
  2314  001A9C                     
  2315                           ; BSR set to: 1
  2316                           ;modbus.c: 143: rr_numRegs <<= 8;
  2317  001A9C  501B               	movf	readInputReg@rr_numRegs^0,w,c
  2318  001A9E  6E1C               	movwf	(readInputReg@rr_numRegs+1)^0,c
  2319  001AA0  6A1B               	clrf	readInputReg@rr_numRegs^0,c
  2320                           
  2321                           ;modbus.c: 144: rr_numRegs |= received[5];
  2322  001AA2  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  2323  001AA4  121B               	iorwf	readInputReg@rr_numRegs^0,f,c
  2324  001AA6                     
  2325                           ; BSR set to: 1
  2326                           ;modbus.c: 146: response[0] = 1;
  2327  001AA6  0E01               	movlw	1
  2328  001AA8  0100               	movlb	0	; () banked
  2329  001AAA  6F80               	movwf	_response& (0+255),b	;volatile
  2330  001AAC                     
  2331                           ; BSR set to: 0
  2332                           ;modbus.c: 147: response[1] = 0x04;
  2333  001AAC  0E04               	movlw	4
  2334  001AAE  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  2335                           
  2336                           ;modbus.c: 148: response[2] = rr_numRegs*2;
  2337  001AB0  501B               	movf	readInputReg@rr_numRegs^0,w,c
  2338  001AB2  241B               	addwf	readInputReg@rr_numRegs^0,w,c
  2339  001AB4  6F82               	movwf	(_response+2)& (0+255),b	;volatile
  2340  001AB6                     
  2341                           ; BSR set to: 0
  2342                           ;modbus.c: 150: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  2343  001AB6  C019  F01D         	movff	readInputReg@rr_Address,readInputReg@i
  2344  001ABA  C01A  F01E         	movff	readInputReg@rr_Address+1,readInputReg@i+1
  2345  001ABE  EFBF  F00D         	goto	l4232
  2346  001AC2                     l4214:
  2347                           
  2348                           ;modbus.c: 151: if(holdingReg[i] > 255){
  2349  001AC2  90D8               	bcf	status,0,c
  2350  001AC4  341D               	rlcf	readInputReg@i^0,w,c
  2351  001AC6  6ED9               	movwf	fsr2l,c
  2352  001AC8  341E               	rlcf	(readInputReg@i+1)^0,w,c
  2353  001ACA  6EDA               	movwf	fsr2h,c
  2354  001ACC  0E7D               	movlw	low _holdingReg
  2355  001ACE  26D9               	addwf	fsr2l,f,c
  2356  001AD0  0E01               	movlw	high _holdingReg
  2357  001AD2  22DA               	addwfc	fsr2h,f,c
  2358  001AD4  0E00               	movlw	0
  2359  001AD6  5CDE               	subwf	postinc2,w,c
  2360  001AD8  0E01               	movlw	1
  2361  001ADA  58DE               	subwfb	postinc2,w,c
  2362  001ADC  A0D8               	btfss	status,0,c
  2363  001ADE  EF73  F00D         	goto	u3731
  2364  001AE2  EF75  F00D         	goto	u3730
  2365  001AE6                     u3731:
  2366  001AE6  EFA2  F00D         	goto	l4222
  2367  001AEA                     u3730:
  2368  001AEA                     
  2369                           ;modbus.c: 153: response[j] = holdingReg[i] >> 8;
  2370  001AEA  0E80               	movlw	low _response
  2371  001AEC  241F               	addwf	readInputReg@j^0,w,c
  2372  001AEE  6ED9               	movwf	fsr2l,c
  2373  001AF0  6ADA               	clrf	fsr2h,c
  2374  001AF2  0E00               	movlw	high _response
  2375  001AF4  22DA               	addwfc	fsr2h,f,c
  2376  001AF6  90D8               	bcf	status,0,c
  2377  001AF8  341D               	rlcf	readInputReg@i^0,w,c
  2378  001AFA  6EE1               	movwf	fsr1l,c
  2379  001AFC  341E               	rlcf	(readInputReg@i+1)^0,w,c
  2380  001AFE  6EE2               	movwf	fsr1h,c
  2381  001B00  0E7D               	movlw	low _holdingReg
  2382  001B02  26E1               	addwf	fsr1l,f,c
  2383  001B04  0E01               	movlw	high _holdingReg
  2384  001B06  22E2               	addwfc	fsr1h,f,c
  2385  001B08  CFE6 F015          	movff	postinc1,??_readInputReg
  2386  001B0C  CFE5 F016          	movff	postdec1,??_readInputReg+1
  2387  001B10  C016  F015         	movff	??_readInputReg+1,??_readInputReg
  2388  001B14  6A16               	clrf	(??_readInputReg+1)^0,c
  2389  001B16  5015               	movf	??_readInputReg^0,w,c
  2390  001B18  6EDF               	movwf	indf2,c
  2391  001B1A                     
  2392                           ;modbus.c: 154: j++;
  2393  001B1A  2A1F               	incf	readInputReg@j^0,f,c
  2394  001B1C                     
  2395                           ;modbus.c: 155: response[j] = holdingReg[i];
  2396  001B1C  90D8               	bcf	status,0,c
  2397  001B1E  341D               	rlcf	readInputReg@i^0,w,c
  2398  001B20  6ED9               	movwf	fsr2l,c
  2399  001B22  341E               	rlcf	(readInputReg@i+1)^0,w,c
  2400  001B24  6EDA               	movwf	fsr2h,c
  2401  001B26  0E7D               	movlw	low _holdingReg
  2402  001B28  26D9               	addwf	fsr2l,f,c
  2403  001B2A  0E01               	movlw	high _holdingReg
  2404  001B2C  22DA               	addwfc	fsr2h,f,c
  2405  001B2E  0E80               	movlw	low _response
  2406  001B30  241F               	addwf	readInputReg@j^0,w,c
  2407  001B32  6EE1               	movwf	fsr1l,c
  2408  001B34  6AE2               	clrf	fsr1h,c
  2409  001B36  0E00               	movlw	high _response
  2410  001B38  22E2               	addwfc	fsr1h,f,c
  2411  001B3A  CFDF FFE7          	movff	indf2,indf1
  2412                           
  2413                           ;modbus.c: 156: j++;
  2414  001B3E  2A1F               	incf	readInputReg@j^0,f,c
  2415                           
  2416                           ;modbus.c: 157: }
  2417  001B40  EFBD  F00D         	goto	l4230
  2418  001B44                     l4222:
  2419                           
  2420                           ;modbus.c: 158: else{;modbus.c: 159: response[j] = 0x00;
  2421  001B44  0E80               	movlw	low _response
  2422  001B46  241F               	addwf	readInputReg@j^0,w,c
  2423  001B48  6ED9               	movwf	fsr2l,c
  2424  001B4A  6ADA               	clrf	fsr2h,c
  2425  001B4C  0E00               	movlw	high _response
  2426  001B4E  22DA               	addwfc	fsr2h,f,c
  2427  001B50  0E00               	movlw	0
  2428  001B52  6EDF               	movwf	indf2,c
  2429  001B54                     
  2430                           ;modbus.c: 160: j++;
  2431  001B54  2A1F               	incf	readInputReg@j^0,f,c
  2432  001B56                     
  2433                           ;modbus.c: 161: response[j] = holdingReg[i];
  2434  001B56  90D8               	bcf	status,0,c
  2435  001B58  341D               	rlcf	readInputReg@i^0,w,c
  2436  001B5A  6ED9               	movwf	fsr2l,c
  2437  001B5C  341E               	rlcf	(readInputReg@i+1)^0,w,c
  2438  001B5E  6EDA               	movwf	fsr2h,c
  2439  001B60  0E7D               	movlw	low _holdingReg
  2440  001B62  26D9               	addwf	fsr2l,f,c
  2441  001B64  0E01               	movlw	high _holdingReg
  2442  001B66  22DA               	addwfc	fsr2h,f,c
  2443  001B68  0E80               	movlw	low _response
  2444  001B6A  241F               	addwf	readInputReg@j^0,w,c
  2445  001B6C  6EE1               	movwf	fsr1l,c
  2446  001B6E  6AE2               	clrf	fsr1h,c
  2447  001B70  0E00               	movlw	high _response
  2448  001B72  22E2               	addwfc	fsr1h,f,c
  2449  001B74  CFDF FFE7          	movff	indf2,indf1
  2450  001B78                     
  2451                           ;modbus.c: 162: j++;
  2452  001B78  2A1F               	incf	readInputReg@j^0,f,c
  2453  001B7A                     l4230:
  2454  001B7A  4A1D               	infsnz	readInputReg@i^0,f,c
  2455  001B7C  2A1E               	incf	(readInputReg@i+1)^0,f,c
  2456  001B7E                     l4232:
  2457  001B7E  501B               	movf	readInputReg@rr_numRegs^0,w,c
  2458  001B80  2419               	addwf	readInputReg@rr_Address^0,w,c
  2459  001B82  6E15               	movwf	??_readInputReg^0,c
  2460  001B84  501C               	movf	(readInputReg@rr_numRegs+1)^0,w,c
  2461  001B86  201A               	addwfc	(readInputReg@rr_Address+1)^0,w,c
  2462  001B88  6E16               	movwf	(??_readInputReg+1)^0,c
  2463  001B8A  5015               	movf	??_readInputReg^0,w,c
  2464  001B8C  5C1D               	subwf	readInputReg@i^0,w,c
  2465  001B8E  5016               	movf	(??_readInputReg+1)^0,w,c
  2466  001B90  581E               	subwfb	(readInputReg@i+1)^0,w,c
  2467  001B92  A0D8               	btfss	status,0,c
  2468  001B94  EFCE  F00D         	goto	u3741
  2469  001B98  EFD0  F00D         	goto	u3740
  2470  001B9C                     u3741:
  2471  001B9C  EF61  F00D         	goto	l4214
  2472  001BA0                     u3740:
  2473  001BA0                     
  2474                           ;modbus.c: 163: };modbus.c: 164: };modbus.c: 165: crc = generateCRC(j+2);
  2475  001BA0  501F               	movf	readInputReg@j^0,w,c
  2476  001BA2  0F02               	addlw	2
  2477  001BA4  ECF8  F015         	call	_generateCRC
  2478  001BA8  C003  F017         	movff	?_generateCRC,readInputReg@crc
  2479  001BAC  C004  F018         	movff	?_generateCRC+1,readInputReg@crc+1
  2480  001BB0                     
  2481                           ;modbus.c: 166: response[j] = crc >> 8;
  2482  001BB0  0E80               	movlw	low _response
  2483  001BB2  241F               	addwf	readInputReg@j^0,w,c
  2484  001BB4  6ED9               	movwf	fsr2l,c
  2485  001BB6  6ADA               	clrf	fsr2h,c
  2486  001BB8  0E00               	movlw	high _response
  2487  001BBA  22DA               	addwfc	fsr2h,f,c
  2488  001BBC  5018               	movf	(readInputReg@crc+1)^0,w,c
  2489  001BBE  6EDF               	movwf	indf2,c
  2490  001BC0                     
  2491                           ;modbus.c: 167: j++;
  2492  001BC0  2A1F               	incf	readInputReg@j^0,f,c
  2493  001BC2                     
  2494                           ;modbus.c: 168: response[j] = crc;
  2495  001BC2  0E80               	movlw	low _response
  2496  001BC4  241F               	addwf	readInputReg@j^0,w,c
  2497  001BC6  6ED9               	movwf	fsr2l,c
  2498  001BC8  6ADA               	clrf	fsr2h,c
  2499  001BCA  0E00               	movlw	high _response
  2500  001BCC  22DA               	addwfc	fsr2h,f,c
  2501  001BCE  C017  FFDF         	movff	readInputReg@crc,indf2
  2502  001BD2                     
  2503                           ;modbus.c: 169: j+=2;
  2504  001BD2  0E02               	movlw	2
  2505  001BD4  261F               	addwf	readInputReg@j^0,f,c
  2506  001BD6                     
  2507                           ;modbus.c: 171: LATBbits.LATB7 = 1;
  2508  001BD6  8E8A               	bsf	138,7,c	;volatile
  2509  001BD8                     
  2510                           ;modbus.c: 172: for(i=0;i!=j;i++){
  2511  001BD8  0E00               	movlw	0
  2512  001BDA  6E1E               	movwf	(readInputReg@i+1)^0,c
  2513  001BDC  0E00               	movlw	0
  2514  001BDE  6E1D               	movwf	readInputReg@i^0,c
  2515  001BE0  EF03  F00E         	goto	l4252
  2516  001BE4                     l446:
  2517  001BE4  A2AC               	btfss	172,1,c	;volatile
  2518  001BE6  EFF7  F00D         	goto	u3751
  2519  001BEA  EFF9  F00D         	goto	u3750
  2520  001BEE                     u3751:
  2521  001BEE  EFF2  F00D         	goto	l446
  2522  001BF2                     u3750:
  2523  001BF2                     
  2524                           ;modbus.c: 174: TXREG = response[i];
  2525  001BF2  0E80               	movlw	low _response
  2526  001BF4  241D               	addwf	readInputReg@i^0,w,c
  2527  001BF6  6ED9               	movwf	fsr2l,c
  2528  001BF8  0E00               	movlw	high _response
  2529  001BFA  201E               	addwfc	(readInputReg@i+1)^0,w,c
  2530  001BFC  6EDA               	movwf	fsr2h,c
  2531  001BFE  50DF               	movf	indf2,w,c
  2532  001C00  6EAD               	movwf	173,c	;volatile
  2533  001C02  4A1D               	infsnz	readInputReg@i^0,f,c
  2534  001C04  2A1E               	incf	(readInputReg@i+1)^0,f,c
  2535  001C06                     l4252:
  2536  001C06  501F               	movf	readInputReg@j^0,w,c
  2537  001C08  6E15               	movwf	??_readInputReg^0,c
  2538  001C0A  6A16               	clrf	(??_readInputReg+1)^0,c
  2539  001C0C  501D               	movf	readInputReg@i^0,w,c
  2540  001C0E  1815               	xorwf	??_readInputReg^0,w,c
  2541  001C10  E107               	bnz	u3761
  2542  001C12  501E               	movf	(readInputReg@i+1)^0,w,c
  2543  001C14  1816               	xorwf	(??_readInputReg+1)^0,w,c
  2544  001C16  A4D8               	btfss	status,2,c
  2545  001C18  EF10  F00E         	goto	u3761
  2546  001C1C  EF12  F00E         	goto	u3760
  2547  001C20                     u3761:
  2548  001C20  EFF2  F00D         	goto	l446
  2549  001C24                     u3760:
  2550  001C24                     
  2551                           ;modbus.c: 175: };modbus.c: 176: LATBbits.LATB7 = 0;
  2552  001C24  9E8A               	bcf	138,7,c	;volatile
  2553  001C26                     
  2554                           ;modbus.c: 179: clearResponse();
  2555  001C26  ECEB  F01A         	call	_clearResponse	;wreg free
  2556  001C2A  0012               	return		;funcret
  2557  001C2C                     __end_of_readInputReg:
  2558                           	callstack 0
  2559                           
  2560 ;; *************** function _readInputCoil *****************
  2561 ;; Defined at:
  2562 ;;		line 319 in file "modbus.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;		None
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;  rc_numCoils     2   29[COMRAM] unsigned int 
  2567 ;;  crc             2   26[COMRAM] unsigned int 
  2568 ;;  rc_Address      2   24[COMRAM] unsigned int 
  2569 ;;  k               1   36[COMRAM] unsigned char 
  2570 ;;  j               1   35[COMRAM] unsigned char 
  2571 ;;  i               1   34[COMRAM] unsigned char 
  2572 ;;  lsb             1   33[COMRAM] unsigned char 
  2573 ;;  l               1   32[COMRAM] unsigned char 
  2574 ;;  howManyBytes    1   31[COMRAM] unsigned char 
  2575 ;;  remainder       1   28[COMRAM] unsigned char 
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      void 
  2578 ;; Registers used:
  2579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2585 ;;      Params:         0       0       0       0       0       0       0
  2586 ;;      Locals:        13       0       0       0       0       0       0
  2587 ;;      Temps:          4       0       0       0       0       0       0
  2588 ;;      Totals:        17       0       0       0       0       0       0
  2589 ;;Total ram usage:       17 bytes
  2590 ;; Hardware stack levels used: 1
  2591 ;; Hardware stack levels required when called: 5
  2592 ;; This function calls:
  2593 ;;		_clearResponse
  2594 ;;		_generateCRC
  2595 ;; This function is called by:
  2596 ;;		_decodeIt
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	text6
  2601  00144C                     __ptext6:
  2602                           	callstack 0
  2603  00144C                     _readInputCoil:
  2604                           	callstack 24
  2605  00144C                     
  2606                           ;modbus.c: 325: unsigned int rc_numCoils = 0;
  2607  00144C  0E00               	movlw	0
  2608  00144E  6E1F               	movwf	(readInputCoil@rc_numCoils+1)^0,c
  2609  001450  0E00               	movlw	0
  2610  001452  6E1E               	movwf	readInputCoil@rc_numCoils^0,c
  2611                           
  2612                           ;modbus.c: 326: unsigned int crc = 0;
  2613  001454  0E00               	movlw	0
  2614  001456  6E1C               	movwf	(readInputCoil@crc+1)^0,c
  2615  001458  0E00               	movlw	0
  2616  00145A  6E1B               	movwf	readInputCoil@crc^0,c
  2617                           
  2618                           ;modbus.c: 328: unsigned char howManyBytes = 0;
  2619  00145C  0E00               	movlw	0
  2620  00145E  6E20               	movwf	readInputCoil@howManyBytes^0,c
  2621                           
  2622                           ;modbus.c: 329: unsigned char remainder = 0;
  2623  001460  0E00               	movlw	0
  2624  001462  6E1D               	movwf	readInputCoil@remainder^0,c
  2625                           
  2626                           ;modbus.c: 330: unsigned char lsb = 0;
  2627  001464  0E00               	movlw	0
  2628  001466  6E22               	movwf	readInputCoil@lsb^0,c
  2629                           
  2630                           ;modbus.c: 331: unsigned char i,j,k,l = 0;
  2631  001468  0E00               	movlw	0
  2632  00146A  6E21               	movwf	readInputCoil@l^0,c
  2633  00146C                     
  2634                           ;modbus.c: 334: rc_Address = received[2];
  2635  00146C  C102  F019         	movff	_received+2,readInputCoil@rc_Address	;volatile
  2636  001470  6A1A               	clrf	(readInputCoil@rc_Address+1)^0,c
  2637                           
  2638                           ;modbus.c: 335: rc_Address <<=8;
  2639  001472  5019               	movf	readInputCoil@rc_Address^0,w,c
  2640  001474  6E1A               	movwf	(readInputCoil@rc_Address+1)^0,c
  2641  001476  6A19               	clrf	readInputCoil@rc_Address^0,c
  2642  001478                     
  2643                           ;modbus.c: 336: rc_Address |= received[3];
  2644  001478  0101               	movlb	1	; () banked
  2645  00147A  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  2646  00147C  1219               	iorwf	readInputCoil@rc_Address^0,f,c
  2647  00147E                     
  2648                           ; BSR set to: 1
  2649                           ;modbus.c: 339: rc_numCoils = received[4];
  2650  00147E  C104  F01E         	movff	_received+4,readInputCoil@rc_numCoils	;volatile
  2651  001482  6A1F               	clrf	(readInputCoil@rc_numCoils+1)^0,c
  2652  001484                     
  2653                           ; BSR set to: 1
  2654                           ;modbus.c: 340: rc_numCoils <<= 8;
  2655  001484  501E               	movf	readInputCoil@rc_numCoils^0,w,c
  2656  001486  6E1F               	movwf	(readInputCoil@rc_numCoils+1)^0,c
  2657  001488  6A1E               	clrf	readInputCoil@rc_numCoils^0,c
  2658                           
  2659                           ;modbus.c: 341: rc_numCoils |= received[5];
  2660  00148A  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  2661  00148C  121E               	iorwf	readInputCoil@rc_numCoils^0,f,c
  2662  00148E                     
  2663                           ; BSR set to: 1
  2664                           ;modbus.c: 343: response[0] = 1;
  2665  00148E  0E01               	movlw	1
  2666  001490  0100               	movlb	0	; () banked
  2667  001492  6F80               	movwf	_response& (0+255),b	;volatile
  2668  001494                     
  2669                           ; BSR set to: 0
  2670                           ;modbus.c: 344: response[1] = 0x02;
  2671  001494  0E02               	movlw	2
  2672  001496  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  2673                           
  2674                           ;modbus.c: 346: howManyBytes = rc_numCoils/8;
  2675  001498  C01E  F015         	movff	readInputCoil@rc_numCoils,??_readInputCoil
  2676  00149C  C01F  F016         	movff	readInputCoil@rc_numCoils+1,??_readInputCoil+1
  2677  0014A0  90D8               	bcf	status,0,c
  2678  0014A2  3216               	rrcf	(??_readInputCoil+1)^0,f,c
  2679  0014A4  3215               	rrcf	??_readInputCoil^0,f,c
  2680  0014A6  90D8               	bcf	status,0,c
  2681  0014A8  3216               	rrcf	(??_readInputCoil+1)^0,f,c
  2682  0014AA  3215               	rrcf	??_readInputCoil^0,f,c
  2683  0014AC  90D8               	bcf	status,0,c
  2684  0014AE  3216               	rrcf	(??_readInputCoil+1)^0,f,c
  2685  0014B0  3215               	rrcf	??_readInputCoil^0,f,c
  2686  0014B2  5015               	movf	??_readInputCoil^0,w,c
  2687  0014B4  6E20               	movwf	readInputCoil@howManyBytes^0,c
  2688                           
  2689                           ;modbus.c: 347: remainder = rc_numCoils % 8;
  2690  0014B6  501E               	movf	readInputCoil@rc_numCoils^0,w,c
  2691  0014B8  0B07               	andlw	7
  2692  0014BA  6E1D               	movwf	readInputCoil@remainder^0,c
  2693  0014BC                     
  2694                           ; BSR set to: 0
  2695                           ;modbus.c: 349: if(remainder){
  2696  0014BC  501D               	movf	readInputCoil@remainder^0,w,c
  2697  0014BE  B4D8               	btfsc	status,2,c
  2698  0014C0  EF64  F00A         	goto	u3581
  2699  0014C4  EF66  F00A         	goto	u3580
  2700  0014C8                     u3581:
  2701  0014C8  EF67  F00A         	goto	l4064
  2702  0014CC                     u3580:
  2703  0014CC                     
  2704                           ; BSR set to: 0
  2705                           ;modbus.c: 350: howManyBytes += 1;
  2706  0014CC  2A20               	incf	readInputCoil@howManyBytes^0,f,c
  2707  0014CE                     l4064:
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;modbus.c: 351: };modbus.c: 352: response[2] = howManyBytes;
  2711  0014CE  C020  F082         	movff	readInputCoil@howManyBytes,_response+2	;volatile
  2712  0014D2                     
  2713                           ; BSR set to: 0
  2714                           ;modbus.c: 354: l = rc_Address;
  2715  0014D2  C019  F021         	movff	readInputCoil@rc_Address,readInputCoil@l
  2716  0014D6                     
  2717                           ; BSR set to: 0
  2718                           ;modbus.c: 355: k = 3;
  2719  0014D6  0E03               	movlw	3
  2720  0014D8  6E25               	movwf	readInputCoil@k^0,c
  2721  0014DA                     
  2722                           ; BSR set to: 0
  2723                           ;modbus.c: 357: for(i=howManyBytes; i!=0; i--){
  2724  0014DA  C020  F023         	movff	readInputCoil@howManyBytes,readInputCoil@i
  2725  0014DE                     l4072:
  2726  0014DE  5023               	movf	readInputCoil@i^0,w,c
  2727  0014E0  A4D8               	btfss	status,2,c
  2728  0014E2  EF75  F00A         	goto	u3591
  2729  0014E6  EF77  F00A         	goto	u3590
  2730  0014EA                     u3591:
  2731  0014EA  EF79  F00A         	goto	l4076
  2732  0014EE                     u3590:
  2733  0014EE  EFF5  F00A         	goto	l4120
  2734  0014F2                     l4076:
  2735                           
  2736                           ;modbus.c: 358: if(i>1){
  2737  0014F2  0E01               	movlw	1
  2738  0014F4  6423               	cpfsgt	readInputCoil@i^0,c
  2739  0014F6  EF7F  F00A         	goto	u3601
  2740  0014FA  EF81  F00A         	goto	u3600
  2741  0014FE                     u3601:
  2742  0014FE  EFB9  F00A         	goto	l4100
  2743  001502                     u3600:
  2744  001502                     
  2745                           ;modbus.c: 359: for(j=0;j!=8;j++){
  2746  001502  0E00               	movlw	0
  2747  001504  6E24               	movwf	readInputCoil@j^0,c
  2748  001506                     l4084:
  2749                           
  2750                           ;modbus.c: 360: if(coils[l]){
  2751  001506  0E00               	movlw	low _coils
  2752  001508  2421               	addwf	readInputCoil@l^0,w,c
  2753  00150A  6ED9               	movwf	fsr2l,c
  2754  00150C  6ADA               	clrf	fsr2h,c
  2755  00150E  0E02               	movlw	high _coils
  2756  001510  22DA               	addwfc	fsr2h,f,c
  2757  001512  50DF               	movf	indf2,w,c
  2758  001514  B4D8               	btfsc	status,2,c
  2759  001516  EF8F  F00A         	goto	u3611
  2760  00151A  EF91  F00A         	goto	u3610
  2761  00151E                     u3611:
  2762  00151E  EF95  F00A         	goto	l4088
  2763  001522                     u3610:
  2764  001522                     
  2765                           ;modbus.c: 361: lsb = 1;
  2766  001522  0E01               	movlw	1
  2767  001524  6E22               	movwf	readInputCoil@lsb^0,c
  2768                           
  2769                           ;modbus.c: 362: }
  2770  001526  EF97  F00A         	goto	l4090
  2771  00152A                     l4088:
  2772                           
  2773                           ;modbus.c: 363: else{;modbus.c: 364: lsb = 0;
  2774  00152A  0E00               	movlw	0
  2775  00152C  6E22               	movwf	readInputCoil@lsb^0,c
  2776  00152E                     l4090:
  2777                           
  2778                           ;modbus.c: 365: };modbus.c: 366: response[k] ^= (lsb << j);
  2779  00152E  C024  F015         	movff	readInputCoil@j,??_readInputCoil
  2780  001532  C022  F016         	movff	readInputCoil@lsb,??_readInputCoil+1
  2781  001536  2A15               	incf	??_readInputCoil^0,f,c
  2782  001538  EFA0  F00A         	goto	u3624
  2783  00153C                     u3625:
  2784  00153C  90D8               	bcf	status,0,c
  2785  00153E  3616               	rlcf	(??_readInputCoil+1)^0,f,c
  2786  001540                     u3624:
  2787  001540  2E15               	decfsz	??_readInputCoil^0,f,c
  2788  001542  EF9E  F00A         	goto	u3625
  2789  001546  0E80               	movlw	low _response
  2790  001548  2425               	addwf	readInputCoil@k^0,w,c
  2791  00154A  6ED9               	movwf	fsr2l,c
  2792  00154C  6ADA               	clrf	fsr2h,c
  2793  00154E  0E00               	movlw	high _response
  2794  001550  22DA               	addwfc	fsr2h,f,c
  2795  001552  5016               	movf	(??_readInputCoil+1)^0,w,c
  2796  001554  1ADF               	xorwf	indf2,f,c
  2797  001556                     
  2798                           ;modbus.c: 367: l++;
  2799  001556  2A21               	incf	readInputCoil@l^0,f,c
  2800  001558  2A24               	incf	readInputCoil@j^0,f,c
  2801  00155A  0E08               	movlw	8
  2802  00155C  1824               	xorwf	readInputCoil@j^0,w,c
  2803  00155E  A4D8               	btfss	status,2,c
  2804  001560  EFB4  F00A         	goto	u3631
  2805  001564  EFB6  F00A         	goto	u3630
  2806  001568                     u3631:
  2807  001568  EF83  F00A         	goto	l4084
  2808  00156C                     u3630:
  2809  00156C                     l4098:
  2810                           
  2811                           ;modbus.c: 368: };modbus.c: 369: k++;
  2812  00156C  2A25               	incf	readInputCoil@k^0,f,c
  2813                           
  2814                           ;modbus.c: 370: }
  2815  00156E  EFF2  F00A         	goto	l492
  2816  001572                     l4100:
  2817                           
  2818                           ;modbus.c: 371: else{;modbus.c: 372: for(j=0;j!=remainder;j++){
  2819  001572  0E00               	movlw	0
  2820  001574  6E24               	movwf	readInputCoil@j^0,c
  2821  001576  EFE7  F00A         	goto	l4114
  2822  00157A                     l4102:
  2823                           
  2824                           ;modbus.c: 373: if(coils[l]){
  2825  00157A  0E00               	movlw	low _coils
  2826  00157C  2421               	addwf	readInputCoil@l^0,w,c
  2827  00157E  6ED9               	movwf	fsr2l,c
  2828  001580  6ADA               	clrf	fsr2h,c
  2829  001582  0E02               	movlw	high _coils
  2830  001584  22DA               	addwfc	fsr2h,f,c
  2831  001586  50DF               	movf	indf2,w,c
  2832  001588  B4D8               	btfsc	status,2,c
  2833  00158A  EFC9  F00A         	goto	u3641
  2834  00158E  EFCB  F00A         	goto	u3640
  2835  001592                     u3641:
  2836  001592  EFCF  F00A         	goto	l4106
  2837  001596                     u3640:
  2838  001596                     
  2839                           ;modbus.c: 374: lsb = 1;
  2840  001596  0E01               	movlw	1
  2841  001598  6E22               	movwf	readInputCoil@lsb^0,c
  2842                           
  2843                           ;modbus.c: 375: }
  2844  00159A  EFD1  F00A         	goto	l4108
  2845  00159E                     l4106:
  2846                           
  2847                           ;modbus.c: 376: else{;modbus.c: 377: lsb = 0;
  2848  00159E  0E00               	movlw	0
  2849  0015A0  6E22               	movwf	readInputCoil@lsb^0,c
  2850  0015A2                     l4108:
  2851                           
  2852                           ;modbus.c: 378: };modbus.c: 379: response[k] ^= (lsb << j);
  2853  0015A2  C024  F015         	movff	readInputCoil@j,??_readInputCoil
  2854  0015A6  C022  F016         	movff	readInputCoil@lsb,??_readInputCoil+1
  2855  0015AA  2A15               	incf	??_readInputCoil^0,f,c
  2856  0015AC  EFDA  F00A         	goto	u3654
  2857  0015B0                     u3655:
  2858  0015B0  90D8               	bcf	status,0,c
  2859  0015B2  3616               	rlcf	(??_readInputCoil+1)^0,f,c
  2860  0015B4                     u3654:
  2861  0015B4  2E15               	decfsz	??_readInputCoil^0,f,c
  2862  0015B6  EFD8  F00A         	goto	u3655
  2863  0015BA  0E80               	movlw	low _response
  2864  0015BC  2425               	addwf	readInputCoil@k^0,w,c
  2865  0015BE  6ED9               	movwf	fsr2l,c
  2866  0015C0  6ADA               	clrf	fsr2h,c
  2867  0015C2  0E00               	movlw	high _response
  2868  0015C4  22DA               	addwfc	fsr2h,f,c
  2869  0015C6  5016               	movf	(??_readInputCoil+1)^0,w,c
  2870  0015C8  1ADF               	xorwf	indf2,f,c
  2871  0015CA                     
  2872                           ;modbus.c: 380: l++;
  2873  0015CA  2A21               	incf	readInputCoil@l^0,f,c
  2874  0015CC  2A24               	incf	readInputCoil@j^0,f,c
  2875  0015CE                     l4114:
  2876  0015CE  501D               	movf	readInputCoil@remainder^0,w,c
  2877  0015D0  1824               	xorwf	readInputCoil@j^0,w,c
  2878  0015D2  A4D8               	btfss	status,2,c
  2879  0015D4  EFEE  F00A         	goto	u3661
  2880  0015D8  EFF0  F00A         	goto	u3660
  2881  0015DC                     u3661:
  2882  0015DC  EFBD  F00A         	goto	l4102
  2883  0015E0                     u3660:
  2884  0015E0  EFB6  F00A         	goto	l4098
  2885  0015E4                     l492:
  2886  0015E4  0623               	decf	readInputCoil@i^0,f,c
  2887  0015E6  EF6F  F00A         	goto	l4072
  2888  0015EA                     l4120:
  2889                           
  2890                           ;modbus.c: 383: };modbus.c: 384: };modbus.c: 385: crc = generateCRC(k+2);
  2891  0015EA  5025               	movf	readInputCoil@k^0,w,c
  2892  0015EC  0F02               	addlw	2
  2893  0015EE  ECF8  F015         	call	_generateCRC
  2894  0015F2  C003  F01B         	movff	?_generateCRC,readInputCoil@crc
  2895  0015F6  C004  F01C         	movff	?_generateCRC+1,readInputCoil@crc+1
  2896  0015FA                     
  2897                           ;modbus.c: 387: response[k] = crc >> 8;
  2898  0015FA  0E80               	movlw	low _response
  2899  0015FC  2425               	addwf	readInputCoil@k^0,w,c
  2900  0015FE  6ED9               	movwf	fsr2l,c
  2901  001600  6ADA               	clrf	fsr2h,c
  2902  001602  0E00               	movlw	high _response
  2903  001604  22DA               	addwfc	fsr2h,f,c
  2904  001606  501C               	movf	(readInputCoil@crc+1)^0,w,c
  2905  001608  6EDF               	movwf	indf2,c
  2906  00160A                     
  2907                           ;modbus.c: 388: response[k+1] = crc;
  2908  00160A  0E81               	movlw	low (_response+1)
  2909  00160C  2425               	addwf	readInputCoil@k^0,w,c
  2910  00160E  6ED9               	movwf	fsr2l,c
  2911  001610  6ADA               	clrf	fsr2h,c
  2912  001612  0E00               	movlw	high (_response+1)
  2913  001614  22DA               	addwfc	fsr2h,f,c
  2914  001616  C01B  FFDF         	movff	readInputCoil@crc,indf2
  2915  00161A                     
  2916                           ;modbus.c: 390: LATBbits.LATB7 = 1;
  2917  00161A  8E8A               	bsf	138,7,c	;volatile
  2918  00161C                     
  2919                           ;modbus.c: 391: for(i=0;i!=(k+3);i++){
  2920  00161C  0E00               	movlw	0
  2921  00161E  6E23               	movwf	readInputCoil@i^0,c
  2922  001620  EF22  F00B         	goto	l4134
  2923  001624                     l500:
  2924  001624  A2AC               	btfss	172,1,c	;volatile
  2925  001626  EF17  F00B         	goto	u3671
  2926  00162A  EF19  F00B         	goto	u3670
  2927  00162E                     u3671:
  2928  00162E  EF12  F00B         	goto	l500
  2929  001632                     u3670:
  2930  001632                     
  2931                           ;modbus.c: 393: TXREG = response[i];
  2932  001632  0E80               	movlw	low _response
  2933  001634  2423               	addwf	readInputCoil@i^0,w,c
  2934  001636  6ED9               	movwf	fsr2l,c
  2935  001638  6ADA               	clrf	fsr2h,c
  2936  00163A  0E00               	movlw	high _response
  2937  00163C  22DA               	addwfc	fsr2h,f,c
  2938  00163E  50DF               	movf	indf2,w,c
  2939  001640  6EAD               	movwf	173,c	;volatile
  2940  001642  2A23               	incf	readInputCoil@i^0,f,c
  2941  001644                     l4134:
  2942  001644  5023               	movf	readInputCoil@i^0,w,c
  2943  001646  6E15               	movwf	??_readInputCoil^0,c
  2944  001648  6A16               	clrf	(??_readInputCoil+1)^0,c
  2945  00164A  5025               	movf	readInputCoil@k^0,w,c
  2946  00164C  6E17               	movwf	(??_readInputCoil+2)^0,c
  2947  00164E  6A18               	clrf	(??_readInputCoil+3)^0,c
  2948  001650  0E03               	movlw	3
  2949  001652  2617               	addwf	(??_readInputCoil+2)^0,f,c
  2950  001654  0E00               	movlw	0
  2951  001656  2218               	addwfc	(??_readInputCoil+3)^0,f,c
  2952  001658  5015               	movf	??_readInputCoil^0,w,c
  2953  00165A  1817               	xorwf	(??_readInputCoil+2)^0,w,c
  2954  00165C  E107               	bnz	u3681
  2955  00165E  5016               	movf	(??_readInputCoil+1)^0,w,c
  2956  001660  1818               	xorwf	(??_readInputCoil+3)^0,w,c
  2957  001662  A4D8               	btfss	status,2,c
  2958  001664  EF36  F00B         	goto	u3681
  2959  001668  EF38  F00B         	goto	u3680
  2960  00166C                     u3681:
  2961  00166C  EF12  F00B         	goto	l500
  2962  001670                     u3680:
  2963  001670                     
  2964                           ;modbus.c: 394: };modbus.c: 395: LATBbits.LATB7 = 0;
  2965  001670  9E8A               	bcf	138,7,c	;volatile
  2966  001672                     
  2967                           ;modbus.c: 396: clearResponse();
  2968  001672  ECEB  F01A         	call	_clearResponse	;wreg free
  2969  001676  0012               	return		;funcret
  2970  001678                     __end_of_readInputCoil:
  2971                           	callstack 0
  2972                           
  2973 ;; *************** function _readCoil *****************
  2974 ;; Defined at:
  2975 ;;		line 239 in file "modbus.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;		None
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  rc_numCoils     2   29[COMRAM] unsigned int 
  2980 ;;  crc             2   26[COMRAM] unsigned int 
  2981 ;;  rc_Address      2   24[COMRAM] unsigned int 
  2982 ;;  k               1   36[COMRAM] unsigned char 
  2983 ;;  j               1   35[COMRAM] unsigned char 
  2984 ;;  i               1   34[COMRAM] unsigned char 
  2985 ;;  lsb             1   33[COMRAM] unsigned char 
  2986 ;;  l               1   32[COMRAM] unsigned char 
  2987 ;;  howManyBytes    1   31[COMRAM] unsigned char 
  2988 ;;  remainder       1   28[COMRAM] unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  1    wreg      void 
  2991 ;; Registers used:
  2992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2998 ;;      Params:         0       0       0       0       0       0       0
  2999 ;;      Locals:        13       0       0       0       0       0       0
  3000 ;;      Temps:          4       0       0       0       0       0       0
  3001 ;;      Totals:        17       0       0       0       0       0       0
  3002 ;;Total ram usage:       17 bytes
  3003 ;; Hardware stack levels used: 1
  3004 ;; Hardware stack levels required when called: 5
  3005 ;; This function calls:
  3006 ;;		_clearResponse
  3007 ;;		_generateCRC
  3008 ;; This function is called by:
  3009 ;;		_decodeIt
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text7
  3014  001678                     __ptext7:
  3015                           	callstack 0
  3016  001678                     _readCoil:
  3017                           	callstack 24
  3018  001678                     
  3019                           ;modbus.c: 245: unsigned int rc_numCoils = 0;
  3020  001678  0E00               	movlw	0
  3021  00167A  6E1F               	movwf	(readCoil@rc_numCoils+1)^0,c
  3022  00167C  0E00               	movlw	0
  3023  00167E  6E1E               	movwf	readCoil@rc_numCoils^0,c
  3024                           
  3025                           ;modbus.c: 246: unsigned int crc = 0;
  3026  001680  0E00               	movlw	0
  3027  001682  6E1C               	movwf	(readCoil@crc+1)^0,c
  3028  001684  0E00               	movlw	0
  3029  001686  6E1B               	movwf	readCoil@crc^0,c
  3030                           
  3031                           ;modbus.c: 248: unsigned char howManyBytes = 0;
  3032  001688  0E00               	movlw	0
  3033  00168A  6E20               	movwf	readCoil@howManyBytes^0,c
  3034                           
  3035                           ;modbus.c: 249: unsigned char remainder = 0;
  3036  00168C  0E00               	movlw	0
  3037  00168E  6E1D               	movwf	readCoil@remainder^0,c
  3038                           
  3039                           ;modbus.c: 250: unsigned char lsb = 0;
  3040  001690  0E00               	movlw	0
  3041  001692  6E22               	movwf	readCoil@lsb^0,c
  3042                           
  3043                           ;modbus.c: 251: unsigned char i,j,k,l = 0;
  3044  001694  0E00               	movlw	0
  3045  001696  6E21               	movwf	readCoil@l^0,c
  3046  001698                     
  3047                           ;modbus.c: 254: rc_Address = received[2];
  3048  001698  C102  F019         	movff	_received+2,readCoil@rc_Address	;volatile
  3049  00169C  6A1A               	clrf	(readCoil@rc_Address+1)^0,c
  3050                           
  3051                           ;modbus.c: 255: rc_Address <<=8;
  3052  00169E  5019               	movf	readCoil@rc_Address^0,w,c
  3053  0016A0  6E1A               	movwf	(readCoil@rc_Address+1)^0,c
  3054  0016A2  6A19               	clrf	readCoil@rc_Address^0,c
  3055  0016A4                     
  3056                           ;modbus.c: 256: rc_Address |= received[3];
  3057  0016A4  0101               	movlb	1	; () banked
  3058  0016A6  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  3059  0016A8  1219               	iorwf	readCoil@rc_Address^0,f,c
  3060  0016AA                     
  3061                           ; BSR set to: 1
  3062                           ;modbus.c: 259: rc_numCoils = received[4];
  3063  0016AA  C104  F01E         	movff	_received+4,readCoil@rc_numCoils	;volatile
  3064  0016AE  6A1F               	clrf	(readCoil@rc_numCoils+1)^0,c
  3065  0016B0                     
  3066                           ; BSR set to: 1
  3067                           ;modbus.c: 260: rc_numCoils <<= 8;
  3068  0016B0  501E               	movf	readCoil@rc_numCoils^0,w,c
  3069  0016B2  6E1F               	movwf	(readCoil@rc_numCoils+1)^0,c
  3070  0016B4  6A1E               	clrf	readCoil@rc_numCoils^0,c
  3071                           
  3072                           ;modbus.c: 261: rc_numCoils |= received[5];
  3073  0016B6  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  3074  0016B8  121E               	iorwf	readCoil@rc_numCoils^0,f,c
  3075  0016BA                     
  3076                           ; BSR set to: 1
  3077                           ;modbus.c: 263: response[0] = 1;
  3078  0016BA  0E01               	movlw	1
  3079  0016BC  0100               	movlb	0	; () banked
  3080  0016BE  6F80               	movwf	_response& (0+255),b	;volatile
  3081  0016C0                     
  3082                           ; BSR set to: 0
  3083                           ;modbus.c: 264: response[1] = 0x01;
  3084  0016C0  0E01               	movlw	1
  3085  0016C2  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  3086                           
  3087                           ;modbus.c: 266: howManyBytes = rc_numCoils/8;
  3088  0016C4  C01E  F015         	movff	readCoil@rc_numCoils,??_readCoil
  3089  0016C8  C01F  F016         	movff	readCoil@rc_numCoils+1,??_readCoil+1
  3090  0016CC  90D8               	bcf	status,0,c
  3091  0016CE  3216               	rrcf	(??_readCoil+1)^0,f,c
  3092  0016D0  3215               	rrcf	??_readCoil^0,f,c
  3093  0016D2  90D8               	bcf	status,0,c
  3094  0016D4  3216               	rrcf	(??_readCoil+1)^0,f,c
  3095  0016D6  3215               	rrcf	??_readCoil^0,f,c
  3096  0016D8  90D8               	bcf	status,0,c
  3097  0016DA  3216               	rrcf	(??_readCoil+1)^0,f,c
  3098  0016DC  3215               	rrcf	??_readCoil^0,f,c
  3099  0016DE  5015               	movf	??_readCoil^0,w,c
  3100  0016E0  6E20               	movwf	readCoil@howManyBytes^0,c
  3101                           
  3102                           ;modbus.c: 267: remainder = rc_numCoils % 8;
  3103  0016E2  501E               	movf	readCoil@rc_numCoils^0,w,c
  3104  0016E4  0B07               	andlw	7
  3105  0016E6  6E1D               	movwf	readCoil@remainder^0,c
  3106  0016E8                     
  3107                           ; BSR set to: 0
  3108                           ;modbus.c: 269: if(remainder){
  3109  0016E8  501D               	movf	readCoil@remainder^0,w,c
  3110  0016EA  B4D8               	btfsc	status,2,c
  3111  0016EC  EF7A  F00B         	goto	u3471
  3112  0016F0  EF7C  F00B         	goto	u3470
  3113  0016F4                     u3471:
  3114  0016F4  EF7D  F00B         	goto	l3972
  3115  0016F8                     u3470:
  3116  0016F8                     
  3117                           ; BSR set to: 0
  3118                           ;modbus.c: 270: howManyBytes += 1;
  3119  0016F8  2A20               	incf	readCoil@howManyBytes^0,f,c
  3120  0016FA                     l3972:
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;modbus.c: 271: };modbus.c: 272: response[2] = howManyBytes;
  3124  0016FA  C020  F082         	movff	readCoil@howManyBytes,_response+2	;volatile
  3125  0016FE                     
  3126                           ; BSR set to: 0
  3127                           ;modbus.c: 274: l = rc_Address;
  3128  0016FE  C019  F021         	movff	readCoil@rc_Address,readCoil@l
  3129  001702                     
  3130                           ; BSR set to: 0
  3131                           ;modbus.c: 275: k = 3;
  3132  001702  0E03               	movlw	3
  3133  001704  6E25               	movwf	readCoil@k^0,c
  3134  001706                     
  3135                           ; BSR set to: 0
  3136                           ;modbus.c: 277: for(i=howManyBytes; i!=0; i--){
  3137  001706  C020  F023         	movff	readCoil@howManyBytes,readCoil@i
  3138  00170A                     l3980:
  3139  00170A  5023               	movf	readCoil@i^0,w,c
  3140  00170C  A4D8               	btfss	status,2,c
  3141  00170E  EF8B  F00B         	goto	u3481
  3142  001712  EF8D  F00B         	goto	u3480
  3143  001716                     u3481:
  3144  001716  EF8F  F00B         	goto	l3984
  3145  00171A                     u3480:
  3146  00171A  EF0B  F00C         	goto	l4028
  3147  00171E                     l3984:
  3148                           
  3149                           ;modbus.c: 278: if(i>1){
  3150  00171E  0E01               	movlw	1
  3151  001720  6423               	cpfsgt	readCoil@i^0,c
  3152  001722  EF95  F00B         	goto	u3491
  3153  001726  EF97  F00B         	goto	u3490
  3154  00172A                     u3491:
  3155  00172A  EFCF  F00B         	goto	l4008
  3156  00172E                     u3490:
  3157  00172E                     
  3158                           ;modbus.c: 279: for(j=0;j!=8;j++){
  3159  00172E  0E00               	movlw	0
  3160  001730  6E24               	movwf	readCoil@j^0,c
  3161  001732                     l3992:
  3162                           
  3163                           ;modbus.c: 280: if(coils[l]){
  3164  001732  0E00               	movlw	low _coils
  3165  001734  2421               	addwf	readCoil@l^0,w,c
  3166  001736  6ED9               	movwf	fsr2l,c
  3167  001738  6ADA               	clrf	fsr2h,c
  3168  00173A  0E02               	movlw	high _coils
  3169  00173C  22DA               	addwfc	fsr2h,f,c
  3170  00173E  50DF               	movf	indf2,w,c
  3171  001740  B4D8               	btfsc	status,2,c
  3172  001742  EFA5  F00B         	goto	u3501
  3173  001746  EFA7  F00B         	goto	u3500
  3174  00174A                     u3501:
  3175  00174A  EFAB  F00B         	goto	l3996
  3176  00174E                     u3500:
  3177  00174E                     
  3178                           ;modbus.c: 281: lsb = 1;
  3179  00174E  0E01               	movlw	1
  3180  001750  6E22               	movwf	readCoil@lsb^0,c
  3181                           
  3182                           ;modbus.c: 282: }
  3183  001752  EFAD  F00B         	goto	l3998
  3184  001756                     l3996:
  3185                           
  3186                           ;modbus.c: 283: else{;modbus.c: 284: lsb = 0;
  3187  001756  0E00               	movlw	0
  3188  001758  6E22               	movwf	readCoil@lsb^0,c
  3189  00175A                     l3998:
  3190                           
  3191                           ;modbus.c: 285: };modbus.c: 286: response[k] ^= (lsb << j);
  3192  00175A  C024  F015         	movff	readCoil@j,??_readCoil
  3193  00175E  C022  F016         	movff	readCoil@lsb,??_readCoil+1
  3194  001762  2A15               	incf	??_readCoil^0,f,c
  3195  001764  EFB6  F00B         	goto	u3514
  3196  001768                     u3515:
  3197  001768  90D8               	bcf	status,0,c
  3198  00176A  3616               	rlcf	(??_readCoil+1)^0,f,c
  3199  00176C                     u3514:
  3200  00176C  2E15               	decfsz	??_readCoil^0,f,c
  3201  00176E  EFB4  F00B         	goto	u3515
  3202  001772  0E80               	movlw	low _response
  3203  001774  2425               	addwf	readCoil@k^0,w,c
  3204  001776  6ED9               	movwf	fsr2l,c
  3205  001778  6ADA               	clrf	fsr2h,c
  3206  00177A  0E00               	movlw	high _response
  3207  00177C  22DA               	addwfc	fsr2h,f,c
  3208  00177E  5016               	movf	(??_readCoil+1)^0,w,c
  3209  001780  1ADF               	xorwf	indf2,f,c
  3210  001782                     
  3211                           ;modbus.c: 287: l++;
  3212  001782  2A21               	incf	readCoil@l^0,f,c
  3213  001784  2A24               	incf	readCoil@j^0,f,c
  3214  001786  0E08               	movlw	8
  3215  001788  1824               	xorwf	readCoil@j^0,w,c
  3216  00178A  A4D8               	btfss	status,2,c
  3217  00178C  EFCA  F00B         	goto	u3521
  3218  001790  EFCC  F00B         	goto	u3520
  3219  001794                     u3521:
  3220  001794  EF99  F00B         	goto	l3992
  3221  001798                     u3520:
  3222  001798                     l4006:
  3223                           
  3224                           ;modbus.c: 288: };modbus.c: 289: k++;
  3225  001798  2A25               	incf	readCoil@k^0,f,c
  3226                           
  3227                           ;modbus.c: 290: }
  3228  00179A  EF08  F00C         	goto	l469
  3229  00179E                     l4008:
  3230                           
  3231                           ;modbus.c: 291: else{;modbus.c: 292: for(j=0;j!=remainder;j++){
  3232  00179E  0E00               	movlw	0
  3233  0017A0  6E24               	movwf	readCoil@j^0,c
  3234  0017A2  EFFD  F00B         	goto	l4022
  3235  0017A6                     l4010:
  3236                           
  3237                           ;modbus.c: 293: if(coils[l]){
  3238  0017A6  0E00               	movlw	low _coils
  3239  0017A8  2421               	addwf	readCoil@l^0,w,c
  3240  0017AA  6ED9               	movwf	fsr2l,c
  3241  0017AC  6ADA               	clrf	fsr2h,c
  3242  0017AE  0E02               	movlw	high _coils
  3243  0017B0  22DA               	addwfc	fsr2h,f,c
  3244  0017B2  50DF               	movf	indf2,w,c
  3245  0017B4  B4D8               	btfsc	status,2,c
  3246  0017B6  EFDF  F00B         	goto	u3531
  3247  0017BA  EFE1  F00B         	goto	u3530
  3248  0017BE                     u3531:
  3249  0017BE  EFE5  F00B         	goto	l4014
  3250  0017C2                     u3530:
  3251  0017C2                     
  3252                           ;modbus.c: 294: lsb = 1;
  3253  0017C2  0E01               	movlw	1
  3254  0017C4  6E22               	movwf	readCoil@lsb^0,c
  3255                           
  3256                           ;modbus.c: 295: }
  3257  0017C6  EFE7  F00B         	goto	l4016
  3258  0017CA                     l4014:
  3259                           
  3260                           ;modbus.c: 296: else{;modbus.c: 297: lsb = 0;
  3261  0017CA  0E00               	movlw	0
  3262  0017CC  6E22               	movwf	readCoil@lsb^0,c
  3263  0017CE                     l4016:
  3264                           
  3265                           ;modbus.c: 298: };modbus.c: 299: response[k] ^= (lsb << j);
  3266  0017CE  C024  F015         	movff	readCoil@j,??_readCoil
  3267  0017D2  C022  F016         	movff	readCoil@lsb,??_readCoil+1
  3268  0017D6  2A15               	incf	??_readCoil^0,f,c
  3269  0017D8  EFF0  F00B         	goto	u3544
  3270  0017DC                     u3545:
  3271  0017DC  90D8               	bcf	status,0,c
  3272  0017DE  3616               	rlcf	(??_readCoil+1)^0,f,c
  3273  0017E0                     u3544:
  3274  0017E0  2E15               	decfsz	??_readCoil^0,f,c
  3275  0017E2  EFEE  F00B         	goto	u3545
  3276  0017E6  0E80               	movlw	low _response
  3277  0017E8  2425               	addwf	readCoil@k^0,w,c
  3278  0017EA  6ED9               	movwf	fsr2l,c
  3279  0017EC  6ADA               	clrf	fsr2h,c
  3280  0017EE  0E00               	movlw	high _response
  3281  0017F0  22DA               	addwfc	fsr2h,f,c
  3282  0017F2  5016               	movf	(??_readCoil+1)^0,w,c
  3283  0017F4  1ADF               	xorwf	indf2,f,c
  3284  0017F6                     
  3285                           ;modbus.c: 300: l++;
  3286  0017F6  2A21               	incf	readCoil@l^0,f,c
  3287  0017F8  2A24               	incf	readCoil@j^0,f,c
  3288  0017FA                     l4022:
  3289  0017FA  501D               	movf	readCoil@remainder^0,w,c
  3290  0017FC  1824               	xorwf	readCoil@j^0,w,c
  3291  0017FE  A4D8               	btfss	status,2,c
  3292  001800  EF04  F00C         	goto	u3551
  3293  001804  EF06  F00C         	goto	u3550
  3294  001808                     u3551:
  3295  001808  EFD3  F00B         	goto	l4010
  3296  00180C                     u3550:
  3297  00180C  EFCC  F00B         	goto	l4006
  3298  001810                     l469:
  3299  001810  0623               	decf	readCoil@i^0,f,c
  3300  001812  EF85  F00B         	goto	l3980
  3301  001816                     l4028:
  3302                           
  3303                           ;modbus.c: 303: };modbus.c: 304: };modbus.c: 305: crc = generateCRC(k+2);
  3304  001816  5025               	movf	readCoil@k^0,w,c
  3305  001818  0F02               	addlw	2
  3306  00181A  ECF8  F015         	call	_generateCRC
  3307  00181E  C003  F01B         	movff	?_generateCRC,readCoil@crc
  3308  001822  C004  F01C         	movff	?_generateCRC+1,readCoil@crc+1
  3309  001826                     
  3310                           ;modbus.c: 307: response[k] = crc >> 8;
  3311  001826  0E80               	movlw	low _response
  3312  001828  2425               	addwf	readCoil@k^0,w,c
  3313  00182A  6ED9               	movwf	fsr2l,c
  3314  00182C  6ADA               	clrf	fsr2h,c
  3315  00182E  0E00               	movlw	high _response
  3316  001830  22DA               	addwfc	fsr2h,f,c
  3317  001832  501C               	movf	(readCoil@crc+1)^0,w,c
  3318  001834  6EDF               	movwf	indf2,c
  3319  001836                     
  3320                           ;modbus.c: 308: response[k+1] = crc;
  3321  001836  0E81               	movlw	low (_response+1)
  3322  001838  2425               	addwf	readCoil@k^0,w,c
  3323  00183A  6ED9               	movwf	fsr2l,c
  3324  00183C  6ADA               	clrf	fsr2h,c
  3325  00183E  0E00               	movlw	high (_response+1)
  3326  001840  22DA               	addwfc	fsr2h,f,c
  3327  001842  C01B  FFDF         	movff	readCoil@crc,indf2
  3328  001846                     
  3329                           ;modbus.c: 310: LATBbits.LATB7 = 1;
  3330  001846  8E8A               	bsf	138,7,c	;volatile
  3331  001848                     
  3332                           ;modbus.c: 311: for(i=0;i!=(k+3);i++){
  3333  001848  0E00               	movlw	0
  3334  00184A  6E23               	movwf	readCoil@i^0,c
  3335  00184C  EF38  F00C         	goto	l4042
  3336  001850                     l477:
  3337  001850  A2AC               	btfss	172,1,c	;volatile
  3338  001852  EF2D  F00C         	goto	u3561
  3339  001856  EF2F  F00C         	goto	u3560
  3340  00185A                     u3561:
  3341  00185A  EF28  F00C         	goto	l477
  3342  00185E                     u3560:
  3343  00185E                     
  3344                           ;modbus.c: 313: TXREG = response[i];
  3345  00185E  0E80               	movlw	low _response
  3346  001860  2423               	addwf	readCoil@i^0,w,c
  3347  001862  6ED9               	movwf	fsr2l,c
  3348  001864  6ADA               	clrf	fsr2h,c
  3349  001866  0E00               	movlw	high _response
  3350  001868  22DA               	addwfc	fsr2h,f,c
  3351  00186A  50DF               	movf	indf2,w,c
  3352  00186C  6EAD               	movwf	173,c	;volatile
  3353  00186E  2A23               	incf	readCoil@i^0,f,c
  3354  001870                     l4042:
  3355  001870  5023               	movf	readCoil@i^0,w,c
  3356  001872  6E15               	movwf	??_readCoil^0,c
  3357  001874  6A16               	clrf	(??_readCoil+1)^0,c
  3358  001876  5025               	movf	readCoil@k^0,w,c
  3359  001878  6E17               	movwf	(??_readCoil+2)^0,c
  3360  00187A  6A18               	clrf	(??_readCoil+3)^0,c
  3361  00187C  0E03               	movlw	3
  3362  00187E  2617               	addwf	(??_readCoil+2)^0,f,c
  3363  001880  0E00               	movlw	0
  3364  001882  2218               	addwfc	(??_readCoil+3)^0,f,c
  3365  001884  5015               	movf	??_readCoil^0,w,c
  3366  001886  1817               	xorwf	(??_readCoil+2)^0,w,c
  3367  001888  E107               	bnz	u3571
  3368  00188A  5016               	movf	(??_readCoil+1)^0,w,c
  3369  00188C  1818               	xorwf	(??_readCoil+3)^0,w,c
  3370  00188E  A4D8               	btfss	status,2,c
  3371  001890  EF4C  F00C         	goto	u3571
  3372  001894  EF4E  F00C         	goto	u3570
  3373  001898                     u3571:
  3374  001898  EF28  F00C         	goto	l477
  3375  00189C                     u3570:
  3376  00189C                     
  3377                           ;modbus.c: 314: };modbus.c: 315: LATBbits.LATB7 = 0;
  3378  00189C  9E8A               	bcf	138,7,c	;volatile
  3379  00189E                     
  3380                           ;modbus.c: 316: clearResponse();
  3381  00189E  ECEB  F01A         	call	_clearResponse	;wreg free
  3382  0018A2  0012               	return		;funcret
  3383  0018A4                     __end_of_readCoil:
  3384                           	callstack 0
  3385                           
  3386 ;; *************** function _generateCRC *****************
  3387 ;; Defined at:
  3388 ;;		line 460 in file "modbus.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  messageLengt    1    wreg     unsigned char 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;  messageLengt    1    9[COMRAM] unsigned char 
  3393 ;;  crc             2   18[COMRAM] unsigned int 
  3394 ;;  j               2   16[COMRAM] int 
  3395 ;;  i               2   14[COMRAM] int 
  3396 ;;  crcHigh         2   12[COMRAM] unsigned int 
  3397 ;;  crcLow          2   10[COMRAM] unsigned int 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  2    2[COMRAM] unsigned int 
  3400 ;; Registers used:
  3401 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3407 ;;      Params:         2       0       0       0       0       0       0
  3408 ;;      Locals:        11       0       0       0       0       0       0
  3409 ;;      Temps:          5       0       0       0       0       0       0
  3410 ;;      Totals:        18       0       0       0       0       0       0
  3411 ;;Total ram usage:       18 bytes
  3412 ;; Hardware stack levels used: 1
  3413 ;; Hardware stack levels required when called: 2
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_readReg
  3418 ;;		_readInputReg
  3419 ;;		_writeReg
  3420 ;;		_readCoil
  3421 ;;		_readInputCoil
  3422 ;;		_writeCoil
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text8
  3427  002BF0                     __ptext8:
  3428                           	callstack 0
  3429  002BF0                     _generateCRC:
  3430                           	callstack 26
  3431                           
  3432                           ;incstack = 0
  3433                           ;generateCRC@messageLength stored from wreg
  3434  002BF0  6E0A               	movwf	generateCRC@messageLength^0,c
  3435  002BF2                     
  3436                           ;modbus.c: 462: unsigned int crc = 0xFFFF;
  3437  002BF2  6813               	setf	generateCRC@crc^0,c
  3438  002BF4  6814               	setf	(generateCRC@crc+1)^0,c
  3439  002BF6                     
  3440                           ;modbus.c: 464: unsigned int crcLow = 0;
  3441  002BF6  0E00               	movlw	0
  3442  002BF8  6E0C               	movwf	(generateCRC@crcLow+1)^0,c
  3443  002BFA  0E00               	movlw	0
  3444  002BFC  6E0B               	movwf	generateCRC@crcLow^0,c
  3445                           
  3446                           ;modbus.c: 465: int i,j = 0;
  3447  002BFE  0E00               	movlw	0
  3448  002C00  6E12               	movwf	(generateCRC@j+1)^0,c
  3449  002C02  0E00               	movlw	0
  3450  002C04  6E11               	movwf	generateCRC@j^0,c
  3451                           
  3452                           ;modbus.c: 467: for(i=0;i<messageLength-2;i++){
  3453  002C06  0E00               	movlw	0
  3454  002C08  6E10               	movwf	(generateCRC@i+1)^0,c
  3455  002C0A  0E00               	movlw	0
  3456  002C0C  6E0F               	movwf	generateCRC@i^0,c
  3457  002C0E  EF38  F016         	goto	l3870
  3458  002C12                     l3852:
  3459                           
  3460                           ;modbus.c: 468: crc ^= response[i];
  3461  002C12  0E80               	movlw	low _response
  3462  002C14  240F               	addwf	generateCRC@i^0,w,c
  3463  002C16  6ED9               	movwf	fsr2l,c
  3464  002C18  0E00               	movlw	high _response
  3465  002C1A  2010               	addwfc	(generateCRC@i+1)^0,w,c
  3466  002C1C  6EDA               	movwf	fsr2h,c
  3467  002C1E  50DF               	movf	indf2,w,c
  3468  002C20  6E05               	movwf	??_generateCRC^0,c
  3469  002C22  5005               	movf	??_generateCRC^0,w,c
  3470  002C24  1A13               	xorwf	generateCRC@crc^0,f,c
  3471  002C26                     
  3472                           ;modbus.c: 469: for(j=8; j!=0; j--){
  3473  002C26  0E00               	movlw	0
  3474  002C28  6E12               	movwf	(generateCRC@j+1)^0,c
  3475  002C2A  0E08               	movlw	8
  3476  002C2C  6E11               	movwf	generateCRC@j^0,c
  3477  002C2E                     l519:
  3478                           
  3479                           ;modbus.c: 470: if((crc & 0x0001) != 0){
  3480  002C2E  A013               	btfss	generateCRC@crc^0,0,c
  3481  002C30  EF1C  F016         	goto	u3321
  3482  002C34  EF1E  F016         	goto	u3320
  3483  002C38                     u3321:
  3484  002C38  EF27  F016         	goto	l3864
  3485  002C3C                     u3320:
  3486  002C3C                     
  3487                           ;modbus.c: 471: crc >>= 1;
  3488  002C3C  90D8               	bcf	status,0,c
  3489  002C3E  3214               	rrcf	(generateCRC@crc+1)^0,f,c
  3490  002C40  3213               	rrcf	generateCRC@crc^0,f,c
  3491  002C42                     
  3492                           ;modbus.c: 472: crc ^= 0xA001;
  3493  002C42  0E01               	movlw	1
  3494  002C44  1A13               	xorwf	generateCRC@crc^0,f,c
  3495  002C46  0EA0               	movlw	160
  3496  002C48  1A14               	xorwf	(generateCRC@crc+1)^0,f,c
  3497                           
  3498                           ;modbus.c: 473: }
  3499  002C4A  EF2A  F016         	goto	l522
  3500  002C4E                     l3864:
  3501                           
  3502                           ;modbus.c: 474: else{;modbus.c: 475: crc >>= 1;
  3503  002C4E  90D8               	bcf	status,0,c
  3504  002C50  3214               	rrcf	(generateCRC@crc+1)^0,f,c
  3505  002C52  3213               	rrcf	generateCRC@crc^0,f,c
  3506  002C54                     l522:
  3507  002C54  0611               	decf	generateCRC@j^0,f,c
  3508  002C56  A0D8               	btfss	status,0,c
  3509  002C58  0612               	decf	(generateCRC@j+1)^0,f,c
  3510  002C5A  5011               	movf	generateCRC@j^0,w,c
  3511  002C5C  1012               	iorwf	(generateCRC@j+1)^0,w,c
  3512  002C5E  A4D8               	btfss	status,2,c
  3513  002C60  EF34  F016         	goto	u3331
  3514  002C64  EF36  F016         	goto	u3330
  3515  002C68                     u3331:
  3516  002C68  EF17  F016         	goto	l519
  3517  002C6C                     u3330:
  3518  002C6C  4A0F               	infsnz	generateCRC@i^0,f,c
  3519  002C6E  2A10               	incf	(generateCRC@i+1)^0,f,c
  3520  002C70                     l3870:
  3521  002C70  0EFE               	movlw	254
  3522  002C72  6E05               	movwf	??_generateCRC^0,c
  3523  002C74  0EFF               	movlw	255
  3524  002C76  6E06               	movwf	(??_generateCRC+1)^0,c
  3525  002C78  500A               	movf	generateCRC@messageLength^0,w,c
  3526  002C7A  6E07               	movwf	(??_generateCRC+2)^0,c
  3527  002C7C  6A08               	clrf	(??_generateCRC+3)^0,c
  3528  002C7E  5005               	movf	??_generateCRC^0,w,c
  3529  002C80  2607               	addwf	(??_generateCRC+2)^0,f,c
  3530  002C82  5006               	movf	(??_generateCRC+1)^0,w,c
  3531  002C84  2208               	addwfc	(??_generateCRC+3)^0,f,c
  3532  002C86  5007               	movf	(??_generateCRC+2)^0,w,c
  3533  002C88  5C0F               	subwf	generateCRC@i^0,w,c
  3534  002C8A  5010               	movf	(generateCRC@i+1)^0,w,c
  3535  002C8C  0A80               	xorlw	128
  3536  002C8E  6E09               	movwf	(??_generateCRC+4)^0,c
  3537  002C90  5008               	movf	(??_generateCRC+3)^0,w,c
  3538  002C92  0A80               	xorlw	128
  3539  002C94  5809               	subwfb	(??_generateCRC+4)^0,w,c
  3540  002C96  A0D8               	btfss	status,0,c
  3541  002C98  EF50  F016         	goto	u3341
  3542  002C9C  EF52  F016         	goto	u3340
  3543  002CA0                     u3341:
  3544  002CA0  EF09  F016         	goto	l3852
  3545  002CA4                     u3340:
  3546  002CA4                     
  3547                           ;modbus.c: 476: };modbus.c: 477: };modbus.c: 478: };modbus.c: 480: crcHigh = (crc & 0x00
      +                          FF) <<8;
  3548  002CA4  5013               	movf	generateCRC@crc^0,w,c
  3549  002CA6  6E06               	movwf	(??_generateCRC+1)^0,c
  3550  002CA8  6A05               	clrf	??_generateCRC^0,c
  3551  002CAA  C005  F00D         	movff	??_generateCRC,generateCRC@crcHigh
  3552  002CAE  C006  F00E         	movff	??_generateCRC+1,generateCRC@crcHigh+1
  3553                           
  3554                           ;modbus.c: 481: crcLow = (crc & 0xFF00) >>8;
  3555  002CB2  C013  F005         	movff	generateCRC@crc,??_generateCRC
  3556  002CB6  C014  F006         	movff	generateCRC@crc+1,??_generateCRC+1
  3557  002CBA  C006  F005         	movff	??_generateCRC+1,??_generateCRC
  3558  002CBE  6A06               	clrf	(??_generateCRC+1)^0,c
  3559  002CC0  5005               	movf	??_generateCRC^0,w,c
  3560  002CC2  6E0B               	movwf	generateCRC@crcLow^0,c
  3561  002CC4  6A0C               	clrf	(generateCRC@crcLow+1)^0,c
  3562  002CC6                     
  3563                           ;modbus.c: 482: crcHigh |= crcLow;
  3564  002CC6  500B               	movf	generateCRC@crcLow^0,w,c
  3565  002CC8  120D               	iorwf	generateCRC@crcHigh^0,f,c
  3566  002CCA  500C               	movf	(generateCRC@crcLow+1)^0,w,c
  3567  002CCC  120E               	iorwf	(generateCRC@crcHigh+1)^0,f,c
  3568  002CCE                     
  3569                           ;modbus.c: 483: crc = crcHigh;
  3570  002CCE  C00D  F013         	movff	generateCRC@crcHigh,generateCRC@crc
  3571  002CD2  C00E  F014         	movff	generateCRC@crcHigh+1,generateCRC@crc+1
  3572  002CD6                     
  3573                           ;modbus.c: 484: return crc;
  3574  002CD6  C013  F003         	movff	generateCRC@crc,?_generateCRC
  3575  002CDA  C014  F004         	movff	generateCRC@crc+1,?_generateCRC+1
  3576  002CDE  0012               	return		;funcret
  3577  002CE0                     __end_of_generateCRC:
  3578                           	callstack 0
  3579                           
  3580 ;; *************** function _clearResponse *****************
  3581 ;; Defined at:
  3582 ;;		line 37 in file "modbus.c"
  3583 ;; Parameters:    Size  Location     Type
  3584 ;;		None
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;  i               1    7[COMRAM] unsigned char 
  3587 ;; Return value:  Size  Location     Type
  3588 ;;                  1    wreg      void 
  3589 ;; Registers used:
  3590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3596 ;;      Params:         0       0       0       0       0       0       0
  3597 ;;      Locals:         1       0       0       0       0       0       0
  3598 ;;      Temps:          0       0       0       0       0       0       0
  3599 ;;      Totals:         1       0       0       0       0       0       0
  3600 ;;Total ram usage:        1 bytes
  3601 ;; Hardware stack levels used: 1
  3602 ;; Hardware stack levels required when called: 4
  3603 ;; This function calls:
  3604 ;;		_ClsUSART
  3605 ;;		_OpnUSART
  3606 ;; This function is called by:
  3607 ;;		_readReg
  3608 ;;		_readInputReg
  3609 ;;		_writeReg
  3610 ;;		_readCoil
  3611 ;;		_readInputCoil
  3612 ;;		_writeCoil
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text9
  3617  0035D6                     __ptext9:
  3618                           	callstack 0
  3619  0035D6                     _clearResponse:
  3620                           	callstack 24
  3621  0035D6                     
  3622                           ;modbus.c: 39: unsigned char i;;modbus.c: 40: for(i=0;i<125;i++){
  3623  0035D6  0E00               	movlw	0
  3624  0035D8  6E08               	movwf	clearResponse@i^0,c
  3625  0035DA                     l3840:
  3626                           
  3627                           ;modbus.c: 41: response[i] = 0;
  3628  0035DA  0E80               	movlw	low _response
  3629  0035DC  2408               	addwf	clearResponse@i^0,w,c
  3630  0035DE  6ED9               	movwf	fsr2l,c
  3631  0035E0  6ADA               	clrf	fsr2h,c
  3632  0035E2  0E00               	movlw	high _response
  3633  0035E4  22DA               	addwfc	fsr2h,f,c
  3634  0035E6  0E00               	movlw	0
  3635  0035E8  6EDF               	movwf	indf2,c
  3636  0035EA  2A08               	incf	clearResponse@i^0,f,c
  3637  0035EC  0E7C               	movlw	124
  3638  0035EE  6408               	cpfsgt	clearResponse@i^0,c
  3639  0035F0  EFFC  F01A         	goto	u3311
  3640  0035F4  EFFE  F01A         	goto	u3310
  3641  0035F8                     u3311:
  3642  0035F8  EFED  F01A         	goto	l3840
  3643  0035FC                     u3310:
  3644  0035FC                     
  3645                           ;modbus.c: 42: };modbus.c: 43: ClsUSART();
  3646  0035FC  ECB9  F01B         	call	_ClsUSART	;wreg free
  3647                           
  3648                           ;modbus.c: 44: OpnUSART();
  3649  003600  EC8A  F019         	call	_OpnUSART	;wreg free
  3650  003604  0012               	return		;funcret
  3651  003606                     __end_of_clearResponse:
  3652                           	callstack 0
  3653                           
  3654 ;; *************** function _OpnUSART *****************
  3655 ;; Defined at:
  3656 ;;		line 23 in file "system.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;		None
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  spbrg           4    3[COMRAM] unsigned long 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  1    wreg      void 
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3670 ;;      Params:         0       0       0       0       0       0       0
  3671 ;;      Locals:         4       0       0       0       0       0       0
  3672 ;;      Temps:          1       0       0       0       0       0       0
  3673 ;;      Totals:         5       0       0       0       0       0       0
  3674 ;;Total ram usage:        5 bytes
  3675 ;; Hardware stack levels used: 1
  3676 ;; Hardware stack levels required when called: 3
  3677 ;; This function calls:
  3678 ;;		_ClsUSART
  3679 ;; This function is called by:
  3680 ;;		_main
  3681 ;;		_clearResponse
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text10
  3686  003314                     __ptext10:
  3687                           	callstack 0
  3688  003314                     _OpnUSART:
  3689                           	callstack 24
  3690  003314                     
  3691                           ;system.c: 29: unsigned long spbrg = 0;
  3692  003314  0E00               	movlw	0
  3693  003316  6E04               	movwf	OpnUSART@spbrg^0,c
  3694  003318  0E00               	movlw	0
  3695  00331A  6E05               	movwf	(OpnUSART@spbrg+1)^0,c
  3696  00331C  0E00               	movlw	0
  3697  00331E  6E06               	movwf	(OpnUSART@spbrg+2)^0,c
  3698  003320  0E00               	movlw	0
  3699  003322  6E07               	movwf	(OpnUSART@spbrg+3)^0,c
  3700                           
  3701                           ;system.c: 31: spbrg = 10000000L/9600;
  3702  003324  0E11               	movlw	17
  3703  003326  6E04               	movwf	OpnUSART@spbrg^0,c
  3704  003328  0E04               	movlw	4
  3705  00332A  6E05               	movwf	(OpnUSART@spbrg+1)^0,c
  3706  00332C  0E00               	movlw	0
  3707  00332E  6E06               	movwf	(OpnUSART@spbrg+2)^0,c
  3708  003330  0E00               	movlw	0
  3709  003332  6E07               	movwf	(OpnUSART@spbrg+3)^0,c
  3710  003334                     
  3711                           ;system.c: 32: spbrg /= 64;
  3712  003334  0E06               	movlw	6
  3713  003336  6E03               	movwf	??_OpnUSART^0,c
  3714  003338                     u2765:
  3715  003338  90D8               	bcf	status,0,c
  3716  00333A  3207               	rrcf	(OpnUSART@spbrg+3)^0,f,c
  3717  00333C  3206               	rrcf	(OpnUSART@spbrg+2)^0,f,c
  3718  00333E  3205               	rrcf	(OpnUSART@spbrg+1)^0,f,c
  3719  003340  3204               	rrcf	OpnUSART@spbrg^0,f,c
  3720  003342  2E03               	decfsz	??_OpnUSART^0,f,c
  3721  003344  EF9C  F019         	goto	u2765
  3722  003348                     
  3723                           ;system.c: 33: spbrg -= 1;
  3724  003348  0604               	decf	OpnUSART@spbrg^0,f,c
  3725  00334A  0E00               	movlw	0
  3726  00334C  5A05               	subwfb	(OpnUSART@spbrg+1)^0,f,c
  3727  00334E  5A06               	subwfb	(OpnUSART@spbrg+2)^0,f,c
  3728  003350  5A07               	subwfb	(OpnUSART@spbrg+3)^0,f,c
  3729  003352                     
  3730                           ;system.c: 34: ClsUSART();
  3731  003352  ECB9  F01B         	call	_ClsUSART	;wreg free
  3732  003356                     
  3733                           ;system.c: 35: TRISBbits.TRISB7 = 0;
  3734  003356  9E93               	bcf	147,7,c	;volatile
  3735  003358                     
  3736                           ;system.c: 36: LATBbits.LATB7 = 0;
  3737  003358  9E8A               	bcf	138,7,c	;volatile
  3738  00335A                     
  3739                           ;system.c: 38: TXSTA = 0;
  3740  00335A  0E00               	movlw	0
  3741  00335C  6EAC               	movwf	172,c	;volatile
  3742  00335E                     
  3743                           ;system.c: 39: RCSTA = 0;
  3744  00335E  0E00               	movlw	0
  3745  003360  6EAB               	movwf	171,c	;volatile
  3746  003362                     
  3747                           ;system.c: 41: TRISCbits.TRISC6 = 0;
  3748  003362  9C94               	bcf	148,6,c	;volatile
  3749  003364                     
  3750                           ;system.c: 42: TRISCbits.TRISC7 = 1;
  3751  003364  8E94               	bsf	148,7,c	;volatile
  3752  003366                     
  3753                           ;system.c: 44: TXSTAbits.SYNC = 0;
  3754  003366  98AC               	bcf	172,4,c	;volatile
  3755  003368                     
  3756                           ;system.c: 45: TXSTAbits.TX9 = 0;
  3757  003368  9CAC               	bcf	172,6,c	;volatile
  3758  00336A                     
  3759                           ;system.c: 46: TXSTAbits.SENDB = 0;
  3760  00336A  96AC               	bcf	172,3,c	;volatile
  3761  00336C                     
  3762                           ;system.c: 47: TXSTAbits.BRGH = 0;
  3763  00336C  94AC               	bcf	172,2,c	;volatile
  3764  00336E                     
  3765                           ;system.c: 49: RCSTAbits.CREN = 1;
  3766  00336E  88AB               	bsf	171,4,c	;volatile
  3767  003370                     
  3768                           ;system.c: 50: RCSTAbits.RX9 = 0;
  3769  003370  9CAB               	bcf	171,6,c	;volatile
  3770  003372                     
  3771                           ;system.c: 52: PIE1bits.RCIE = 1;
  3772  003372  8A9D               	bsf	157,5,c	;volatile
  3773  003374                     
  3774                           ;system.c: 53: PIE1bits.TXIE = 0;
  3775  003374  989D               	bcf	157,4,c	;volatile
  3776  003376                     
  3777                           ;system.c: 55: BAUDCONbits.BRG16 = 0;
  3778  003376  96B8               	bcf	184,3,c	;volatile
  3779  003378                     
  3780                           ;system.c: 56: SPBRG = spbrg;
  3781  003378  C004  FFAF         	movff	OpnUSART@spbrg,4015	;volatile
  3782  00337C                     
  3783                           ;system.c: 58: TXSTAbits.TXEN = 1;
  3784  00337C  8AAC               	bsf	172,5,c	;volatile
  3785  00337E                     
  3786                           ;system.c: 59: RCSTAbits.SPEN = 1;
  3787  00337E  8EAB               	bsf	171,7,c	;volatile
  3788  003380  0012               	return		;funcret
  3789  003382                     __end_of_OpnUSART:
  3790                           	callstack 0
  3791                           
  3792 ;; *************** function _ClsUSART *****************
  3793 ;; Defined at:
  3794 ;;		line 62 in file "system.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;		None
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  1    wreg      void 
  3801 ;; Registers used:
  3802 ;;		wreg, status,2, status,0
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3808 ;;      Params:         0       0       0       0       0       0       0
  3809 ;;      Locals:         0       0       0       0       0       0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0
  3811 ;;      Totals:         0       0       0       0       0       0       0
  3812 ;;Total ram usage:        0 bytes
  3813 ;; Hardware stack levels used: 1
  3814 ;; Hardware stack levels required when called: 2
  3815 ;; This function calls:
  3816 ;;		Nothing
  3817 ;; This function is called by:
  3818 ;;		_clearResponse
  3819 ;;		_OpnUSART
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text11
  3824  003772                     __ptext11:
  3825                           	callstack 0
  3826  003772                     _ClsUSART:
  3827                           	callstack 24
  3828  003772                     
  3829                           ;system.c: 65: RCSTA &= 0b01001111;
  3830  003772  0E4F               	movlw	79
  3831  003774  16AB               	andwf	171,f,c	;volatile
  3832  003776                     
  3833                           ;system.c: 66: TXSTAbits.TXEN = 0;
  3834  003776  9AAC               	bcf	172,5,c	;volatile
  3835                           
  3836                           ;system.c: 67: PIE1 &= 0b11001111;
  3837  003778  0ECF               	movlw	207
  3838  00377A  169D               	andwf	157,f,c	;volatile
  3839  00377C  0012               	return		;funcret
  3840  00377E                     __end_of_ClsUSART:
  3841                           	callstack 0
  3842                           
  3843 ;; *************** function _checkCRC *****************
  3844 ;; Defined at:
  3845 ;;		line 487 in file "modbus.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;		None
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;  i               2   15[COMRAM] int 
  3850 ;;  crc             2   13[COMRAM] unsigned int 
  3851 ;;  j               2   11[COMRAM] int 
  3852 ;;  crcLow          2    9[COMRAM] unsigned int 
  3853 ;;  crcHigh         2    7[COMRAM] unsigned int 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      unsigned char 
  3856 ;; Registers used:
  3857 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3863 ;;      Params:         0       0       0       0       0       0       0
  3864 ;;      Locals:        10       0       0       0       0       0       0
  3865 ;;      Temps:          5       0       0       0       0       0       0
  3866 ;;      Totals:        15       0       0       0       0       0       0
  3867 ;;Total ram usage:       15 bytes
  3868 ;; Hardware stack levels used: 1
  3869 ;; Hardware stack levels required when called: 2
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_decodeIt
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text12
  3878  00224E                     __ptext12:
  3879                           	callstack 0
  3880  00224E                     _checkCRC:
  3881                           	callstack 27
  3882  00224E                     
  3883                           ;modbus.c: 489: unsigned int crc = 0xFFFF;
  3884  00224E  680E               	setf	checkCRC@crc^0,c
  3885  002250  680F               	setf	(checkCRC@crc+1)^0,c
  3886  002252                     
  3887                           ;modbus.c: 491: unsigned int crcLow = 0;
  3888  002252  0E00               	movlw	0
  3889  002254  6E0B               	movwf	(checkCRC@crcLow+1)^0,c
  3890  002256  0E00               	movlw	0
  3891  002258  6E0A               	movwf	checkCRC@crcLow^0,c
  3892                           
  3893                           ;modbus.c: 492: int i,j = 0;
  3894  00225A  0E00               	movlw	0
  3895  00225C  6E0D               	movwf	(checkCRC@j+1)^0,c
  3896  00225E  0E00               	movlw	0
  3897  002260  6E0C               	movwf	checkCRC@j^0,c
  3898                           
  3899                           ;modbus.c: 494: for(i=0;i<messageLength-2;i++){
  3900  002262  0E00               	movlw	0
  3901  002264  6E11               	movwf	(checkCRC@i+1)^0,c
  3902  002266  0E00               	movlw	0
  3903  002268  6E10               	movwf	checkCRC@i^0,c
  3904  00226A  EF66  F011         	goto	l3936
  3905  00226E                     l3918:
  3906                           
  3907                           ;modbus.c: 495: crc ^= received[i];
  3908  00226E  0E00               	movlw	low _received
  3909  002270  2410               	addwf	checkCRC@i^0,w,c
  3910  002272  6ED9               	movwf	fsr2l,c
  3911  002274  0E01               	movlw	high _received
  3912  002276  2011               	addwfc	(checkCRC@i+1)^0,w,c
  3913  002278  6EDA               	movwf	fsr2h,c
  3914  00227A  50DF               	movf	indf2,w,c
  3915  00227C  6E03               	movwf	??_checkCRC^0,c
  3916  00227E  5003               	movf	??_checkCRC^0,w,c
  3917  002280  1A0E               	xorwf	checkCRC@crc^0,f,c
  3918  002282                     
  3919                           ;modbus.c: 496: for(j=8; j!=0; j--){
  3920  002282  0E00               	movlw	0
  3921  002284  6E0D               	movwf	(checkCRC@j+1)^0,c
  3922  002286  0E08               	movlw	8
  3923  002288  6E0C               	movwf	checkCRC@j^0,c
  3924  00228A                     l529:
  3925                           
  3926                           ;modbus.c: 497: if((crc & 0x0001) != 0){
  3927  00228A  A00E               	btfss	checkCRC@crc^0,0,c
  3928  00228C  EF4A  F011         	goto	u3421
  3929  002290  EF4C  F011         	goto	u3420
  3930  002294                     u3421:
  3931  002294  EF55  F011         	goto	l3930
  3932  002298                     u3420:
  3933  002298                     
  3934                           ;modbus.c: 498: crc >>= 1;
  3935  002298  90D8               	bcf	status,0,c
  3936  00229A  320F               	rrcf	(checkCRC@crc+1)^0,f,c
  3937  00229C  320E               	rrcf	checkCRC@crc^0,f,c
  3938  00229E                     
  3939                           ;modbus.c: 499: crc ^= 0xA001;
  3940  00229E  0E01               	movlw	1
  3941  0022A0  1A0E               	xorwf	checkCRC@crc^0,f,c
  3942  0022A2  0EA0               	movlw	160
  3943  0022A4  1A0F               	xorwf	(checkCRC@crc+1)^0,f,c
  3944                           
  3945                           ;modbus.c: 500: }
  3946  0022A6  EF58  F011         	goto	l532
  3947  0022AA                     l3930:
  3948                           
  3949                           ;modbus.c: 501: else{;modbus.c: 502: crc >>= 1;
  3950  0022AA  90D8               	bcf	status,0,c
  3951  0022AC  320F               	rrcf	(checkCRC@crc+1)^0,f,c
  3952  0022AE  320E               	rrcf	checkCRC@crc^0,f,c
  3953  0022B0                     l532:
  3954  0022B0  060C               	decf	checkCRC@j^0,f,c
  3955  0022B2  A0D8               	btfss	status,0,c
  3956  0022B4  060D               	decf	(checkCRC@j+1)^0,f,c
  3957  0022B6  500C               	movf	checkCRC@j^0,w,c
  3958  0022B8  100D               	iorwf	(checkCRC@j+1)^0,w,c
  3959  0022BA  A4D8               	btfss	status,2,c
  3960  0022BC  EF62  F011         	goto	u3431
  3961  0022C0  EF64  F011         	goto	u3430
  3962  0022C4                     u3431:
  3963  0022C4  EF45  F011         	goto	l529
  3964  0022C8                     u3430:
  3965  0022C8  4A10               	infsnz	checkCRC@i^0,f,c
  3966  0022CA  2A11               	incf	(checkCRC@i+1)^0,f,c
  3967  0022CC                     l3936:
  3968  0022CC  0EFE               	movlw	254
  3969  0022CE  6E03               	movwf	??_checkCRC^0,c
  3970  0022D0  0EFF               	movlw	255
  3971  0022D2  6E04               	movwf	(??_checkCRC+1)^0,c
  3972  0022D4  505B               	movf	_messageLength^0,w,c	;volatile
  3973  0022D6  6E05               	movwf	(??_checkCRC+2)^0,c
  3974  0022D8  6A06               	clrf	(??_checkCRC+3)^0,c
  3975  0022DA  5003               	movf	??_checkCRC^0,w,c
  3976  0022DC  2605               	addwf	(??_checkCRC+2)^0,f,c
  3977  0022DE  5004               	movf	(??_checkCRC+1)^0,w,c
  3978  0022E0  2206               	addwfc	(??_checkCRC+3)^0,f,c
  3979  0022E2  5005               	movf	(??_checkCRC+2)^0,w,c
  3980  0022E4  5C10               	subwf	checkCRC@i^0,w,c
  3981  0022E6  5011               	movf	(checkCRC@i+1)^0,w,c
  3982  0022E8  0A80               	xorlw	128
  3983  0022EA  6E07               	movwf	(??_checkCRC+4)^0,c
  3984  0022EC  5006               	movf	(??_checkCRC+3)^0,w,c
  3985  0022EE  0A80               	xorlw	128
  3986  0022F0  5807               	subwfb	(??_checkCRC+4)^0,w,c
  3987  0022F2  A0D8               	btfss	status,0,c
  3988  0022F4  EF7E  F011         	goto	u3441
  3989  0022F8  EF80  F011         	goto	u3440
  3990  0022FC                     u3441:
  3991  0022FC  EF37  F011         	goto	l3918
  3992  002300                     u3440:
  3993  002300                     
  3994                           ;modbus.c: 503: };modbus.c: 504: };modbus.c: 505: };modbus.c: 507: crcHigh = (crc & 0x00
      +                          FF);
  3995  002300  500E               	movf	checkCRC@crc^0,w,c
  3996  002302  6E08               	movwf	checkCRC@crcHigh^0,c
  3997  002304  6A09               	clrf	(checkCRC@crcHigh+1)^0,c
  3998                           
  3999                           ;modbus.c: 508: crcLow = (crc & 0xFF00) >>8;
  4000  002306  C00E  F003         	movff	checkCRC@crc,??_checkCRC
  4001  00230A  C00F  F004         	movff	checkCRC@crc+1,??_checkCRC+1
  4002  00230E  C004  F003         	movff	??_checkCRC+1,??_checkCRC
  4003  002312  6A04               	clrf	(??_checkCRC+1)^0,c
  4004  002314  5003               	movf	??_checkCRC^0,w,c
  4005  002316  6E0A               	movwf	checkCRC@crcLow^0,c
  4006  002318  6A0B               	clrf	(checkCRC@crcLow+1)^0,c
  4007  00231A                     
  4008                           ;modbus.c: 509: if((crcHigh == received[i])&&(crcLow == received[i+1]))
  4009  00231A  0E00               	movlw	low _received
  4010  00231C  2410               	addwf	checkCRC@i^0,w,c
  4011  00231E  6ED9               	movwf	fsr2l,c
  4012  002320  0E01               	movlw	high _received
  4013  002322  2011               	addwfc	(checkCRC@i+1)^0,w,c
  4014  002324  6EDA               	movwf	fsr2h,c
  4015  002326  50DF               	movf	indf2,w,c
  4016  002328  6E03               	movwf	??_checkCRC^0,c
  4017  00232A  6A04               	clrf	(??_checkCRC+1)^0,c
  4018  00232C  5008               	movf	checkCRC@crcHigh^0,w,c
  4019  00232E  1803               	xorwf	??_checkCRC^0,w,c
  4020  002330  E107               	bnz	u3451
  4021  002332  5009               	movf	(checkCRC@crcHigh+1)^0,w,c
  4022  002334  1804               	xorwf	(??_checkCRC+1)^0,w,c
  4023  002336  A4D8               	btfss	status,2,c
  4024  002338  EFA0  F011         	goto	u3451
  4025  00233C  EFA2  F011         	goto	u3450
  4026  002340                     u3451:
  4027  002340  EFBA  F011         	goto	l3950
  4028  002344                     u3450:
  4029  002344  0E01               	movlw	low (_received+1)
  4030  002346  2410               	addwf	checkCRC@i^0,w,c
  4031  002348  6ED9               	movwf	fsr2l,c
  4032  00234A  0E01               	movlw	high (_received+1)
  4033  00234C  2011               	addwfc	(checkCRC@i+1)^0,w,c
  4034  00234E  6EDA               	movwf	fsr2h,c
  4035  002350  50DF               	movf	indf2,w,c
  4036  002352  6E03               	movwf	??_checkCRC^0,c
  4037  002354  6A04               	clrf	(??_checkCRC+1)^0,c
  4038  002356  500A               	movf	checkCRC@crcLow^0,w,c
  4039  002358  1803               	xorwf	??_checkCRC^0,w,c
  4040  00235A  E107               	bnz	u3461
  4041  00235C  500B               	movf	(checkCRC@crcLow+1)^0,w,c
  4042  00235E  1804               	xorwf	(??_checkCRC+1)^0,w,c
  4043  002360  A4D8               	btfss	status,2,c
  4044  002362  EFB5  F011         	goto	u3461
  4045  002366  EFB7  F011         	goto	u3460
  4046  00236A                     u3461:
  4047  00236A  EFBA  F011         	goto	l3950
  4048  00236E                     u3460:
  4049  00236E                     
  4050                           ;modbus.c: 510: {;modbus.c: 511: return 1;
  4051  00236E  0E01               	movlw	1
  4052  002370  EFBB  F011         	goto	l535
  4053  002374                     l3950:
  4054                           
  4055                           ;modbus.c: 513: else{;modbus.c: 514: return 0;
  4056  002374  0E00               	movlw	0
  4057  002376                     l535:
  4058  002376  0012               	return		;funcret
  4059  002378                     __end_of_checkCRC:
  4060                           	callstack 0
  4061                           
  4062 ;; *************** function _adc_init *****************
  4063 ;; Defined at:
  4064 ;;		line 30 in file "adc.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;		None
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;		None
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  1    wreg      void 
  4071 ;; Registers used:
  4072 ;;		wreg, status,2
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4078 ;;      Params:         0       0       0       0       0       0       0
  4079 ;;      Locals:         0       0       0       0       0       0       0
  4080 ;;      Temps:          0       0       0       0       0       0       0
  4081 ;;      Totals:         0       0       0       0       0       0       0
  4082 ;;Total ram usage:        0 bytes
  4083 ;; Hardware stack levels used: 1
  4084 ;; Hardware stack levels required when called: 2
  4085 ;; This function calls:
  4086 ;;		Nothing
  4087 ;; This function is called by:
  4088 ;;		_main
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text13
  4093  003764                     __ptext13:
  4094                           	callstack 0
  4095  003764                     _adc_init:
  4096                           	callstack 28
  4097  003764                     
  4098                           ;adc.c: 36: ADCON0=0x01;
  4099  003764  0E01               	movlw	1
  4100  003766  6EC2               	movwf	194,c	;volatile
  4101                           
  4102                           ;adc.c: 37: ADCON1=0x0B;
  4103  003768  0E0B               	movlw	11
  4104  00376A  6EC1               	movwf	193,c	;volatile
  4105                           
  4106                           ;adc.c: 38: ADCON2=0x01;
  4107  00376C  0E01               	movlw	1
  4108  00376E  6EC0               	movwf	192,c	;volatile
  4109  003770  0012               	return		;funcret
  4110  003772                     __end_of_adc_init:
  4111                           	callstack 0
  4112                           
  4113 ;; *************** function _Write_Message *****************
  4114 ;; Defined at:
  4115 ;;		line 322 in file "main.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      void 
  4122 ;; Registers used:
  4123 ;;		wreg, status,2, status,0, cstack
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4129 ;;      Params:         0       0       0       0       0       0       0
  4130 ;;      Locals:         0       0       0       0       0       0       0
  4131 ;;      Temps:          0       0       0       0       0       0       0
  4132 ;;      Totals:         0       0       0       0       0       0       0
  4133 ;;Total ram usage:        0 bytes
  4134 ;; Hardware stack levels used: 1
  4135 ;; Hardware stack levels required when called: 3
  4136 ;; This function calls:
  4137 ;;		___fltol
  4138 ;; This function is called by:
  4139 ;;		_main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           	psect	text14
  4144  003532                     __ptext14:
  4145                           	callstack 0
  4146  003532                     _Write_Message:
  4147                           	callstack 27
  4148  003532                     
  4149                           ;main.c: 324: holdingReg[4] = tank1.level;
  4150  003532  C047  F003         	movff	_tank1,___fltol@f1	;volatile
  4151  003536  C048  F004         	movff	_tank1+1,___fltol@f1+1	;volatile
  4152  00353A  C049  F005         	movff	_tank1+2,___fltol@f1+2	;volatile
  4153  00353E  C04A  F006         	movff	_tank1+3,___fltol@f1+3	;volatile
  4154  003542  EC79  F014         	call	___fltol	;wreg free
  4155  003546  C003  F185         	movff	?___fltol,_holdingReg+8	;volatile
  4156  00354A  C004  F186         	movff	?___fltol+1,_holdingReg+9	;volatile
  4157                           
  4158                           ;main.c: 325: holdingReg[5] = tank2.level;
  4159  00354E  C03B  F003         	movff	_tank2,___fltol@f1	;volatile
  4160  003552  C03C  F004         	movff	_tank2+1,___fltol@f1+1	;volatile
  4161  003556  C03D  F005         	movff	_tank2+2,___fltol@f1+2	;volatile
  4162  00355A  C03E  F006         	movff	_tank2+3,___fltol@f1+3	;volatile
  4163  00355E  EC79  F014         	call	___fltol	;wreg free
  4164  003562  C003  F187         	movff	?___fltol,_holdingReg+10	;volatile
  4165  003566  C004  F188         	movff	?___fltol+1,_holdingReg+11	;volatile
  4166  00356A  0012               	return		;funcret
  4167  00356C                     __end_of_Write_Message:
  4168                           	callstack 0
  4169                           
  4170 ;; *************** function _Receive_Message *****************
  4171 ;; Defined at:
  4172 ;;		line 312 in file "main.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;		None
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      void 
  4179 ;; Registers used:
  4180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4186 ;;      Params:         0       0       0       0       0       0       0
  4187 ;;      Locals:         0       0       0       0       0       0       0
  4188 ;;      Temps:          0       0       0       0       0       0       0
  4189 ;;      Totals:         0       0       0       0       0       0       0
  4190 ;;Total ram usage:        0 bytes
  4191 ;; Hardware stack levels used: 1
  4192 ;; Hardware stack levels required when called: 3
  4193 ;; This function calls:
  4194 ;;		_ClearBit
  4195 ;;		_SetBit
  4196 ;;		___xxtofl
  4197 ;; This function is called by:
  4198 ;;		_main
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           	psect	text15
  4203  00308A                     __ptext15:
  4204                           	callstack 0
  4205  00308A                     _Receive_Message:
  4206                           	callstack 27
  4207  00308A                     
  4208                           ;main.c: 314: if (holdingReg[0] == 1) SetBit(&LATC, 0);
  4209  00308A  0101               	movlb	1	; () banked
  4210  00308C  057D               	decf	_holdingReg& (0+255),w,b	;volatile
  4211  00308E  117E               	iorwf	(_holdingReg+1)& (0+255),w,b	;volatile
  4212  003090  A4D8               	btfss	status,2,c
  4213  003092  EF4D  F018         	goto	u4241
  4214  003096  EF4F  F018         	goto	u4240
  4215  00309A                     u4241:
  4216  00309A  EF5B  F018         	goto	l4642
  4217  00309E                     u4240:
  4218  00309E                     
  4219                           ; BSR set to: 1
  4220  00309E  0E8B               	movlw	139
  4221  0030A0  6E03               	movwf	SetBit@port^0,c
  4222  0030A2  0E0F               	movlw	15
  4223  0030A4  6E04               	movwf	(SetBit@port+1)^0,c
  4224  0030A6  0E00               	movlw	0
  4225  0030A8  6E06               	movwf	(SetBit@pin+1)^0,c
  4226  0030AA  0E00               	movlw	0
  4227  0030AC  6E05               	movwf	SetBit@pin^0,c
  4228  0030AE  EC1B  F01B         	call	_SetBit	;wreg free
  4229  0030B2  EF65  F018         	goto	l4644
  4230  0030B6                     l4642:
  4231                           
  4232                           ; BSR set to: 1
  4233                           ;main.c: 315: else ClearBit(&LATC, 0);
  4234  0030B6  0E8B               	movlw	139
  4235  0030B8  6E03               	movwf	ClearBit@port^0,c
  4236  0030BA  0E0F               	movlw	15
  4237  0030BC  6E04               	movwf	(ClearBit@port+1)^0,c
  4238  0030BE  0E00               	movlw	0
  4239  0030C0  6E06               	movwf	(ClearBit@pin+1)^0,c
  4240  0030C2  0E00               	movlw	0
  4241  0030C4  6E05               	movwf	ClearBit@pin^0,c
  4242  0030C6  ECB6  F01A         	call	_ClearBit	;wreg free
  4243  0030CA                     l4644:
  4244                           
  4245                           ;main.c: 317: operation = holdingReg[1];
  4246  0030CA  C17F  F058         	movff	_holdingReg+2,_operation	;volatile
  4247  0030CE                     
  4248                           ;main.c: 318: tank1.min_level = holdingReg[2];
  4249  0030CE  C181  F003         	movff	_holdingReg+4,___xxtofl@val	;volatile
  4250  0030D2  C182  F004         	movff	_holdingReg+5,___xxtofl@val+1	;volatile
  4251  0030D6  6A05               	clrf	(___xxtofl@val+2)^0,c
  4252  0030D8  6A06               	clrf	(___xxtofl@val+3)^0,c
  4253  0030DA  0E00               	movlw	0
  4254  0030DC  EC16  F00E         	call	___xxtofl
  4255  0030E0  C003  F04B         	movff	?___xxtofl,_tank1+4	;volatile
  4256  0030E4  C004  F04C         	movff	?___xxtofl+1,_tank1+5	;volatile
  4257  0030E8  C005  F04D         	movff	?___xxtofl+2,_tank1+6	;volatile
  4258  0030EC  C006  F04E         	movff	?___xxtofl+3,_tank1+7	;volatile
  4259  0030F0                     
  4260                           ;main.c: 319: tank2.min_level = holdingReg[3];
  4261  0030F0  C183  F003         	movff	_holdingReg+6,___xxtofl@val	;volatile
  4262  0030F4  C184  F004         	movff	_holdingReg+7,___xxtofl@val+1	;volatile
  4263  0030F8  6A05               	clrf	(___xxtofl@val+2)^0,c
  4264  0030FA  6A06               	clrf	(___xxtofl@val+3)^0,c
  4265  0030FC  0E00               	movlw	0
  4266  0030FE  EC16  F00E         	call	___xxtofl
  4267  003102  C003  F03F         	movff	?___xxtofl,_tank2+4	;volatile
  4268  003106  C004  F040         	movff	?___xxtofl+1,_tank2+5	;volatile
  4269  00310A  C005  F041         	movff	?___xxtofl+2,_tank2+6	;volatile
  4270  00310E  C006  F042         	movff	?___xxtofl+3,_tank2+7	;volatile
  4271  003112  0012               	return		;funcret
  4272  003114                     __end_of_Receive_Message:
  4273                           	callstack 0
  4274                           
  4275 ;; *************** function _Read_Level *****************
  4276 ;; Defined at:
  4277 ;;		line 303 in file "main.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  adcTank2        2   43[COMRAM] int 
  4282 ;;  adcTank1        2   41[COMRAM] int 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2, status,0, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4292 ;;      Params:         0       0       0       0       0       0       0
  4293 ;;      Locals:         4       0       0       0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0
  4295 ;;      Totals:         4       0       0       0       0       0       0
  4296 ;;Total ram usage:        4 bytes
  4297 ;; Hardware stack levels used: 1
  4298 ;; Hardware stack levels required when called: 3
  4299 ;; This function calls:
  4300 ;;		___fldiv
  4301 ;;		___xxtofl
  4302 ;;		_adc_amostra
  4303 ;; This function is called by:
  4304 ;;		_main
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text16
  4309  002FD4                     __ptext16:
  4310                           	callstack 0
  4311  002FD4                     _Read_Level:
  4312                           	callstack 27
  4313  002FD4                     
  4314                           ;main.c: 305: int adcTank1 = adc_amostra(0);
  4315  002FD4  0E00               	movlw	0
  4316  002FD6  EC12  F019         	call	_adc_amostra
  4317  002FDA  C003  F02A         	movff	?_adc_amostra,Read_Level@adcTank1
  4318  002FDE  C004  F02B         	movff	?_adc_amostra+1,Read_Level@adcTank1+1
  4319                           
  4320                           ;main.c: 306: int adcTank2 = adc_amostra(1);
  4321  002FE2  0E01               	movlw	1
  4322  002FE4  EC12  F019         	call	_adc_amostra
  4323  002FE8  C003  F02C         	movff	?_adc_amostra,Read_Level@adcTank2
  4324  002FEC  C004  F02D         	movff	?_adc_amostra+1,Read_Level@adcTank2+1
  4325                           
  4326                           ;main.c: 308: tank1.level = (adcTank1 / 10.23);
  4327  002FF0  C02A  F003         	movff	Read_Level@adcTank1,___xxtofl@val
  4328  002FF4  C02B  F004         	movff	Read_Level@adcTank1+1,___xxtofl@val+1
  4329  002FF8  0E00               	movlw	0
  4330  002FFA  BE04               	btfsc	(___xxtofl@val+1)^0,7,c
  4331  002FFC  0EFF               	movlw	-1
  4332  002FFE  6E05               	movwf	(___xxtofl@val+2)^0,c
  4333  003000  6E06               	movwf	(___xxtofl@val+3)^0,c
  4334  003002  0E01               	movlw	1
  4335  003004  EC16  F00E         	call	___xxtofl
  4336  003008  C003  F011         	movff	?___xxtofl,___fldiv@b
  4337  00300C  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  4338  003010  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  4339  003014  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  4340  003018  0E14               	movlw	20
  4341  00301A  6E15               	movwf	___fldiv@a^0,c
  4342  00301C  0EAE               	movlw	174
  4343  00301E  6E16               	movwf	(___fldiv@a+1)^0,c
  4344  003020  0E23               	movlw	35
  4345  003022  6E17               	movwf	(___fldiv@a+2)^0,c
  4346  003024  0E41               	movlw	65
  4347  003026  6E18               	movwf	(___fldiv@a+3)^0,c
  4348  003028  EC59  F008         	call	___fldiv	;wreg free
  4349  00302C  C011  F047         	movff	?___fldiv,_tank1	;volatile
  4350  003030  C012  F048         	movff	?___fldiv+1,_tank1+1	;volatile
  4351  003034  C013  F049         	movff	?___fldiv+2,_tank1+2	;volatile
  4352  003038  C014  F04A         	movff	?___fldiv+3,_tank1+3	;volatile
  4353                           
  4354                           ;main.c: 309: tank2.level = (adcTank2 / 10.23);
  4355  00303C  C02C  F003         	movff	Read_Level@adcTank2,___xxtofl@val
  4356  003040  C02D  F004         	movff	Read_Level@adcTank2+1,___xxtofl@val+1
  4357  003044  0E00               	movlw	0
  4358  003046  BE04               	btfsc	(___xxtofl@val+1)^0,7,c
  4359  003048  0EFF               	movlw	-1
  4360  00304A  6E05               	movwf	(___xxtofl@val+2)^0,c
  4361  00304C  6E06               	movwf	(___xxtofl@val+3)^0,c
  4362  00304E  0E01               	movlw	1
  4363  003050  EC16  F00E         	call	___xxtofl
  4364  003054  C003  F011         	movff	?___xxtofl,___fldiv@b
  4365  003058  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  4366  00305C  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  4367  003060  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  4368  003064  0E14               	movlw	20
  4369  003066  6E15               	movwf	___fldiv@a^0,c
  4370  003068  0EAE               	movlw	174
  4371  00306A  6E16               	movwf	(___fldiv@a+1)^0,c
  4372  00306C  0E23               	movlw	35
  4373  00306E  6E17               	movwf	(___fldiv@a+2)^0,c
  4374  003070  0E41               	movlw	65
  4375  003072  6E18               	movwf	(___fldiv@a+3)^0,c
  4376  003074  EC59  F008         	call	___fldiv	;wreg free
  4377  003078  C011  F03B         	movff	?___fldiv,_tank2	;volatile
  4378  00307C  C012  F03C         	movff	?___fldiv+1,_tank2+1	;volatile
  4379  003080  C013  F03D         	movff	?___fldiv+2,_tank2+2	;volatile
  4380  003084  C014  F03E         	movff	?___fldiv+3,_tank2+3	;volatile
  4381  003088  0012               	return		;funcret
  4382  00308A                     __end_of_Read_Level:
  4383                           	callstack 0
  4384                           
  4385 ;; *************** function _adc_amostra *****************
  4386 ;; Defined at:
  4387 ;;		line 44 in file "adc.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  canal           1    wreg     unsigned char 
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  canal           1    8[COMRAM] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  2    2[COMRAM] unsigned int 
  4394 ;; Registers used:
  4395 ;;		wreg, status,2, status,0
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4401 ;;      Params:         2       0       0       0       0       0       0
  4402 ;;      Locals:         1       0       0       0       0       0       0
  4403 ;;      Temps:          4       0       0       0       0       0       0
  4404 ;;      Totals:         7       0       0       0       0       0       0
  4405 ;;Total ram usage:        7 bytes
  4406 ;; Hardware stack levels used: 1
  4407 ;; Hardware stack levels required when called: 2
  4408 ;; This function calls:
  4409 ;;		Nothing
  4410 ;; This function is called by:
  4411 ;;		_Read_Level
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text17
  4416  003224                     __ptext17:
  4417                           	callstack 0
  4418  003224                     _adc_amostra:
  4419                           	callstack 27
  4420                           
  4421                           ;incstack = 0
  4422                           ;adc_amostra@canal stored from wreg
  4423  003224  6E09               	movwf	adc_amostra@canal^0,c
  4424  003226                     
  4425                           ;adc.c: 62: switch(canal)
  4426  003226  EF21  F019         	goto	l3908
  4427  00322A                     l3900:
  4428                           
  4429                           ;adc.c: 65: ADCON0=0x01;
  4430  00322A  0E01               	movlw	1
  4431  00322C  6EC2               	movwf	194,c	;volatile
  4432                           
  4433                           ;adc.c: 66: break;
  4434  00322E  EF30  F019         	goto	l342
  4435  003232                     l3902:
  4436                           
  4437                           ;adc.c: 68: ADCON0=0x09;
  4438  003232  0E09               	movlw	9
  4439  003234  6EC2               	movwf	194,c	;volatile
  4440                           
  4441                           ;adc.c: 69: break;
  4442  003236  EF30  F019         	goto	l342
  4443  00323A                     l3904:
  4444                           
  4445                           ;adc.c: 71: ADCON0=0x11;
  4446  00323A  0E11               	movlw	17
  4447  00323C  6EC2               	movwf	194,c	;volatile
  4448                           
  4449                           ;adc.c: 72: break;
  4450  00323E  EF30  F019         	goto	l342
  4451  003242                     l3908:
  4452  003242  5009               	movf	adc_amostra@canal^0,w,c
  4453                           
  4454                           ; Switch size 1, requested type "simple"
  4455                           ; Number of cases is 3, Range of values is 0 to 2
  4456                           ; switch strategies available:
  4457                           ; Name         Instructions Cycles
  4458                           ; simple_byte           10     6 (average)
  4459                           ;	Chosen strategy is simple_byte
  4460  003244  0A00               	xorlw	0	; case 0
  4461  003246  B4D8               	btfsc	status,2,c
  4462  003248  EF15  F019         	goto	l3900
  4463  00324C  0A01               	xorlw	1	; case 1
  4464  00324E  B4D8               	btfsc	status,2,c
  4465  003250  EF19  F019         	goto	l3902
  4466  003254  0A03               	xorlw	3	; case 2
  4467  003256  B4D8               	btfsc	status,2,c
  4468  003258  EF1D  F019         	goto	l3904
  4469  00325C  EF30  F019         	goto	l342
  4470  003260                     l342:
  4471                           
  4472                           ;adc.c: 77: ADCON0bits.GO=1;
  4473  003260  82C2               	bsf	194,1,c	;volatile
  4474  003262                     l345:
  4475  003262  B2C2               	btfsc	194,1,c	;volatile
  4476  003264  EF36  F019         	goto	u3401
  4477  003268  EF38  F019         	goto	u3400
  4478  00326C                     u3401:
  4479  00326C  EF31  F019         	goto	l345
  4480  003270                     u3400:
  4481  003270                     
  4482                           ;adc.c: 80: return ((((unsigned int)ADRESH)<<2)|(ADRESL>>6));
  4483  003270  CFC3 F005          	movff	4035,??_adc_amostra	;volatile
  4484  003274  0E06               	movlw	6
  4485  003276  6E06               	movwf	(??_adc_amostra+1)^0,c
  4486  003278                     u3415:
  4487  003278  90D8               	bcf	status,0,c
  4488  00327A  3205               	rrcf	??_adc_amostra^0,f,c
  4489  00327C  2E06               	decfsz	(??_adc_amostra+1)^0,f,c
  4490  00327E  EF3C  F019         	goto	u3415
  4491  003282  5005               	movf	??_adc_amostra^0,w,c
  4492  003284  CFC4 F007          	movff	4036,??_adc_amostra+2	;volatile
  4493  003288  6A08               	clrf	(??_adc_amostra+3)^0,c
  4494  00328A  90D8               	bcf	status,0,c
  4495  00328C  3607               	rlcf	(??_adc_amostra+2)^0,f,c
  4496  00328E  3608               	rlcf	(??_adc_amostra+3)^0,f,c
  4497  003290  90D8               	bcf	status,0,c
  4498  003292  3607               	rlcf	(??_adc_amostra+2)^0,f,c
  4499  003294  3608               	rlcf	(??_adc_amostra+3)^0,f,c
  4500  003296  1007               	iorwf	(??_adc_amostra+2)^0,w,c
  4501  003298  6E03               	movwf	?_adc_amostra^0,c
  4502  00329A  5008               	movf	(??_adc_amostra+3)^0,w,c
  4503  00329C  6E04               	movwf	(?_adc_amostra+1)^0,c
  4504  00329E  0012               	return		;funcret
  4505  0032A0                     __end_of_adc_amostra:
  4506                           	callstack 0
  4507                           
  4508 ;; *************** function ___xxtofl *****************
  4509 ;; Defined at:
  4510 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\xxtofl.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  sign            1    wreg     unsigned char 
  4513 ;;  val             4    2[COMRAM] long 
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;  sign            1   10[COMRAM] unsigned char 
  4516 ;;  arg             4   12[COMRAM] unsigned long 
  4517 ;;  exp             1   11[COMRAM] unsigned char 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  4    2[COMRAM] unsigned char 
  4520 ;; Registers used:
  4521 ;;		wreg, status,2, status,0
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4527 ;;      Params:         4       0       0       0       0       0       0
  4528 ;;      Locals:         6       0       0       0       0       0       0
  4529 ;;      Temps:          4       0       0       0       0       0       0
  4530 ;;      Totals:        14       0       0       0       0       0       0
  4531 ;;Total ram usage:       14 bytes
  4532 ;; Hardware stack levels used: 1
  4533 ;; Hardware stack levels required when called: 2
  4534 ;; This function calls:
  4535 ;;		Nothing
  4536 ;; This function is called by:
  4537 ;;		_Min_Lv1_Incr
  4538 ;;		_Min_Lv2_Incr
  4539 ;;		_Read_Level
  4540 ;;		_Receive_Message
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           	psect	text18
  4545  001C2C                     __ptext18:
  4546                           	callstack 0
  4547  001C2C                     ___xxtofl:
  4548                           	callstack 27
  4549                           
  4550                           ;incstack = 0
  4551                           ;___xxtofl@sign stored from wreg
  4552  001C2C  6E0B               	movwf	___xxtofl@sign^0,c
  4553  001C2E  500B               	movf	___xxtofl@sign^0,w,c
  4554  001C30  B4D8               	btfsc	status,2,c
  4555  001C32  EF1D  F00E         	goto	u4051
  4556  001C36  EF1F  F00E         	goto	u4050
  4557  001C3A                     u4051:
  4558  001C3A  EF41  F00E         	goto	l1307
  4559  001C3E                     u4050:
  4560  001C3E  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  4561  001C40  EF26  F00E         	goto	u4060
  4562  001C44  EF24  F00E         	goto	u4061
  4563  001C48                     u4061:
  4564  001C48  EF41  F00E         	goto	l1307
  4565  001C4C                     u4060:
  4566  001C4C  C003  F007         	movff	___xxtofl@val,??___xxtofl
  4567  001C50  C004  F008         	movff	___xxtofl@val+1,??___xxtofl+1
  4568  001C54  C005  F009         	movff	___xxtofl@val+2,??___xxtofl+2
  4569  001C58  C006  F00A         	movff	___xxtofl@val+3,??___xxtofl+3
  4570  001C5C  1E07               	comf	??___xxtofl^0,f,c
  4571  001C5E  1E08               	comf	(??___xxtofl+1)^0,f,c
  4572  001C60  1E09               	comf	(??___xxtofl+2)^0,f,c
  4573  001C62  1E0A               	comf	(??___xxtofl+3)^0,f,c
  4574  001C64  2A07               	incf	??___xxtofl^0,f,c
  4575  001C66  0E00               	movlw	0
  4576  001C68  2208               	addwfc	(??___xxtofl+1)^0,f,c
  4577  001C6A  2209               	addwfc	(??___xxtofl+2)^0,f,c
  4578  001C6C  220A               	addwfc	(??___xxtofl+3)^0,f,c
  4579  001C6E  C007  F00D         	movff	??___xxtofl,___xxtofl@arg
  4580  001C72  C008  F00E         	movff	??___xxtofl+1,___xxtofl@arg+1
  4581  001C76  C009  F00F         	movff	??___xxtofl+2,___xxtofl@arg+2
  4582  001C7A  C00A  F010         	movff	??___xxtofl+3,___xxtofl@arg+3
  4583  001C7E  EF49  F00E         	goto	l4512
  4584  001C82                     l1307:
  4585  001C82  C003  F00D         	movff	___xxtofl@val,___xxtofl@arg
  4586  001C86  C004  F00E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4587  001C8A  C005  F00F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4588  001C8E  C006  F010         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4589  001C92                     l4512:
  4590  001C92  5003               	movf	___xxtofl@val^0,w,c
  4591  001C94  1004               	iorwf	(___xxtofl@val+1)^0,w,c
  4592  001C96  1005               	iorwf	(___xxtofl@val+2)^0,w,c
  4593  001C98  1006               	iorwf	(___xxtofl@val+3)^0,w,c
  4594  001C9A  A4D8               	btfss	status,2,c
  4595  001C9C  EF52  F00E         	goto	u4071
  4596  001CA0  EF54  F00E         	goto	u4070
  4597  001CA4                     u4071:
  4598  001CA4  EF5E  F00E         	goto	l4518
  4599  001CA8                     u4070:
  4600  001CA8  0E00               	movlw	0
  4601  001CAA  6E03               	movwf	?___xxtofl^0,c
  4602  001CAC  0E00               	movlw	0
  4603  001CAE  6E04               	movwf	(?___xxtofl+1)^0,c
  4604  001CB0  0E00               	movlw	0
  4605  001CB2  6E05               	movwf	(?___xxtofl+2)^0,c
  4606  001CB4  0E00               	movlw	0
  4607  001CB6  6E06               	movwf	(?___xxtofl+3)^0,c
  4608  001CB8  EFEF  F00E         	goto	l1310
  4609  001CBC                     l4518:
  4610  001CBC  0E96               	movlw	150
  4611  001CBE  6E0C               	movwf	___xxtofl@exp^0,c
  4612  001CC0  EF68  F00E         	goto	l4522
  4613  001CC4                     l4520:
  4614  001CC4  2A0C               	incf	___xxtofl@exp^0,f,c
  4615  001CC6  90D8               	bcf	status,0,c
  4616  001CC8  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  4617  001CCA  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  4618  001CCC  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  4619  001CCE  320D               	rrcf	___xxtofl@arg^0,f,c
  4620  001CD0                     l4522:
  4621  001CD0  0E00               	movlw	0
  4622  001CD2  140D               	andwf	___xxtofl@arg^0,w,c
  4623  001CD4  6E07               	movwf	??___xxtofl^0,c
  4624  001CD6  0E00               	movlw	0
  4625  001CD8  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  4626  001CDA  6E08               	movwf	(??___xxtofl+1)^0,c
  4627  001CDC  0E00               	movlw	0
  4628  001CDE  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  4629  001CE0  6E09               	movwf	(??___xxtofl+2)^0,c
  4630  001CE2  0EFE               	movlw	254
  4631  001CE4  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  4632  001CE6  6E0A               	movwf	(??___xxtofl+3)^0,c
  4633  001CE8  5007               	movf	??___xxtofl^0,w,c
  4634  001CEA  1008               	iorwf	(??___xxtofl+1)^0,w,c
  4635  001CEC  1009               	iorwf	(??___xxtofl+2)^0,w,c
  4636  001CEE  100A               	iorwf	(??___xxtofl+3)^0,w,c
  4637  001CF0  A4D8               	btfss	status,2,c
  4638  001CF2  EF7D  F00E         	goto	u4081
  4639  001CF6  EF7F  F00E         	goto	u4080
  4640  001CFA                     u4081:
  4641  001CFA  EF62  F00E         	goto	l4520
  4642  001CFE                     u4080:
  4643  001CFE  EF8D  F00E         	goto	l1314
  4644  001D02                     l4524:
  4645  001D02  2A0C               	incf	___xxtofl@exp^0,f,c
  4646  001D04  0E01               	movlw	1
  4647  001D06  260D               	addwf	___xxtofl@arg^0,f,c
  4648  001D08  0E00               	movlw	0
  4649  001D0A  220E               	addwfc	(___xxtofl@arg+1)^0,f,c
  4650  001D0C  220F               	addwfc	(___xxtofl@arg+2)^0,f,c
  4651  001D0E  2210               	addwfc	(___xxtofl@arg+3)^0,f,c
  4652  001D10  90D8               	bcf	status,0,c
  4653  001D12  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  4654  001D14  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  4655  001D16  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  4656  001D18  320D               	rrcf	___xxtofl@arg^0,f,c
  4657  001D1A                     l1314:
  4658  001D1A  0E00               	movlw	0
  4659  001D1C  140D               	andwf	___xxtofl@arg^0,w,c
  4660  001D1E  6E07               	movwf	??___xxtofl^0,c
  4661  001D20  0E00               	movlw	0
  4662  001D22  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  4663  001D24  6E08               	movwf	(??___xxtofl+1)^0,c
  4664  001D26  0E00               	movlw	0
  4665  001D28  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  4666  001D2A  6E09               	movwf	(??___xxtofl+2)^0,c
  4667  001D2C  0EFF               	movlw	255
  4668  001D2E  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  4669  001D30  6E0A               	movwf	(??___xxtofl+3)^0,c
  4670  001D32  5007               	movf	??___xxtofl^0,w,c
  4671  001D34  1008               	iorwf	(??___xxtofl+1)^0,w,c
  4672  001D36  1009               	iorwf	(??___xxtofl+2)^0,w,c
  4673  001D38  100A               	iorwf	(??___xxtofl+3)^0,w,c
  4674  001D3A  A4D8               	btfss	status,2,c
  4675  001D3C  EFA2  F00E         	goto	u4091
  4676  001D40  EFA4  F00E         	goto	u4090
  4677  001D44                     u4091:
  4678  001D44  EF81  F00E         	goto	l4524
  4679  001D48                     u4090:
  4680  001D48  EFAC  F00E         	goto	l4532
  4681  001D4C                     l4530:
  4682  001D4C  060C               	decf	___xxtofl@exp^0,f,c
  4683  001D4E  90D8               	bcf	status,0,c
  4684  001D50  360D               	rlcf	___xxtofl@arg^0,f,c
  4685  001D52  360E               	rlcf	(___xxtofl@arg+1)^0,f,c
  4686  001D54  360F               	rlcf	(___xxtofl@arg+2)^0,f,c
  4687  001D56  3610               	rlcf	(___xxtofl@arg+3)^0,f,c
  4688  001D58                     l4532:
  4689  001D58  BE0F               	btfsc	(___xxtofl@arg+2)^0,7,c
  4690  001D5A  EFB1  F00E         	goto	u4101
  4691  001D5E  EFB3  F00E         	goto	u4100
  4692  001D62                     u4101:
  4693  001D62  EFBB  F00E         	goto	l1321
  4694  001D66                     u4100:
  4695  001D66  0E02               	movlw	2
  4696  001D68  600C               	cpfslt	___xxtofl@exp^0,c
  4697  001D6A  EFB9  F00E         	goto	u4111
  4698  001D6E  EFBB  F00E         	goto	u4110
  4699  001D72                     u4111:
  4700  001D72  EFA6  F00E         	goto	l4530
  4701  001D76                     u4110:
  4702  001D76                     l1321:
  4703  001D76  B00C               	btfsc	___xxtofl@exp^0,0,c
  4704  001D78  EFC0  F00E         	goto	u4121
  4705  001D7C  EFC2  F00E         	goto	u4120
  4706  001D80                     u4121:
  4707  001D80  EFC3  F00E         	goto	l4538
  4708  001D84                     u4120:
  4709  001D84  9E0F               	bcf	(___xxtofl@arg+2)^0,7,c
  4710  001D86                     l4538:
  4711  001D86  90D8               	bcf	status,0,c
  4712  001D88  320C               	rrcf	___xxtofl@exp^0,f,c
  4713  001D8A  C00C  F007         	movff	___xxtofl@exp,??___xxtofl
  4714  001D8E  6A08               	clrf	(??___xxtofl+1)^0,c
  4715  001D90  6A09               	clrf	(??___xxtofl+2)^0,c
  4716  001D92  6A0A               	clrf	(??___xxtofl+3)^0,c
  4717  001D94  C007  F00A         	movff	??___xxtofl,??___xxtofl+3
  4718  001D98  6A09               	clrf	(??___xxtofl+2)^0,c
  4719  001D9A  6A08               	clrf	(??___xxtofl+1)^0,c
  4720  001D9C  6A07               	clrf	??___xxtofl^0,c
  4721  001D9E  5007               	movf	??___xxtofl^0,w,c
  4722  001DA0  120D               	iorwf	___xxtofl@arg^0,f,c
  4723  001DA2  5008               	movf	(??___xxtofl+1)^0,w,c
  4724  001DA4  120E               	iorwf	(___xxtofl@arg+1)^0,f,c
  4725  001DA6  5009               	movf	(??___xxtofl+2)^0,w,c
  4726  001DA8  120F               	iorwf	(___xxtofl@arg+2)^0,f,c
  4727  001DAA  500A               	movf	(??___xxtofl+3)^0,w,c
  4728  001DAC  1210               	iorwf	(___xxtofl@arg+3)^0,f,c
  4729  001DAE  500B               	movf	___xxtofl@sign^0,w,c
  4730  001DB0  B4D8               	btfsc	status,2,c
  4731  001DB2  EFDD  F00E         	goto	u4131
  4732  001DB6  EFDF  F00E         	goto	u4130
  4733  001DBA                     u4131:
  4734  001DBA  EFE7  F00E         	goto	l4548
  4735  001DBE                     u4130:
  4736  001DBE  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  4737  001DC0  EFE6  F00E         	goto	u4140
  4738  001DC4  EFE4  F00E         	goto	u4141
  4739  001DC8                     u4141:
  4740  001DC8  EFE7  F00E         	goto	l4548
  4741  001DCC                     u4140:
  4742  001DCC  8E10               	bsf	(___xxtofl@arg+3)^0,7,c
  4743  001DCE                     l4548:
  4744  001DCE  C00D  F003         	movff	___xxtofl@arg,?___xxtofl
  4745  001DD2  C00E  F004         	movff	___xxtofl@arg+1,?___xxtofl+1
  4746  001DD6  C00F  F005         	movff	___xxtofl@arg+2,?___xxtofl+2
  4747  001DDA  C010  F006         	movff	___xxtofl@arg+3,?___xxtofl+3
  4748  001DDE                     l1310:
  4749  001DDE  0012               	return		;funcret
  4750  001DE0                     __end_of___xxtofl:
  4751                           	callstack 0
  4752                           
  4753 ;; *************** function ___fldiv *****************
  4754 ;; Defined at:
  4755 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\sprcdiv.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  b               4   16[COMRAM] unsigned char 
  4758 ;;  a               4   20[COMRAM] unsigned char 
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;  grs             4   35[COMRAM] unsigned long 
  4761 ;;  rem             4   28[COMRAM] unsigned long 
  4762 ;;  new_exp         2   33[COMRAM] int 
  4763 ;;  aexp            1   40[COMRAM] unsigned char 
  4764 ;;  bexp            1   39[COMRAM] unsigned char 
  4765 ;;  sign            1   32[COMRAM] unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  4   16[COMRAM] unsigned char 
  4768 ;; Registers used:
  4769 ;;		wreg, status,2, status,0
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4775 ;;      Params:         8       0       0       0       0       0       0
  4776 ;;      Locals:        13       0       0       0       0       0       0
  4777 ;;      Temps:          4       0       0       0       0       0       0
  4778 ;;      Totals:        25       0       0       0       0       0       0
  4779 ;;Total ram usage:       25 bytes
  4780 ;; Hardware stack levels used: 1
  4781 ;; Hardware stack levels required when called: 2
  4782 ;; This function calls:
  4783 ;;		Nothing
  4784 ;; This function is called by:
  4785 ;;		_Read_Level
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text19
  4790  0010B2                     __ptext19:
  4791                           	callstack 0
  4792  0010B2                     ___fldiv:
  4793                           	callstack 27
  4794  0010B2  5014               	movf	(___fldiv@b+3)^0,w,c
  4795  0010B4  0B80               	andlw	128
  4796  0010B6  6E21               	movwf	___fldiv@sign^0,c
  4797  0010B8  5014               	movf	(___fldiv@b+3)^0,w,c
  4798  0010BA  2414               	addwf	(___fldiv@b+3)^0,w,c
  4799  0010BC  6E28               	movwf	___fldiv@bexp^0,c
  4800  0010BE  AE13               	btfss	(___fldiv@b+2)^0,7,c
  4801  0010C0  EF64  F008         	goto	u3821
  4802  0010C4  EF66  F008         	goto	u3820
  4803  0010C8                     u3821:
  4804  0010C8  EF67  F008         	goto	l4374
  4805  0010CC                     u3820:
  4806  0010CC  8028               	bsf	___fldiv@bexp^0,0,c
  4807  0010CE                     l4374:
  4808  0010CE  5028               	movf	___fldiv@bexp^0,w,c
  4809  0010D0  B4D8               	btfsc	status,2,c
  4810  0010D2  EF6D  F008         	goto	u3831
  4811  0010D6  EF6F  F008         	goto	u3830
  4812  0010DA                     u3831:
  4813  0010DA  EF84  F008         	goto	l4384
  4814  0010DE                     u3830:
  4815  0010DE  2828               	incf	___fldiv@bexp^0,w,c
  4816  0010E0  A4D8               	btfss	status,2,c
  4817  0010E2  EF75  F008         	goto	u3841
  4818  0010E6  EF77  F008         	goto	u3840
  4819  0010EA                     u3841:
  4820  0010EA  EF7F  F008         	goto	l4380
  4821  0010EE                     u3840:
  4822  0010EE  0E00               	movlw	0
  4823  0010F0  6E11               	movwf	___fldiv@b^0,c
  4824  0010F2  0E00               	movlw	0
  4825  0010F4  6E12               	movwf	(___fldiv@b+1)^0,c
  4826  0010F6  0E00               	movlw	0
  4827  0010F8  6E13               	movwf	(___fldiv@b+2)^0,c
  4828  0010FA  0E00               	movlw	0
  4829  0010FC  6E14               	movwf	(___fldiv@b+3)^0,c
  4830  0010FE                     l4380:
  4831  0010FE  8E13               	bsf	(___fldiv@b+2)^0,7,c
  4832  001100  0E00               	movlw	0
  4833  001102  6E14               	movwf	(___fldiv@b+3)^0,c
  4834  001104  EF8C  F008         	goto	l4386
  4835  001108                     l4384:
  4836  001108  0E00               	movlw	0
  4837  00110A  6E11               	movwf	___fldiv@b^0,c
  4838  00110C  0E00               	movlw	0
  4839  00110E  6E12               	movwf	(___fldiv@b+1)^0,c
  4840  001110  0E00               	movlw	0
  4841  001112  6E13               	movwf	(___fldiv@b+2)^0,c
  4842  001114  0E00               	movlw	0
  4843  001116  6E14               	movwf	(___fldiv@b+3)^0,c
  4844  001118                     l4386:
  4845  001118  5018               	movf	(___fldiv@a+3)^0,w,c
  4846  00111A  0B80               	andlw	128
  4847  00111C  1A21               	xorwf	___fldiv@sign^0,f,c
  4848  00111E  5018               	movf	(___fldiv@a+3)^0,w,c
  4849  001120  2418               	addwf	(___fldiv@a+3)^0,w,c
  4850  001122  6E29               	movwf	___fldiv@aexp^0,c
  4851  001124  AE17               	btfss	(___fldiv@a+2)^0,7,c
  4852  001126  EF97  F008         	goto	u3851
  4853  00112A  EF99  F008         	goto	u3850
  4854  00112E                     u3851:
  4855  00112E  EF9A  F008         	goto	l4394
  4856  001132                     u3850:
  4857  001132  8029               	bsf	___fldiv@aexp^0,0,c
  4858  001134                     l4394:
  4859  001134  5029               	movf	___fldiv@aexp^0,w,c
  4860  001136  B4D8               	btfsc	status,2,c
  4861  001138  EFA0  F008         	goto	u3861
  4862  00113C  EFA2  F008         	goto	u3860
  4863  001140                     u3861:
  4864  001140  EFB7  F008         	goto	l4404
  4865  001144                     u3860:
  4866  001144  2829               	incf	___fldiv@aexp^0,w,c
  4867  001146  A4D8               	btfss	status,2,c
  4868  001148  EFA8  F008         	goto	u3871
  4869  00114C  EFAA  F008         	goto	u3870
  4870  001150                     u3871:
  4871  001150  EFB2  F008         	goto	l4400
  4872  001154                     u3870:
  4873  001154  0E00               	movlw	0
  4874  001156  6E15               	movwf	___fldiv@a^0,c
  4875  001158  0E00               	movlw	0
  4876  00115A  6E16               	movwf	(___fldiv@a+1)^0,c
  4877  00115C  0E00               	movlw	0
  4878  00115E  6E17               	movwf	(___fldiv@a+2)^0,c
  4879  001160  0E00               	movlw	0
  4880  001162  6E18               	movwf	(___fldiv@a+3)^0,c
  4881  001164                     l4400:
  4882  001164  8E17               	bsf	(___fldiv@a+2)^0,7,c
  4883  001166  0E00               	movlw	0
  4884  001168  6E18               	movwf	(___fldiv@a+3)^0,c
  4885  00116A  EFBF  F008         	goto	l4406
  4886  00116E                     l4404:
  4887  00116E  0E00               	movlw	0
  4888  001170  6E15               	movwf	___fldiv@a^0,c
  4889  001172  0E00               	movlw	0
  4890  001174  6E16               	movwf	(___fldiv@a+1)^0,c
  4891  001176  0E00               	movlw	0
  4892  001178  6E17               	movwf	(___fldiv@a+2)^0,c
  4893  00117A  0E00               	movlw	0
  4894  00117C  6E18               	movwf	(___fldiv@a+3)^0,c
  4895  00117E                     l4406:
  4896  00117E  5015               	movf	___fldiv@a^0,w,c
  4897  001180  1016               	iorwf	(___fldiv@a+1)^0,w,c
  4898  001182  1017               	iorwf	(___fldiv@a+2)^0,w,c
  4899  001184  1018               	iorwf	(___fldiv@a+3)^0,w,c
  4900  001186  A4D8               	btfss	status,2,c
  4901  001188  EFC8  F008         	goto	u3881
  4902  00118C  EFCA  F008         	goto	u3880
  4903  001190                     u3881:
  4904  001190  EFE2  F008         	goto	l4418
  4905  001194                     u3880:
  4906  001194  0E00               	movlw	0
  4907  001196  6E11               	movwf	___fldiv@b^0,c
  4908  001198  0E00               	movlw	0
  4909  00119A  6E12               	movwf	(___fldiv@b+1)^0,c
  4910  00119C  0E00               	movlw	0
  4911  00119E  6E13               	movwf	(___fldiv@b+2)^0,c
  4912  0011A0  0E00               	movlw	0
  4913  0011A2  6E14               	movwf	(___fldiv@b+3)^0,c
  4914  0011A4  0E80               	movlw	128
  4915  0011A6  1213               	iorwf	(___fldiv@b+2)^0,f,c
  4916  0011A8  0E7F               	movlw	127
  4917  0011AA  1214               	iorwf	(___fldiv@b+3)^0,f,c
  4918  0011AC                     l4412:
  4919  0011AC  5021               	movf	___fldiv@sign^0,w,c
  4920  0011AE  1214               	iorwf	(___fldiv@b+3)^0,f,c
  4921  0011B0  C011  F011         	movff	___fldiv@b,?___fldiv
  4922  0011B4  C012  F012         	movff	___fldiv@b+1,?___fldiv+1
  4923  0011B8  C013  F013         	movff	___fldiv@b+2,?___fldiv+2
  4924  0011BC  C014  F014         	movff	___fldiv@b+3,?___fldiv+3
  4925  0011C0  EF25  F00A         	goto	l1234
  4926  0011C4                     l4418:
  4927  0011C4  5028               	movf	___fldiv@bexp^0,w,c
  4928  0011C6  A4D8               	btfss	status,2,c
  4929  0011C8  EFE8  F008         	goto	u3891
  4930  0011CC  EFEA  F008         	goto	u3890
  4931  0011D0                     u3891:
  4932  0011D0  EFF4  F008         	goto	l4426
  4933  0011D4                     u3890:
  4934  0011D4  0E00               	movlw	0
  4935  0011D6  6E11               	movwf	?___fldiv^0,c
  4936  0011D8  0E00               	movlw	0
  4937  0011DA  6E12               	movwf	(?___fldiv+1)^0,c
  4938  0011DC  0E00               	movlw	0
  4939  0011DE  6E13               	movwf	(?___fldiv+2)^0,c
  4940  0011E0  0E00               	movlw	0
  4941  0011E2  6E14               	movwf	(?___fldiv+3)^0,c
  4942  0011E4  EF25  F00A         	goto	l1234
  4943  0011E8                     l4426:
  4944  0011E8  5029               	movf	___fldiv@aexp^0,w,c
  4945  0011EA  C028  F019         	movff	___fldiv@bexp,??___fldiv
  4946  0011EE  6A1A               	clrf	(??___fldiv+1)^0,c
  4947  0011F0  5E19               	subwf	??___fldiv^0,f,c
  4948  0011F2  0E00               	movlw	0
  4949  0011F4  5A1A               	subwfb	(??___fldiv+1)^0,f,c
  4950  0011F6  0E7F               	movlw	127
  4951  0011F8  2419               	addwf	??___fldiv^0,w,c
  4952  0011FA  6E22               	movwf	___fldiv@new_exp^0,c
  4953  0011FC  0E00               	movlw	0
  4954  0011FE  201A               	addwfc	(??___fldiv+1)^0,w,c
  4955  001200  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  4956  001202  C011  F01D         	movff	___fldiv@b,___fldiv@rem
  4957  001206  C012  F01E         	movff	___fldiv@b+1,___fldiv@rem+1
  4958  00120A  C013  F01F         	movff	___fldiv@b+2,___fldiv@rem+2
  4959  00120E  C014  F020         	movff	___fldiv@b+3,___fldiv@rem+3
  4960  001212  0E00               	movlw	0
  4961  001214  6E11               	movwf	___fldiv@b^0,c
  4962  001216  0E00               	movlw	0
  4963  001218  6E12               	movwf	(___fldiv@b+1)^0,c
  4964  00121A  0E00               	movlw	0
  4965  00121C  6E13               	movwf	(___fldiv@b+2)^0,c
  4966  00121E  0E00               	movlw	0
  4967  001220  6E14               	movwf	(___fldiv@b+3)^0,c
  4968  001222  0E00               	movlw	0
  4969  001224  6E24               	movwf	___fldiv@grs^0,c
  4970  001226  0E00               	movlw	0
  4971  001228  6E25               	movwf	(___fldiv@grs+1)^0,c
  4972  00122A  0E00               	movlw	0
  4973  00122C  6E26               	movwf	(___fldiv@grs+2)^0,c
  4974  00122E  0E00               	movlw	0
  4975  001230  6E27               	movwf	(___fldiv@grs+3)^0,c
  4976  001232  0E00               	movlw	0
  4977  001234  6E29               	movwf	___fldiv@aexp^0,c
  4978  001236  EF55  F009         	goto	l1236
  4979  00123A                     l4436:
  4980  00123A  5029               	movf	___fldiv@aexp^0,w,c
  4981  00123C  B4D8               	btfsc	status,2,c
  4982  00123E  EF23  F009         	goto	u3901
  4983  001242  EF25  F009         	goto	u3900
  4984  001246                     u3901:
  4985  001246  EF3C  F009         	goto	l4444
  4986  00124A                     u3900:
  4987  00124A  90D8               	bcf	status,0,c
  4988  00124C  361D               	rlcf	___fldiv@rem^0,f,c
  4989  00124E  361E               	rlcf	(___fldiv@rem+1)^0,f,c
  4990  001250  361F               	rlcf	(___fldiv@rem+2)^0,f,c
  4991  001252  3620               	rlcf	(___fldiv@rem+3)^0,f,c
  4992  001254  90D8               	bcf	status,0,c
  4993  001256  3611               	rlcf	___fldiv@b^0,f,c
  4994  001258  3612               	rlcf	(___fldiv@b+1)^0,f,c
  4995  00125A  3613               	rlcf	(___fldiv@b+2)^0,f,c
  4996  00125C  3614               	rlcf	(___fldiv@b+3)^0,f,c
  4997  00125E  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  4998  001260  EF34  F009         	goto	u3911
  4999  001264  EF36  F009         	goto	u3910
  5000  001268                     u3911:
  5001  001268  EF37  F009         	goto	l1239
  5002  00126C                     u3910:
  5003  00126C  8011               	bsf	___fldiv@b^0,0,c
  5004  00126E                     l1239:
  5005  00126E  90D8               	bcf	status,0,c
  5006  001270  3624               	rlcf	___fldiv@grs^0,f,c
  5007  001272  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  5008  001274  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  5009  001276  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  5010  001278                     l4444:
  5011  001278  5015               	movf	___fldiv@a^0,w,c
  5012  00127A  5C1D               	subwf	___fldiv@rem^0,w,c
  5013  00127C  5016               	movf	(___fldiv@a+1)^0,w,c
  5014  00127E  581E               	subwfb	(___fldiv@rem+1)^0,w,c
  5015  001280  5017               	movf	(___fldiv@a+2)^0,w,c
  5016  001282  581F               	subwfb	(___fldiv@rem+2)^0,w,c
  5017  001284  5018               	movf	(___fldiv@a+3)^0,w,c
  5018  001286  5820               	subwfb	(___fldiv@rem+3)^0,w,c
  5019  001288  A0D8               	btfss	status,0,c
  5020  00128A  EF49  F009         	goto	u3921
  5021  00128E  EF4B  F009         	goto	u3920
  5022  001292                     u3921:
  5023  001292  EF54  F009         	goto	l4450
  5024  001296                     u3920:
  5025  001296  8C27               	bsf	(___fldiv@grs+3)^0,6,c
  5026  001298  5015               	movf	___fldiv@a^0,w,c
  5027  00129A  5E1D               	subwf	___fldiv@rem^0,f,c
  5028  00129C  5016               	movf	(___fldiv@a+1)^0,w,c
  5029  00129E  5A1E               	subwfb	(___fldiv@rem+1)^0,f,c
  5030  0012A0  5017               	movf	(___fldiv@a+2)^0,w,c
  5031  0012A2  5A1F               	subwfb	(___fldiv@rem+2)^0,f,c
  5032  0012A4  5018               	movf	(___fldiv@a+3)^0,w,c
  5033  0012A6  5A20               	subwfb	(___fldiv@rem+3)^0,f,c
  5034  0012A8                     l4450:
  5035  0012A8  2A29               	incf	___fldiv@aexp^0,f,c
  5036  0012AA                     l1236:
  5037  0012AA  0E19               	movlw	25
  5038  0012AC  6429               	cpfsgt	___fldiv@aexp^0,c
  5039  0012AE  EF5B  F009         	goto	u3931
  5040  0012B2  EF5D  F009         	goto	u3930
  5041  0012B6                     u3931:
  5042  0012B6  EF1D  F009         	goto	l4436
  5043  0012BA                     u3930:
  5044  0012BA  501D               	movf	___fldiv@rem^0,w,c
  5045  0012BC  101E               	iorwf	(___fldiv@rem+1)^0,w,c
  5046  0012BE  101F               	iorwf	(___fldiv@rem+2)^0,w,c
  5047  0012C0  1020               	iorwf	(___fldiv@rem+3)^0,w,c
  5048  0012C2  B4D8               	btfsc	status,2,c
  5049  0012C4  EF66  F009         	goto	u3941
  5050  0012C8  EF68  F009         	goto	u3940
  5051  0012CC                     u3941:
  5052  0012CC  EF80  F009         	goto	l4462
  5053  0012D0                     u3940:
  5054  0012D0  8024               	bsf	___fldiv@grs^0,0,c
  5055  0012D2  EF80  F009         	goto	l4462
  5056  0012D6                     l4456:
  5057  0012D6  90D8               	bcf	status,0,c
  5058  0012D8  3611               	rlcf	___fldiv@b^0,f,c
  5059  0012DA  3612               	rlcf	(___fldiv@b+1)^0,f,c
  5060  0012DC  3613               	rlcf	(___fldiv@b+2)^0,f,c
  5061  0012DE  3614               	rlcf	(___fldiv@b+3)^0,f,c
  5062  0012E0  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  5063  0012E2  EF75  F009         	goto	u3951
  5064  0012E6  EF77  F009         	goto	u3950
  5065  0012EA                     u3951:
  5066  0012EA  EF78  F009         	goto	l1245
  5067  0012EE                     u3950:
  5068  0012EE  8011               	bsf	___fldiv@b^0,0,c
  5069  0012F0                     l1245:
  5070  0012F0  90D8               	bcf	status,0,c
  5071  0012F2  3624               	rlcf	___fldiv@grs^0,f,c
  5072  0012F4  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  5073  0012F6  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  5074  0012F8  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  5075  0012FA  0622               	decf	___fldiv@new_exp^0,f,c
  5076  0012FC  A0D8               	btfss	status,0,c
  5077  0012FE  0623               	decf	(___fldiv@new_exp+1)^0,f,c
  5078  001300                     l4462:
  5079  001300  AE13               	btfss	(___fldiv@b+2)^0,7,c
  5080  001302  EF85  F009         	goto	u3961
  5081  001306  EF87  F009         	goto	u3960
  5082  00130A                     u3961:
  5083  00130A  EF6B  F009         	goto	l4456
  5084  00130E                     u3960:
  5085  00130E  0E00               	movlw	0
  5086  001310  6E29               	movwf	___fldiv@aexp^0,c
  5087  001312  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  5088  001314  EF8E  F009         	goto	u3971
  5089  001318  EF90  F009         	goto	u3970
  5090  00131C                     u3971:
  5091  00131C  EFB4  F009         	goto	l1247
  5092  001320                     u3970:
  5093  001320  0EFF               	movlw	255
  5094  001322  1424               	andwf	___fldiv@grs^0,w,c
  5095  001324  6E19               	movwf	??___fldiv^0,c
  5096  001326  0EFF               	movlw	255
  5097  001328  1425               	andwf	(___fldiv@grs+1)^0,w,c
  5098  00132A  6E1A               	movwf	(??___fldiv+1)^0,c
  5099  00132C  0EFF               	movlw	255
  5100  00132E  1426               	andwf	(___fldiv@grs+2)^0,w,c
  5101  001330  6E1B               	movwf	(??___fldiv+2)^0,c
  5102  001332  0E7F               	movlw	127
  5103  001334  1427               	andwf	(___fldiv@grs+3)^0,w,c
  5104  001336  6E1C               	movwf	(??___fldiv+3)^0,c
  5105  001338  5019               	movf	??___fldiv^0,w,c
  5106  00133A  101A               	iorwf	(??___fldiv+1)^0,w,c
  5107  00133C  101B               	iorwf	(??___fldiv+2)^0,w,c
  5108  00133E  101C               	iorwf	(??___fldiv+3)^0,w,c
  5109  001340  B4D8               	btfsc	status,2,c
  5110  001342  EFA5  F009         	goto	u3981
  5111  001346  EFA7  F009         	goto	u3980
  5112  00134A                     u3981:
  5113  00134A  EFAB  F009         	goto	l1248
  5114  00134E                     u3980:
  5115  00134E                     l4470:
  5116  00134E  0E01               	movlw	1
  5117  001350  6E29               	movwf	___fldiv@aexp^0,c
  5118  001352  EFB4  F009         	goto	l1247
  5119  001356                     l1248:
  5120  001356  A011               	btfss	___fldiv@b^0,0,c
  5121  001358  EFB0  F009         	goto	u3991
  5122  00135C  EFB2  F009         	goto	u3990
  5123  001360                     u3991:
  5124  001360  EFB4  F009         	goto	l1247
  5125  001364                     u3990:
  5126  001364  EFA7  F009         	goto	l4470
  5127  001368                     l1247:
  5128  001368  5029               	movf	___fldiv@aexp^0,w,c
  5129  00136A  B4D8               	btfsc	status,2,c
  5130  00136C  EFBA  F009         	goto	u4001
  5131  001370  EFBC  F009         	goto	u4000
  5132  001374                     u4001:
  5133  001374  EFE0  F009         	goto	l4482
  5134  001378                     u4000:
  5135  001378  0E01               	movlw	1
  5136  00137A  2611               	addwf	___fldiv@b^0,f,c
  5137  00137C  0E00               	movlw	0
  5138  00137E  2212               	addwfc	(___fldiv@b+1)^0,f,c
  5139  001380  2213               	addwfc	(___fldiv@b+2)^0,f,c
  5140  001382  2214               	addwfc	(___fldiv@b+3)^0,f,c
  5141  001384  A014               	btfss	(___fldiv@b+3)^0,0,c
  5142  001386  EFC7  F009         	goto	u4011
  5143  00138A  EFC9  F009         	goto	u4010
  5144  00138E                     u4011:
  5145  00138E  EFE0  F009         	goto	l4482
  5146  001392                     u4010:
  5147  001392  C011  F019         	movff	___fldiv@b,??___fldiv
  5148  001396  C012  F01A         	movff	___fldiv@b+1,??___fldiv+1
  5149  00139A  C013  F01B         	movff	___fldiv@b+2,??___fldiv+2
  5150  00139E  C014  F01C         	movff	___fldiv@b+3,??___fldiv+3
  5151  0013A2  341C               	rlcf	(??___fldiv+3)^0,w,c
  5152  0013A4  321C               	rrcf	(??___fldiv+3)^0,f,c
  5153  0013A6  321B               	rrcf	(??___fldiv+2)^0,f,c
  5154  0013A8  321A               	rrcf	(??___fldiv+1)^0,f,c
  5155  0013AA  3219               	rrcf	??___fldiv^0,f,c
  5156  0013AC  C019  F011         	movff	??___fldiv,___fldiv@b
  5157  0013B0  C01A  F012         	movff	??___fldiv+1,___fldiv@b+1
  5158  0013B4  C01B  F013         	movff	??___fldiv+2,___fldiv@b+2
  5159  0013B8  C01C  F014         	movff	??___fldiv+3,___fldiv@b+3
  5160  0013BC  4A22               	infsnz	___fldiv@new_exp^0,f,c
  5161  0013BE  2A23               	incf	(___fldiv@new_exp+1)^0,f,c
  5162  0013C0                     l4482:
  5163  0013C0  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5164  0013C2  EFEB  F009         	goto	u4021
  5165  0013C6  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  5166  0013C8  E108               	bnz	u4020
  5167  0013CA  2822               	incf	___fldiv@new_exp^0,w,c
  5168  0013CC  A0D8               	btfss	status,0,c
  5169  0013CE  EFEB  F009         	goto	u4021
  5170  0013D2  EFED  F009         	goto	u4020
  5171  0013D6                     u4021:
  5172  0013D6  EFF8  F009         	goto	l4486
  5173  0013DA                     u4020:
  5174  0013DA  0E00               	movlw	0
  5175  0013DC  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  5176  0013DE  6822               	setf	___fldiv@new_exp^0,c
  5177  0013E0  0E00               	movlw	0
  5178  0013E2  6E11               	movwf	___fldiv@b^0,c
  5179  0013E4  0E00               	movlw	0
  5180  0013E6  6E12               	movwf	(___fldiv@b+1)^0,c
  5181  0013E8  0E00               	movlw	0
  5182  0013EA  6E13               	movwf	(___fldiv@b+2)^0,c
  5183  0013EC  0E00               	movlw	0
  5184  0013EE  6E14               	movwf	(___fldiv@b+3)^0,c
  5185  0013F0                     l4486:
  5186  0013F0  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5187  0013F2  EF05  F00A         	goto	u4030
  5188  0013F6  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  5189  0013F8  E106               	bnz	u4031
  5190  0013FA  0422               	decf	___fldiv@new_exp^0,w,c
  5191  0013FC  B0D8               	btfsc	status,0,c
  5192  0013FE  EF03  F00A         	goto	u4031
  5193  001402  EF05  F00A         	goto	u4030
  5194  001406                     u4031:
  5195  001406  EF13  F00A         	goto	l4490
  5196  00140A                     u4030:
  5197  00140A  0E00               	movlw	0
  5198  00140C  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  5199  00140E  0E00               	movlw	0
  5200  001410  6E22               	movwf	___fldiv@new_exp^0,c
  5201  001412  0E00               	movlw	0
  5202  001414  6E11               	movwf	___fldiv@b^0,c
  5203  001416  0E00               	movlw	0
  5204  001418  6E12               	movwf	(___fldiv@b+1)^0,c
  5205  00141A  0E00               	movlw	0
  5206  00141C  6E13               	movwf	(___fldiv@b+2)^0,c
  5207  00141E  0E00               	movlw	0
  5208  001420  6E14               	movwf	(___fldiv@b+3)^0,c
  5209  001422  0E00               	movlw	0
  5210  001424  6E21               	movwf	___fldiv@sign^0,c
  5211  001426                     l4490:
  5212  001426  C022  F028         	movff	___fldiv@new_exp,___fldiv@bexp
  5213  00142A  A028               	btfss	___fldiv@bexp^0,0,c
  5214  00142C  EF1A  F00A         	goto	u4041
  5215  001430  EF1C  F00A         	goto	u4040
  5216  001434                     u4041:
  5217  001434  EF1F  F00A         	goto	l4496
  5218  001438                     u4040:
  5219  001438  8E13               	bsf	(___fldiv@b+2)^0,7,c
  5220  00143A  EF20  F00A         	goto	l4498
  5221  00143E                     l4496:
  5222  00143E  9E13               	bcf	(___fldiv@b+2)^0,7,c
  5223  001440                     l4498:
  5224  001440  90D8               	bcf	status,0,c
  5225  001442  3028               	rrcf	___fldiv@bexp^0,w,c
  5226  001444  6E14               	movwf	(___fldiv@b+3)^0,c
  5227  001446  EFD6  F008         	goto	l4412
  5228  00144A                     l1234:
  5229  00144A  0012               	return		;funcret
  5230  00144C                     __end_of___fldiv:
  5231                           	callstack 0
  5232                           
  5233 ;; *************** function _Manual_Mode *****************
  5234 ;; Defined at:
  5235 ;;		line 298 in file "main.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;		None
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;		None
  5240 ;; Return value:  Size  Location     Type
  5241 ;;                  1    wreg      void 
  5242 ;; Registers used:
  5243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5249 ;;      Params:         0       0       0       0       0       0       0
  5250 ;;      Locals:         0       0       0       0       0       0       0
  5251 ;;      Temps:          0       0       0       0       0       0       0
  5252 ;;      Totals:         0       0       0       0       0       0       0
  5253 ;;Total ram usage:        0 bytes
  5254 ;; Hardware stack levels used: 1
  5255 ;; Hardware stack levels required when called: 8
  5256 ;; This function calls:
  5257 ;;		_Debounce
  5258 ;; This function is called by:
  5259 ;;		_main
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text20
  5264  003666                     __ptext20:
  5265                           	callstack 0
  5266  003666                     _Manual_Mode:
  5267                           	callstack 22
  5268  003666                     
  5269                           ;main.c: 300: Debounce(PORTB, 1, &bt_on_off_pump_press, &filter_bt_on_off_pump, Tougle_P
      +                          ump);
  5270  003666  CF81 F02F          	movff	3969,Debounce@port	;volatile
  5271  00366A  6A30               	clrf	(Debounce@port+1)^0,c
  5272  00366C  0E00               	movlw	0
  5273  00366E  6E32               	movwf	(Debounce@pin+1)^0,c
  5274  003670  0E01               	movlw	1
  5275  003672  6E31               	movwf	Debounce@pin^0,c
  5276  003674  0E62               	movlw	low _bt_on_off_pump_press
  5277  003676  6E33               	movwf	Debounce@bt_press^0,c
  5278  003678  0E00               	movlw	high _bt_on_off_pump_press
  5279  00367A  6E34               	movwf	(Debounce@bt_press+1)^0,c
  5280  00367C  0E6C               	movlw	low _filter_bt_on_off_pump
  5281  00367E  6E35               	movwf	Debounce@filter^0,c
  5282  003680  0E00               	movlw	high _filter_bt_on_off_pump
  5283  003682  6E36               	movwf	(Debounce@filter+1)^0,c
  5284  003684  0E3C               	movlw	low _Tougle_Pump
  5285  003686  6E37               	movwf	Debounce@ptr_f^0,c
  5286  003688  0E37               	movlw	high _Tougle_Pump
  5287  00368A  6E38               	movwf	(Debounce@ptr_f+1)^0,c
  5288  00368C  ECD4  F016         	call	_Debounce	;wreg free
  5289  003690  0012               	return		;funcret
  5290  003692                     __end_of_Manual_Mode:
  5291                           	callstack 0
  5292                           
  5293 ;; *************** function _Debounce *****************
  5294 ;; Defined at:
  5295 ;;		line 3 in file "debounce.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;  port            2   46[COMRAM] unsigned int 
  5298 ;;  pin             2   48[COMRAM] unsigned int 
  5299 ;;  bt_press        2   50[COMRAM] PTR unsigned int 
  5300 ;;		 -> bt_on_off_pump_press(2), bt_min_lv2_incr_press(2), bt_min_lv1_incr_press(2), bt_operation_mode_press(2), 
  5301 ;;  filter          2   52[COMRAM] PTR unsigned int 
  5302 ;;		 -> filter_bt_on_off_pump(2), filter_bt_min_lv2_incr(2), filter_bt_min_lv1_incr(2), filter_bt_operation_mode(2), 
  5303 ;;  ptr_f           2   54[COMRAM] PTR FTN()void 
  5304 ;;		 -> Tougle_Pump(1), Min_Lv2_Incr(1), Min_Lv1_Incr(1), Change_Mode(1), 
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;		None
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  1    wreg      void 
  5309 ;; Registers used:
  5310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5316 ;;      Params:        10       0       0       0       0       0       0
  5317 ;;      Locals:         0       0       0       0       0       0       0
  5318 ;;      Temps:          2       0       0       0       0       0       0
  5319 ;;      Totals:        12       0       0       0       0       0       0
  5320 ;;Total ram usage:       12 bytes
  5321 ;; Hardware stack levels used: 1
  5322 ;; Hardware stack levels required when called: 7
  5323 ;; This function calls:
  5324 ;;		_Change_Mode
  5325 ;;		_CheckBit
  5326 ;;		_Min_Lv1_Incr
  5327 ;;		_Min_Lv2_Incr
  5328 ;;		_Tougle_Pump
  5329 ;; This function is called by:
  5330 ;;		_main
  5331 ;;		_Manual_Mode
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           	psect	text21
  5336  002DA8                     __ptext21:
  5337                           	callstack 0
  5338  002DA8                     _Debounce:
  5339                           	callstack 22
  5340  002DA8                     
  5341                           ;debounce.c: 5: if (!CheckBit(port, pin))
  5342  002DA8  C02F  F003         	movff	Debounce@port,CheckBit@port
  5343  002DAC  C030  F004         	movff	Debounce@port+1,CheckBit@port+1
  5344  002DB0  C031  F005         	movff	Debounce@pin,CheckBit@pin
  5345  002DB4  C032  F006         	movff	Debounce@pin+1,CheckBit@pin+1
  5346  002DB8  EC49  F01B         	call	_CheckBit	;wreg free
  5347  002DBC  5003               	movf	?_CheckBit^0,w,c
  5348  002DBE  1004               	iorwf	(?_CheckBit+1)^0,w,c
  5349  002DC0  A4D8               	btfss	status,2,c
  5350  002DC2  EFE5  F016         	goto	u3351
  5351  002DC6  EFE7  F016         	goto	u3350
  5352  002DCA                     u3351:
  5353  002DCA  EF21  F017         	goto	l3894
  5354  002DCE                     u3350:
  5355  002DCE                     
  5356                           ;debounce.c: 6: {;debounce.c: 8: if (!(*bt_press))
  5357  002DCE  C033  FFD9         	movff	Debounce@bt_press,fsr2l
  5358  002DD2  C034  FFDA         	movff	Debounce@bt_press+1,fsr2h
  5359  002DD6  50DE               	movf	postinc2,w,c
  5360  002DD8  10DE               	iorwf	postinc2,w,c
  5361  002DDA  A4D8               	btfss	status,2,c
  5362  002DDC  EFF2  F016         	goto	u3361
  5363  002DE0  EFF4  F016         	goto	u3360
  5364  002DE4                     u3361:
  5365  002DE4  EF31  F017         	goto	l322
  5366  002DE8                     u3360:
  5367  002DE8                     
  5368                           ;debounce.c: 9: {;debounce.c: 10: if (*filter > 0)
  5369  002DE8  C035  FFD9         	movff	Debounce@filter,fsr2l
  5370  002DEC  C036  FFDA         	movff	Debounce@filter+1,fsr2h
  5371  002DF0  50DE               	movf	postinc2,w,c
  5372  002DF2  10DE               	iorwf	postinc2,w,c
  5373  002DF4  B4D8               	btfsc	status,2,c
  5374  002DF6  EFFF  F016         	goto	u3371
  5375  002DFA  EF01  F017         	goto	u3370
  5376  002DFE                     u3371:
  5377  002DFE  EF0A  F017         	goto	l3890
  5378  002E02                     u3370:
  5379  002E02                     
  5380                           ;debounce.c: 11: {;debounce.c: 12: (*filter)--;
  5381  002E02  C035  FFD9         	movff	Debounce@filter,fsr2l
  5382  002E06  C036  FFDA         	movff	Debounce@filter+1,fsr2h
  5383  002E0A  06DE               	decf	postinc2,f,c
  5384  002E0C  0E00               	movlw	0
  5385  002E0E  5ADD               	subwfb	postdec2,f,c
  5386                           
  5387                           ;debounce.c: 13: }
  5388  002E10  EF31  F017         	goto	l322
  5389  002E14                     l3890:
  5390                           
  5391                           ;debounce.c: 14: else;debounce.c: 15: {;debounce.c: 16: *bt_press = 1;
  5392  002E14  C033  FFD9         	movff	Debounce@bt_press,fsr2l
  5393  002E18  C034  FFDA         	movff	Debounce@bt_press+1,fsr2h
  5394  002E1C  0E01               	movlw	1
  5395  002E1E  6EDE               	movwf	postinc2,c
  5396  002E20  0E00               	movlw	0
  5397  002E22  6EDD               	movwf	postdec2,c
  5398  002E24                     
  5399                           ;debounce.c: 17: ptr_f();
  5400  002E24  D802               	call	u3388
  5401  002E26  EF1F  F017         	goto	u3389
  5402  002E2A                     u3388:
  5403  002E2A  0005               	push	
  5404  002E2C  6EFA               	movwf	pclath,c
  5405  002E2E  5037               	movf	Debounce@ptr_f^0,w,c
  5406  002E30  6EFD               	movwf	tosl,c
  5407  002E32  5038               	movf	(Debounce@ptr_f+1)^0,w,c
  5408  002E34  6EFE               	movwf	tosh,c
  5409  002E36  50F8               	movf	tblptru,w,c
  5410  002E38  6EFF               	movwf	tosu,c
  5411  002E3A  50FA               	movf	pclath,w,c
  5412  002E3C  0012               	return		;indir
  5413  002E3E                     u3389:
  5414  002E3E  EF31  F017         	goto	l322
  5415  002E42                     l3894:
  5416                           
  5417                           ;debounce.c: 21: else;debounce.c: 22: {;debounce.c: 23: *filter = 10;;
  5418  002E42  C035  FFD9         	movff	Debounce@filter,fsr2l
  5419  002E46  C036  FFDA         	movff	Debounce@filter+1,fsr2h
  5420  002E4A  0E0A               	movlw	10
  5421  002E4C  6EDE               	movwf	postinc2,c
  5422  002E4E  0E00               	movlw	0
  5423  002E50  6EDD               	movwf	postdec2,c
  5424                           
  5425                           ;debounce.c: 24: *bt_press = 0;
  5426  002E52  C033  FFD9         	movff	Debounce@bt_press,fsr2l
  5427  002E56  C034  FFDA         	movff	Debounce@bt_press+1,fsr2h
  5428  002E5A  0E00               	movlw	0
  5429  002E5C  6EDE               	movwf	postinc2,c
  5430  002E5E  0E00               	movlw	0
  5431  002E60  6EDD               	movwf	postdec2,c
  5432  002E62                     l322:
  5433  002E62  0012               	return		;funcret
  5434  002E64                     __end_of_Debounce:
  5435                           	callstack 0
  5436                           
  5437 ;; *************** function _Min_Lv2_Incr *****************
  5438 ;; Defined at:
  5439 ;;		line 261 in file "main.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;		None
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  1    wreg      void 
  5446 ;; Registers used:
  5447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5453 ;;      Params:         0       0       0       0       0       0       0
  5454 ;;      Locals:         0       0       0       0       0       0       0
  5455 ;;      Temps:          0       0       0       0       0       0       0
  5456 ;;      Totals:         0       0       0       0       0       0       0
  5457 ;;Total ram usage:        0 bytes
  5458 ;; Hardware stack levels used: 1
  5459 ;; Hardware stack levels required when called: 6
  5460 ;; This function calls:
  5461 ;;		_Refresh_Screen
  5462 ;;		___fladd
  5463 ;;		___flge
  5464 ;; This function is called by:
  5465 ;;		_main
  5466 ;;		_Debounce
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           	psect	text22
  5471  002E64                     __ptext22:
  5472                           	callstack 0
  5473  002E64                     _Min_Lv2_Incr:
  5474                           	callstack 22
  5475  002E64                     
  5476                           ;main.c: 263: screen = MIN_LEVEL;
  5477  002E64  0E02               	movlw	2
  5478  002E66  6E57               	movwf	_screen^0,c	;volatile
  5479  002E68                     
  5480                           ;main.c: 264: Refresh_Screen();
  5481  002E68  EC83  F01B         	call	_Refresh_Screen	;wreg free
  5482  002E6C                     
  5483                           ;main.c: 265: TMR1L = 0x2C;
  5484  002E6C  0E2C               	movlw	44
  5485  002E6E  6ECE               	movwf	206,c	;volatile
  5486  002E70                     
  5487                           ;main.c: 266: TMR1H = 0xCF;
  5488  002E70  0ECF               	movlw	207
  5489  002E72  6ECF               	movwf	207,c	;volatile
  5490  002E74                     
  5491                           ;main.c: 267: count_screen = -250;
  5492  002E74  0EFF               	movlw	255
  5493  002E76  6E56               	movwf	(_count_screen+1)^0,c	;volatile
  5494  002E78  0E06               	movlw	6
  5495  002E7A  6E55               	movwf	_count_screen^0,c	;volatile
  5496  002E7C                     
  5497                           ;main.c: 269: if ((tank2.min_level + INCREMENT) <= 100) tank2.min_level += INCREMENT;
  5498  002E7C  0E00               	movlw	0
  5499  002E7E  6E13               	movwf	___flge@ff1^0,c
  5500  002E80  0E00               	movlw	0
  5501  002E82  6E14               	movwf	(___flge@ff1+1)^0,c
  5502  002E84  0EC8               	movlw	200
  5503  002E86  6E15               	movwf	(___flge@ff1+2)^0,c
  5504  002E88  0E42               	movlw	66
  5505  002E8A  6E16               	movwf	(___flge@ff1+3)^0,c
  5506  002E8C  0E00               	movlw	0
  5507  002E8E  6E07               	movwf	___fladd@a^0,c
  5508  002E90  0E00               	movlw	0
  5509  002E92  6E08               	movwf	(___fladd@a+1)^0,c
  5510  002E94  0E20               	movlw	32
  5511  002E96  6E09               	movwf	(___fladd@a+2)^0,c
  5512  002E98  0E41               	movlw	65
  5513  002E9A  6E0A               	movwf	(___fladd@a+3)^0,c
  5514  002E9C  C03F  F003         	movff	_tank2+4,___fladd@b	;volatile
  5515  002EA0  C040  F004         	movff	_tank2+5,___fladd@b+1	;volatile
  5516  002EA4  C041  F005         	movff	_tank2+6,___fladd@b+2	;volatile
  5517  002EA8  C042  F006         	movff	_tank2+7,___fladd@b+3	;volatile
  5518  002EAC  ECF9  F005         	call	___fladd	;wreg free
  5519  002EB0  C003  F017         	movff	?___fladd,___flge@ff2
  5520  002EB4  C004  F018         	movff	?___fladd+1,___flge@ff2+1
  5521  002EB8  C005  F019         	movff	?___fladd+2,___flge@ff2+2
  5522  002EBC  C006  F01A         	movff	?___fladd+3,___flge@ff2+3
  5523  002EC0  ECFC  F014         	call	___flge	;wreg free
  5524  002EC4  A0D8               	btfss	status,0,c
  5525  002EC6  EF67  F017         	goto	u3261
  5526  002ECA  EF69  F017         	goto	u3260
  5527  002ECE                     u3261:
  5528  002ECE  EF85  F017         	goto	l3816
  5529  002ED2                     u3260:
  5530  002ED2  C03F  F003         	movff	_tank2+4,___fladd@b	;volatile
  5531  002ED6  C040  F004         	movff	_tank2+5,___fladd@b+1	;volatile
  5532  002EDA  C041  F005         	movff	_tank2+6,___fladd@b+2	;volatile
  5533  002EDE  C042  F006         	movff	_tank2+7,___fladd@b+3	;volatile
  5534  002EE2  0E00               	movlw	0
  5535  002EE4  6E07               	movwf	___fladd@a^0,c
  5536  002EE6  0E00               	movlw	0
  5537  002EE8  6E08               	movwf	(___fladd@a+1)^0,c
  5538  002EEA  0E20               	movlw	32
  5539  002EEC  6E09               	movwf	(___fladd@a+2)^0,c
  5540  002EEE  0E41               	movlw	65
  5541  002EF0  6E0A               	movwf	(___fladd@a+3)^0,c
  5542  002EF2  ECF9  F005         	call	___fladd	;wreg free
  5543  002EF6  C003  F03F         	movff	?___fladd,_tank2+4	;volatile
  5544  002EFA  C004  F040         	movff	?___fladd+1,_tank2+5	;volatile
  5545  002EFE  C005  F041         	movff	?___fladd+2,_tank2+6	;volatile
  5546  002F02  C006  F042         	movff	?___fladd+3,_tank2+7	;volatile
  5547  002F06  EF8D  F017         	goto	l251
  5548  002F0A                     l3816:
  5549                           
  5550                           ;main.c: 270: else tank2.min_level = 0;
  5551  002F0A  0E00               	movlw	0
  5552  002F0C  6E3F               	movwf	(_tank2+4)^0,c	;volatile
  5553  002F0E  0E00               	movlw	0
  5554  002F10  6E40               	movwf	(_tank2+5)^0,c	;volatile
  5555  002F12  0E00               	movlw	0
  5556  002F14  6E41               	movwf	(_tank2+6)^0,c	;volatile
  5557  002F16  0E00               	movlw	0
  5558  002F18  6E42               	movwf	(_tank2+7)^0,c	;volatile
  5559  002F1A                     l251:
  5560  002F1A  0012               	return		;funcret
  5561  002F1C                     __end_of_Min_Lv2_Incr:
  5562                           	callstack 0
  5563                           
  5564 ;; *************** function _Min_Lv1_Incr *****************
  5565 ;; Defined at:
  5566 ;;		line 249 in file "main.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;		None
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;		None
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  1    wreg      void 
  5573 ;; Registers used:
  5574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5580 ;;      Params:         0       0       0       0       0       0       0
  5581 ;;      Locals:         0       0       0       0       0       0       0
  5582 ;;      Temps:          0       0       0       0       0       0       0
  5583 ;;      Totals:         0       0       0       0       0       0       0
  5584 ;;Total ram usage:        0 bytes
  5585 ;; Hardware stack levels used: 1
  5586 ;; Hardware stack levels required when called: 6
  5587 ;; This function calls:
  5588 ;;		_Refresh_Screen
  5589 ;;		___fladd
  5590 ;;		___flge
  5591 ;; This function is called by:
  5592 ;;		_main
  5593 ;;		_Debounce
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           	psect	text23
  5598  002F1C                     __ptext23:
  5599                           	callstack 0
  5600  002F1C                     _Min_Lv1_Incr:
  5601                           	callstack 22
  5602  002F1C                     
  5603                           ;main.c: 251: screen = MIN_LEVEL;
  5604  002F1C  0E02               	movlw	2
  5605  002F1E  6E57               	movwf	_screen^0,c	;volatile
  5606  002F20                     
  5607                           ;main.c: 252: Refresh_Screen();
  5608  002F20  EC83  F01B         	call	_Refresh_Screen	;wreg free
  5609  002F24                     
  5610                           ;main.c: 253: TMR1L = 0x2C;
  5611  002F24  0E2C               	movlw	44
  5612  002F26  6ECE               	movwf	206,c	;volatile
  5613  002F28                     
  5614                           ;main.c: 254: TMR1H = 0xCF;
  5615  002F28  0ECF               	movlw	207
  5616  002F2A  6ECF               	movwf	207,c	;volatile
  5617  002F2C                     
  5618                           ;main.c: 255: count_screen = -250;
  5619  002F2C  0EFF               	movlw	255
  5620  002F2E  6E56               	movwf	(_count_screen+1)^0,c	;volatile
  5621  002F30  0E06               	movlw	6
  5622  002F32  6E55               	movwf	_count_screen^0,c	;volatile
  5623  002F34                     
  5624                           ;main.c: 257: if ((tank1.min_level + INCREMENT) <= 100) tank1.min_level += INCREMENT;
  5625  002F34  0E00               	movlw	0
  5626  002F36  6E13               	movwf	___flge@ff1^0,c
  5627  002F38  0E00               	movlw	0
  5628  002F3A  6E14               	movwf	(___flge@ff1+1)^0,c
  5629  002F3C  0EC8               	movlw	200
  5630  002F3E  6E15               	movwf	(___flge@ff1+2)^0,c
  5631  002F40  0E42               	movlw	66
  5632  002F42  6E16               	movwf	(___flge@ff1+3)^0,c
  5633  002F44  0E00               	movlw	0
  5634  002F46  6E07               	movwf	___fladd@a^0,c
  5635  002F48  0E00               	movlw	0
  5636  002F4A  6E08               	movwf	(___fladd@a+1)^0,c
  5637  002F4C  0E20               	movlw	32
  5638  002F4E  6E09               	movwf	(___fladd@a+2)^0,c
  5639  002F50  0E41               	movlw	65
  5640  002F52  6E0A               	movwf	(___fladd@a+3)^0,c
  5641  002F54  C04B  F003         	movff	_tank1+4,___fladd@b	;volatile
  5642  002F58  C04C  F004         	movff	_tank1+5,___fladd@b+1	;volatile
  5643  002F5C  C04D  F005         	movff	_tank1+6,___fladd@b+2	;volatile
  5644  002F60  C04E  F006         	movff	_tank1+7,___fladd@b+3	;volatile
  5645  002F64  ECF9  F005         	call	___fladd	;wreg free
  5646  002F68  C003  F017         	movff	?___fladd,___flge@ff2
  5647  002F6C  C004  F018         	movff	?___fladd+1,___flge@ff2+1
  5648  002F70  C005  F019         	movff	?___fladd+2,___flge@ff2+2
  5649  002F74  C006  F01A         	movff	?___fladd+3,___flge@ff2+3
  5650  002F78  ECFC  F014         	call	___flge	;wreg free
  5651  002F7C  A0D8               	btfss	status,0,c
  5652  002F7E  EFC3  F017         	goto	u3251
  5653  002F82  EFC5  F017         	goto	u3250
  5654  002F86                     u3251:
  5655  002F86  EFE1  F017         	goto	l3800
  5656  002F8A                     u3250:
  5657  002F8A  C04B  F003         	movff	_tank1+4,___fladd@b	;volatile
  5658  002F8E  C04C  F004         	movff	_tank1+5,___fladd@b+1	;volatile
  5659  002F92  C04D  F005         	movff	_tank1+6,___fladd@b+2	;volatile
  5660  002F96  C04E  F006         	movff	_tank1+7,___fladd@b+3	;volatile
  5661  002F9A  0E00               	movlw	0
  5662  002F9C  6E07               	movwf	___fladd@a^0,c
  5663  002F9E  0E00               	movlw	0
  5664  002FA0  6E08               	movwf	(___fladd@a+1)^0,c
  5665  002FA2  0E20               	movlw	32
  5666  002FA4  6E09               	movwf	(___fladd@a+2)^0,c
  5667  002FA6  0E41               	movlw	65
  5668  002FA8  6E0A               	movwf	(___fladd@a+3)^0,c
  5669  002FAA  ECF9  F005         	call	___fladd	;wreg free
  5670  002FAE  C003  F04B         	movff	?___fladd,_tank1+4	;volatile
  5671  002FB2  C004  F04C         	movff	?___fladd+1,_tank1+5	;volatile
  5672  002FB6  C005  F04D         	movff	?___fladd+2,_tank1+6	;volatile
  5673  002FBA  C006  F04E         	movff	?___fladd+3,_tank1+7	;volatile
  5674  002FBE  EFE9  F017         	goto	l246
  5675  002FC2                     l3800:
  5676                           
  5677                           ;main.c: 258: else tank1.min_level = 0;
  5678  002FC2  0E00               	movlw	0
  5679  002FC4  6E4B               	movwf	(_tank1+4)^0,c	;volatile
  5680  002FC6  0E00               	movlw	0
  5681  002FC8  6E4C               	movwf	(_tank1+5)^0,c	;volatile
  5682  002FCA  0E00               	movlw	0
  5683  002FCC  6E4D               	movwf	(_tank1+6)^0,c	;volatile
  5684  002FCE  0E00               	movlw	0
  5685  002FD0  6E4E               	movwf	(_tank1+7)^0,c	;volatile
  5686  002FD2                     l246:
  5687  002FD2  0012               	return		;funcret
  5688  002FD4                     __end_of_Min_Lv1_Incr:
  5689                           	callstack 0
  5690                           
  5691 ;; *************** function _Change_Mode *****************
  5692 ;; Defined at:
  5693 ;;		line 278 in file "main.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;		None
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;		None
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      void 
  5700 ;; Registers used:
  5701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5707 ;;      Params:         0       0       0       0       0       0       0
  5708 ;;      Locals:         0       0       0       0       0       0       0
  5709 ;;      Temps:          1       0       0       0       0       0       0
  5710 ;;      Totals:         1       0       0       0       0       0       0
  5711 ;;Total ram usage:        1 bytes
  5712 ;; Hardware stack levels used: 1
  5713 ;; Hardware stack levels required when called: 3
  5714 ;; This function calls:
  5715 ;;		_CheckBit
  5716 ;;		_ClearBit
  5717 ;; This function is called by:
  5718 ;;		_main
  5719 ;;		_Debounce
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           	psect	text24
  5724  00319E                     __ptext24:
  5725                           	callstack 0
  5726  00319E                     _Change_Mode:
  5727                           	callstack 25
  5728  00319E                     
  5729                           ;main.c: 280: LATDbits.LATD0 = ~LATDbits.LATD0;
  5730  00319E  B08C               	btfsc	140,0,c	;volatile
  5731  0031A0  EFD4  F018         	goto	u3271
  5732  0031A4  EFD7  F018         	goto	u3270
  5733  0031A8                     u3271:
  5734  0031A8  0E01               	movlw	1
  5735  0031AA  EFD8  F018         	goto	u3276
  5736  0031AE                     u3270:
  5737  0031AE  0E00               	movlw	0
  5738  0031B0                     u3276:
  5739  0031B0  0AFF               	xorlw	255
  5740  0031B2  6E0C               	movwf	??_Change_Mode^0,c
  5741  0031B4  508C               	movf	140,w,c	;volatile
  5742  0031B6  180C               	xorwf	??_Change_Mode^0,w,c
  5743  0031B8  0BFE               	andlw	-2
  5744  0031BA  180C               	xorwf	??_Change_Mode^0,w,c
  5745  0031BC  6E8C               	movwf	140,c	;volatile
  5746  0031BE                     
  5747                           ;main.c: 281: if (operation == AUTOMATIC) operation = MANUAL; else operation = AUTOMATIC
      +                          ;
  5748  0031BE  5058               	movf	_operation^0,w,c	;volatile
  5749  0031C0  A4D8               	btfss	status,2,c
  5750  0031C2  EFE5  F018         	goto	u3281
  5751  0031C6  EFE7  F018         	goto	u3280
  5752  0031CA                     u3281:
  5753  0031CA  EFEB  F018         	goto	l3826
  5754  0031CE                     u3280:
  5755  0031CE  0E01               	movlw	1
  5756  0031D0  6E58               	movwf	_operation^0,c	;volatile
  5757  0031D2  EFED  F018         	goto	l3828
  5758  0031D6                     l3826:
  5759  0031D6  0E00               	movlw	0
  5760  0031D8  6E58               	movwf	_operation^0,c	;volatile
  5761  0031DA                     l3828:
  5762                           
  5763                           ;main.c: 282: if ((operation == MANUAL) && (CheckBit(PORTC, 0) == 1)) ClearBit(&LATC, 0)
      +                          ;
  5764  0031DA  0458               	decf	_operation^0,w,c	;volatile
  5765  0031DC  A4D8               	btfss	status,2,c
  5766  0031DE  EFF3  F018         	goto	u3291
  5767  0031E2  EFF5  F018         	goto	u3290
  5768  0031E6                     u3291:
  5769  0031E6  EF11  F019         	goto	l260
  5770  0031EA                     u3290:
  5771  0031EA  CF82 F003          	movff	3970,CheckBit@port	;volatile
  5772  0031EE  6A04               	clrf	(CheckBit@port+1)^0,c
  5773  0031F0  0E00               	movlw	0
  5774  0031F2  6E06               	movwf	(CheckBit@pin+1)^0,c
  5775  0031F4  0E00               	movlw	0
  5776  0031F6  6E05               	movwf	CheckBit@pin^0,c
  5777  0031F8  EC49  F01B         	call	_CheckBit	;wreg free
  5778  0031FC  0403               	decf	?_CheckBit^0,w,c
  5779  0031FE  1004               	iorwf	(?_CheckBit+1)^0,w,c
  5780  003200  A4D8               	btfss	status,2,c
  5781  003202  EF05  F019         	goto	u3301
  5782  003206  EF07  F019         	goto	u3300
  5783  00320A                     u3301:
  5784  00320A  EF11  F019         	goto	l260
  5785  00320E                     u3300:
  5786  00320E  0E8B               	movlw	139
  5787  003210  6E03               	movwf	ClearBit@port^0,c
  5788  003212  0E0F               	movlw	15
  5789  003214  6E04               	movwf	(ClearBit@port+1)^0,c
  5790  003216  0E00               	movlw	0
  5791  003218  6E06               	movwf	(ClearBit@pin+1)^0,c
  5792  00321A  0E00               	movlw	0
  5793  00321C  6E05               	movwf	ClearBit@pin^0,c
  5794  00321E  ECB6  F01A         	call	_ClearBit	;wreg free
  5795  003222                     l260:
  5796  003222  0012               	return		;funcret
  5797  003224                     __end_of_Change_Mode:
  5798                           	callstack 0
  5799                           
  5800 ;; *************** function _Tougle_Pump *****************
  5801 ;; Defined at:
  5802 ;;		line 273 in file "main.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;		None
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;		None
  5807 ;; Return value:  Size  Location     Type
  5808 ;;                  1    wreg      void 
  5809 ;; Registers used:
  5810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5816 ;;      Params:         0       0       0       0       0       0       0
  5817 ;;      Locals:         0       0       0       0       0       0       0
  5818 ;;      Temps:          0       0       0       0       0       0       0
  5819 ;;      Totals:         0       0       0       0       0       0       0
  5820 ;;Total ram usage:        0 bytes
  5821 ;; Hardware stack levels used: 1
  5822 ;; Hardware stack levels required when called: 3
  5823 ;; This function calls:
  5824 ;;		_TougleBit
  5825 ;; This function is called by:
  5826 ;;		_Manual_Mode
  5827 ;;		_Debounce
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           	psect	text25
  5832  00373C                     __ptext25:
  5833                           	callstack 0
  5834  00373C                     _Tougle_Pump:
  5835                           	callstack 25
  5836  00373C                     
  5837                           ;main.c: 275: TougleBit(&LATC, 0);
  5838  00373C  0E8B               	movlw	139
  5839  00373E  6E03               	movwf	TougleBit@port^0,c
  5840  003740  0E0F               	movlw	15
  5841  003742  6E04               	movwf	(TougleBit@port+1)^0,c
  5842  003744  0E00               	movlw	0
  5843  003746  6E06               	movwf	(TougleBit@pin+1)^0,c
  5844  003748  0E00               	movlw	0
  5845  00374A  6E05               	movwf	TougleBit@pin^0,c
  5846  00374C  EC03  F01B         	call	_TougleBit	;wreg free
  5847  003750  0012               	return		;funcret
  5848  003752                     __end_of_Tougle_Pump:
  5849                           	callstack 0
  5850                           
  5851 ;; *************** function _TougleBit *****************
  5852 ;; Defined at:
  5853 ;;		line 13 in file "regoperations.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;  port            2    2[COMRAM] PTR unsigned int 
  5856 ;;		 -> LATC(1), 
  5857 ;;  pin             2    4[COMRAM] unsigned int 
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;		None
  5860 ;; Return value:  Size  Location     Type
  5861 ;;                  1    wreg      void 
  5862 ;; Registers used:
  5863 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 0/0
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5869 ;;      Params:         4       0       0       0       0       0       0
  5870 ;;      Locals:         0       0       0       0       0       0       0
  5871 ;;      Temps:          3       0       0       0       0       0       0
  5872 ;;      Totals:         7       0       0       0       0       0       0
  5873 ;;Total ram usage:        7 bytes
  5874 ;; Hardware stack levels used: 1
  5875 ;; Hardware stack levels required when called: 2
  5876 ;; This function calls:
  5877 ;;		Nothing
  5878 ;; This function is called by:
  5879 ;;		_Tougle_Pump
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           	psect	text26
  5884  003606                     __ptext26:
  5885                           	callstack 0
  5886  003606                     _TougleBit:
  5887                           	callstack 25
  5888  003606                     
  5889                           ;regoperations.c: 15: (*port) ^= (1UL << pin);
  5890  003606  C005  F007         	movff	TougleBit@pin,??_TougleBit
  5891  00360A  0E01               	movlw	1
  5892  00360C  6E08               	movwf	(??_TougleBit+1)^0,c
  5893  00360E  0E00               	movlw	0
  5894  003610  6E09               	movwf	(??_TougleBit+2)^0,c
  5895  003612  2A07               	incf	??_TougleBit^0,f,c
  5896  003614  EF0F  F01B         	goto	u2784
  5897  003618                     u2785:
  5898  003618  90D8               	bcf	status,0,c
  5899  00361A  3608               	rlcf	(??_TougleBit+1)^0,f,c
  5900  00361C  3609               	rlcf	(??_TougleBit+2)^0,f,c
  5901  00361E                     u2784:
  5902  00361E  2E07               	decfsz	??_TougleBit^0,f,c
  5903  003620  EF0C  F01B         	goto	u2785
  5904  003624  C003  FFD9         	movff	TougleBit@port,fsr2l
  5905  003628  C004  FFDA         	movff	TougleBit@port+1,fsr2h
  5906  00362C  5008               	movf	(??_TougleBit+1)^0,w,c
  5907  00362E  1ADE               	xorwf	postinc2,f,c
  5908  003630  5009               	movf	(??_TougleBit+2)^0,w,c
  5909  003632  1ADD               	xorwf	postdec2,f,c
  5910  003634  0012               	return		;funcret
  5911  003636                     __end_of_TougleBit:
  5912                           	callstack 0
  5913                           
  5914 ;; *************** function ___fladd *****************
  5915 ;; Defined at:
  5916 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\sprcadd.c"
  5917 ;; Parameters:    Size  Location     Type
  5918 ;;  b               4    2[COMRAM] void 
  5919 ;;  a               4    6[COMRAM] void 
  5920 ;; Auto vars:     Size  Location     Type
  5921 ;;  grs             1   17[COMRAM] unsigned char 
  5922 ;;  bexp            1   16[COMRAM] unsigned char 
  5923 ;;  aexp            1   15[COMRAM] unsigned char 
  5924 ;;  signs           1   14[COMRAM] unsigned char 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  4    2[COMRAM] unsigned char 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5934 ;;      Params:         8       0       0       0       0       0       0
  5935 ;;      Locals:         4       0       0       0       0       0       0
  5936 ;;      Temps:          4       0       0       0       0       0       0
  5937 ;;      Totals:        16       0       0       0       0       0       0
  5938 ;;Total ram usage:       16 bytes
  5939 ;; Hardware stack levels used: 1
  5940 ;; Hardware stack levels required when called: 2
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_Min_Lv1_Incr
  5945 ;;		_Min_Lv2_Incr
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           	psect	text27
  5950  000BF2                     __ptext27:
  5951                           	callstack 0
  5952  000BF2                     ___fladd:
  5953                           	callstack 25
  5954  000BF2  5006               	movf	(___fladd@b+3)^0,w,c
  5955  000BF4  0B80               	andlw	128
  5956  000BF6  6E0F               	movwf	___fladd@signs^0,c
  5957  000BF8  5006               	movf	(___fladd@b+3)^0,w,c
  5958  000BFA  2406               	addwf	(___fladd@b+3)^0,w,c
  5959  000BFC  6E11               	movwf	___fladd@bexp^0,c
  5960  000BFE  AE05               	btfss	(___fladd@b+2)^0,7,c
  5961  000C00  EF04  F006         	goto	u2811
  5962  000C04  EF06  F006         	goto	u2810
  5963  000C08                     u2811:
  5964  000C08  EF07  F006         	goto	l3568
  5965  000C0C                     u2810:
  5966  000C0C  8011               	bsf	___fladd@bexp^0,0,c
  5967  000C0E                     l3568:
  5968  000C0E  5011               	movf	___fladd@bexp^0,w,c
  5969  000C10  B4D8               	btfsc	status,2,c
  5970  000C12  EF0D  F006         	goto	u2821
  5971  000C16  EF0F  F006         	goto	u2820
  5972  000C1A                     u2821:
  5973  000C1A  EF24  F006         	goto	l3578
  5974  000C1E                     u2820:
  5975  000C1E  2811               	incf	___fladd@bexp^0,w,c
  5976  000C20  A4D8               	btfss	status,2,c
  5977  000C22  EF15  F006         	goto	u2831
  5978  000C26  EF17  F006         	goto	u2830
  5979  000C2A                     u2831:
  5980  000C2A  EF1F  F006         	goto	l3574
  5981  000C2E                     u2830:
  5982  000C2E  0E00               	movlw	0
  5983  000C30  6E03               	movwf	___fladd@b^0,c
  5984  000C32  0E00               	movlw	0
  5985  000C34  6E04               	movwf	(___fladd@b+1)^0,c
  5986  000C36  0E00               	movlw	0
  5987  000C38  6E05               	movwf	(___fladd@b+2)^0,c
  5988  000C3A  0E00               	movlw	0
  5989  000C3C  6E06               	movwf	(___fladd@b+3)^0,c
  5990  000C3E                     l3574:
  5991  000C3E  8E05               	bsf	(___fladd@b+2)^0,7,c
  5992  000C40  0E00               	movlw	0
  5993  000C42  6E06               	movwf	(___fladd@b+3)^0,c
  5994  000C44  EF2C  F006         	goto	l3580
  5995  000C48                     l3578:
  5996  000C48  0E00               	movlw	0
  5997  000C4A  6E03               	movwf	___fladd@b^0,c
  5998  000C4C  0E00               	movlw	0
  5999  000C4E  6E04               	movwf	(___fladd@b+1)^0,c
  6000  000C50  0E00               	movlw	0
  6001  000C52  6E05               	movwf	(___fladd@b+2)^0,c
  6002  000C54  0E00               	movlw	0
  6003  000C56  6E06               	movwf	(___fladd@b+3)^0,c
  6004  000C58                     l3580:
  6005  000C58  500A               	movf	(___fladd@a+3)^0,w,c
  6006  000C5A  0B80               	andlw	128
  6007  000C5C  6E10               	movwf	___fladd@aexp^0,c
  6008  000C5E  500F               	movf	___fladd@signs^0,w,c
  6009  000C60  1810               	xorwf	___fladd@aexp^0,w,c
  6010  000C62  B4D8               	btfsc	status,2,c
  6011  000C64  EF36  F006         	goto	u2841
  6012  000C68  EF38  F006         	goto	u2840
  6013  000C6C                     u2841:
  6014  000C6C  EF39  F006         	goto	l3586
  6015  000C70                     u2840:
  6016  000C70  8C0F               	bsf	___fladd@signs^0,6,c
  6017  000C72                     l3586:
  6018  000C72  500A               	movf	(___fladd@a+3)^0,w,c
  6019  000C74  240A               	addwf	(___fladd@a+3)^0,w,c
  6020  000C76  6E10               	movwf	___fladd@aexp^0,c
  6021  000C78  AE09               	btfss	(___fladd@a+2)^0,7,c
  6022  000C7A  EF41  F006         	goto	u2851
  6023  000C7E  EF43  F006         	goto	u2850
  6024  000C82                     u2851:
  6025  000C82  EF44  F006         	goto	l3592
  6026  000C86                     u2850:
  6027  000C86  8010               	bsf	___fladd@aexp^0,0,c
  6028  000C88                     l3592:
  6029  000C88  5010               	movf	___fladd@aexp^0,w,c
  6030  000C8A  B4D8               	btfsc	status,2,c
  6031  000C8C  EF4A  F006         	goto	u2861
  6032  000C90  EF4C  F006         	goto	u2860
  6033  000C94                     u2861:
  6034  000C94  EF61  F006         	goto	l3602
  6035  000C98                     u2860:
  6036  000C98  2810               	incf	___fladd@aexp^0,w,c
  6037  000C9A  A4D8               	btfss	status,2,c
  6038  000C9C  EF52  F006         	goto	u2871
  6039  000CA0  EF54  F006         	goto	u2870
  6040  000CA4                     u2871:
  6041  000CA4  EF5C  F006         	goto	l3598
  6042  000CA8                     u2870:
  6043  000CA8  0E00               	movlw	0
  6044  000CAA  6E07               	movwf	___fladd@a^0,c
  6045  000CAC  0E00               	movlw	0
  6046  000CAE  6E08               	movwf	(___fladd@a+1)^0,c
  6047  000CB0  0E00               	movlw	0
  6048  000CB2  6E09               	movwf	(___fladd@a+2)^0,c
  6049  000CB4  0E00               	movlw	0
  6050  000CB6  6E0A               	movwf	(___fladd@a+3)^0,c
  6051  000CB8                     l3598:
  6052  000CB8  8E09               	bsf	(___fladd@a+2)^0,7,c
  6053  000CBA  0E00               	movlw	0
  6054  000CBC  6E0A               	movwf	(___fladd@a+3)^0,c
  6055  000CBE  EF69  F006         	goto	l3604
  6056  000CC2                     l3602:
  6057  000CC2  0E00               	movlw	0
  6058  000CC4  6E07               	movwf	___fladd@a^0,c
  6059  000CC6  0E00               	movlw	0
  6060  000CC8  6E08               	movwf	(___fladd@a+1)^0,c
  6061  000CCA  0E00               	movlw	0
  6062  000CCC  6E09               	movwf	(___fladd@a+2)^0,c
  6063  000CCE  0E00               	movlw	0
  6064  000CD0  6E0A               	movwf	(___fladd@a+3)^0,c
  6065  000CD2                     l3604:
  6066  000CD2  5011               	movf	___fladd@bexp^0,w,c
  6067  000CD4  5C10               	subwf	___fladd@aexp^0,w,c
  6068  000CD6  B0D8               	btfsc	status,0,c
  6069  000CD8  EF70  F006         	goto	u2881
  6070  000CDC  EF72  F006         	goto	u2880
  6071  000CE0                     u2881:
  6072  000CE0  EF99  F006         	goto	l3640
  6073  000CE4                     u2880:
  6074  000CE4  AC0F               	btfss	___fladd@signs^0,6,c
  6075  000CE6  EF77  F006         	goto	u2891
  6076  000CEA  EF79  F006         	goto	u2890
  6077  000CEE                     u2891:
  6078  000CEE  EF7B  F006         	goto	l3610
  6079  000CF2                     u2890:
  6080  000CF2  0E80               	movlw	128
  6081  000CF4  1A0F               	xorwf	___fladd@signs^0,f,c
  6082  000CF6                     l3610:
  6083  000CF6  C011  F012         	movff	___fladd@bexp,___fladd@grs
  6084  000CFA  C010  F011         	movff	___fladd@aexp,___fladd@bexp
  6085  000CFE  C012  F010         	movff	___fladd@grs,___fladd@aexp
  6086  000D02  C003  F012         	movff	___fladd@b,___fladd@grs
  6087  000D06  C007  F003         	movff	___fladd@a,___fladd@b
  6088  000D0A  C012  F007         	movff	___fladd@grs,___fladd@a
  6089  000D0E  C004  F012         	movff	___fladd@b+1,___fladd@grs
  6090  000D12  C008  F004         	movff	___fladd@a+1,___fladd@b+1
  6091  000D16  C012  F008         	movff	___fladd@grs,___fladd@a+1
  6092  000D1A  C005  F012         	movff	___fladd@b+2,___fladd@grs
  6093  000D1E  C009  F005         	movff	___fladd@a+2,___fladd@b+2
  6094  000D22  C012  F009         	movff	___fladd@grs,___fladd@a+2
  6095  000D26  C006  F012         	movff	___fladd@b+3,___fladd@grs
  6096  000D2A  C00A  F006         	movff	___fladd@a+3,___fladd@b+3
  6097  000D2E  C012  F00A         	movff	___fladd@grs,___fladd@a+3
  6098  000D32                     l3640:
  6099  000D32  0E00               	movlw	0
  6100  000D34  6E12               	movwf	___fladd@grs^0,c
  6101  000D36  5011               	movf	___fladd@bexp^0,w,c
  6102  000D38  C010  F00B         	movff	___fladd@aexp,??___fladd
  6103  000D3C  6A0C               	clrf	(??___fladd+1)^0,c
  6104  000D3E  5E0B               	subwf	??___fladd^0,f,c
  6105  000D40  0E00               	movlw	0
  6106  000D42  5A0C               	subwfb	(??___fladd+1)^0,f,c
  6107  000D44  BE0C               	btfsc	(??___fladd+1)^0,7,c
  6108  000D46  EFAE  F006         	goto	u2901
  6109  000D4A  500C               	movf	(??___fladd+1)^0,w,c
  6110  000D4C  E109               	bnz	u2900
  6111  000D4E  0E1A               	movlw	26
  6112  000D50  5C0B               	subwf	??___fladd^0,w,c
  6113  000D52  A0D8               	btfss	status,0,c
  6114  000D54  EFAE  F006         	goto	u2901
  6115  000D58  EFB0  F006         	goto	u2900
  6116  000D5C                     u2901:
  6117  000D5C  EFE7  F006         	goto	l1181
  6118  000D60                     u2900:
  6119  000D60  5003               	movf	___fladd@b^0,w,c
  6120  000D62  1004               	iorwf	(___fladd@b+1)^0,w,c
  6121  000D64  1005               	iorwf	(___fladd@b+2)^0,w,c
  6122  000D66  1006               	iorwf	(___fladd@b+3)^0,w,c
  6123  000D68  A4D8               	btfss	status,2,c
  6124  000D6A  EFB9  F006         	goto	u2911
  6125  000D6E  EFBC  F006         	goto	u2910
  6126  000D72                     u2911:
  6127  000D72  0E01               	movlw	1
  6128  000D74  EFBD  F006         	goto	u2920
  6129  000D78                     u2910:
  6130  000D78  0E00               	movlw	0
  6131  000D7A                     u2920:
  6132  000D7A  6E12               	movwf	___fladd@grs^0,c
  6133  000D7C  0E00               	movlw	0
  6134  000D7E  6E03               	movwf	___fladd@b^0,c
  6135  000D80  0E00               	movlw	0
  6136  000D82  6E04               	movwf	(___fladd@b+1)^0,c
  6137  000D84  0E00               	movlw	0
  6138  000D86  6E05               	movwf	(___fladd@b+2)^0,c
  6139  000D88  0E00               	movlw	0
  6140  000D8A  6E06               	movwf	(___fladd@b+3)^0,c
  6141  000D8C  C010  F011         	movff	___fladd@aexp,___fladd@bexp
  6142  000D90  EFF0  F006         	goto	l1180
  6143  000D94                     l1182:
  6144  000D94  A012               	btfss	___fladd@grs^0,0,c
  6145  000D96  EFCF  F006         	goto	u2931
  6146  000D9A  EFD1  F006         	goto	u2930
  6147  000D9E                     u2931:
  6148  000D9E  EFD7  F006         	goto	l3652
  6149  000DA2                     u2930:
  6150  000DA2  90D8               	bcf	status,0,c
  6151  000DA4  3012               	rrcf	___fladd@grs^0,w,c
  6152  000DA6  0901               	iorlw	1
  6153  000DA8  6E12               	movwf	___fladd@grs^0,c
  6154  000DAA  EFD9  F006         	goto	l3654
  6155  000DAE                     l3652:
  6156  000DAE  90D8               	bcf	status,0,c
  6157  000DB0  3212               	rrcf	___fladd@grs^0,f,c
  6158  000DB2                     l3654:
  6159  000DB2  A003               	btfss	___fladd@b^0,0,c
  6160  000DB4  EFDE  F006         	goto	u2941
  6161  000DB8  EFE0  F006         	goto	u2940
  6162  000DBC                     u2941:
  6163  000DBC  EFE1  F006         	goto	l3658
  6164  000DC0                     u2940:
  6165  000DC0  8E12               	bsf	___fladd@grs^0,7,c
  6166  000DC2                     l3658:
  6167  000DC2  3406               	rlcf	(___fladd@b+3)^0,w,c
  6168  000DC4  3206               	rrcf	(___fladd@b+3)^0,f,c
  6169  000DC6  3205               	rrcf	(___fladd@b+2)^0,f,c
  6170  000DC8  3204               	rrcf	(___fladd@b+1)^0,f,c
  6171  000DCA  3203               	rrcf	___fladd@b^0,f,c
  6172  000DCC  2A11               	incf	___fladd@bexp^0,f,c
  6173  000DCE                     l1181:
  6174  000DCE  5010               	movf	___fladd@aexp^0,w,c
  6175  000DD0  5C11               	subwf	___fladd@bexp^0,w,c
  6176  000DD2  A0D8               	btfss	status,0,c
  6177  000DD4  EFEE  F006         	goto	u2951
  6178  000DD8  EFF0  F006         	goto	u2950
  6179  000DDC                     u2951:
  6180  000DDC  EFCA  F006         	goto	l1182
  6181  000DE0                     u2950:
  6182  000DE0                     l1180:
  6183  000DE0  BC0F               	btfsc	___fladd@signs^0,6,c
  6184  000DE2  EFF5  F006         	goto	u2961
  6185  000DE6  EFF7  F006         	goto	u2960
  6186  000DEA                     u2961:
  6187  000DEA  EF37  F007         	goto	l3686
  6188  000DEE                     u2960:
  6189  000DEE  5011               	movf	___fladd@bexp^0,w,c
  6190  000DF0  A4D8               	btfss	status,2,c
  6191  000DF2  EFFD  F006         	goto	u2971
  6192  000DF6  EFFF  F006         	goto	u2970
  6193  000DFA                     u2971:
  6194  000DFA  EF09  F007         	goto	l3668
  6195  000DFE                     u2970:
  6196  000DFE  0E00               	movlw	0
  6197  000E00  6E03               	movwf	?___fladd^0,c
  6198  000E02  0E00               	movlw	0
  6199  000E04  6E04               	movwf	(?___fladd+1)^0,c
  6200  000E06  0E00               	movlw	0
  6201  000E08  6E05               	movwf	(?___fladd+2)^0,c
  6202  000E0A  0E00               	movlw	0
  6203  000E0C  6E06               	movwf	(?___fladd+3)^0,c
  6204  000E0E  EF58  F008         	goto	l1189
  6205  000E12                     l3668:
  6206  000E12  5007               	movf	___fladd@a^0,w,c
  6207  000E14  2603               	addwf	___fladd@b^0,f,c
  6208  000E16  5008               	movf	(___fladd@a+1)^0,w,c
  6209  000E18  2204               	addwfc	(___fladd@b+1)^0,f,c
  6210  000E1A  5009               	movf	(___fladd@a+2)^0,w,c
  6211  000E1C  2205               	addwfc	(___fladd@b+2)^0,f,c
  6212  000E1E  500A               	movf	(___fladd@a+3)^0,w,c
  6213  000E20  2206               	addwfc	(___fladd@b+3)^0,f,c
  6214  000E22  A006               	btfss	(___fladd@b+3)^0,0,c
  6215  000E24  EF16  F007         	goto	u2981
  6216  000E28  EF18  F007         	goto	u2980
  6217  000E2C                     u2981:
  6218  000E2C  EFC4  F007         	goto	l3722
  6219  000E30                     u2980:
  6220  000E30  A012               	btfss	___fladd@grs^0,0,c
  6221  000E32  EF1D  F007         	goto	u2991
  6222  000E36  EF1F  F007         	goto	u2990
  6223  000E3A                     u2991:
  6224  000E3A  EF25  F007         	goto	l3676
  6225  000E3E                     u2990:
  6226  000E3E  90D8               	bcf	status,0,c
  6227  000E40  3012               	rrcf	___fladd@grs^0,w,c
  6228  000E42  0901               	iorlw	1
  6229  000E44  6E12               	movwf	___fladd@grs^0,c
  6230  000E46  EF27  F007         	goto	l3678
  6231  000E4A                     l3676:
  6232  000E4A  90D8               	bcf	status,0,c
  6233  000E4C  3212               	rrcf	___fladd@grs^0,f,c
  6234  000E4E                     l3678:
  6235  000E4E  A003               	btfss	___fladd@b^0,0,c
  6236  000E50  EF2C  F007         	goto	u3001
  6237  000E54  EF2E  F007         	goto	u3000
  6238  000E58                     u3001:
  6239  000E58  EF2F  F007         	goto	l3682
  6240  000E5C                     u3000:
  6241  000E5C  8E12               	bsf	___fladd@grs^0,7,c
  6242  000E5E                     l3682:
  6243  000E5E  3406               	rlcf	(___fladd@b+3)^0,w,c
  6244  000E60  3206               	rrcf	(___fladd@b+3)^0,f,c
  6245  000E62  3205               	rrcf	(___fladd@b+2)^0,f,c
  6246  000E64  3204               	rrcf	(___fladd@b+1)^0,f,c
  6247  000E66  3203               	rrcf	___fladd@b^0,f,c
  6248  000E68  2A11               	incf	___fladd@bexp^0,f,c
  6249  000E6A  EFC4  F007         	goto	l3722
  6250  000E6E                     l3686:
  6251  000E6E  5007               	movf	___fladd@a^0,w,c
  6252  000E70  5C03               	subwf	___fladd@b^0,w,c
  6253  000E72  5008               	movf	(___fladd@a+1)^0,w,c
  6254  000E74  5804               	subwfb	(___fladd@b+1)^0,w,c
  6255  000E76  5009               	movf	(___fladd@a+2)^0,w,c
  6256  000E78  5805               	subwfb	(___fladd@b+2)^0,w,c
  6257  000E7A  5006               	movf	(___fladd@b+3)^0,w,c
  6258  000E7C  0A80               	xorlw	128
  6259  000E7E  6E0B               	movwf	??___fladd^0,c
  6260  000E80  500A               	movf	(___fladd@a+3)^0,w,c
  6261  000E82  0A80               	xorlw	128
  6262  000E84  580B               	subwfb	??___fladd^0,w,c
  6263  000E86  B0D8               	btfsc	status,0,c
  6264  000E88  EF48  F007         	goto	u3011
  6265  000E8C  EF4A  F007         	goto	u3010
  6266  000E90                     u3011:
  6267  000E90  EF75  F007         	goto	l3696
  6268  000E94                     u3010:
  6269  000E94  5003               	movf	___fladd@b^0,w,c
  6270  000E96  5C07               	subwf	___fladd@a^0,w,c
  6271  000E98  6E0B               	movwf	??___fladd^0,c
  6272  000E9A  5004               	movf	(___fladd@b+1)^0,w,c
  6273  000E9C  5808               	subwfb	(___fladd@a+1)^0,w,c
  6274  000E9E  6E0C               	movwf	(??___fladd+1)^0,c
  6275  000EA0  5005               	movf	(___fladd@b+2)^0,w,c
  6276  000EA2  5809               	subwfb	(___fladd@a+2)^0,w,c
  6277  000EA4  6E0D               	movwf	(??___fladd+2)^0,c
  6278  000EA6  5006               	movf	(___fladd@b+3)^0,w,c
  6279  000EA8  580A               	subwfb	(___fladd@a+3)^0,w,c
  6280  000EAA  6E0E               	movwf	(??___fladd+3)^0,c
  6281  000EAC  0EFF               	movlw	255
  6282  000EAE  240B               	addwf	??___fladd^0,w,c
  6283  000EB0  6E03               	movwf	___fladd@b^0,c
  6284  000EB2  0EFF               	movlw	255
  6285  000EB4  200C               	addwfc	(??___fladd+1)^0,w,c
  6286  000EB6  6E04               	movwf	(___fladd@b+1)^0,c
  6287  000EB8  0EFF               	movlw	255
  6288  000EBA  200D               	addwfc	(??___fladd+2)^0,w,c
  6289  000EBC  6E05               	movwf	(___fladd@b+2)^0,c
  6290  000EBE  0EFF               	movlw	255
  6291  000EC0  200E               	addwfc	(??___fladd+3)^0,w,c
  6292  000EC2  6E06               	movwf	(___fladd@b+3)^0,c
  6293  000EC4  0E80               	movlw	128
  6294  000EC6  1A0F               	xorwf	___fladd@signs^0,f,c
  6295  000EC8  6C12               	negf	___fladd@grs^0,c
  6296  000ECA  5012               	movf	___fladd@grs^0,w,c
  6297  000ECC  A4D8               	btfss	status,2,c
  6298  000ECE  EF6B  F007         	goto	u3021
  6299  000ED2  EF6D  F007         	goto	u3020
  6300  000ED6                     u3021:
  6301  000ED6  EF7D  F007         	goto	l1197
  6302  000EDA                     u3020:
  6303  000EDA  0E01               	movlw	1
  6304  000EDC  2603               	addwf	___fladd@b^0,f,c
  6305  000EDE  0E00               	movlw	0
  6306  000EE0  2204               	addwfc	(___fladd@b+1)^0,f,c
  6307  000EE2  2205               	addwfc	(___fladd@b+2)^0,f,c
  6308  000EE4  2206               	addwfc	(___fladd@b+3)^0,f,c
  6309  000EE6  EF7D  F007         	goto	l1197
  6310  000EEA                     l3696:
  6311  000EEA  5007               	movf	___fladd@a^0,w,c
  6312  000EEC  5E03               	subwf	___fladd@b^0,f,c
  6313  000EEE  5008               	movf	(___fladd@a+1)^0,w,c
  6314  000EF0  5A04               	subwfb	(___fladd@b+1)^0,f,c
  6315  000EF2  5009               	movf	(___fladd@a+2)^0,w,c
  6316  000EF4  5A05               	subwfb	(___fladd@b+2)^0,f,c
  6317  000EF6  500A               	movf	(___fladd@a+3)^0,w,c
  6318  000EF8  5A06               	subwfb	(___fladd@b+3)^0,f,c
  6319  000EFA                     l1197:
  6320  000EFA  5003               	movf	___fladd@b^0,w,c
  6321  000EFC  1004               	iorwf	(___fladd@b+1)^0,w,c
  6322  000EFE  1005               	iorwf	(___fladd@b+2)^0,w,c
  6323  000F00  1006               	iorwf	(___fladd@b+3)^0,w,c
  6324  000F02  A4D8               	btfss	status,2,c
  6325  000F04  EF86  F007         	goto	u3031
  6326  000F08  EF88  F007         	goto	u3030
  6327  000F0C                     u3031:
  6328  000F0C  EFBD  F007         	goto	l3720
  6329  000F10                     u3030:
  6330  000F10  5012               	movf	___fladd@grs^0,w,c
  6331  000F12  A4D8               	btfss	status,2,c
  6332  000F14  EF8E  F007         	goto	u3041
  6333  000F18  EF90  F007         	goto	u3040
  6334  000F1C                     u3041:
  6335  000F1C  EFBD  F007         	goto	l3720
  6336  000F20                     u3040:
  6337  000F20  0E00               	movlw	0
  6338  000F22  6E03               	movwf	?___fladd^0,c
  6339  000F24  0E00               	movlw	0
  6340  000F26  6E04               	movwf	(?___fladd+1)^0,c
  6341  000F28  0E00               	movlw	0
  6342  000F2A  6E05               	movwf	(?___fladd+2)^0,c
  6343  000F2C  0E00               	movlw	0
  6344  000F2E  6E06               	movwf	(?___fladd+3)^0,c
  6345  000F30  EF58  F008         	goto	l1189
  6346  000F34                     l3704:
  6347  000F34  90D8               	bcf	status,0,c
  6348  000F36  3603               	rlcf	___fladd@b^0,f,c
  6349  000F38  3604               	rlcf	(___fladd@b+1)^0,f,c
  6350  000F3A  3605               	rlcf	(___fladd@b+2)^0,f,c
  6351  000F3C  3606               	rlcf	(___fladd@b+3)^0,f,c
  6352  000F3E  AE12               	btfss	___fladd@grs^0,7,c
  6353  000F40  EFA4  F007         	goto	u3051
  6354  000F44  EFA6  F007         	goto	u3050
  6355  000F48                     u3051:
  6356  000F48  EFA7  F007         	goto	l3710
  6357  000F4C                     u3050:
  6358  000F4C  8003               	bsf	___fladd@b^0,0,c
  6359  000F4E                     l3710:
  6360  000F4E  A012               	btfss	___fladd@grs^0,0,c
  6361  000F50  EFAC  F007         	goto	u3061
  6362  000F54  EFAE  F007         	goto	u3060
  6363  000F58                     u3061:
  6364  000F58  EFB2  F007         	goto	l3714
  6365  000F5C                     u3060:
  6366  000F5C  80D8               	bsf	status,0,c
  6367  000F5E  3612               	rlcf	___fladd@grs^0,f,c
  6368  000F60  EFB4  F007         	goto	l3716
  6369  000F64                     l3714:
  6370  000F64  90D8               	bcf	status,0,c
  6371  000F66  3612               	rlcf	___fladd@grs^0,f,c
  6372  000F68                     l3716:
  6373  000F68  5011               	movf	___fladd@bexp^0,w,c
  6374  000F6A  B4D8               	btfsc	status,2,c
  6375  000F6C  EFBA  F007         	goto	u3071
  6376  000F70  EFBC  F007         	goto	u3070
  6377  000F74                     u3071:
  6378  000F74  EFBD  F007         	goto	l3720
  6379  000F78                     u3070:
  6380  000F78  0611               	decf	___fladd@bexp^0,f,c
  6381  000F7A                     l3720:
  6382  000F7A  AE05               	btfss	(___fladd@b+2)^0,7,c
  6383  000F7C  EFC2  F007         	goto	u3081
  6384  000F80  EFC4  F007         	goto	u3080
  6385  000F84                     u3081:
  6386  000F84  EF9A  F007         	goto	l3704
  6387  000F88                     u3080:
  6388  000F88                     l3722:
  6389  000F88  0E00               	movlw	0
  6390  000F8A  6E10               	movwf	___fladd@aexp^0,c
  6391  000F8C  AE12               	btfss	___fladd@grs^0,7,c
  6392  000F8E  EFCB  F007         	goto	u3091
  6393  000F92  EFCD  F007         	goto	u3090
  6394  000F96                     u3091:
  6395  000F96  EFE5  F007         	goto	l1206
  6396  000F9A                     u3090:
  6397  000F9A  C012  F00B         	movff	___fladd@grs,??___fladd
  6398  000F9E  0E7F               	movlw	127
  6399  000FA0  160B               	andwf	??___fladd^0,f,c
  6400  000FA2  B4D8               	btfsc	status,2,c
  6401  000FA4  EFD6  F007         	goto	u3101
  6402  000FA8  EFD8  F007         	goto	u3100
  6403  000FAC                     u3101:
  6404  000FAC  EFDC  F007         	goto	l1207
  6405  000FB0                     u3100:
  6406  000FB0                     l3728:
  6407  000FB0  0E01               	movlw	1
  6408  000FB2  6E10               	movwf	___fladd@aexp^0,c
  6409  000FB4  EFE5  F007         	goto	l1206
  6410  000FB8                     l1207:
  6411  000FB8  A003               	btfss	___fladd@b^0,0,c
  6412  000FBA  EFE1  F007         	goto	u3111
  6413  000FBE  EFE3  F007         	goto	u3110
  6414  000FC2                     u3111:
  6415  000FC2  EFE5  F007         	goto	l1206
  6416  000FC6                     u3110:
  6417  000FC6  EFD8  F007         	goto	l3728
  6418  000FCA                     l1206:
  6419  000FCA  5010               	movf	___fladd@aexp^0,w,c
  6420  000FCC  B4D8               	btfsc	status,2,c
  6421  000FCE  EFEB  F007         	goto	u3121
  6422  000FD2  EFED  F007         	goto	u3120
  6423  000FD6                     u3121:
  6424  000FD6  EF18  F008         	goto	l3740
  6425  000FDA                     u3120:
  6426  000FDA  0E01               	movlw	1
  6427  000FDC  2603               	addwf	___fladd@b^0,f,c
  6428  000FDE  0E00               	movlw	0
  6429  000FE0  2204               	addwfc	(___fladd@b+1)^0,f,c
  6430  000FE2  2205               	addwfc	(___fladd@b+2)^0,f,c
  6431  000FE4  2206               	addwfc	(___fladd@b+3)^0,f,c
  6432  000FE6  A006               	btfss	(___fladd@b+3)^0,0,c
  6433  000FE8  EFF8  F007         	goto	u3131
  6434  000FEC  EFFA  F007         	goto	u3130
  6435  000FF0                     u3131:
  6436  000FF0  EF18  F008         	goto	l3740
  6437  000FF4                     u3130:
  6438  000FF4  C003  F00B         	movff	___fladd@b,??___fladd
  6439  000FF8  C004  F00C         	movff	___fladd@b+1,??___fladd+1
  6440  000FFC  C005  F00D         	movff	___fladd@b+2,??___fladd+2
  6441  001000  C006  F00E         	movff	___fladd@b+3,??___fladd+3
  6442  001004  340E               	rlcf	(??___fladd+3)^0,w,c
  6443  001006  320E               	rrcf	(??___fladd+3)^0,f,c
  6444  001008  320D               	rrcf	(??___fladd+2)^0,f,c
  6445  00100A  320C               	rrcf	(??___fladd+1)^0,f,c
  6446  00100C  320B               	rrcf	??___fladd^0,f,c
  6447  00100E  C00B  F003         	movff	??___fladd,___fladd@b
  6448  001012  C00C  F004         	movff	??___fladd+1,___fladd@b+1
  6449  001016  C00D  F005         	movff	??___fladd+2,___fladd@b+2
  6450  00101A  C00E  F006         	movff	??___fladd+3,___fladd@b+3
  6451  00101E  2811               	incf	___fladd@bexp^0,w,c
  6452  001020  B4D8               	btfsc	status,2,c
  6453  001022  EF15  F008         	goto	u3141
  6454  001026  EF17  F008         	goto	u3140
  6455  00102A                     u3141:
  6456  00102A  EF18  F008         	goto	l3740
  6457  00102E                     u3140:
  6458  00102E  2A11               	incf	___fladd@bexp^0,f,c
  6459  001030                     l3740:
  6460  001030  2811               	incf	___fladd@bexp^0,w,c
  6461  001032  B4D8               	btfsc	status,2,c
  6462  001034  EF1E  F008         	goto	u3151
  6463  001038  EF20  F008         	goto	u3150
  6464  00103C                     u3151:
  6465  00103C  EF28  F008         	goto	l3744
  6466  001040                     u3150:
  6467  001040  5011               	movf	___fladd@bexp^0,w,c
  6468  001042  A4D8               	btfss	status,2,c
  6469  001044  EF26  F008         	goto	u3161
  6470  001048  EF28  F008         	goto	u3160
  6471  00104C                     u3161:
  6472  00104C  EF3A  F008         	goto	l3748
  6473  001050                     u3160:
  6474  001050                     l3744:
  6475  001050  0E00               	movlw	0
  6476  001052  6E03               	movwf	___fladd@b^0,c
  6477  001054  0E00               	movlw	0
  6478  001056  6E04               	movwf	(___fladd@b+1)^0,c
  6479  001058  0E00               	movlw	0
  6480  00105A  6E05               	movwf	(___fladd@b+2)^0,c
  6481  00105C  0E00               	movlw	0
  6482  00105E  6E06               	movwf	(___fladd@b+3)^0,c
  6483  001060  5011               	movf	___fladd@bexp^0,w,c
  6484  001062  A4D8               	btfss	status,2,c
  6485  001064  EF36  F008         	goto	u3171
  6486  001068  EF38  F008         	goto	u3170
  6487  00106C                     u3171:
  6488  00106C  EF3A  F008         	goto	l3748
  6489  001070                     u3170:
  6490  001070  0E00               	movlw	0
  6491  001072  6E0F               	movwf	___fladd@signs^0,c
  6492  001074                     l3748:
  6493  001074  A011               	btfss	___fladd@bexp^0,0,c
  6494  001076  EF3F  F008         	goto	u3181
  6495  00107A  EF41  F008         	goto	u3180
  6496  00107E                     u3181:
  6497  00107E  EF44  F008         	goto	l3752
  6498  001082                     u3180:
  6499  001082  8E05               	bsf	(___fladd@b+2)^0,7,c
  6500  001084  EF45  F008         	goto	l3754
  6501  001088                     l3752:
  6502  001088  9E05               	bcf	(___fladd@b+2)^0,7,c
  6503  00108A                     l3754:
  6504  00108A  90D8               	bcf	status,0,c
  6505  00108C  3011               	rrcf	___fladd@bexp^0,w,c
  6506  00108E  6E06               	movwf	(___fladd@b+3)^0,c
  6507  001090  AE0F               	btfss	___fladd@signs^0,7,c
  6508  001092  EF4D  F008         	goto	u3191
  6509  001096  EF4F  F008         	goto	u3190
  6510  00109A                     u3191:
  6511  00109A  EF50  F008         	goto	l3760
  6512  00109E                     u3190:
  6513  00109E  8E06               	bsf	(___fladd@b+3)^0,7,c
  6514  0010A0                     l3760:
  6515  0010A0  C003  F003         	movff	___fladd@b,?___fladd
  6516  0010A4  C004  F004         	movff	___fladd@b+1,?___fladd+1
  6517  0010A8  C005  F005         	movff	___fladd@b+2,?___fladd+2
  6518  0010AC  C006  F006         	movff	___fladd@b+3,?___fladd+3
  6519  0010B0                     l1189:
  6520  0010B0  0012               	return		;funcret
  6521  0010B2                     __end_of___fladd:
  6522                           	callstack 0
  6523                           
  6524 ;; *************** function _Refresh_Screen *****************
  6525 ;; Defined at:
  6526 ;;		line 334 in file "main.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6540 ;;      Params:         0       0       0       0       0       0       0
  6541 ;;      Locals:         0       0       0       0       0       0       0
  6542 ;;      Temps:          0       0       0       0       0       0       0
  6543 ;;      Totals:         0       0       0       0       0       0       0
  6544 ;;Total ram usage:        0 bytes
  6545 ;; Hardware stack levels used: 1
  6546 ;; Hardware stack levels required when called: 5
  6547 ;; This function calls:
  6548 ;;		_Set_Display_Message
  6549 ;;		_Show_Display
  6550 ;; This function is called by:
  6551 ;;		_main
  6552 ;;		_Min_Lv1_Incr
  6553 ;;		_Min_Lv2_Incr
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           	psect	text28
  6558  003706                     __ptext28:
  6559                           	callstack 0
  6560  003706                     _Refresh_Screen:
  6561                           	callstack 25
  6562  003706                     
  6563                           ;main.c: 336: Set_Display_Message();
  6564  003706  ECF0  F00E         	call	_Set_Display_Message	;wreg free
  6565  00370A                     
  6566                           ;main.c: 337: Show_Display(display);
  6567  00370A  EE22  F032         	lfsr	2,_display	;volatile
  6568  00370E  EE00  F00B         	lfsr	0,Show_Display@display
  6569  003712  0E1F               	movlw	31
  6570  003714                     u2771:
  6571  003714  CFDB FFEB          	movff	plusw2,plusw0
  6572  003718  06E8               	decf	wreg,f,c
  6573  00371A  E2FC               	bc	u2771
  6574  00371C  EC5D  F01B         	call	_Show_Display	;wreg free
  6575  003720                     
  6576                           ;main.c: 338: refresh_display = 0;
  6577  003720  9070               	bcf	(_refresh_display/(0+8))^0,_refresh_display& (0+7),c	;volatile
  6578  003722  0012               	return		;funcret
  6579  003724                     __end_of_Refresh_Screen:
  6580                           	callstack 0
  6581                           
  6582 ;; *************** function _Show_Display *****************
  6583 ;; Defined at:
  6584 ;;		line 328 in file "main.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  display        32   10[COMRAM] struct .
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;		None
  6589 ;; Return value:  Size  Location     Type
  6590 ;;                  1    wreg      void 
  6591 ;; Registers used:
  6592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6598 ;;      Params:        32       0       0       0       0       0       0
  6599 ;;      Locals:         0       0       0       0       0       0       0
  6600 ;;      Temps:          0       0       0       0       0       0       0
  6601 ;;      Totals:        32       0       0       0       0       0       0
  6602 ;;Total ram usage:       32 bytes
  6603 ;; Hardware stack levels used: 1
  6604 ;; Hardware stack levels required when called: 4
  6605 ;; This function calls:
  6606 ;;		_Lcd_Out
  6607 ;; This function is called by:
  6608 ;;		_Refresh_Screen
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612                           	psect	text29
  6613  0036BA                     __ptext29:
  6614                           	callstack 0
  6615  0036BA                     _Show_Display:
  6616                           	callstack 25
  6617  0036BA                     
  6618                           ;main.c: 330: Lcd_Out(1, 0, display.line0);
  6619  0036BA  0E00               	movlw	0
  6620  0036BC  6E06               	movwf	Lcd_Out@x^0,c
  6621  0036BE  0E0B               	movlw	low Show_Display@display
  6622  0036C0  6E07               	movwf	Lcd_Out@buffer^0,c
  6623  0036C2  0E00               	movlw	high Show_Display@display
  6624  0036C4  6E08               	movwf	(Lcd_Out@buffer+1)^0,c
  6625  0036C6  0E01               	movlw	1
  6626  0036C8  EC8A  F018         	call	_Lcd_Out
  6627                           
  6628                           ;main.c: 331: Lcd_Out(2, 0, display.line1);
  6629  0036CC  0E00               	movlw	0
  6630  0036CE  6E06               	movwf	Lcd_Out@x^0,c
  6631  0036D0  0E1B               	movlw	low (Show_Display@display+16)
  6632  0036D2  6E07               	movwf	Lcd_Out@buffer^0,c
  6633  0036D4  0E00               	movlw	high (Show_Display@display+16)
  6634  0036D6  6E08               	movwf	(Lcd_Out@buffer+1)^0,c
  6635  0036D8  0E02               	movlw	2
  6636  0036DA  EC8A  F018         	call	_Lcd_Out
  6637  0036DE  0012               	return		;funcret
  6638  0036E0                     __end_of_Show_Display:
  6639                           	callstack 0
  6640                           
  6641 ;; *************** function _Lcd_Out *****************
  6642 ;; Defined at:
  6643 ;;		line 96 in file "flexlcd.h"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;  y               1    wreg     unsigned char 
  6646 ;;  x               1    5[COMRAM] unsigned char 
  6647 ;;  buffer          2    6[COMRAM] PTR const unsigned char 
  6648 ;;		 -> display.line1(16), display.line0(16), Show_Display@display(32), 
  6649 ;; Auto vars:     Size  Location     Type
  6650 ;;  y               1    8[COMRAM] unsigned char 
  6651 ;;  data            1    9[COMRAM] unsigned char 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      void 
  6654 ;; Registers used:
  6655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6661 ;;      Params:         3       0       0       0       0       0       0
  6662 ;;      Locals:         2       0       0       0       0       0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0
  6664 ;;      Totals:         5       0       0       0       0       0       0
  6665 ;;Total ram usage:        5 bytes
  6666 ;; Hardware stack levels used: 1
  6667 ;; Hardware stack levels required when called: 3
  6668 ;; This function calls:
  6669 ;;		_Lcd_Chr_CP
  6670 ;;		_Lcd_Cmd
  6671 ;; This function is called by:
  6672 ;;		_Show_Display
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text30
  6677  003114                     __ptext30:
  6678                           	callstack 0
  6679  003114                     _Lcd_Out:
  6680                           	callstack 25
  6681                           
  6682                           ;incstack = 0
  6683                           ;Lcd_Out@y stored from wreg
  6684  003114  6E09               	movwf	Lcd_Out@y^0,c
  6685  003116                     
  6686                           ;flexlcd.h: 98: unsigned char data;;flexlcd.h: 99: switch (y)
  6687  003116  EFA1  F018         	goto	l3242
  6688  00311A                     l3232:
  6689  00311A  5006               	movf	Lcd_Out@x^0,w,c
  6690  00311C  0F80               	addlw	128
  6691  00311E  6E0A               	movwf	Lcd_Out@data^0,c
  6692  003120  EFB4  F018         	goto	l3244
  6693  003124                     l3234:
  6694  003124  5006               	movf	Lcd_Out@x^0,w,c
  6695  003126  0FC0               	addlw	192
  6696  003128  6E0A               	movwf	Lcd_Out@data^0,c
  6697  00312A  EFB4  F018         	goto	l3244
  6698  00312E                     l3236:
  6699  00312E  5006               	movf	Lcd_Out@x^0,w,c
  6700  003130  0F94               	addlw	148
  6701  003132  6E0A               	movwf	Lcd_Out@data^0,c
  6702  003134  EFB4  F018         	goto	l3244
  6703  003138                     l3238:
  6704  003138  5006               	movf	Lcd_Out@x^0,w,c
  6705  00313A  0FD4               	addlw	212
  6706  00313C  6E0A               	movwf	Lcd_Out@data^0,c
  6707  00313E  EFB4  F018         	goto	l3244
  6708  003142                     l3242:
  6709  003142  5009               	movf	Lcd_Out@y^0,w,c
  6710                           
  6711                           ; Switch size 1, requested type "simple"
  6712                           ; Number of cases is 4, Range of values is 1 to 4
  6713                           ; switch strategies available:
  6714                           ; Name         Instructions Cycles
  6715                           ; simple_byte           13     7 (average)
  6716                           ;	Chosen strategy is simple_byte
  6717  003144  0A01               	xorlw	1	; case 1
  6718  003146  B4D8               	btfsc	status,2,c
  6719  003148  EF8D  F018         	goto	l3232
  6720  00314C  0A03               	xorlw	3	; case 2
  6721  00314E  B4D8               	btfsc	status,2,c
  6722  003150  EF92  F018         	goto	l3234
  6723  003154  0A01               	xorlw	1	; case 3
  6724  003156  B4D8               	btfsc	status,2,c
  6725  003158  EF97  F018         	goto	l3236
  6726  00315C  0A07               	xorlw	7	; case 4
  6727  00315E  B4D8               	btfsc	status,2,c
  6728  003160  EF9C  F018         	goto	l3238
  6729  003164  EFB4  F018         	goto	l3244
  6730  003168                     l3244:
  6731                           
  6732                           ;flexlcd.h: 107: Lcd_Cmd(data);
  6733  003168  500A               	movf	Lcd_Out@data^0,w,c
  6734  00316A  ECBC  F011         	call	_Lcd_Cmd
  6735                           
  6736                           ;flexlcd.h: 108: while(*buffer)
  6737  00316E  EFC2  F018         	goto	l3250
  6738  003172                     l3246:
  6739                           
  6740                           ;flexlcd.h: 109: {;flexlcd.h: 110: Lcd_Chr_CP(*buffer);
  6741  003172  C007  FFD9         	movff	Lcd_Out@buffer,fsr2l
  6742  003176  C008  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
  6743  00317A  50DF               	movf	indf2,w,c
  6744  00317C  EC8F  F010         	call	_Lcd_Chr_CP
  6745  003180                     
  6746                           ;flexlcd.h: 111: buffer++;
  6747  003180  4A07               	infsnz	Lcd_Out@buffer^0,f,c
  6748  003182  2A08               	incf	(Lcd_Out@buffer+1)^0,f,c
  6749  003184                     l3250:
  6750  003184  C007  FFD9         	movff	Lcd_Out@buffer,fsr2l
  6751  003188  C008  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
  6752  00318C  50DF               	movf	indf2,w,c
  6753  00318E  A4D8               	btfss	status,2,c
  6754  003190  EFCC  F018         	goto	u2381
  6755  003194  EFCE  F018         	goto	u2380
  6756  003198                     u2381:
  6757  003198  EFB9  F018         	goto	l3246
  6758  00319C                     u2380:
  6759  00319C  0012               	return		;funcret
  6760  00319E                     __end_of_Lcd_Out:
  6761                           	callstack 0
  6762                           
  6763 ;; *************** function _Lcd_Chr_CP *****************
  6764 ;; Defined at:
  6765 ;;		line 117 in file "flexlcd.h"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  data            1    wreg     unsigned char 
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;  data            1    4[COMRAM] unsigned char 
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      void 
  6772 ;; Registers used:
  6773 ;;		wreg, status,2, status,0
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6779 ;;      Params:         0       0       0       0       0       0       0
  6780 ;;      Locals:         1       0       0       0       0       0       0
  6781 ;;      Temps:          2       0       0       0       0       0       0
  6782 ;;      Totals:         3       0       0       0       0       0       0
  6783 ;;Total ram usage:        3 bytes
  6784 ;; Hardware stack levels used: 1
  6785 ;; Hardware stack levels required when called: 2
  6786 ;; This function calls:
  6787 ;;		Nothing
  6788 ;; This function is called by:
  6789 ;;		_Lcd_Out
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           	psect	text31
  6794  00211E                     __ptext31:
  6795                           	callstack 0
  6796  00211E                     _Lcd_Chr_CP:
  6797                           	callstack 25
  6798                           
  6799                           ;incstack = 0
  6800                           ;Lcd_Chr_CP@data stored from wreg
  6801  00211E  6E05               	movwf	Lcd_Chr_CP@data^0,c
  6802  002120                     
  6803                           ;flexlcd.h: 118: PORTEbits.RE1 = 0; PORTEbits.RE2 = 1;
  6804  002120  9284               	bcf	132,1,c	;volatile
  6805  002122  8484               	bsf	132,2,c	;volatile
  6806  002124                     
  6807                           ;flexlcd.h: 119: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  6808  002124  6A03               	clrf	??_Lcd_Chr_CP^0,c
  6809  002126  AE05               	btfss	Lcd_Chr_CP@data^0,7,c
  6810  002128  D001               	bra	u2275
  6811  00212A  2A03               	incf	??_Lcd_Chr_CP^0,f,c
  6812  00212C                     u2275:
  6813  00212C  0E01               	movlw	1
  6814  00212E  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6815  002130  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6816  002132  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6817  002134  5083               	movf	131,w,c	;volatile
  6818  002136  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6819  002138  0B7F               	andlw	-129
  6820  00213A  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6821  00213C  6E83               	movwf	131,c	;volatile
  6822  00213E  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6823  002142  0E06               	movlw	6
  6824  002144  6E04               	movwf	(??_Lcd_Chr_CP+1)^0,c
  6825  002146                     u2285:
  6826  002146  90D8               	bcf	status,0,c
  6827  002148  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6828  00214A  2E04               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  6829  00214C  EFA3  F010         	goto	u2285
  6830  002150  0E01               	movlw	1
  6831  002152  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6832  002154  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  6833  002156  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  6834  002158  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  6835  00215A  5083               	movf	131,w,c	;volatile
  6836  00215C  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6837  00215E  0BBF               	andlw	-65
  6838  002160  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6839  002162  6E83               	movwf	131,c	;volatile
  6840                           
  6841                           ;flexlcd.h: 120: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  6842  002164  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6843  002168  0E05               	movlw	5
  6844  00216A  6E04               	movwf	(??_Lcd_Chr_CP+1)^0,c
  6845  00216C                     u2295:
  6846  00216C  90D8               	bcf	status,0,c
  6847  00216E  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6848  002170  2E04               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  6849  002172  EFB6  F010         	goto	u2295
  6850  002176  0E01               	movlw	1
  6851  002178  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6852  00217A  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  6853  00217C  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  6854  00217E  5083               	movf	131,w,c	;volatile
  6855  002180  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6856  002182  0BDF               	andlw	-33
  6857  002184  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6858  002186  6E83               	movwf	131,c	;volatile
  6859  002188  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6860  00218C  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  6861  00218E  0E0F               	movlw	15
  6862  002190  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6863  002192  0E01               	movlw	1
  6864  002194  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6865  002196  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  6866  002198  5083               	movf	131,w,c	;volatile
  6867  00219A  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6868  00219C  0BEF               	andlw	-17
  6869  00219E  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6870  0021A0  6E83               	movwf	131,c	;volatile
  6871  0021A2                     
  6872                           ;flexlcd.h: 121: _delay(10);
  6873  0021A2  0E03               	movlw	3
  6874  0021A4                     u4477:
  6875  0021A4  2EE8               	decfsz	wreg,f,c
  6876  0021A6  D7FE               	bra	u4477
  6877  0021A8  F000               	nop	
  6878  0021AA                     
  6879                           ;flexlcd.h: 122: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  6880  0021AA  8284               	bsf	132,1,c	;volatile
  6881  0021AC  0E04               	movlw	4
  6882  0021AE                     u4487:
  6883  0021AE  2EE8               	decfsz	wreg,f,c
  6884  0021B0  D7FE               	bra	u4487
  6885  0021B2  9284               	bcf	132,1,c	;volatile
  6886                           
  6887                           ;flexlcd.h: 123: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  6888  0021B4  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6889  0021B8  90D8               	bcf	status,0,c
  6890  0021BA  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6891  0021BC  90D8               	bcf	status,0,c
  6892  0021BE  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6893  0021C0  90D8               	bcf	status,0,c
  6894  0021C2  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6895  0021C4  0E01               	movlw	1
  6896  0021C6  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6897  0021C8  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6898  0021CA  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6899  0021CC  5083               	movf	131,w,c	;volatile
  6900  0021CE  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6901  0021D0  0B7F               	andlw	-129
  6902  0021D2  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6903  0021D4  6E83               	movwf	131,c	;volatile
  6904  0021D6  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6905  0021DA  90D8               	bcf	status,0,c
  6906  0021DC  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6907  0021DE  90D8               	bcf	status,0,c
  6908  0021E0  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6909  0021E2  0E01               	movlw	1
  6910  0021E4  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6911  0021E6  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  6912  0021E8  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  6913  0021EA  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  6914  0021EC  5083               	movf	131,w,c	;volatile
  6915  0021EE  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6916  0021F0  0BBF               	andlw	-65
  6917  0021F2  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6918  0021F4  6E83               	movwf	131,c	;volatile
  6919                           
  6920                           ;flexlcd.h: 124: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  6921  0021F6  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6922  0021FA  90D8               	bcf	status,0,c
  6923  0021FC  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6924  0021FE  0E01               	movlw	1
  6925  002200  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6926  002202  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  6927  002204  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  6928  002206  5083               	movf	131,w,c	;volatile
  6929  002208  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6930  00220A  0BDF               	andlw	-33
  6931  00220C  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6932  00220E  6E83               	movwf	131,c	;volatile
  6933  002210  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6934  002214  0E01               	movlw	1
  6935  002216  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6936  002218  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  6937  00221A  5083               	movf	131,w,c	;volatile
  6938  00221C  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6939  00221E  0BEF               	andlw	-17
  6940  002220  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6941  002222  6E83               	movwf	131,c	;volatile
  6942  002224                     
  6943                           ;flexlcd.h: 125: _delay(10);
  6944  002224  0E03               	movlw	3
  6945  002226                     u4497:
  6946  002226  2EE8               	decfsz	wreg,f,c
  6947  002228  D7FE               	bra	u4497
  6948  00222A  F000               	nop	
  6949  00222C                     
  6950                           ;flexlcd.h: 126: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  6951  00222C  8284               	bsf	132,1,c	;volatile
  6952  00222E  0E04               	movlw	4
  6953  002230                     u4507:
  6954  002230  2EE8               	decfsz	wreg,f,c
  6955  002232  D7FE               	bra	u4507
  6956  002234  9284               	bcf	132,1,c	;volatile
  6957  002236                     
  6958                           ;flexlcd.h: 127: _delay((unsigned long)((5)*(10000000/4000000.0))); _delay((unsigned lon
      +                          g)((5500)*(10000000/4000000.0)));
  6959  002236  0E04               	movlw	4
  6960  002238                     u4517:
  6961  002238  2EE8               	decfsz	wreg,f,c
  6962  00223A  D7FE               	bra	u4517
  6963  00223C  0E12               	movlw	18
  6964  00223E  6E03               	movwf	??_Lcd_Chr_CP^0,c
  6965  002240  0EDA               	movlw	218
  6966  002242                     u4527:
  6967  002242  2EE8               	decfsz	wreg,f,c
  6968  002244  D7FE               	bra	u4527
  6969  002246  2E03               	decfsz	??_Lcd_Chr_CP^0,f,c
  6970  002248  D7FC               	bra	u4527
  6971  00224A  D000               	nop2	
  6972  00224C  0012               	return		;funcret
  6973  00224E                     __end_of_Lcd_Chr_CP:
  6974                           	callstack 0
  6975                           
  6976 ;; *************** function _Set_Display_Message *****************
  6977 ;; Defined at:
  6978 ;;		line 225 in file "main.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;		None
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;		None
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  1    wreg      void 
  6985 ;; Registers used:
  6986 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6992 ;;      Params:         0       0       0       0       0       0       0
  6993 ;;      Locals:         2       0       0       0       0       0       0
  6994 ;;      Temps:          0       0       0       0       0       0       0
  6995 ;;      Totals:         2       0       0       0       0       0       0
  6996 ;;Total ram usage:        2 bytes
  6997 ;; Hardware stack levels used: 1
  6998 ;; Hardware stack levels required when called: 4
  6999 ;; This function calls:
  7000 ;;		___fltol
  7001 ;;		_sprintf
  7002 ;;		_strcpy
  7003 ;; This function is called by:
  7004 ;;		_Refresh_Screen
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           	psect	text32
  7009  001DE0                     __ptext32:
  7010                           	callstack 0
  7011  001DE0                     _Set_Display_Message:
  7012                           	callstack 25
  7013  001DE0                     
  7014                           ;main.c: 227: if (screen == CURRENT_LEVEL)
  7015  001DE0  5057               	movf	_screen^0,w,c	;volatile
  7016  001DE2  A4D8               	btfss	status,2,c
  7017  001DE4  EFF6  F00E         	goto	u2711
  7018  001DE8  EFF8  F00E         	goto	u2710
  7019  001DEC                     u2711:
  7020  001DEC  EF2A  F00F         	goto	l3476
  7021  001DF0                     u2710:
  7022  001DF0                     
  7023                           ;main.c: 228: {;main.c: 229: sprintf(display.line0, "CURRENT LV1: %d%%  ", (int)tank1.le
      +                          vel);
  7024  001DF0  0E32               	movlw	low _display
  7025  001DF2  6E0F               	movwf	sprintf@sp^0,c
  7026  001DF4  0E02               	movlw	high _display
  7027  001DF6  6E10               	movwf	(sprintf@sp+1)^0,c
  7028  001DF8  0E2C               	movlw	low STR_1
  7029  001DFA  6E11               	movwf	sprintf@f^0,c
  7030  001DFC  0E06               	movlw	high STR_1
  7031  001DFE  6E12               	movwf	(sprintf@f+1)^0,c
  7032  001E00  C047  F003         	movff	_tank1,___fltol@f1	;volatile
  7033  001E04  C048  F004         	movff	_tank1+1,___fltol@f1+1	;volatile
  7034  001E08  C049  F005         	movff	_tank1+2,___fltol@f1+2	;volatile
  7035  001E0C  C04A  F006         	movff	_tank1+3,___fltol@f1+3	;volatile
  7036  001E10  EC79  F014         	call	___fltol	;wreg free
  7037  001E14  C003  F013         	movff	?___fltol,?_sprintf+4
  7038  001E18  C004  F014         	movff	?___fltol+1,?_sprintf+5
  7039  001E1C  EC66  F003         	call	_sprintf	;wreg free
  7040                           
  7041                           ;main.c: 230: sprintf(display.line1, "CURRENT LV2: %d%%  ", (int)tank2.level);
  7042  001E20  0E42               	movlw	low (_display+16)
  7043  001E22  6E0F               	movwf	sprintf@sp^0,c
  7044  001E24  0E02               	movlw	high (_display+16)
  7045  001E26  6E10               	movwf	(sprintf@sp+1)^0,c
  7046  001E28  0E40               	movlw	low STR_2
  7047  001E2A  6E11               	movwf	sprintf@f^0,c
  7048  001E2C  0E06               	movlw	high STR_2
  7049  001E2E  6E12               	movwf	(sprintf@f+1)^0,c
  7050  001E30  C03B  F003         	movff	_tank2,___fltol@f1	;volatile
  7051  001E34  C03C  F004         	movff	_tank2+1,___fltol@f1+1	;volatile
  7052  001E38  C03D  F005         	movff	_tank2+2,___fltol@f1+2	;volatile
  7053  001E3C  C03E  F006         	movff	_tank2+3,___fltol@f1+3	;volatile
  7054  001E40  EC79  F014         	call	___fltol	;wreg free
  7055  001E44  C003  F013         	movff	?___fltol,?_sprintf+4
  7056  001E48  C004  F014         	movff	?___fltol+1,?_sprintf+5
  7057  001E4C  EC66  F003         	call	_sprintf	;wreg free
  7058                           
  7059                           ;main.c: 231: }
  7060  001E50  EFC4  F00F         	goto	l241
  7061  001E54                     l3476:
  7062                           
  7063                           ;main.c: 232: else if (screen == OPERATION_MODE)
  7064  001E54  0457               	decf	_screen^0,w,c	;volatile
  7065  001E56  A4D8               	btfss	status,2,c
  7066  001E58  EF30  F00F         	goto	u2721
  7067  001E5C  EF32  F00F         	goto	u2720
  7068  001E60                     u2721:
  7069  001E60  EF5A  F00F         	goto	l3488
  7070  001E64                     u2720:
  7071  001E64                     
  7072                           ;main.c: 233: {;main.c: 234: strcpy(display.line0, "OPERATION MODE: ");
  7073  001E64  0E32               	movlw	low _display
  7074  001E66  6E03               	movwf	strcpy@to^0,c
  7075  001E68  0E02               	movlw	high _display
  7076  001E6A  6E04               	movwf	(strcpy@to+1)^0,c
  7077  001E6C  0E9A               	movlw	low STR_3
  7078  001E6E  6E05               	movwf	strcpy@from^0,c
  7079  001E70  0E06               	movlw	high STR_3
  7080  001E72  6E06               	movwf	(strcpy@from+1)^0,c
  7081  001E74  EC7B  F01A         	call	_strcpy	;wreg free
  7082  001E78                     
  7083                           ;main.c: 235: strcpy(display.line1, operation == AUTOMATIC ? "AUTOMATIC      " : "MANUAL
      +                                   ");
  7084  001E78  5058               	movf	_operation^0,w,c	;volatile
  7085  001E7A  B4D8               	btfsc	status,2,c
  7086  001E7C  EF42  F00F         	goto	u2731
  7087  001E80  EF44  F00F         	goto	u2730
  7088  001E84                     u2731:
  7089  001E84  EF4A  F00F         	goto	l3484
  7090  001E88                     u2730:
  7091  001E88  0EAB               	movlw	low STR_5
  7092  001E8A  6E2D               	movwf	_Set_Display_Message$750^0,c
  7093  001E8C  0E06               	movlw	high STR_5
  7094  001E8E  6E2E               	movwf	(_Set_Display_Message$750+1)^0,c
  7095  001E90  EF4E  F00F         	goto	l3486
  7096  001E94                     l3484:
  7097  001E94  0EBB               	movlw	low STR_4
  7098  001E96  6E2D               	movwf	_Set_Display_Message$750^0,c
  7099  001E98  0E06               	movlw	high STR_4
  7100  001E9A  6E2E               	movwf	(_Set_Display_Message$750+1)^0,c
  7101  001E9C                     l3486:
  7102  001E9C  0E42               	movlw	low (_display+16)
  7103  001E9E  6E03               	movwf	strcpy@to^0,c
  7104  001EA0  0E02               	movlw	high (_display+16)
  7105  001EA2  6E04               	movwf	(strcpy@to+1)^0,c
  7106  001EA4  C02D  F005         	movff	_Set_Display_Message$750,strcpy@from
  7107  001EA8  C02E  F006         	movff	_Set_Display_Message$750+1,strcpy@from+1
  7108  001EAC  EC7B  F01A         	call	_strcpy	;wreg free
  7109                           
  7110                           ;main.c: 236: }
  7111  001EB0  EFC4  F00F         	goto	l241
  7112  001EB4                     l3488:
  7113                           
  7114                           ;main.c: 237: else if (screen == MIN_LEVEL)
  7115  001EB4  0E02               	movlw	2
  7116  001EB6  1857               	xorwf	_screen^0,w,c	;volatile
  7117  001EB8  A4D8               	btfss	status,2,c
  7118  001EBA  EF61  F00F         	goto	u2741
  7119  001EBE  EF63  F00F         	goto	u2740
  7120  001EC2                     u2741:
  7121  001EC2  EF95  F00F         	goto	l3492
  7122  001EC6                     u2740:
  7123  001EC6                     
  7124                           ;main.c: 238: {;main.c: 239: sprintf(display.line0, "LV_MIN_1: %d%%   ", (int)tank1.min_
      +                          level);
  7125  001EC6  0E32               	movlw	low _display
  7126  001EC8  6E0F               	movwf	sprintf@sp^0,c
  7127  001ECA  0E02               	movlw	high _display
  7128  001ECC  6E10               	movwf	(sprintf@sp+1)^0,c
  7129  001ECE  0E54               	movlw	low STR_6
  7130  001ED0  6E11               	movwf	sprintf@f^0,c
  7131  001ED2  0E06               	movlw	high STR_6
  7132  001ED4  6E12               	movwf	(sprintf@f+1)^0,c
  7133  001ED6  C04B  F003         	movff	_tank1+4,___fltol@f1	;volatile
  7134  001EDA  C04C  F004         	movff	_tank1+5,___fltol@f1+1	;volatile
  7135  001EDE  C04D  F005         	movff	_tank1+6,___fltol@f1+2	;volatile
  7136  001EE2  C04E  F006         	movff	_tank1+7,___fltol@f1+3	;volatile
  7137  001EE6  EC79  F014         	call	___fltol	;wreg free
  7138  001EEA  C003  F013         	movff	?___fltol,?_sprintf+4
  7139  001EEE  C004  F014         	movff	?___fltol+1,?_sprintf+5
  7140  001EF2  EC66  F003         	call	_sprintf	;wreg free
  7141                           
  7142                           ;main.c: 240: sprintf(display.line1, "LV_MIN_2: %d%%   ", (int)tank2.min_level);
  7143  001EF6  0E42               	movlw	low (_display+16)
  7144  001EF8  6E0F               	movwf	sprintf@sp^0,c
  7145  001EFA  0E02               	movlw	high (_display+16)
  7146  001EFC  6E10               	movwf	(sprintf@sp+1)^0,c
  7147  001EFE  0E66               	movlw	low STR_7
  7148  001F00  6E11               	movwf	sprintf@f^0,c
  7149  001F02  0E06               	movlw	high STR_7
  7150  001F04  6E12               	movwf	(sprintf@f+1)^0,c
  7151  001F06  C03F  F003         	movff	_tank2+4,___fltol@f1	;volatile
  7152  001F0A  C040  F004         	movff	_tank2+5,___fltol@f1+1	;volatile
  7153  001F0E  C041  F005         	movff	_tank2+6,___fltol@f1+2	;volatile
  7154  001F12  C042  F006         	movff	_tank2+7,___fltol@f1+3	;volatile
  7155  001F16  EC79  F014         	call	___fltol	;wreg free
  7156  001F1A  C003  F013         	movff	?___fltol,?_sprintf+4
  7157  001F1E  C004  F014         	movff	?___fltol+1,?_sprintf+5
  7158  001F22  EC66  F003         	call	_sprintf	;wreg free
  7159                           
  7160                           ;main.c: 241: }
  7161  001F26  EFC4  F00F         	goto	l241
  7162  001F2A                     l3492:
  7163                           
  7164                           ;main.c: 242: else if (screen == MODBUS)
  7165  001F2A  0E03               	movlw	3
  7166  001F2C  1857               	xorwf	_screen^0,w,c	;volatile
  7167  001F2E  A4D8               	btfss	status,2,c
  7168  001F30  EF9C  F00F         	goto	u2751
  7169  001F34  EF9E  F00F         	goto	u2750
  7170  001F38                     u2751:
  7171  001F38  EFC4  F00F         	goto	l237
  7172  001F3C                     u2750:
  7173  001F3C                     
  7174                           ;main.c: 243: {;main.c: 244: strcpy(display.line0, "MODBUS:         ");
  7175  001F3C  0E32               	movlw	low _display
  7176  001F3E  6E03               	movwf	strcpy@to^0,c
  7177  001F40  0E02               	movlw	high _display
  7178  001F42  6E04               	movwf	(strcpy@to+1)^0,c
  7179  001F44  0E89               	movlw	low STR_8
  7180  001F46  6E05               	movwf	strcpy@from^0,c
  7181  001F48  0E06               	movlw	high STR_8
  7182  001F4A  6E06               	movwf	(strcpy@from+1)^0,c
  7183  001F4C  EC7B  F01A         	call	_strcpy	;wreg free
  7184  001F50                     
  7185                           ;main.c: 245: sprintf(display.line1, "%02X %02X %02X %02X     ", holdingReg[0], holdingR
      +                          eg[1], holdingReg[2], holdingReg[3]);
  7186  001F50  0E42               	movlw	low (_display+16)
  7187  001F52  6E0F               	movwf	sprintf@sp^0,c
  7188  001F54  0E02               	movlw	high (_display+16)
  7189  001F56  6E10               	movwf	(sprintf@sp+1)^0,c
  7190  001F58  0E13               	movlw	low STR_9
  7191  001F5A  6E11               	movwf	sprintf@f^0,c
  7192  001F5C  0E06               	movlw	high STR_9
  7193  001F5E  6E12               	movwf	(sprintf@f+1)^0,c
  7194  001F60  C17D  F013         	movff	_holdingReg,?_sprintf+4	;volatile
  7195  001F64  C17E  F014         	movff	_holdingReg+1,?_sprintf+5	;volatile
  7196  001F68  C17F  F015         	movff	_holdingReg+2,?_sprintf+6	;volatile
  7197  001F6C  C180  F016         	movff	_holdingReg+3,?_sprintf+7	;volatile
  7198  001F70  C181  F017         	movff	_holdingReg+4,?_sprintf+8	;volatile
  7199  001F74  C182  F018         	movff	_holdingReg+5,?_sprintf+9	;volatile
  7200  001F78  C183  F019         	movff	_holdingReg+6,?_sprintf+10	;volatile
  7201  001F7C  C184  F01A         	movff	_holdingReg+7,?_sprintf+11	;volatile
  7202  001F80  EC66  F003         	call	_sprintf	;wreg free
  7203  001F84  EFC4  F00F         	goto	l241
  7204  001F88                     l237:
  7205  001F88                     l241:
  7206  001F88  0012               	return		;funcret
  7207  001F8A                     __end_of_Set_Display_Message:
  7208                           	callstack 0
  7209                           
  7210 ;; *************** function _strcpy *****************
  7211 ;; Defined at:
  7212 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\strcpy.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;  to              2    2[COMRAM] PTR unsigned char 
  7215 ;;		 -> display.line1(16), display.line0(16), display(32), 
  7216 ;;  from            2    4[COMRAM] PTR const unsigned char 
  7217 ;;		 -> STR_8(17), STR_5(16), STR_4(16), STR_3(17), 
  7218 ;; Auto vars:     Size  Location     Type
  7219 ;;  cp              2    6[COMRAM] PTR unsigned char 
  7220 ;;		 -> display.line1(16), display.line0(16), display(32), 
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  2    2[COMRAM] PTR unsigned char 
  7223 ;; Registers used:
  7224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7230 ;;      Params:         4       0       0       0       0       0       0
  7231 ;;      Locals:         2       0       0       0       0       0       0
  7232 ;;      Temps:          0       0       0       0       0       0       0
  7233 ;;      Totals:         6       0       0       0       0       0       0
  7234 ;;Total ram usage:        6 bytes
  7235 ;; Hardware stack levels used: 1
  7236 ;; Hardware stack levels required when called: 2
  7237 ;; This function calls:
  7238 ;;		Nothing
  7239 ;; This function is called by:
  7240 ;;		_Set_Display_Message
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           	psect	text33
  7245  0034F6                     __ptext33:
  7246                           	callstack 0
  7247  0034F6                     _strcpy:
  7248                           	callstack 26
  7249  0034F6  C003  F007         	movff	strcpy@to,strcpy@cp
  7250  0034FA  C004  F008         	movff	strcpy@to+1,strcpy@cp+1
  7251  0034FE  EF85  F01A         	goto	l3426
  7252  003502                     l3424:
  7253  003502  4A07               	infsnz	strcpy@cp^0,f,c
  7254  003504  2A08               	incf	(strcpy@cp+1)^0,f,c
  7255  003506  4A05               	infsnz	strcpy@from^0,f,c
  7256  003508  2A06               	incf	(strcpy@from+1)^0,f,c
  7257  00350A                     l3426:
  7258  00350A  C005  FFF6         	movff	strcpy@from,tblptrl
  7259  00350E  C006  FFF7         	movff	strcpy@from+1,tblptrh
  7260  003512                     	if	0	;tblptru may be non-zero
  7261  003512                     	endif
  7262  003512                     	if	0	;tblptru may be non-zero
  7263  003512                     	endif
  7264  003512  C007  FFD9         	movff	strcpy@cp,fsr2l
  7265  003516  C008  FFDA         	movff	strcpy@cp+1,fsr2h
  7266  00351A  0008               	tblrd		*
  7267  00351C  CFF5 FFDF          	movff	tablat,indf2
  7268  003520  50DF               	movf	indf2,w,c
  7269  003522  A4D8               	btfss	status,2,c
  7270  003524  EF96  F01A         	goto	u2631
  7271  003528  EF98  F01A         	goto	u2630
  7272  00352C                     u2631:
  7273  00352C  EF81  F01A         	goto	l3424
  7274  003530                     u2630:
  7275  003530  0012               	return		;funcret
  7276  003532                     __end_of_strcpy:
  7277                           	callstack 0
  7278                           
  7279 ;; *************** function _sprintf *****************
  7280 ;; Defined at:
  7281 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;  sp              2   14[COMRAM] PTR unsigned char 
  7284 ;;		 -> display.line1(16), display.line0(16), display(32), 
  7285 ;;  f               2   16[COMRAM] PTR const unsigned char 
  7286 ;;		 -> STR_9(25), STR_7(18), STR_6(18), STR_2(20), 
  7287 ;;		 -> STR_1(20), 
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;  idx             1   32[COMRAM] unsigned char 
  7290 ;;  tmpval          4    0        struct .
  7291 ;;  width           2   41[COMRAM] int 
  7292 ;;  val             2   38[COMRAM] unsigned int 
  7293 ;;  len             2   35[COMRAM] unsigned int 
  7294 ;;  ap              2   33[COMRAM] PTR void [1]
  7295 ;;		 -> ?_sprintf(2), 
  7296 ;;  cp              2   30[COMRAM] PTR const unsigned char 
  7297 ;;		 -> sprintf@c(1), 
  7298 ;;  c               1   43[COMRAM] unsigned char 
  7299 ;;  flag            1   40[COMRAM] unsigned char 
  7300 ;;  prec            1   37[COMRAM] char 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  2   14[COMRAM] int 
  7303 ;; Registers used:
  7304 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7310 ;;      Params:        12       0       0       0       0       0       0
  7311 ;;      Locals:        14       0       0       0       0       0       0
  7312 ;;      Temps:          4       0       0       0       0       0       0
  7313 ;;      Totals:        30       0       0       0       0       0       0
  7314 ;;Total ram usage:       30 bytes
  7315 ;; Hardware stack levels used: 1
  7316 ;; Hardware stack levels required when called: 3
  7317 ;; This function calls:
  7318 ;;		___lwdiv
  7319 ;;		___lwmod
  7320 ;;		___wmul
  7321 ;;		_isdigit
  7322 ;; This function is called by:
  7323 ;;		_Set_Display_Message
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           	psect	text34
  7328  0006CC                     __ptext34:
  7329                           	callstack 0
  7330  0006CC                     _sprintf:
  7331                           	callstack 25
  7332  0006CC                     
  7333                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
  7334  0006CC  0E13               	movlw	low (?_sprintf+4)
  7335  0006CE  6E22               	movwf	sprintf@ap^0,c
  7336  0006D0  0E00               	movlw	high (?_sprintf+4)
  7337  0006D2  6E23               	movwf	(sprintf@ap+1)^0,c
  7338                           
  7339                           ;doprnt.c: 553: while((c = *f++)) {
  7340  0006D4  EFE1  F005         	goto	l3416
  7341  0006D8                     l3254:
  7342                           
  7343                           ;doprnt.c: 555: if(c != '%')
  7344  0006D8  0E25               	movlw	37
  7345  0006DA  182C               	xorwf	sprintf@c^0,w,c
  7346  0006DC  B4D8               	btfsc	status,2,c
  7347  0006DE  EF73  F003         	goto	u2391
  7348  0006E2  EF75  F003         	goto	u2390
  7349  0006E6                     u2391:
  7350  0006E6  EF7F  F003         	goto	l3260
  7351  0006EA                     u2390:
  7352  0006EA                     
  7353                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  7354  0006EA  C00F  FFD9         	movff	sprintf@sp,fsr2l
  7355  0006EE  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  7356  0006F2  C02C  FFDF         	movff	sprintf@c,indf2
  7357  0006F6  4A0F               	infsnz	sprintf@sp^0,f,c
  7358  0006F8  2A10               	incf	(sprintf@sp+1)^0,f,c
  7359                           
  7360                           ;doprnt.c: 559: continue;
  7361  0006FA  EFE1  F005         	goto	l3416
  7362  0006FE                     l3260:
  7363                           
  7364                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
  7365  0006FE  0E00               	movlw	0
  7366  000700  6E2B               	movwf	(sprintf@width+1)^0,c
  7367  000702  0E00               	movlw	0
  7368  000704  6E2A               	movwf	sprintf@width^0,c
  7369                           
  7370                           ;doprnt.c: 565: flag = 0;
  7371  000706  0E00               	movlw	0
  7372  000708  6E29               	movwf	sprintf@flag^0,c
  7373  00070A  EF8A  F003         	goto	l3266
  7374  00070E                     l3262:
  7375                           
  7376                           ;doprnt.c: 597: flag |= 0x04;
  7377  00070E  8429               	bsf	sprintf@flag^0,2,c
  7378                           
  7379                           ;doprnt.c: 598: f++;
  7380  000710  4A11               	infsnz	sprintf@f^0,f,c
  7381  000712  2A12               	incf	(sprintf@f+1)^0,f,c
  7382  000714                     l3266:
  7383  000714  C011  FFF6         	movff	sprintf@f,tblptrl
  7384  000718  C012  FFF7         	movff	sprintf@f+1,tblptrh
  7385  00071C                     	if	0	;tblptru may be non-zero
  7386  00071C                     	endif
  7387  00071C                     	if	0	;tblptru may be non-zero
  7388  00071C                     	endif
  7389  00071C  0008               	tblrd		*
  7390  00071E  50F5               	movf	tablat,w,c
  7391                           
  7392                           ; Switch size 1, requested type "simple"
  7393                           ; Number of cases is 1, Range of values is 48 to 48
  7394                           ; switch strategies available:
  7395                           ; Name         Instructions Cycles
  7396                           ; simple_byte            4     3 (average)
  7397                           ;	Chosen strategy is simple_byte
  7398  000720  0A30               	xorlw	48	; case 48
  7399  000722  B4D8               	btfsc	status,2,c
  7400  000724  EF87  F003         	goto	l3262
  7401  000728  EF96  F003         	goto	l3268
  7402  00072C                     l3268:
  7403                           
  7404                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
  7405  00072C  C011  FFF6         	movff	sprintf@f,tblptrl
  7406  000730  C012  FFF7         	movff	sprintf@f+1,tblptrh
  7407  000734                     	if	0	;tblptru may be non-zero
  7408  000734                     	endif
  7409  000734                     	if	0	;tblptru may be non-zero
  7410  000734                     	endif
  7411  000734  0008               	tblrd		*
  7412  000736  50F5               	movf	tablat,w,c
  7413  000738  ECD2  F01A         	call	_isdigit
  7414  00073C  A0D8               	btfss	status,0,c
  7415  00073E  EFA3  F003         	goto	u2401
  7416  000742  EFA5  F003         	goto	u2400
  7417  000746                     u2401:
  7418  000746  EF35  F004         	goto	l3308
  7419  00074A                     u2400:
  7420  00074A                     
  7421                           ;doprnt.c: 615: width = 0;
  7422  00074A  0E00               	movlw	0
  7423  00074C  6E2B               	movwf	(sprintf@width+1)^0,c
  7424  00074E  0E00               	movlw	0
  7425  000750  6E2A               	movwf	sprintf@width^0,c
  7426  000752                     l3272:
  7427                           
  7428                           ;doprnt.c: 617: width *= 10;
  7429  000752  C02A  F003         	movff	sprintf@width,___wmul@multiplier
  7430  000756  C02B  F004         	movff	sprintf@width+1,___wmul@multiplier+1
  7431  00075A  0E00               	movlw	0
  7432  00075C  6E06               	movwf	(___wmul@multiplicand+1)^0,c
  7433  00075E  0E0A               	movlw	10
  7434  000760  6E05               	movwf	___wmul@multiplicand^0,c
  7435  000762  EC70  F01B         	call	___wmul	;wreg free
  7436  000766  C003  F02A         	movff	?___wmul,sprintf@width
  7437  00076A  C004  F02B         	movff	?___wmul+1,sprintf@width+1
  7438  00076E                     
  7439                           ;doprnt.c: 618: width += *f++ - '0';
  7440  00076E  0ED0               	movlw	208
  7441  000770  6E1B               	movwf	??_sprintf^0,c
  7442  000772  0EFF               	movlw	255
  7443  000774  6E1C               	movwf	(??_sprintf+1)^0,c
  7444  000776  C011  FFF6         	movff	sprintf@f,tblptrl
  7445  00077A  C012  FFF7         	movff	sprintf@f+1,tblptrh
  7446  00077E                     	if	0	;tblptru may be non-zero
  7447  00077E                     	endif
  7448  00077E                     	if	0	;tblptru may be non-zero
  7449  00077E                     	endif
  7450  00077E  0008               	tblrd		*
  7451  000780  50F5               	movf	tablat,w,c
  7452  000782  6E1D               	movwf	(??_sprintf+2)^0,c
  7453  000784  6A1E               	clrf	(??_sprintf+3)^0,c
  7454  000786  501B               	movf	??_sprintf^0,w,c
  7455  000788  261D               	addwf	(??_sprintf+2)^0,f,c
  7456  00078A  501C               	movf	(??_sprintf+1)^0,w,c
  7457  00078C  221E               	addwfc	(??_sprintf+3)^0,f,c
  7458  00078E  501D               	movf	(??_sprintf+2)^0,w,c
  7459  000790  262A               	addwf	sprintf@width^0,f,c
  7460  000792  501E               	movf	(??_sprintf+3)^0,w,c
  7461  000794  222B               	addwfc	(sprintf@width+1)^0,f,c
  7462  000796  4A11               	infsnz	sprintf@f^0,f,c
  7463  000798  2A12               	incf	(sprintf@f+1)^0,f,c
  7464  00079A                     
  7465                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  7466  00079A  C011  FFF6         	movff	sprintf@f,tblptrl
  7467  00079E  C012  FFF7         	movff	sprintf@f+1,tblptrh
  7468  0007A2                     	if	0	;tblptru may be non-zero
  7469  0007A2                     	endif
  7470  0007A2                     	if	0	;tblptru may be non-zero
  7471  0007A2                     	endif
  7472  0007A2  0008               	tblrd		*
  7473  0007A4  50F5               	movf	tablat,w,c
  7474  0007A6  ECD2  F01A         	call	_isdigit
  7475  0007AA  B0D8               	btfsc	status,0,c
  7476  0007AC  EFDA  F003         	goto	u2411
  7477  0007B0  EFDC  F003         	goto	u2410
  7478  0007B4                     u2411:
  7479  0007B4  EFA9  F003         	goto	l3272
  7480  0007B8                     u2410:
  7481  0007B8  EF35  F004         	goto	l3308
  7482  0007BC                     l3280:
  7483                           
  7484                           ;doprnt.c: 744: case 'x':;doprnt.c: 747: flag |= 0x80;
  7485  0007BC  8E29               	bsf	sprintf@flag^0,7,c
  7486                           
  7487                           ;doprnt.c: 749: break;
  7488  0007BE  EF55  F004         	goto	l614
  7489  0007C2                     l3282:
  7490                           
  7491                           ;doprnt.c: 783: if(((unsigned)width) > len)
  7492  0007C2  502B               	movf	(sprintf@width+1)^0,w,c
  7493  0007C4  E109               	bnz	u2420
  7494  0007C6  0E02               	movlw	2
  7495  0007C8  5C2A               	subwf	sprintf@width^0,w,c
  7496  0007CA  A0D8               	btfss	status,0,c
  7497  0007CC  EFEA  F003         	goto	u2421
  7498  0007D0  EFEC  F003         	goto	u2420
  7499  0007D4                     u2421:
  7500  0007D4  EFF1  F003         	goto	l3286
  7501  0007D8                     u2420:
  7502  0007D8                     
  7503                           ;doprnt.c: 784: width -= len;
  7504  0007D8  062A               	decf	sprintf@width^0,f,c
  7505  0007DA  A0D8               	btfss	status,0,c
  7506  0007DC  062B               	decf	(sprintf@width+1)^0,f,c
  7507  0007DE  EFFF  F003         	goto	l3292
  7508  0007E2                     l3286:
  7509                           
  7510                           ;doprnt.c: 785: else;doprnt.c: 786: width = 0;
  7511  0007E2  0E00               	movlw	0
  7512  0007E4  6E2B               	movwf	(sprintf@width+1)^0,c
  7513  0007E6  0E00               	movlw	0
  7514  0007E8  6E2A               	movwf	sprintf@width^0,c
  7515  0007EA  EFFF  F003         	goto	l3292
  7516  0007EE                     l3288:
  7517                           
  7518                           ;doprnt.c: 791: ((*sp++ = (' ')));
  7519  0007EE  C00F  FFD9         	movff	sprintf@sp,fsr2l
  7520  0007F2  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  7521  0007F6  0E20               	movlw	32
  7522  0007F8  6EDF               	movwf	indf2,c
  7523  0007FA  4A0F               	infsnz	sprintf@sp^0,f,c
  7524  0007FC  2A10               	incf	(sprintf@sp+1)^0,f,c
  7525  0007FE                     l3292:
  7526  0007FE  062A               	decf	sprintf@width^0,f,c
  7527  000800  A0D8               	btfss	status,0,c
  7528  000802  062B               	decf	(sprintf@width+1)^0,f,c
  7529  000804  282A               	incf	sprintf@width^0,w,c
  7530  000806  E106               	bnz	u2431
  7531  000808  282B               	incf	(sprintf@width+1)^0,w,c
  7532  00080A  A4D8               	btfss	status,2,c
  7533  00080C  EF0A  F004         	goto	u2431
  7534  000810  EF0C  F004         	goto	u2430
  7535  000814                     u2431:
  7536  000814  EFF7  F003         	goto	l3288
  7537  000818                     u2430:
  7538  000818  EF1C  F004         	goto	l3300
  7539  00081C                     l3294:
  7540                           
  7541                           ;doprnt.c: 794: ((*sp++ = (*cp++)));
  7542  00081C  C01F  FFD9         	movff	sprintf@cp,fsr2l
  7543  000820  C020  FFDA         	movff	sprintf@cp+1,fsr2h
  7544  000824  C00F  FFE1         	movff	sprintf@sp,fsr1l
  7545  000828  C010  FFE2         	movff	sprintf@sp+1,fsr1h
  7546  00082C  CFDF FFE7          	movff	indf2,indf1
  7547  000830  4A1F               	infsnz	sprintf@cp^0,f,c
  7548  000832  2A20               	incf	(sprintf@cp+1)^0,f,c
  7549  000834  4A0F               	infsnz	sprintf@sp^0,f,c
  7550  000836  2A10               	incf	(sprintf@sp+1)^0,f,c
  7551  000838                     l3300:
  7552  000838  0624               	decf	sprintf@len^0,f,c
  7553  00083A  A0D8               	btfss	status,0,c
  7554  00083C  0625               	decf	(sprintf@len+1)^0,f,c
  7555  00083E  2824               	incf	sprintf@len^0,w,c
  7556  000840  E106               	bnz	u2441
  7557  000842  2825               	incf	(sprintf@len+1)^0,w,c
  7558  000844  A4D8               	btfss	status,2,c
  7559  000846  EF27  F004         	goto	u2441
  7560  00084A  EF29  F004         	goto	u2440
  7561  00084E                     u2441:
  7562  00084E  EF0E  F004         	goto	l3294
  7563  000852                     u2440:
  7564  000852  EFE1  F005         	goto	l3416
  7565  000856                     l3302:
  7566                           
  7567                           ;doprnt.c: 831: cp = (char *)&c;
  7568  000856  0E2C               	movlw	low sprintf@c
  7569  000858  6E1F               	movwf	sprintf@cp^0,c
  7570  00085A  0E00               	movlw	high sprintf@c
  7571  00085C  6E20               	movwf	(sprintf@cp+1)^0,c
  7572  00085E                     
  7573                           ;doprnt.c: 832: len = 1;
  7574  00085E  0E00               	movlw	0
  7575  000860  6E25               	movwf	(sprintf@len+1)^0,c
  7576  000862  0E01               	movlw	1
  7577  000864  6E24               	movwf	sprintf@len^0,c
  7578                           
  7579                           ;doprnt.c: 833: goto dostring;
  7580  000866  EFE1  F003         	goto	l3282
  7581  00086A                     l3308:
  7582  00086A  C011  FFF6         	movff	sprintf@f,tblptrl
  7583  00086E  C012  FFF7         	movff	sprintf@f+1,tblptrh
  7584  000872  4A11               	infsnz	sprintf@f^0,f,c
  7585  000874  2A12               	incf	(sprintf@f+1)^0,f,c
  7586  000876                     	if	0	;tblptru may be non-zero
  7587  000876                     	endif
  7588  000876                     	if	0	;tblptru may be non-zero
  7589  000876                     	endif
  7590  000876  0008               	tblrd		*
  7591  000878  CFF5 F02C          	movff	tablat,sprintf@c
  7592  00087C  502C               	movf	sprintf@c^0,w,c
  7593                           
  7594                           ; Switch size 1, requested type "simple"
  7595                           ; Number of cases is 5, Range of values is 0 to 120
  7596                           ; switch strategies available:
  7597                           ; Name         Instructions Cycles
  7598                           ; simple_byte           16     9 (average)
  7599                           ;	Chosen strategy is simple_byte
  7600  00087E  0A00               	xorlw	0	; case 0
  7601  000880  B4D8               	btfsc	status,2,c
  7602  000882  EFF2  F005         	goto	l3418
  7603  000886  0A58               	xorlw	88	; case 88
  7604  000888  B4D8               	btfsc	status,2,c
  7605  00088A  EFDE  F003         	goto	l3280
  7606  00088E  0A3C               	xorlw	60	; case 100
  7607  000890  B4D8               	btfsc	status,2,c
  7608  000892  EF55  F004         	goto	l614
  7609  000896  0A0D               	xorlw	13	; case 105
  7610  000898  B4D8               	btfsc	status,2,c
  7611  00089A  EF55  F004         	goto	l614
  7612  00089E  0A11               	xorlw	17	; case 120
  7613  0008A0  B4D8               	btfsc	status,2,c
  7614  0008A2  EFDE  F003         	goto	l3280
  7615  0008A6  EF2B  F004         	goto	l3302
  7616  0008AA                     l614:
  7617                           
  7618                           ;doprnt.c: 1277: if((flag & 0x80) == 0x00)
  7619  0008AA  BE29               	btfsc	sprintf@flag^0,7,c
  7620  0008AC  EF5A  F004         	goto	u2451
  7621  0008B0  EF5C  F004         	goto	u2450
  7622  0008B4                     u2451:
  7623  0008B4  EF77  F004         	goto	l3320
  7624  0008B8                     u2450:
  7625  0008B8                     
  7626                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
  7627  0008B8  C022  FFD9         	movff	sprintf@ap,fsr2l
  7628  0008BC  C023  FFDA         	movff	sprintf@ap+1,fsr2h
  7629  0008C0  CFDE F027          	movff	postinc2,sprintf@val
  7630  0008C4  CFDD F028          	movff	postdec2,sprintf@val+1
  7631  0008C8  0E02               	movlw	2
  7632  0008CA  2622               	addwf	sprintf@ap^0,f,c
  7633  0008CC  0E00               	movlw	0
  7634  0008CE  2223               	addwfc	(sprintf@ap+1)^0,f,c
  7635  0008D0                     
  7636                           ;doprnt.c: 1287: if((int)val < 0) {
  7637  0008D0  BE28               	btfsc	(sprintf@val+1)^0,7,c
  7638  0008D2  EF6F  F004         	goto	u2460
  7639  0008D6  EF6D  F004         	goto	u2461
  7640  0008DA                     u2461:
  7641  0008DA  EFD3  F004         	goto	l3354
  7642  0008DE                     u2460:
  7643  0008DE                     
  7644                           ;doprnt.c: 1288: flag |= 0x03;
  7645  0008DE  0E03               	movlw	3
  7646  0008E0  1229               	iorwf	sprintf@flag^0,f,c
  7647  0008E2                     
  7648                           ;doprnt.c: 1289: val = -val;
  7649  0008E2  6C27               	negf	sprintf@val^0,c
  7650  0008E4  1E28               	comf	(sprintf@val+1)^0,f,c
  7651  0008E6  B0D8               	btfsc	status,0,c
  7652  0008E8  2A28               	incf	(sprintf@val+1)^0,f,c
  7653  0008EA  EFD3  F004         	goto	l3354
  7654  0008EE                     l3320:
  7655                           
  7656                           ;doprnt.c: 1294: else;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(
      +                          unsigned **)ap), (unsigned)0));
  7657  0008EE  C022  FFD9         	movff	sprintf@ap,fsr2l
  7658  0008F2  C023  FFDA         	movff	sprintf@ap+1,fsr2h
  7659  0008F6  CFDE F027          	movff	postinc2,sprintf@val
  7660  0008FA  CFDD F028          	movff	postdec2,sprintf@val+1
  7661  0008FE  0E02               	movlw	2
  7662  000900  2622               	addwf	sprintf@ap^0,f,c
  7663  000902  0E00               	movlw	0
  7664  000904  2223               	addwfc	(sprintf@ap+1)^0,f,c
  7665  000906  EFD3  F004         	goto	l3354
  7666  00090A                     l3324:
  7667                           
  7668                           ;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7669  00090A  0E01               	movlw	1
  7670  00090C  6E2C               	movwf	sprintf@c^0,c
  7671  00090E                     l3326:
  7672  00090E  0E05               	movlw	5
  7673  000910  182C               	xorwf	sprintf@c^0,w,c
  7674  000912  A4D8               	btfss	status,2,c
  7675  000914  EF8E  F004         	goto	u2471
  7676  000918  EF90  F004         	goto	u2470
  7677  00091C                     u2471:
  7678  00091C  EF92  F004         	goto	l3330
  7679  000920                     u2470:
  7680  000920  EFDF  F004         	goto	l3356
  7681  000924                     l3330:
  7682                           
  7683                           ;doprnt.c: 1332: if(val < dpowers[c])
  7684  000924  502C               	movf	sprintf@c^0,w,c
  7685  000926  0D02               	mullw	2
  7686  000928  0E01               	movlw	low _dpowers
  7687  00092A  24F3               	addwf	243,w,c
  7688  00092C  6EF6               	movwf	tblptrl,c
  7689  00092E  0E06               	movlw	high _dpowers
  7690  000930  20F4               	addwfc	244,w,c
  7691  000932  6EF7               	movwf	tblptrh,c
  7692  000934                     	if	0	;There are less than 3 active tblptr bytes
  7693  000934                     	endif
  7694  000934  0009               	tblrd		*+
  7695  000936  50F5               	movf	tablat,w,c
  7696  000938  5C27               	subwf	sprintf@val^0,w,c
  7697  00093A  0009               	tblrd		*+
  7698  00093C  50F5               	movf	tablat,w,c
  7699  00093E  5828               	subwfb	(sprintf@val+1)^0,w,c
  7700  000940  B0D8               	btfsc	status,0,c
  7701  000942  EFA5  F004         	goto	u2481
  7702  000946  EFA7  F004         	goto	u2480
  7703  00094A                     u2481:
  7704  00094A  EFA9  F004         	goto	l3334
  7705  00094E                     u2480:
  7706  00094E  EFDF  F004         	goto	l3356
  7707  000952                     l3334:
  7708  000952  2A2C               	incf	sprintf@c^0,f,c
  7709  000954  EF87  F004         	goto	l3326
  7710  000958                     l3338:
  7711                           
  7712                           ;doprnt.c: 1342: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7713  000958  0E01               	movlw	1
  7714  00095A  6E2C               	movwf	sprintf@c^0,c
  7715  00095C                     l3340:
  7716  00095C  0E04               	movlw	4
  7717  00095E  182C               	xorwf	sprintf@c^0,w,c
  7718  000960  A4D8               	btfss	status,2,c
  7719  000962  EFB5  F004         	goto	u2491
  7720  000966  EFB7  F004         	goto	u2490
  7721  00096A                     u2491:
  7722  00096A  EFB9  F004         	goto	l3344
  7723  00096E                     u2490:
  7724  00096E  EFDF  F004         	goto	l3356
  7725  000972                     l3344:
  7726                           
  7727                           ;doprnt.c: 1343: if(val < hexpowers[c])
  7728  000972  502C               	movf	sprintf@c^0,w,c
  7729  000974  0D02               	mullw	2
  7730  000976  0E0B               	movlw	low _hexpowers
  7731  000978  24F3               	addwf	243,w,c
  7732  00097A  6EF6               	movwf	tblptrl,c
  7733  00097C  0E06               	movlw	high _hexpowers
  7734  00097E  20F4               	addwfc	244,w,c
  7735  000980  6EF7               	movwf	tblptrh,c
  7736  000982                     	if	0	;There are less than 3 active tblptr bytes
  7737  000982                     	endif
  7738  000982  0009               	tblrd		*+
  7739  000984  50F5               	movf	tablat,w,c
  7740  000986  5C27               	subwf	sprintf@val^0,w,c
  7741  000988  0009               	tblrd		*+
  7742  00098A  50F5               	movf	tablat,w,c
  7743  00098C  5828               	subwfb	(sprintf@val+1)^0,w,c
  7744  00098E  B0D8               	btfsc	status,0,c
  7745  000990  EFCC  F004         	goto	u2501
  7746  000994  EFCE  F004         	goto	u2500
  7747  000998                     u2501:
  7748  000998  EFD0  F004         	goto	l3348
  7749  00099C                     u2500:
  7750  00099C  EFDF  F004         	goto	l3356
  7751  0009A0                     l3348:
  7752  0009A0  2A2C               	incf	sprintf@c^0,f,c
  7753  0009A2  EFAE  F004         	goto	l3340
  7754  0009A6                     l3354:
  7755  0009A6  5029               	movf	sprintf@flag^0,w,c
  7756  0009A8  0B80               	andlw	128
  7757                           
  7758                           ; Switch size 1, requested type "simple"
  7759                           ; Number of cases is 2, Range of values is 0 to 128
  7760                           ; switch strategies available:
  7761                           ; Name         Instructions Cycles
  7762                           ; simple_byte            7     4 (average)
  7763                           ;	Chosen strategy is simple_byte
  7764  0009AA  0A00               	xorlw	0	; case 0
  7765  0009AC  B4D8               	btfsc	status,2,c
  7766  0009AE  EF85  F004         	goto	l3324
  7767  0009B2  0A80               	xorlw	128	; case 128
  7768  0009B4  B4D8               	btfsc	status,2,c
  7769  0009B6  EFAC  F004         	goto	l3338
  7770  0009BA  EFDF  F004         	goto	l3356
  7771  0009BE                     l3356:
  7772                           
  7773                           ;doprnt.c: 1371: if(width && flag & 0x03)
  7774  0009BE  502A               	movf	sprintf@width^0,w,c
  7775  0009C0  102B               	iorwf	(sprintf@width+1)^0,w,c
  7776  0009C2  B4D8               	btfsc	status,2,c
  7777  0009C4  EFE6  F004         	goto	u2511
  7778  0009C8  EFE8  F004         	goto	u2510
  7779  0009CC                     u2511:
  7780  0009CC  EFF6  F004         	goto	l3362
  7781  0009D0                     u2510:
  7782  0009D0  C029  F01B         	movff	sprintf@flag,??_sprintf
  7783  0009D4  0E03               	movlw	3
  7784  0009D6  161B               	andwf	??_sprintf^0,f,c
  7785  0009D8  B4D8               	btfsc	status,2,c
  7786  0009DA  EFF1  F004         	goto	u2521
  7787  0009DE  EFF3  F004         	goto	u2520
  7788  0009E2                     u2521:
  7789  0009E2  EFF6  F004         	goto	l3362
  7790  0009E6                     u2520:
  7791  0009E6                     
  7792                           ;doprnt.c: 1372: width--;
  7793  0009E6  062A               	decf	sprintf@width^0,f,c
  7794  0009E8  A0D8               	btfss	status,0,c
  7795  0009EA  062B               	decf	(sprintf@width+1)^0,f,c
  7796  0009EC                     l3362:
  7797                           
  7798                           ;doprnt.c: 1407: if(width > c)
  7799  0009EC  502C               	movf	sprintf@c^0,w,c
  7800  0009EE  6E1B               	movwf	??_sprintf^0,c
  7801  0009F0  6A1C               	clrf	(??_sprintf+1)^0,c
  7802  0009F2  502A               	movf	sprintf@width^0,w,c
  7803  0009F4  5C1B               	subwf	??_sprintf^0,w,c
  7804  0009F6  501C               	movf	(??_sprintf+1)^0,w,c
  7805  0009F8  0A80               	xorlw	128
  7806  0009FA  6E1D               	movwf	(??_sprintf+2)^0,c
  7807  0009FC  502B               	movf	(sprintf@width+1)^0,w,c
  7808  0009FE  0A80               	xorlw	128
  7809  000A00  581D               	subwfb	(??_sprintf+2)^0,w,c
  7810  000A02  B0D8               	btfsc	status,0,c
  7811  000A04  EF06  F005         	goto	u2531
  7812  000A08  EF08  F005         	goto	u2530
  7813  000A0C                     u2531:
  7814  000A0C  EF0E  F005         	goto	l3366
  7815  000A10                     u2530:
  7816  000A10                     
  7817                           ;doprnt.c: 1408: width -= c;
  7818  000A10  502C               	movf	sprintf@c^0,w,c
  7819  000A12  5E2A               	subwf	sprintf@width^0,f,c
  7820  000A14  0E00               	movlw	0
  7821  000A16  5A2B               	subwfb	(sprintf@width+1)^0,f,c
  7822  000A18  EF12  F005         	goto	l3368
  7823  000A1C                     l3366:
  7824                           
  7825                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  7826  000A1C  0E00               	movlw	0
  7827  000A1E  6E2B               	movwf	(sprintf@width+1)^0,c
  7828  000A20  0E00               	movlw	0
  7829  000A22  6E2A               	movwf	sprintf@width^0,c
  7830  000A24                     l3368:
  7831                           
  7832                           ;doprnt.c: 1413: if(flag & 0x04) {
  7833  000A24  A429               	btfss	sprintf@flag^0,2,c
  7834  000A26  EF17  F005         	goto	u2541
  7835  000A2A  EF19  F005         	goto	u2540
  7836  000A2E                     u2541:
  7837  000A2E  EF4B  F005         	goto	l3384
  7838  000A32                     u2540:
  7839  000A32                     
  7840                           ;doprnt.c: 1418: if(flag & 0x03)
  7841  000A32  C029  F01B         	movff	sprintf@flag,??_sprintf
  7842  000A36  0E03               	movlw	3
  7843  000A38  161B               	andwf	??_sprintf^0,f,c
  7844  000A3A  B4D8               	btfsc	status,2,c
  7845  000A3C  EF22  F005         	goto	u2551
  7846  000A40  EF24  F005         	goto	u2550
  7847  000A44                     u2551:
  7848  000A44  EF2C  F005         	goto	l3376
  7849  000A48                     u2550:
  7850  000A48                     
  7851                           ;doprnt.c: 1419: ((*sp++ = ('-')));
  7852  000A48  C00F  FFD9         	movff	sprintf@sp,fsr2l
  7853  000A4C  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  7854  000A50  0E2D               	movlw	45
  7855  000A52  6EDF               	movwf	indf2,c
  7856  000A54  4A0F               	infsnz	sprintf@sp^0,f,c
  7857  000A56  2A10               	incf	(sprintf@sp+1)^0,f,c
  7858  000A58                     l3376:
  7859                           
  7860                           ;doprnt.c: 1441: if(width)
  7861  000A58  502A               	movf	sprintf@width^0,w,c
  7862  000A5A  102B               	iorwf	(sprintf@width+1)^0,w,c
  7863  000A5C  B4D8               	btfsc	status,2,c
  7864  000A5E  EF33  F005         	goto	u2561
  7865  000A62  EF35  F005         	goto	u2560
  7866  000A66                     u2561:
  7867  000A66  EF7B  F005         	goto	l3398
  7868  000A6A                     u2560:
  7869  000A6A                     l3378:
  7870                           
  7871                           ;doprnt.c: 1443: ((*sp++ = ('0')));
  7872  000A6A  C00F  FFD9         	movff	sprintf@sp,fsr2l
  7873  000A6E  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  7874  000A72  0E30               	movlw	48
  7875  000A74  6EDF               	movwf	indf2,c
  7876  000A76  4A0F               	infsnz	sprintf@sp^0,f,c
  7877  000A78  2A10               	incf	(sprintf@sp+1)^0,f,c
  7878  000A7A                     
  7879                           ;doprnt.c: 1444: while(--width);
  7880  000A7A  062A               	decf	sprintf@width^0,f,c
  7881  000A7C  A0D8               	btfss	status,0,c
  7882  000A7E  062B               	decf	(sprintf@width+1)^0,f,c
  7883  000A80  502A               	movf	sprintf@width^0,w,c
  7884  000A82  102B               	iorwf	(sprintf@width+1)^0,w,c
  7885  000A84  A4D8               	btfss	status,2,c
  7886  000A86  EF47  F005         	goto	u2571
  7887  000A8A  EF49  F005         	goto	u2570
  7888  000A8E                     u2571:
  7889  000A8E  EF35  F005         	goto	l3378
  7890  000A92                     u2570:
  7891  000A92  EF7B  F005         	goto	l3398
  7892  000A96                     l3384:
  7893                           
  7894                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  7895  000A96  502A               	movf	sprintf@width^0,w,c
  7896  000A98  102B               	iorwf	(sprintf@width+1)^0,w,c
  7897  000A9A  B4D8               	btfsc	status,2,c
  7898  000A9C  EF52  F005         	goto	u2581
  7899  000AA0  EF54  F005         	goto	u2580
  7900  000AA4                     u2581:
  7901  000AA4  EF68  F005         	goto	l3392
  7902  000AA8                     u2580:
  7903  000AA8                     l3386:
  7904                           
  7905                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  7906  000AA8  C00F  FFD9         	movff	sprintf@sp,fsr2l
  7907  000AAC  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  7908  000AB0  0E20               	movlw	32
  7909  000AB2  6EDF               	movwf	indf2,c
  7910  000AB4  4A0F               	infsnz	sprintf@sp^0,f,c
  7911  000AB6  2A10               	incf	(sprintf@sp+1)^0,f,c
  7912  000AB8                     
  7913                           ;doprnt.c: 1457: while(--width);
  7914  000AB8  062A               	decf	sprintf@width^0,f,c
  7915  000ABA  A0D8               	btfss	status,0,c
  7916  000ABC  062B               	decf	(sprintf@width+1)^0,f,c
  7917  000ABE  502A               	movf	sprintf@width^0,w,c
  7918  000AC0  102B               	iorwf	(sprintf@width+1)^0,w,c
  7919  000AC2  A4D8               	btfss	status,2,c
  7920  000AC4  EF66  F005         	goto	u2591
  7921  000AC8  EF68  F005         	goto	u2590
  7922  000ACC                     u2591:
  7923  000ACC  EF54  F005         	goto	l3386
  7924  000AD0                     u2590:
  7925  000AD0                     l3392:
  7926                           
  7927                           ;doprnt.c: 1464: if(flag & 0x03)
  7928  000AD0  C029  F01B         	movff	sprintf@flag,??_sprintf
  7929  000AD4  0E03               	movlw	3
  7930  000AD6  161B               	andwf	??_sprintf^0,f,c
  7931  000AD8  B4D8               	btfsc	status,2,c
  7932  000ADA  EF71  F005         	goto	u2601
  7933  000ADE  EF73  F005         	goto	u2600
  7934  000AE2                     u2601:
  7935  000AE2  EF7B  F005         	goto	l3398
  7936  000AE6                     u2600:
  7937  000AE6                     
  7938                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  7939  000AE6  C00F  FFD9         	movff	sprintf@sp,fsr2l
  7940  000AEA  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  7941  000AEE  0E2D               	movlw	45
  7942  000AF0  6EDF               	movwf	indf2,c
  7943  000AF2  4A0F               	infsnz	sprintf@sp^0,f,c
  7944  000AF4  2A10               	incf	(sprintf@sp+1)^0,f,c
  7945  000AF6                     l3398:
  7946                           
  7947                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  7948  000AF6  C02C  F026         	movff	sprintf@c,sprintf@prec
  7949                           
  7950                           ;doprnt.c: 1500: while(prec--) {
  7951  000AFA  EFD8  F005         	goto	l3414
  7952  000AFE                     l3400:
  7953                           
  7954                           ;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  7955  000AFE  5026               	movf	sprintf@prec^0,w,c
  7956  000B00  0D02               	mullw	2
  7957  000B02  0E01               	movlw	low _dpowers
  7958  000B04  24F3               	addwf	243,w,c
  7959  000B06  6EF6               	movwf	tblptrl,c
  7960  000B08  0E06               	movlw	high _dpowers
  7961  000B0A  20F4               	addwfc	244,w,c
  7962  000B0C  6EF7               	movwf	tblptrh,c
  7963  000B0E                     	if	0	;There are less than 3 active tblptr bytes
  7964  000B0E                     	endif
  7965  000B0E  0009               	tblrd		*+
  7966  000B10  CFF5 F005          	movff	tablat,___lwdiv@divisor
  7967  000B14  000A               	tblrd		*-
  7968  000B16  CFF5 F006          	movff	tablat,___lwdiv@divisor+1
  7969  000B1A  C027  F003         	movff	sprintf@val,___lwdiv@dividend
  7970  000B1E  C028  F004         	movff	sprintf@val+1,___lwdiv@dividend+1
  7971  000B22  EC50  F019         	call	___lwdiv	;wreg free
  7972  000B26  C003  F00A         	movff	?___lwdiv,___lwmod@dividend
  7973  000B2A  C004  F00B         	movff	?___lwdiv+1,___lwmod@dividend+1
  7974  000B2E  0E00               	movlw	0
  7975  000B30  6E0D               	movwf	(___lwmod@divisor+1)^0,c
  7976  000B32  0E0A               	movlw	10
  7977  000B34  6E0C               	movwf	___lwmod@divisor^0,c
  7978  000B36  ECC1  F019         	call	___lwmod	;wreg free
  7979  000B3A  500A               	movf	?___lwmod^0,w,c
  7980  000B3C  0F30               	addlw	48
  7981  000B3E  6E2C               	movwf	sprintf@c^0,c
  7982                           
  7983                           ;doprnt.c: 1517: break;
  7984  000B40  EFD0  F005         	goto	l3410
  7985  000B44                     l3402:
  7986                           
  7987                           ;doprnt.c: 1525: {;doprnt.c: 1526: unsigned char idx = (val / hexpowers[(unsigned char)p
      +                          rec]) & 0xF;
  7988  000B44  C027  F003         	movff	sprintf@val,___lwdiv@dividend
  7989  000B48  C028  F004         	movff	sprintf@val+1,___lwdiv@dividend+1
  7990  000B4C  5026               	movf	sprintf@prec^0,w,c
  7991  000B4E  0D02               	mullw	2
  7992  000B50  0E0B               	movlw	low _hexpowers
  7993  000B52  24F3               	addwf	243,w,c
  7994  000B54  6EF6               	movwf	tblptrl,c
  7995  000B56  0E06               	movlw	high _hexpowers
  7996  000B58  20F4               	addwfc	244,w,c
  7997  000B5A  6EF7               	movwf	tblptrh,c
  7998  000B5C                     	if	0	;There are less than 3 active tblptr bytes
  7999  000B5C                     	endif
  8000  000B5C  0009               	tblrd		*+
  8001  000B5E  CFF5 F005          	movff	tablat,___lwdiv@divisor
  8002  000B62  000A               	tblrd		*-
  8003  000B64  CFF5 F006          	movff	tablat,___lwdiv@divisor+1
  8004  000B68  EC50  F019         	call	___lwdiv	;wreg free
  8005  000B6C  5003               	movf	?___lwdiv^0,w,c
  8006  000B6E  0B0F               	andlw	15
  8007  000B70  6E21               	movwf	sprintf@idx^0,c
  8008  000B72                     
  8009                           ;doprnt.c: 1530: c = "0123456789ABCDEF"[idx];
  8010  000B72  0E78               	movlw	low STR_10
  8011  000B74  2421               	addwf	sprintf@idx^0,w,c
  8012  000B76  6EF6               	movwf	tblptrl,c
  8013  000B78  6AF7               	clrf	tblptrh,c
  8014  000B7A  0E06               	movlw	high STR_10
  8015  000B7C  22F7               	addwfc	tblptrh,f,c
  8016  000B7E                     	if	0	;There are less than 3 active tblptr bytes
  8017  000B7E                     	endif
  8018  000B7E  0008               	tblrd		*
  8019  000B80  CFF5 F02C          	movff	tablat,sprintf@c
  8020                           
  8021                           ;doprnt.c: 1534: };doprnt.c: 1536: break;
  8022  000B84  EFD0  F005         	goto	l3410
  8023  000B88                     l3408:
  8024  000B88  5029               	movf	sprintf@flag^0,w,c
  8025  000B8A  0B80               	andlw	128
  8026                           
  8027                           ; Switch size 1, requested type "simple"
  8028                           ; Number of cases is 2, Range of values is 0 to 128
  8029                           ; switch strategies available:
  8030                           ; Name         Instructions Cycles
  8031                           ; simple_byte            7     4 (average)
  8032                           ;	Chosen strategy is simple_byte
  8033  000B8C  0A00               	xorlw	0	; case 0
  8034  000B8E  B4D8               	btfsc	status,2,c
  8035  000B90  EF7F  F005         	goto	l3400
  8036  000B94  0A80               	xorlw	128	; case 128
  8037  000B96  B4D8               	btfsc	status,2,c
  8038  000B98  EFA2  F005         	goto	l3402
  8039  000B9C  EFD0  F005         	goto	l3410
  8040  000BA0                     l3410:
  8041                           
  8042                           ;doprnt.c: 1550: ((*sp++ = (c)));
  8043  000BA0  C00F  FFD9         	movff	sprintf@sp,fsr2l
  8044  000BA4  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  8045  000BA8  C02C  FFDF         	movff	sprintf@c,indf2
  8046  000BAC  4A0F               	infsnz	sprintf@sp^0,f,c
  8047  000BAE  2A10               	incf	(sprintf@sp+1)^0,f,c
  8048  000BB0                     l3414:
  8049  000BB0  0626               	decf	sprintf@prec^0,f,c
  8050  000BB2  2826               	incf	sprintf@prec^0,w,c
  8051  000BB4  A4D8               	btfss	status,2,c
  8052  000BB6  EFDF  F005         	goto	u2611
  8053  000BBA  EFE1  F005         	goto	u2610
  8054  000BBE                     u2611:
  8055  000BBE  EFC4  F005         	goto	l3408
  8056  000BC2                     u2610:
  8057  000BC2                     l3416:
  8058  000BC2  C011  FFF6         	movff	sprintf@f,tblptrl
  8059  000BC6  C012  FFF7         	movff	sprintf@f+1,tblptrh
  8060  000BCA  4A11               	infsnz	sprintf@f^0,f,c
  8061  000BCC  2A12               	incf	(sprintf@f+1)^0,f,c
  8062  000BCE                     	if	0	;tblptru may be non-zero
  8063  000BCE                     	endif
  8064  000BCE                     	if	0	;tblptru may be non-zero
  8065  000BCE                     	endif
  8066  000BCE  0008               	tblrd		*
  8067  000BD0  CFF5 F02C          	movff	tablat,sprintf@c
  8068  000BD4  502C               	movf	sprintf@c^0,w,c
  8069  000BD6  A4D8               	btfss	status,2,c
  8070  000BD8  EFF0  F005         	goto	u2621
  8071  000BDC  EFF2  F005         	goto	u2620
  8072  000BE0                     u2621:
  8073  000BE0  EF6C  F003         	goto	l3254
  8074  000BE4                     u2620:
  8075  000BE4                     l3418:
  8076                           
  8077                           ;doprnt.c: 1564: *sp = 0;
  8078  000BE4  C00F  FFD9         	movff	sprintf@sp,fsr2l
  8079  000BE8  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  8080  000BEC  0E00               	movlw	0
  8081  000BEE  6EDF               	movwf	indf2,c
  8082  000BF0  0012               	return		;funcret
  8083  000BF2                     __end_of_sprintf:
  8084                           	callstack 0
  8085                           
  8086 ;; *************** function _isdigit *****************
  8087 ;; Defined at:
  8088 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\isdigit.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  c               1    wreg     unsigned char 
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;  c               1    4[COMRAM] unsigned char 
  8093 ;; Return value:  Size  Location     Type
  8094 ;;		None               void
  8095 ;; Registers used:
  8096 ;;		wreg, status,2, status,0
  8097 ;; Tracked objects:
  8098 ;;		On entry : 0/0
  8099 ;;		On exit  : 0/0
  8100 ;;		Unchanged: 0/0
  8101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8102 ;;      Params:         0       0       0       0       0       0       0
  8103 ;;      Locals:         2       0       0       0       0       0       0
  8104 ;;      Temps:          1       0       0       0       0       0       0
  8105 ;;      Totals:         3       0       0       0       0       0       0
  8106 ;;Total ram usage:        3 bytes
  8107 ;; Hardware stack levels used: 1
  8108 ;; Hardware stack levels required when called: 2
  8109 ;; This function calls:
  8110 ;;		Nothing
  8111 ;; This function is called by:
  8112 ;;		_sprintf
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           	psect	text35
  8117  0035A4                     __ptext35:
  8118                           	callstack 0
  8119  0035A4                     _isdigit:
  8120                           	callstack 25
  8121                           
  8122                           ;incstack = 0
  8123                           ;isdigit@c stored from wreg
  8124  0035A4  6E05               	movwf	isdigit@c^0,c
  8125  0035A6  0E00               	movlw	0
  8126  0035A8  6E04               	movwf	_isdigit$2043^0,c
  8127  0035AA  0E3A               	movlw	58
  8128  0035AC  6005               	cpfslt	isdigit@c^0,c
  8129  0035AE  EFDB  F01A         	goto	u2301
  8130  0035B2  EFDD  F01A         	goto	u2300
  8131  0035B6                     u2301:
  8132  0035B6  EFE7  F01A         	goto	l3182
  8133  0035BA                     u2300:
  8134  0035BA  0E2F               	movlw	47
  8135  0035BC  6405               	cpfsgt	isdigit@c^0,c
  8136  0035BE  EFE3  F01A         	goto	u2311
  8137  0035C2  EFE5  F01A         	goto	u2310
  8138  0035C6                     u2311:
  8139  0035C6  EFE7  F01A         	goto	l3182
  8140  0035CA                     u2310:
  8141  0035CA  0E01               	movlw	1
  8142  0035CC  6E04               	movwf	_isdigit$2043^0,c
  8143  0035CE                     l3182:
  8144  0035CE  C004  F003         	movff	_isdigit$2043,??_isdigit
  8145  0035D2  3003               	rrcf	??_isdigit^0,w,c
  8146  0035D4  0012               	return		;funcret
  8147  0035D6                     __end_of_isdigit:
  8148                           	callstack 0
  8149                           
  8150 ;; *************** function ___wmul *****************
  8151 ;; Defined at:
  8152 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
  8153 ;; Parameters:    Size  Location     Type
  8154 ;;  multiplier      2    2[COMRAM] unsigned int 
  8155 ;;  multiplicand    2    4[COMRAM] unsigned int 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;  product         2    6[COMRAM] unsigned int 
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  2    2[COMRAM] unsigned int 
  8160 ;; Registers used:
  8161 ;;		wreg, status,2, status,0, prodl, prodh
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8167 ;;      Params:         4       0       0       0       0       0       0
  8168 ;;      Locals:         2       0       0       0       0       0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0
  8170 ;;      Totals:         6       0       0       0       0       0       0
  8171 ;;Total ram usage:        6 bytes
  8172 ;; Hardware stack levels used: 1
  8173 ;; Hardware stack levels required when called: 2
  8174 ;; This function calls:
  8175 ;;		Nothing
  8176 ;; This function is called by:
  8177 ;;		_sprintf
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           	psect	text36
  8182  0036E0                     __ptext36:
  8183                           	callstack 0
  8184  0036E0                     ___wmul:
  8185                           	callstack 25
  8186  0036E0  5003               	movf	___wmul@multiplier^0,w,c
  8187  0036E2  0205               	mulwf	___wmul@multiplicand^0,c
  8188  0036E4  CFF3 F007          	movff	prodl,___wmul@product
  8189  0036E8  CFF4 F008          	movff	prodh,___wmul@product+1
  8190  0036EC  5003               	movf	___wmul@multiplier^0,w,c
  8191  0036EE  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  8192  0036F0  50F3               	movf	243,w,c
  8193  0036F2  2608               	addwf	(___wmul@product+1)^0,f,c
  8194  0036F4  5004               	movf	(___wmul@multiplier+1)^0,w,c
  8195  0036F6  0205               	mulwf	___wmul@multiplicand^0,c
  8196  0036F8  50F3               	movf	243,w,c
  8197  0036FA  2608               	addwf	(___wmul@product+1)^0,f,c
  8198  0036FC  C007  F003         	movff	___wmul@product,?___wmul
  8199  003700  C008  F004         	movff	___wmul@product+1,?___wmul+1
  8200  003704  0012               	return		;funcret
  8201  003706                     __end_of___wmul:
  8202                           	callstack 0
  8203                           
  8204 ;; *************** function ___lwmod *****************
  8205 ;; Defined at:
  8206 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  8207 ;; Parameters:    Size  Location     Type
  8208 ;;  dividend        2    9[COMRAM] unsigned int 
  8209 ;;  divisor         2   11[COMRAM] unsigned int 
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;  counter         1   13[COMRAM] unsigned char 
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  2    9[COMRAM] unsigned int 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2, status,0
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8221 ;;      Params:         4       0       0       0       0       0       0
  8222 ;;      Locals:         1       0       0       0       0       0       0
  8223 ;;      Temps:          0       0       0       0       0       0       0
  8224 ;;      Totals:         5       0       0       0       0       0       0
  8225 ;;Total ram usage:        5 bytes
  8226 ;; Hardware stack levels used: 1
  8227 ;; Hardware stack levels required when called: 2
  8228 ;; This function calls:
  8229 ;;		Nothing
  8230 ;; This function is called by:
  8231 ;;		_sprintf
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text37
  8236  003382                     __ptext37:
  8237                           	callstack 0
  8238  003382                     ___lwmod:
  8239                           	callstack 25
  8240  003382  500C               	movf	___lwmod@divisor^0,w,c
  8241  003384  100D               	iorwf	(___lwmod@divisor+1)^0,w,c
  8242  003386  B4D8               	btfsc	status,2,c
  8243  003388  EFC8  F019         	goto	u2351
  8244  00338C  EFCA  F019         	goto	u2350
  8245  003390                     u2351:
  8246  003390  EFEE  F019         	goto	l1153
  8247  003394                     u2350:
  8248  003394  0E01               	movlw	1
  8249  003396  6E0E               	movwf	___lwmod@counter^0,c
  8250  003398  EFD2  F019         	goto	l3220
  8251  00339C                     l3218:
  8252  00339C  90D8               	bcf	status,0,c
  8253  00339E  360C               	rlcf	___lwmod@divisor^0,f,c
  8254  0033A0  360D               	rlcf	(___lwmod@divisor+1)^0,f,c
  8255  0033A2  2A0E               	incf	___lwmod@counter^0,f,c
  8256  0033A4                     l3220:
  8257  0033A4  AE0D               	btfss	(___lwmod@divisor+1)^0,7,c
  8258  0033A6  EFD7  F019         	goto	u2361
  8259  0033AA  EFD9  F019         	goto	u2360
  8260  0033AE                     u2361:
  8261  0033AE  EFCE  F019         	goto	l3218
  8262  0033B2                     u2360:
  8263  0033B2                     l3222:
  8264  0033B2  500C               	movf	___lwmod@divisor^0,w,c
  8265  0033B4  5C0A               	subwf	___lwmod@dividend^0,w,c
  8266  0033B6  500D               	movf	(___lwmod@divisor+1)^0,w,c
  8267  0033B8  580B               	subwfb	(___lwmod@dividend+1)^0,w,c
  8268  0033BA  A0D8               	btfss	status,0,c
  8269  0033BC  EFE2  F019         	goto	u2371
  8270  0033C0  EFE4  F019         	goto	u2370
  8271  0033C4                     u2371:
  8272  0033C4  EFE8  F019         	goto	l3226
  8273  0033C8                     u2370:
  8274  0033C8  500C               	movf	___lwmod@divisor^0,w,c
  8275  0033CA  5E0A               	subwf	___lwmod@dividend^0,f,c
  8276  0033CC  500D               	movf	(___lwmod@divisor+1)^0,w,c
  8277  0033CE  5A0B               	subwfb	(___lwmod@dividend+1)^0,f,c
  8278  0033D0                     l3226:
  8279  0033D0  90D8               	bcf	status,0,c
  8280  0033D2  320D               	rrcf	(___lwmod@divisor+1)^0,f,c
  8281  0033D4  320C               	rrcf	___lwmod@divisor^0,f,c
  8282  0033D6  2E0E               	decfsz	___lwmod@counter^0,f,c
  8283  0033D8  EFD9  F019         	goto	l3222
  8284  0033DC                     l1153:
  8285  0033DC  C00A  F00A         	movff	___lwmod@dividend,?___lwmod
  8286  0033E0  C00B  F00B         	movff	___lwmod@dividend+1,?___lwmod+1
  8287  0033E4  0012               	return		;funcret
  8288  0033E6                     __end_of___lwmod:
  8289                           	callstack 0
  8290                           
  8291 ;; *************** function ___lwdiv *****************
  8292 ;; Defined at:
  8293 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  8294 ;; Parameters:    Size  Location     Type
  8295 ;;  dividend        2    2[COMRAM] unsigned int 
  8296 ;;  divisor         2    4[COMRAM] unsigned int 
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;  quotient        2    6[COMRAM] unsigned int 
  8299 ;;  counter         1    8[COMRAM] unsigned char 
  8300 ;; Return value:  Size  Location     Type
  8301 ;;                  2    2[COMRAM] unsigned int 
  8302 ;; Registers used:
  8303 ;;		wreg, status,2, status,0
  8304 ;; Tracked objects:
  8305 ;;		On entry : 0/0
  8306 ;;		On exit  : 0/0
  8307 ;;		Unchanged: 0/0
  8308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8309 ;;      Params:         4       0       0       0       0       0       0
  8310 ;;      Locals:         3       0       0       0       0       0       0
  8311 ;;      Temps:          0       0       0       0       0       0       0
  8312 ;;      Totals:         7       0       0       0       0       0       0
  8313 ;;Total ram usage:        7 bytes
  8314 ;; Hardware stack levels used: 1
  8315 ;; Hardware stack levels required when called: 2
  8316 ;; This function calls:
  8317 ;;		Nothing
  8318 ;; This function is called by:
  8319 ;;		_sprintf
  8320 ;; This function uses a non-reentrant model
  8321 ;;
  8322                           
  8323                           	psect	text38
  8324  0032A0                     __ptext38:
  8325                           	callstack 0
  8326  0032A0                     ___lwdiv:
  8327                           	callstack 25
  8328  0032A0  0E00               	movlw	0
  8329  0032A2  6E08               	movwf	(___lwdiv@quotient+1)^0,c
  8330  0032A4  0E00               	movlw	0
  8331  0032A6  6E07               	movwf	___lwdiv@quotient^0,c
  8332  0032A8  5005               	movf	___lwdiv@divisor^0,w,c
  8333  0032AA  1006               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8334  0032AC  B4D8               	btfsc	status,2,c
  8335  0032AE  EF5B  F019         	goto	u2321
  8336  0032B2  EF5D  F019         	goto	u2320
  8337  0032B6                     u2321:
  8338  0032B6  EF85  F019         	goto	l1143
  8339  0032BA                     u2320:
  8340  0032BA  0E01               	movlw	1
  8341  0032BC  6E09               	movwf	___lwdiv@counter^0,c
  8342  0032BE  EF65  F019         	goto	l3200
  8343  0032C2                     l3198:
  8344  0032C2  90D8               	bcf	status,0,c
  8345  0032C4  3605               	rlcf	___lwdiv@divisor^0,f,c
  8346  0032C6  3606               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8347  0032C8  2A09               	incf	___lwdiv@counter^0,f,c
  8348  0032CA                     l3200:
  8349  0032CA  AE06               	btfss	(___lwdiv@divisor+1)^0,7,c
  8350  0032CC  EF6A  F019         	goto	u2331
  8351  0032D0  EF6C  F019         	goto	u2330
  8352  0032D4                     u2331:
  8353  0032D4  EF61  F019         	goto	l3198
  8354  0032D8                     u2330:
  8355  0032D8                     l3202:
  8356  0032D8  90D8               	bcf	status,0,c
  8357  0032DA  3607               	rlcf	___lwdiv@quotient^0,f,c
  8358  0032DC  3608               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8359  0032DE  5005               	movf	___lwdiv@divisor^0,w,c
  8360  0032E0  5C03               	subwf	___lwdiv@dividend^0,w,c
  8361  0032E2  5006               	movf	(___lwdiv@divisor+1)^0,w,c
  8362  0032E4  5804               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8363  0032E6  A0D8               	btfss	status,0,c
  8364  0032E8  EF78  F019         	goto	u2341
  8365  0032EC  EF7A  F019         	goto	u2340
  8366  0032F0                     u2341:
  8367  0032F0  EF7F  F019         	goto	l3210
  8368  0032F4                     u2340:
  8369  0032F4  5005               	movf	___lwdiv@divisor^0,w,c
  8370  0032F6  5E03               	subwf	___lwdiv@dividend^0,f,c
  8371  0032F8  5006               	movf	(___lwdiv@divisor+1)^0,w,c
  8372  0032FA  5A04               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8373  0032FC  8007               	bsf	___lwdiv@quotient^0,0,c
  8374  0032FE                     l3210:
  8375  0032FE  90D8               	bcf	status,0,c
  8376  003300  3206               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8377  003302  3205               	rrcf	___lwdiv@divisor^0,f,c
  8378  003304  2E09               	decfsz	___lwdiv@counter^0,f,c
  8379  003306  EF6C  F019         	goto	l3202
  8380  00330A                     l1143:
  8381  00330A  C007  F003         	movff	___lwdiv@quotient,?___lwdiv
  8382  00330E  C008  F004         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8383  003312  0012               	return		;funcret
  8384  003314                     __end_of___lwdiv:
  8385                           	callstack 0
  8386                           
  8387 ;; *************** function ___fltol *****************
  8388 ;; Defined at:
  8389 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\fltol.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;  f1              4    2[COMRAM] unsigned int 
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;  exp1            1   11[COMRAM] unsigned char 
  8394 ;;  sign1           1   10[COMRAM] unsigned char 
  8395 ;; Return value:  Size  Location     Type
  8396 ;;                  4    2[COMRAM] long 
  8397 ;; Registers used:
  8398 ;;		wreg, status,2, status,0
  8399 ;; Tracked objects:
  8400 ;;		On entry : 0/0
  8401 ;;		On exit  : 0/0
  8402 ;;		Unchanged: 0/0
  8403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8404 ;;      Params:         4       0       0       0       0       0       0
  8405 ;;      Locals:         2       0       0       0       0       0       0
  8406 ;;      Temps:          4       0       0       0       0       0       0
  8407 ;;      Totals:        10       0       0       0       0       0       0
  8408 ;;Total ram usage:       10 bytes
  8409 ;; Hardware stack levels used: 1
  8410 ;; Hardware stack levels required when called: 2
  8411 ;; This function calls:
  8412 ;;		Nothing
  8413 ;; This function is called by:
  8414 ;;		_Set_Display_Message
  8415 ;;		_Write_Message
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           	psect	text39
  8420  0028F2                     __ptext39:
  8421                           	callstack 0
  8422  0028F2                     ___fltol:
  8423                           	callstack 27
  8424  0028F2  3405               	rlcf	(___fltol@f1+2)^0,w,c
  8425  0028F4  3406               	rlcf	(___fltol@f1+3)^0,w,c
  8426  0028F6  6E0C               	movwf	___fltol@exp1^0,c
  8427  0028F8  500C               	movf	___fltol@exp1^0,w,c
  8428  0028FA  A4D8               	btfss	status,2,c
  8429  0028FC  EF82  F014         	goto	u2641
  8430  002900  EF84  F014         	goto	u2640
  8431  002904                     u2641:
  8432  002904  EF8E  F014         	goto	l3434
  8433  002908                     u2640:
  8434  002908                     l3430:
  8435  002908  0E00               	movlw	0
  8436  00290A  6E03               	movwf	?___fltol^0,c
  8437  00290C  0E00               	movlw	0
  8438  00290E  6E04               	movwf	(?___fltol+1)^0,c
  8439  002910  0E00               	movlw	0
  8440  002912  6E05               	movwf	(?___fltol+2)^0,c
  8441  002914  0E00               	movlw	0
  8442  002916  6E06               	movwf	(?___fltol+3)^0,c
  8443  002918  EFFB  F014         	goto	l953
  8444  00291C                     l3434:
  8445  00291C  C003  F007         	movff	___fltol@f1,??___fltol
  8446  002920  C004  F008         	movff	___fltol@f1+1,??___fltol+1
  8447  002924  C005  F009         	movff	___fltol@f1+2,??___fltol+2
  8448  002928  C006  F00A         	movff	___fltol@f1+3,??___fltol+3
  8449  00292C  0E20               	movlw	32
  8450  00292E  EF9E  F014         	goto	u2650
  8451  002932                     u2655:
  8452  002932  90D8               	bcf	status,0,c
  8453  002934  320A               	rrcf	(??___fltol+3)^0,f,c
  8454  002936  3209               	rrcf	(??___fltol+2)^0,f,c
  8455  002938  3208               	rrcf	(??___fltol+1)^0,f,c
  8456  00293A  3207               	rrcf	??___fltol^0,f,c
  8457  00293C                     u2650:
  8458  00293C  2EE8               	decfsz	wreg,f,c
  8459  00293E  EF99  F014         	goto	u2655
  8460  002942  5007               	movf	??___fltol^0,w,c
  8461  002944  6E0B               	movwf	___fltol@sign1^0,c
  8462  002946  8E05               	bsf	(___fltol@f1+2)^0,7,c
  8463  002948  0EFF               	movlw	255
  8464  00294A  1603               	andwf	___fltol@f1^0,f,c
  8465  00294C  0EFF               	movlw	255
  8466  00294E  1604               	andwf	(___fltol@f1+1)^0,f,c
  8467  002950  0EFF               	movlw	255
  8468  002952  1605               	andwf	(___fltol@f1+2)^0,f,c
  8469  002954  0E00               	movlw	0
  8470  002956  1606               	andwf	(___fltol@f1+3)^0,f,c
  8471  002958  0E96               	movlw	150
  8472  00295A  5E0C               	subwf	___fltol@exp1^0,f,c
  8473  00295C  BE0C               	btfsc	___fltol@exp1^0,7,c
  8474  00295E  EFB5  F014         	goto	u2660
  8475  002962  EFB3  F014         	goto	u2661
  8476  002966                     u2661:
  8477  002966  EFCB  F014         	goto	l3454
  8478  00296A                     u2660:
  8479  00296A  500C               	movf	___fltol@exp1^0,w,c
  8480  00296C  0A80               	xorlw	128
  8481  00296E  0F97               	addlw	151
  8482  002970  B0D8               	btfsc	status,0,c
  8483  002972  EFBD  F014         	goto	u2671
  8484  002976  EFBF  F014         	goto	u2670
  8485  00297A                     u2671:
  8486  00297A  EFC1  F014         	goto	l3450
  8487  00297E                     u2670:
  8488  00297E  EF84  F014         	goto	l3430
  8489  002982                     l3450:
  8490  002982  90D8               	bcf	status,0,c
  8491  002984  3206               	rrcf	(___fltol@f1+3)^0,f,c
  8492  002986  3205               	rrcf	(___fltol@f1+2)^0,f,c
  8493  002988  3204               	rrcf	(___fltol@f1+1)^0,f,c
  8494  00298A  3203               	rrcf	___fltol@f1^0,f,c
  8495  00298C  3E0C               	incfsz	___fltol@exp1^0,f,c
  8496  00298E  EFC1  F014         	goto	l3450
  8497  002992  EFE3  F014         	goto	l3464
  8498  002996                     l3454:
  8499  002996  0E1F               	movlw	31
  8500  002998  640C               	cpfsgt	___fltol@exp1^0,c
  8501  00299A  EFD1  F014         	goto	u2681
  8502  00299E  EFD3  F014         	goto	u2680
  8503  0029A2                     u2681:
  8504  0029A2  EFDB  F014         	goto	l3462
  8505  0029A6                     u2680:
  8506  0029A6  EF84  F014         	goto	l3430
  8507  0029AA                     l3460:
  8508  0029AA  90D8               	bcf	status,0,c
  8509  0029AC  3603               	rlcf	___fltol@f1^0,f,c
  8510  0029AE  3604               	rlcf	(___fltol@f1+1)^0,f,c
  8511  0029B0  3605               	rlcf	(___fltol@f1+2)^0,f,c
  8512  0029B2  3606               	rlcf	(___fltol@f1+3)^0,f,c
  8513  0029B4  060C               	decf	___fltol@exp1^0,f,c
  8514  0029B6                     l3462:
  8515  0029B6  500C               	movf	___fltol@exp1^0,w,c
  8516  0029B8  A4D8               	btfss	status,2,c
  8517  0029BA  EFE1  F014         	goto	u2691
  8518  0029BE  EFE3  F014         	goto	u2690
  8519  0029C2                     u2691:
  8520  0029C2  EFD5  F014         	goto	l3460
  8521  0029C6                     u2690:
  8522  0029C6                     l3464:
  8523  0029C6  500B               	movf	___fltol@sign1^0,w,c
  8524  0029C8  B4D8               	btfsc	status,2,c
  8525  0029CA  EFE9  F014         	goto	u2701
  8526  0029CE  EFEB  F014         	goto	u2700
  8527  0029D2                     u2701:
  8528  0029D2  EFF3  F014         	goto	l3468
  8529  0029D6                     u2700:
  8530  0029D6  1E06               	comf	(___fltol@f1+3)^0,f,c
  8531  0029D8  1E05               	comf	(___fltol@f1+2)^0,f,c
  8532  0029DA  1E04               	comf	(___fltol@f1+1)^0,f,c
  8533  0029DC  6C03               	negf	___fltol@f1^0,c
  8534  0029DE  0E00               	movlw	0
  8535  0029E0  2204               	addwfc	(___fltol@f1+1)^0,f,c
  8536  0029E2  2205               	addwfc	(___fltol@f1+2)^0,f,c
  8537  0029E4  2206               	addwfc	(___fltol@f1+3)^0,f,c
  8538  0029E6                     l3468:
  8539  0029E6  C003  F003         	movff	___fltol@f1,?___fltol
  8540  0029EA  C004  F004         	movff	___fltol@f1+1,?___fltol+1
  8541  0029EE  C005  F005         	movff	___fltol@f1+2,?___fltol+2
  8542  0029F2  C006  F006         	movff	___fltol@f1+3,?___fltol+3
  8543  0029F6                     l953:
  8544  0029F6  0012               	return		;funcret
  8545  0029F8                     __end_of___fltol:
  8546                           	callstack 0
  8547                           
  8548 ;; *************** function _CheckBit *****************
  8549 ;; Defined at:
  8550 ;;		line 18 in file "regoperations.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;  port            2    2[COMRAM] unsigned int 
  8553 ;;  pin             2    4[COMRAM] unsigned int 
  8554 ;; Auto vars:     Size  Location     Type
  8555 ;;		None
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  2    2[COMRAM] int 
  8558 ;; Registers used:
  8559 ;;		wreg, status,2, status,0
  8560 ;; Tracked objects:
  8561 ;;		On entry : 0/0
  8562 ;;		On exit  : 0/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8565 ;;      Params:         4       0       0       0       0       0       0
  8566 ;;      Locals:         0       0       0       0       0       0       0
  8567 ;;      Temps:          3       0       0       0       0       0       0
  8568 ;;      Totals:         7       0       0       0       0       0       0
  8569 ;;Total ram usage:        7 bytes
  8570 ;; Hardware stack levels used: 1
  8571 ;; Hardware stack levels required when called: 2
  8572 ;; This function calls:
  8573 ;;		Nothing
  8574 ;; This function is called by:
  8575 ;;		_Change_Mode
  8576 ;;		_Debounce
  8577 ;; This function uses a non-reentrant model
  8578 ;;
  8579                           
  8580                           	psect	text40
  8581  003692                     __ptext40:
  8582                           	callstack 0
  8583  003692                     _CheckBit:
  8584                           	callstack 26
  8585  003692                     
  8586                           ;regoperations.c: 20: return ((port >> pin) & 1U);
  8587  003692  C005  F007         	movff	CheckBit@pin,??_CheckBit
  8588  003696  C003  F008         	movff	CheckBit@port,??_CheckBit+1
  8589  00369A  C004  F009         	movff	CheckBit@port+1,??_CheckBit+2
  8590  00369E  2A07               	incf	??_CheckBit^0,f,c
  8591  0036A0  EF55  F01B         	goto	u2794
  8592  0036A4                     u2795:
  8593  0036A4  90D8               	bcf	status,0,c
  8594  0036A6  3209               	rrcf	(??_CheckBit+2)^0,f,c
  8595  0036A8  3208               	rrcf	(??_CheckBit+1)^0,f,c
  8596  0036AA                     u2794:
  8597  0036AA  2E07               	decfsz	??_CheckBit^0,f,c
  8598  0036AC  EF52  F01B         	goto	u2795
  8599  0036B0  0E01               	movlw	1
  8600  0036B2  1408               	andwf	(??_CheckBit+1)^0,w,c
  8601  0036B4  6E03               	movwf	?_CheckBit^0,c
  8602  0036B6  6A04               	clrf	(?_CheckBit+1)^0,c
  8603  0036B8  0012               	return		;funcret
  8604  0036BA                     __end_of_CheckBit:
  8605                           	callstack 0
  8606                           
  8607 ;; *************** function _Lcd_Init *****************
  8608 ;; Defined at:
  8609 ;;		line 54 in file "flexlcd.h"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;		None
  8612 ;; Auto vars:     Size  Location     Type
  8613 ;;  data            1    6[COMRAM] unsigned char 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      void 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0, cstack
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8623 ;;      Params:         0       0       0       0       0       0       0
  8624 ;;      Locals:         1       0       0       0       0       0       0
  8625 ;;      Temps:          1       0       0       0       0       0       0
  8626 ;;      Totals:         2       0       0       0       0       0       0
  8627 ;;Total ram usage:        2 bytes
  8628 ;; Hardware stack levels used: 1
  8629 ;; Hardware stack levels required when called: 3
  8630 ;; This function calls:
  8631 ;;		_Lcd_Cmd
  8632 ;; This function is called by:
  8633 ;;		_main
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637                           	psect	text41
  8638  0025C4                     __ptext41:
  8639                           	callstack 0
  8640  0025C4                     _Lcd_Init:
  8641                           	callstack 27
  8642  0025C4                     
  8643                           ;flexlcd.h: 55: unsigned char data;;flexlcd.h: 56: TRISDbits.TRISD7 = 0;
  8644  0025C4  9E95               	bcf	149,7,c	;volatile
  8645                           
  8646                           ;flexlcd.h: 57: TRISDbits.TRISD6 = 0;
  8647  0025C6  9C95               	bcf	149,6,c	;volatile
  8648                           
  8649                           ;flexlcd.h: 58: TRISDbits.TRISD5 = 0;
  8650  0025C8  9A95               	bcf	149,5,c	;volatile
  8651                           
  8652                           ;flexlcd.h: 59: TRISDbits.TRISD4 = 0;
  8653  0025CA  9895               	bcf	149,4,c	;volatile
  8654                           
  8655                           ;flexlcd.h: 60: TRISEbits.TRISE2 = 0;
  8656  0025CC  9496               	bcf	150,2,c	;volatile
  8657                           
  8658                           ;flexlcd.h: 61: TRISEbits.TRISE1 = 0;
  8659  0025CE  9296               	bcf	150,1,c	;volatile
  8660                           
  8661                           ;flexlcd.h: 62: PORTDbits.RD7 = 0;
  8662  0025D0  9E83               	bcf	131,7,c	;volatile
  8663                           
  8664                           ;flexlcd.h: 63: PORTDbits.RD6 = 0;
  8665  0025D2  9C83               	bcf	131,6,c	;volatile
  8666                           
  8667                           ;flexlcd.h: 64: PORTDbits.RD5 = 0;
  8668  0025D4  9A83               	bcf	131,5,c	;volatile
  8669                           
  8670                           ;flexlcd.h: 65: PORTDbits.RD4 = 0;
  8671  0025D6  9883               	bcf	131,4,c	;volatile
  8672                           
  8673                           ;flexlcd.h: 66: PORTEbits.RE1 = 0;
  8674  0025D8  9284               	bcf	132,1,c	;volatile
  8675                           
  8676                           ;flexlcd.h: 67: PORTEbits.RE2 = 0;
  8677  0025DA  9484               	bcf	132,2,c	;volatile
  8678  0025DC                     
  8679                           ;flexlcd.h: 68: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8680  0025DC  0E12               	movlw	18
  8681  0025DE  6E06               	movwf	??_Lcd_Init^0,c
  8682  0025E0  0EDA               	movlw	218
  8683  0025E2                     u4537:
  8684  0025E2  2EE8               	decfsz	wreg,f,c
  8685  0025E4  D7FE               	bra	u4537
  8686  0025E6  2E06               	decfsz	??_Lcd_Init^0,f,c
  8687  0025E8  D7FC               	bra	u4537
  8688  0025EA  D000               	nop2	
  8689                           
  8690                           ;flexlcd.h: 69: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8691  0025EC  0E12               	movlw	18
  8692  0025EE  6E06               	movwf	??_Lcd_Init^0,c
  8693  0025F0  0EDA               	movlw	218
  8694  0025F2                     u4547:
  8695  0025F2  2EE8               	decfsz	wreg,f,c
  8696  0025F4  D7FE               	bra	u4547
  8697  0025F6  2E06               	decfsz	??_Lcd_Init^0,f,c
  8698  0025F8  D7FC               	bra	u4547
  8699  0025FA  D000               	nop2	
  8700                           
  8701                           ;flexlcd.h: 70: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8702  0025FC  0E12               	movlw	18
  8703  0025FE  6E06               	movwf	??_Lcd_Init^0,c
  8704  002600  0EDA               	movlw	218
  8705  002602                     u4557:
  8706  002602  2EE8               	decfsz	wreg,f,c
  8707  002604  D7FE               	bra	u4557
  8708  002606  2E06               	decfsz	??_Lcd_Init^0,f,c
  8709  002608  D7FC               	bra	u4557
  8710  00260A  D000               	nop2	
  8711                           
  8712                           ;flexlcd.h: 71: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8713  00260C  0E12               	movlw	18
  8714  00260E  6E06               	movwf	??_Lcd_Init^0,c
  8715  002610  0EDA               	movlw	218
  8716  002612                     u4567:
  8717  002612  2EE8               	decfsz	wreg,f,c
  8718  002614  D7FE               	bra	u4567
  8719  002616  2E06               	decfsz	??_Lcd_Init^0,f,c
  8720  002618  D7FC               	bra	u4567
  8721  00261A  D000               	nop2	
  8722                           
  8723                           ;flexlcd.h: 72: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8724  00261C  0E12               	movlw	18
  8725  00261E  6E06               	movwf	??_Lcd_Init^0,c
  8726  002620  0EDA               	movlw	218
  8727  002622                     u4577:
  8728  002622  2EE8               	decfsz	wreg,f,c
  8729  002624  D7FE               	bra	u4577
  8730  002626  2E06               	decfsz	??_Lcd_Init^0,f,c
  8731  002628  D7FC               	bra	u4577
  8732  00262A  D000               	nop2	
  8733                           
  8734                           ;flexlcd.h: 73: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8735  00262C  0E12               	movlw	18
  8736  00262E  6E06               	movwf	??_Lcd_Init^0,c
  8737  002630  0EDA               	movlw	218
  8738  002632                     u4587:
  8739  002632  2EE8               	decfsz	wreg,f,c
  8740  002634  D7FE               	bra	u4587
  8741  002636  2E06               	decfsz	??_Lcd_Init^0,f,c
  8742  002638  D7FC               	bra	u4587
  8743  00263A  D000               	nop2	
  8744  00263C                     
  8745                           ;flexlcd.h: 74: for(data = 1; data < 4; data ++)
  8746  00263C  0E01               	movlw	1
  8747  00263E  6E07               	movwf	Lcd_Init@data^0,c
  8748  002640                     l121:
  8749                           
  8750                           ;flexlcd.h: 75: {;flexlcd.h: 76: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 1; PORTEbits.RE1 = 0;
  8751  002640  9E83               	bcf	131,7,c	;volatile
  8752  002642  9C83               	bcf	131,6,c	;volatile
  8753  002644  8A83               	bsf	131,5,c	;volatile
  8754  002646  8883               	bsf	131,4,c	;volatile
  8755  002648  9284               	bcf	132,1,c	;volatile
  8756                           
  8757                           ;flexlcd.h: 77: PORTEbits.RE2 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 =
      +                           1; PORTDbits.RD4 = 1;
  8758  00264A  9484               	bcf	132,2,c	;volatile
  8759  00264C  9E83               	bcf	131,7,c	;volatile
  8760  00264E  9C83               	bcf	131,6,c	;volatile
  8761  002650  8A83               	bsf	131,5,c	;volatile
  8762  002652  8883               	bsf	131,4,c	;volatile
  8763                           
  8764                           ;flexlcd.h: 78: PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  8765  002654  8284               	bsf	132,1,c	;volatile
  8766  002656  9484               	bcf	132,2,c	;volatile
  8767  002658                     
  8768                           ;flexlcd.h: 79: _delay((unsigned long)((5)*(10000000/4000000.0)));
  8769  002658  0E04               	movlw	4
  8770  00265A                     u4597:
  8771  00265A  2EE8               	decfsz	wreg,f,c
  8772  00265C  D7FE               	bra	u4597
  8773  00265E                     
  8774                           ;flexlcd.h: 80: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           1; PORTEbits.RE1 = 0;
  8775  00265E  9E83               	bcf	131,7,c	;volatile
  8776  002660  9C83               	bcf	131,6,c	;volatile
  8777  002662  8A83               	bsf	131,5,c	;volatile
  8778  002664  8883               	bsf	131,4,c	;volatile
  8779  002666  9284               	bcf	132,1,c	;volatile
  8780  002668                     
  8781                           ;flexlcd.h: 81: PORTEbits.RE2 = 0;
  8782  002668  9484               	bcf	132,2,c	;volatile
  8783                           
  8784                           ;flexlcd.h: 82: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8785  00266A  0E12               	movlw	18
  8786  00266C  6E06               	movwf	??_Lcd_Init^0,c
  8787  00266E  0EDA               	movlw	218
  8788  002670                     u4607:
  8789  002670  2EE8               	decfsz	wreg,f,c
  8790  002672  D7FE               	bra	u4607
  8791  002674  2E06               	decfsz	??_Lcd_Init^0,f,c
  8792  002676  D7FC               	bra	u4607
  8793  002678  D000               	nop2	
  8794  00267A  2A07               	incf	Lcd_Init@data^0,f,c
  8795  00267C  0E03               	movlw	3
  8796  00267E  6407               	cpfsgt	Lcd_Init@data^0,c
  8797  002680  EF44  F013         	goto	u4151
  8798  002684  EF46  F013         	goto	u4150
  8799  002688                     u4151:
  8800  002688  EF20  F013         	goto	l121
  8801  00268C                     u4150:
  8802  00268C                     
  8803                           ;flexlcd.h: 83: };flexlcd.h: 84: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  8804  00268C  9E83               	bcf	131,7,c	;volatile
  8805  00268E  9C83               	bcf	131,6,c	;volatile
  8806  002690  8A83               	bsf	131,5,c	;volatile
  8807  002692  9883               	bcf	131,4,c	;volatile
  8808  002694  9284               	bcf	132,1,c	;volatile
  8809  002696  9484               	bcf	132,2,c	;volatile
  8810                           
  8811                           ;flexlcd.h: 85: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  8812  002698  9E83               	bcf	131,7,c	;volatile
  8813  00269A  9C83               	bcf	131,6,c	;volatile
  8814  00269C  8A83               	bsf	131,5,c	;volatile
  8815  00269E  9883               	bcf	131,4,c	;volatile
  8816  0026A0  8284               	bsf	132,1,c	;volatile
  8817  0026A2  9484               	bcf	132,2,c	;volatile
  8818  0026A4                     
  8819                           ;flexlcd.h: 86: _delay((unsigned long)((5)*(10000000/4000000.0)));
  8820  0026A4  0E04               	movlw	4
  8821  0026A6                     u4617:
  8822  0026A6  2EE8               	decfsz	wreg,f,c
  8823  0026A8  D7FE               	bra	u4617
  8824  0026AA                     
  8825                           ;flexlcd.h: 87: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  8826  0026AA  9E83               	bcf	131,7,c	;volatile
  8827  0026AC  9C83               	bcf	131,6,c	;volatile
  8828  0026AE  8A83               	bsf	131,5,c	;volatile
  8829  0026B0  9883               	bcf	131,4,c	;volatile
  8830  0026B2  9284               	bcf	132,1,c	;volatile
  8831  0026B4  9484               	bcf	132,2,c	;volatile
  8832                           
  8833                           ;flexlcd.h: 88: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8834  0026B6  0E12               	movlw	18
  8835  0026B8  6E06               	movwf	??_Lcd_Init^0,c
  8836  0026BA  0EDA               	movlw	218
  8837  0026BC                     u4627:
  8838  0026BC  2EE8               	decfsz	wreg,f,c
  8839  0026BE  D7FE               	bra	u4627
  8840  0026C0  2E06               	decfsz	??_Lcd_Init^0,f,c
  8841  0026C2  D7FC               	bra	u4627
  8842  0026C4  D000               	nop2	
  8843  0026C6  0E28               	movlw	40
  8844  0026C8  ECBC  F011         	call	_Lcd_Cmd
  8845  0026CC  0E10               	movlw	16
  8846  0026CE  ECBC  F011         	call	_Lcd_Cmd
  8847  0026D2  0E01               	movlw	1
  8848  0026D4  ECBC  F011         	call	_Lcd_Cmd
  8849  0026D8  0E0F               	movlw	15
  8850  0026DA  ECBC  F011         	call	_Lcd_Cmd
  8851  0026DE  0012               	return		;funcret
  8852  0026E0                     __end_of_Lcd_Init:
  8853                           	callstack 0
  8854                           
  8855 ;; *************** function _Lcd_Cmd *****************
  8856 ;; Defined at:
  8857 ;;		line 131 in file "flexlcd.h"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;  data            1    wreg     unsigned char 
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;  data            1    4[COMRAM] unsigned char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  1    wreg      void 
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8871 ;;      Params:         0       0       0       0       0       0       0
  8872 ;;      Locals:         1       0       0       0       0       0       0
  8873 ;;      Temps:          2       0       0       0       0       0       0
  8874 ;;      Totals:         3       0       0       0       0       0       0
  8875 ;;Total ram usage:        3 bytes
  8876 ;; Hardware stack levels used: 1
  8877 ;; Hardware stack levels required when called: 2
  8878 ;; This function calls:
  8879 ;;		Nothing
  8880 ;; This function is called by:
  8881 ;;		_Lcd_Init
  8882 ;;		_Lcd_Out
  8883 ;;		_main
  8884 ;; This function uses a non-reentrant model
  8885 ;;
  8886                           
  8887                           	psect	text42
  8888  002378                     __ptext42:
  8889                           	callstack 0
  8890  002378                     _Lcd_Cmd:
  8891                           	callstack 25
  8892                           
  8893                           ;incstack = 0
  8894                           ;Lcd_Cmd@data stored from wreg
  8895  002378  6E05               	movwf	Lcd_Cmd@data^0,c
  8896  00237A                     
  8897                           ;flexlcd.h: 132: PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  8898  00237A  9284               	bcf	132,1,c	;volatile
  8899  00237C  9484               	bcf	132,2,c	;volatile
  8900  00237E                     
  8901                           ;flexlcd.h: 133: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  8902  00237E  6A03               	clrf	??_Lcd_Cmd^0,c
  8903  002380  AE05               	btfss	Lcd_Cmd@data^0,7,c
  8904  002382  D001               	bra	u2245
  8905  002384  2A03               	incf	??_Lcd_Cmd^0,f,c
  8906  002386                     u2245:
  8907  002386  0E01               	movlw	1
  8908  002388  1603               	andwf	??_Lcd_Cmd^0,f,c
  8909  00238A  3203               	rrcf	??_Lcd_Cmd^0,f,c
  8910  00238C  3203               	rrcf	??_Lcd_Cmd^0,f,c
  8911  00238E  5083               	movf	131,w,c	;volatile
  8912  002390  1803               	xorwf	??_Lcd_Cmd^0,w,c
  8913  002392  0B7F               	andlw	-129
  8914  002394  1803               	xorwf	??_Lcd_Cmd^0,w,c
  8915  002396  6E83               	movwf	131,c	;volatile
  8916  002398  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8917  00239C  0E06               	movlw	6
  8918  00239E  6E04               	movwf	(??_Lcd_Cmd+1)^0,c
  8919  0023A0                     u2255:
  8920  0023A0  90D8               	bcf	status,0,c
  8921  0023A2  3203               	rrcf	??_Lcd_Cmd^0,f,c
  8922  0023A4  2E04               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  8923  0023A6  EFD0  F011         	goto	u2255
  8924  0023AA  0E01               	movlw	1
  8925  0023AC  1603               	andwf	??_Lcd_Cmd^0,f,c
  8926  0023AE  3A03               	swapf	??_Lcd_Cmd^0,f,c
  8927  0023B0  4603               	rlncf	??_Lcd_Cmd^0,f,c
  8928  0023B2  4603               	rlncf	??_Lcd_Cmd^0,f,c
  8929  0023B4  5083               	movf	131,w,c	;volatile
  8930  0023B6  1803               	xorwf	??_Lcd_Cmd^0,w,c
  8931  0023B8  0BBF               	andlw	-65
  8932  0023BA  1803               	xorwf	??_Lcd_Cmd^0,w,c
  8933  0023BC  6E83               	movwf	131,c	;volatile
  8934                           
  8935                           ;flexlcd.h: 134: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  8936  0023BE  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8937  0023C2  0E05               	movlw	5
  8938  0023C4  6E04               	movwf	(??_Lcd_Cmd+1)^0,c
  8939  0023C6                     u2265:
  8940  0023C6  90D8               	bcf	status,0,c
  8941  0023C8  3203               	rrcf	??_Lcd_Cmd^0,f,c
  8942  0023CA  2E04               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  8943  0023CC  EFE3  F011         	goto	u2265
  8944  0023D0  0E01               	movlw	1
  8945  0023D2  1603               	andwf	??_Lcd_Cmd^0,f,c
  8946  0023D4  3A03               	swapf	??_Lcd_Cmd^0,f,c
  8947  0023D6  4603               	rlncf	??_Lcd_Cmd^0,f,c
  8948  0023D8  5083               	movf	131,w,c	;volatile
  8949  0023DA  1803               	xorwf	??_Lcd_Cmd^0,w,c
  8950  0023DC  0BDF               	andlw	-33
  8951  0023DE  1803               	xorwf	??_Lcd_Cmd^0,w,c
  8952  0023E0  6E83               	movwf	131,c	;volatile
  8953  0023E2  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8954  0023E6  3A03               	swapf	??_Lcd_Cmd^0,f,c
  8955  0023E8  0E0F               	movlw	15
  8956  0023EA  1603               	andwf	??_Lcd_Cmd^0,f,c
  8957  0023EC  0E01               	movlw	1
  8958  0023EE  1603               	andwf	??_Lcd_Cmd^0,f,c
  8959  0023F0  3A03               	swapf	??_Lcd_Cmd^0,f,c
  8960  0023F2  5083               	movf	131,w,c	;volatile
  8961  0023F4  1803               	xorwf	??_Lcd_Cmd^0,w,c
  8962  0023F6  0BEF               	andlw	-17
  8963  0023F8  1803               	xorwf	??_Lcd_Cmd^0,w,c
  8964  0023FA  6E83               	movwf	131,c	;volatile
  8965  0023FC                     
  8966                           ;flexlcd.h: 135: _delay(10);
  8967  0023FC  0E03               	movlw	3
  8968  0023FE                     u4637:
  8969  0023FE  2EE8               	decfsz	wreg,f,c
  8970  002400  D7FE               	bra	u4637
  8971  002402  F000               	nop	
  8972  002404                     
  8973                           ;flexlcd.h: 136: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  8974  002404  8284               	bsf	132,1,c	;volatile
  8975  002406  0E04               	movlw	4
  8976  002408                     u4647:
  8977  002408  2EE8               	decfsz	wreg,f,c
  8978  00240A  D7FE               	bra	u4647
  8979  00240C  9284               	bcf	132,1,c	;volatile
  8980                           
  8981                           ;flexlcd.h: 137: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  8982  00240E  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8983  002412  90D8               	bcf	status,0,c
  8984  002414  3203               	rrcf	??_Lcd_Cmd^0,f,c
  8985  002416  90D8               	bcf	status,0,c
  8986  002418  3203               	rrcf	??_Lcd_Cmd^0,f,c
  8987  00241A  90D8               	bcf	status,0,c
  8988  00241C  3203               	rrcf	??_Lcd_Cmd^0,f,c
  8989  00241E  0E01               	movlw	1
  8990  002420  1603               	andwf	??_Lcd_Cmd^0,f,c
  8991  002422  3203               	rrcf	??_Lcd_Cmd^0,f,c
  8992  002424  3203               	rrcf	??_Lcd_Cmd^0,f,c
  8993  002426  5083               	movf	131,w,c	;volatile
  8994  002428  1803               	xorwf	??_Lcd_Cmd^0,w,c
  8995  00242A  0B7F               	andlw	-129
  8996  00242C  1803               	xorwf	??_Lcd_Cmd^0,w,c
  8997  00242E  6E83               	movwf	131,c	;volatile
  8998  002430  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8999  002434  90D8               	bcf	status,0,c
  9000  002436  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9001  002438  90D8               	bcf	status,0,c
  9002  00243A  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9003  00243C  0E01               	movlw	1
  9004  00243E  1603               	andwf	??_Lcd_Cmd^0,f,c
  9005  002440  3A03               	swapf	??_Lcd_Cmd^0,f,c
  9006  002442  4603               	rlncf	??_Lcd_Cmd^0,f,c
  9007  002444  4603               	rlncf	??_Lcd_Cmd^0,f,c
  9008  002446  5083               	movf	131,w,c	;volatile
  9009  002448  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9010  00244A  0BBF               	andlw	-65
  9011  00244C  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9012  00244E  6E83               	movwf	131,c	;volatile
  9013                           
  9014                           ;flexlcd.h: 138: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  9015  002450  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  9016  002454  90D8               	bcf	status,0,c
  9017  002456  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9018  002458  0E01               	movlw	1
  9019  00245A  1603               	andwf	??_Lcd_Cmd^0,f,c
  9020  00245C  3A03               	swapf	??_Lcd_Cmd^0,f,c
  9021  00245E  4603               	rlncf	??_Lcd_Cmd^0,f,c
  9022  002460  5083               	movf	131,w,c	;volatile
  9023  002462  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9024  002464  0BDF               	andlw	-33
  9025  002466  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9026  002468  6E83               	movwf	131,c	;volatile
  9027  00246A  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  9028  00246E  0E01               	movlw	1
  9029  002470  1603               	andwf	??_Lcd_Cmd^0,f,c
  9030  002472  3A03               	swapf	??_Lcd_Cmd^0,f,c
  9031  002474  5083               	movf	131,w,c	;volatile
  9032  002476  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9033  002478  0BEF               	andlw	-17
  9034  00247A  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9035  00247C  6E83               	movwf	131,c	;volatile
  9036  00247E                     
  9037                           ;flexlcd.h: 139: _delay(10);
  9038  00247E  0E03               	movlw	3
  9039  002480                     u4657:
  9040  002480  2EE8               	decfsz	wreg,f,c
  9041  002482  D7FE               	bra	u4657
  9042  002484  F000               	nop	
  9043  002486                     
  9044                           ;flexlcd.h: 140: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  9045  002486  8284               	bsf	132,1,c	;volatile
  9046  002488  0E04               	movlw	4
  9047  00248A                     u4667:
  9048  00248A  2EE8               	decfsz	wreg,f,c
  9049  00248C  D7FE               	bra	u4667
  9050  00248E  9284               	bcf	132,1,c	;volatile
  9051  002490                     
  9052                           ;flexlcd.h: 141: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  9053  002490  0E12               	movlw	18
  9054  002492  6E03               	movwf	??_Lcd_Cmd^0,c
  9055  002494  0EDA               	movlw	218
  9056  002496                     u4677:
  9057  002496  2EE8               	decfsz	wreg,f,c
  9058  002498  D7FE               	bra	u4677
  9059  00249A  2E03               	decfsz	??_Lcd_Cmd^0,f,c
  9060  00249C  D7FC               	bra	u4677
  9061  00249E  D000               	nop2	
  9062  0024A0  0012               	return		;funcret
  9063  0024A2                     __end_of_Lcd_Cmd:
  9064                           	callstack 0
  9065                           
  9066 ;; *************** function _Initialize_Tanks *****************
  9067 ;; Defined at:
  9068 ;;		line 341 in file "main.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;		None
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;		None
  9073 ;; Return value:  Size  Location     Type
  9074 ;;                  1    wreg      void 
  9075 ;; Registers used:
  9076 ;;		wreg, status,2
  9077 ;; Tracked objects:
  9078 ;;		On entry : 0/0
  9079 ;;		On exit  : 0/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9082 ;;      Params:         0       0       0       0       0       0       0
  9083 ;;      Locals:         0       0       0       0       0       0       0
  9084 ;;      Temps:          0       0       0       0       0       0       0
  9085 ;;      Totals:         0       0       0       0       0       0       0
  9086 ;;Total ram usage:        0 bytes
  9087 ;; Hardware stack levels used: 1
  9088 ;; Hardware stack levels required when called: 2
  9089 ;; This function calls:
  9090 ;;		Nothing
  9091 ;; This function is called by:
  9092 ;;		_main
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           	psect	text43
  9097  0033E6                     __ptext43:
  9098                           	callstack 0
  9099  0033E6                     _Initialize_Tanks:
  9100                           	callstack 28
  9101  0033E6                     
  9102                           ;main.c: 344: tank1.level = 0;
  9103  0033E6  0E00               	movlw	0
  9104  0033E8  6E47               	movwf	_tank1^0,c	;volatile
  9105  0033EA  0E00               	movlw	0
  9106  0033EC  6E48               	movwf	(_tank1+1)^0,c	;volatile
  9107  0033EE  0E00               	movlw	0
  9108  0033F0  6E49               	movwf	(_tank1+2)^0,c	;volatile
  9109  0033F2  0E00               	movlw	0
  9110  0033F4  6E4A               	movwf	(_tank1+3)^0,c	;volatile
  9111                           
  9112                           ;main.c: 345: tank1.min_level = 0;
  9113  0033F6  0E00               	movlw	0
  9114  0033F8  6E4B               	movwf	(_tank1+4)^0,c	;volatile
  9115  0033FA  0E00               	movlw	0
  9116  0033FC  6E4C               	movwf	(_tank1+5)^0,c	;volatile
  9117  0033FE  0E00               	movlw	0
  9118  003400  6E4D               	movwf	(_tank1+6)^0,c	;volatile
  9119  003402  0E00               	movlw	0
  9120  003404  6E4E               	movwf	(_tank1+7)^0,c	;volatile
  9121                           
  9122                           ;main.c: 346: tank1.max_level = 100;
  9123  003406  0E00               	movlw	0
  9124  003408  6E4F               	movwf	(_tank1+8)^0,c	;volatile
  9125  00340A  0E00               	movlw	0
  9126  00340C  6E50               	movwf	(_tank1+9)^0,c	;volatile
  9127  00340E  0EC8               	movlw	200
  9128  003410  6E51               	movwf	(_tank1+10)^0,c	;volatile
  9129  003412  0E42               	movlw	66
  9130  003414  6E52               	movwf	(_tank1+11)^0,c	;volatile
  9131                           
  9132                           ;main.c: 348: tank2.level = 0;
  9133  003416  0E00               	movlw	0
  9134  003418  6E3B               	movwf	_tank2^0,c	;volatile
  9135  00341A  0E00               	movlw	0
  9136  00341C  6E3C               	movwf	(_tank2+1)^0,c	;volatile
  9137  00341E  0E00               	movlw	0
  9138  003420  6E3D               	movwf	(_tank2+2)^0,c	;volatile
  9139  003422  0E00               	movlw	0
  9140  003424  6E3E               	movwf	(_tank2+3)^0,c	;volatile
  9141                           
  9142                           ;main.c: 349: tank2.min_level = 0;
  9143  003426  0E00               	movlw	0
  9144  003428  6E3F               	movwf	(_tank2+4)^0,c	;volatile
  9145  00342A  0E00               	movlw	0
  9146  00342C  6E40               	movwf	(_tank2+5)^0,c	;volatile
  9147  00342E  0E00               	movlw	0
  9148  003430  6E41               	movwf	(_tank2+6)^0,c	;volatile
  9149  003432  0E00               	movlw	0
  9150  003434  6E42               	movwf	(_tank2+7)^0,c	;volatile
  9151                           
  9152                           ;main.c: 350: tank2.max_level = 90;
  9153  003436  0E00               	movlw	0
  9154  003438  6E43               	movwf	(_tank2+8)^0,c	;volatile
  9155  00343A  0E00               	movlw	0
  9156  00343C  6E44               	movwf	(_tank2+9)^0,c	;volatile
  9157  00343E  0EB4               	movlw	180
  9158  003440  6E45               	movwf	(_tank2+10)^0,c	;volatile
  9159  003442  0E42               	movlw	66
  9160  003444  6E46               	movwf	(_tank2+11)^0,c	;volatile
  9161  003446  0012               	return		;funcret
  9162  003448                     __end_of_Initialize_Tanks:
  9163                           	callstack 0
  9164                           
  9165 ;; *************** function _Configure_Registers *****************
  9166 ;; Defined at:
  9167 ;;		line 369 in file "main.c"
  9168 ;; Parameters:    Size  Location     Type
  9169 ;;		None
  9170 ;; Auto vars:     Size  Location     Type
  9171 ;;		None
  9172 ;; Return value:  Size  Location     Type
  9173 ;;                  1    wreg      void 
  9174 ;; Registers used:
  9175 ;;		wreg, status,2, cstack
  9176 ;; Tracked objects:
  9177 ;;		On entry : 0/0
  9178 ;;		On exit  : 0/0
  9179 ;;		Unchanged: 0/0
  9180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9181 ;;      Params:         0       0       0       0       0       0       0
  9182 ;;      Locals:         0       0       0       0       0       0       0
  9183 ;;      Temps:          0       0       0       0       0       0       0
  9184 ;;      Totals:         0       0       0       0       0       0       0
  9185 ;;Total ram usage:        0 bytes
  9186 ;; Hardware stack levels used: 1
  9187 ;; Hardware stack levels required when called: 3
  9188 ;; This function calls:
  9189 ;;		_Configure_External_Interrupt
  9190 ;;		_Configure_Timer_Interrupt
  9191 ;; This function is called by:
  9192 ;;		_main
  9193 ;; This function uses a non-reentrant model
  9194 ;;
  9195                           
  9196                           	psect	text44
  9197  0034A8                     __ptext44:
  9198                           	callstack 0
  9199  0034A8                     _Configure_Registers:
  9200                           	callstack 27
  9201  0034A8                     
  9202                           ;main.c: 371: INTCON2bits.RBPU = 0;
  9203  0034A8  9EF1               	bcf	241,7,c	;volatile
  9204                           
  9205                           ;main.c: 374: TRISA = 0xff;
  9206  0034AA  6892               	setf	146,c	;volatile
  9207  0034AC                     
  9208                           ;main.c: 375: TRISB = 0x3f;
  9209  0034AC  0E3F               	movlw	63
  9210  0034AE  6E93               	movwf	147,c	;volatile
  9211                           
  9212                           ;main.c: 376: TRISC = 0x00;
  9213  0034B0  0E00               	movlw	0
  9214  0034B2  6E94               	movwf	148,c	;volatile
  9215                           
  9216                           ;main.c: 377: TRISD = 0x00;
  9217  0034B4  0E00               	movlw	0
  9218  0034B6  6E95               	movwf	149,c	;volatile
  9219                           
  9220                           ;main.c: 378: TRISE = 0x00;
  9221  0034B8  0E00               	movlw	0
  9222  0034BA  6E96               	movwf	150,c	;volatile
  9223                           
  9224                           ;main.c: 380: PORTA = 0; LATA = 0;
  9225  0034BC  0E00               	movlw	0
  9226  0034BE  6E80               	movwf	128,c	;volatile
  9227  0034C0  0E00               	movlw	0
  9228  0034C2  6E89               	movwf	137,c	;volatile
  9229                           
  9230                           ;main.c: 381: PORTB = 0; LATB = 0;
  9231  0034C4  0E00               	movlw	0
  9232  0034C6  6E81               	movwf	129,c	;volatile
  9233  0034C8  0E00               	movlw	0
  9234  0034CA  6E8A               	movwf	138,c	;volatile
  9235                           
  9236                           ;main.c: 382: PORTC = 0; LATC = 0;
  9237  0034CC  0E00               	movlw	0
  9238  0034CE  6E82               	movwf	130,c	;volatile
  9239  0034D0  0E00               	movlw	0
  9240  0034D2  6E8B               	movwf	139,c	;volatile
  9241                           
  9242                           ;main.c: 383: PORTD = 0; LATD = 0;
  9243  0034D4  0E00               	movlw	0
  9244  0034D6  6E83               	movwf	131,c	;volatile
  9245  0034D8  0E00               	movlw	0
  9246  0034DA  6E8C               	movwf	140,c	;volatile
  9247                           
  9248                           ;main.c: 384: PORTE = 0; LATE = 0;
  9249  0034DC  0E00               	movlw	0
  9250  0034DE  6E84               	movwf	132,c	;volatile
  9251  0034E0  0E00               	movlw	0
  9252  0034E2  6E8D               	movwf	141,c	;volatile
  9253  0034E4                     
  9254                           ;main.c: 386: PEIE = 1;
  9255  0034E4  8CF2               	bsf	4082,6,c	;volatile
  9256  0034E6                     
  9257                           ;main.c: 387: (INTCONbits.GIE = 1);
  9258  0034E6  8EF2               	bsf	242,7,c	;volatile
  9259  0034E8                     
  9260                           ;main.c: 388: Configure_External_Interrupt();
  9261  0034E8  ECCF  F01B         	call	_Configure_External_Interrupt	;wreg free
  9262                           
  9263                           ;main.c: 389: Configure_Timer_Interrupt();
  9264  0034EC  ECA9  F01B         	call	_Configure_Timer_Interrupt	;wreg free
  9265  0034F0                     
  9266                           ;main.c: 391: ADCON1 = 0b00001111;
  9267  0034F0  0E0F               	movlw	15
  9268  0034F2  6EC1               	movwf	193,c	;volatile
  9269  0034F4  0012               	return		;funcret
  9270  0034F6                     __end_of_Configure_Registers:
  9271                           	callstack 0
  9272                           
  9273 ;; *************** function _Configure_Timer_Interrupt *****************
  9274 ;; Defined at:
  9275 ;;		line 360 in file "main.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;		None
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;		None
  9280 ;; Return value:  Size  Location     Type
  9281 ;;                  1    wreg      void 
  9282 ;; Registers used:
  9283 ;;		wreg, status,2
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9289 ;;      Params:         0       0       0       0       0       0       0
  9290 ;;      Locals:         0       0       0       0       0       0       0
  9291 ;;      Temps:          0       0       0       0       0       0       0
  9292 ;;      Totals:         0       0       0       0       0       0       0
  9293 ;;Total ram usage:        0 bytes
  9294 ;; Hardware stack levels used: 1
  9295 ;; Hardware stack levels required when called: 2
  9296 ;; This function calls:
  9297 ;;		Nothing
  9298 ;; This function is called by:
  9299 ;;		_Configure_Registers
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           	psect	text45
  9304  003752                     __ptext45:
  9305                           	callstack 0
  9306  003752                     _Configure_Timer_Interrupt:
  9307                           	callstack 27
  9308  003752                     
  9309                           ;main.c: 362: PIE1bits.TMR1IE = 1;
  9310  003752  809D               	bsf	157,0,c	;volatile
  9311                           
  9312                           ;main.c: 363: PIR1bits.TMR1IF = 0;
  9313  003754  909E               	bcf	158,0,c	;volatile
  9314  003756                     
  9315                           ;main.c: 364: TMR1L = 0x2C;
  9316  003756  0E2C               	movlw	44
  9317  003758  6ECE               	movwf	206,c	;volatile
  9318                           
  9319                           ;main.c: 365: TMR1H = 0xCF;
  9320  00375A  0ECF               	movlw	207
  9321  00375C  6ECF               	movwf	207,c	;volatile
  9322                           
  9323                           ;main.c: 366: T1CON = 0b00100001;
  9324  00375E  0E21               	movlw	33
  9325  003760  6ECD               	movwf	205,c	;volatile
  9326  003762  0012               	return		;funcret
  9327  003764                     __end_of_Configure_Timer_Interrupt:
  9328                           	callstack 0
  9329                           
  9330 ;; *************** function _Configure_External_Interrupt *****************
  9331 ;; Defined at:
  9332 ;;		line 353 in file "main.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;		None
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  1    wreg      void 
  9339 ;; Registers used:
  9340 ;;		None
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9346 ;;      Params:         0       0       0       0       0       0       0
  9347 ;;      Locals:         0       0       0       0       0       0       0
  9348 ;;      Temps:          0       0       0       0       0       0       0
  9349 ;;      Totals:         0       0       0       0       0       0       0
  9350 ;;Total ram usage:        0 bytes
  9351 ;; Hardware stack levels used: 1
  9352 ;; Hardware stack levels required when called: 2
  9353 ;; This function calls:
  9354 ;;		Nothing
  9355 ;; This function is called by:
  9356 ;;		_Configure_Registers
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           	psect	text46
  9361  00379E                     __ptext46:
  9362                           	callstack 0
  9363  00379E                     _Configure_External_Interrupt:
  9364                           	callstack 27
  9365  00379E  0012               	return		;funcret
  9366  0037A0                     __end_of_Configure_External_Interrupt:
  9367                           	callstack 0
  9368                           
  9369 ;; *************** function _ConfigInterrupts *****************
  9370 ;; Defined at:
  9371 ;;		line 94 in file "system.c"
  9372 ;; Parameters:    Size  Location     Type
  9373 ;;		None
  9374 ;; Auto vars:     Size  Location     Type
  9375 ;;		None
  9376 ;; Return value:  Size  Location     Type
  9377 ;;                  1    wreg      void 
  9378 ;; Registers used:
  9379 ;;		None
  9380 ;; Tracked objects:
  9381 ;;		On entry : 0/0
  9382 ;;		On exit  : 0/0
  9383 ;;		Unchanged: 0/0
  9384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9385 ;;      Params:         0       0       0       0       0       0       0
  9386 ;;      Locals:         0       0       0       0       0       0       0
  9387 ;;      Temps:          0       0       0       0       0       0       0
  9388 ;;      Totals:         0       0       0       0       0       0       0
  9389 ;;Total ram usage:        0 bytes
  9390 ;; Hardware stack levels used: 1
  9391 ;; Hardware stack levels required when called: 2
  9392 ;; This function calls:
  9393 ;;		Nothing
  9394 ;; This function is called by:
  9395 ;;		_main
  9396 ;; This function uses a non-reentrant model
  9397 ;;
  9398                           
  9399                           	psect	text47
  9400  00377E                     __ptext47:
  9401                           	callstack 0
  9402  00377E                     _ConfigInterrupts:
  9403                           	callstack 28
  9404  00377E                     
  9405                           ;system.c: 96: RCONbits.IPEN = 0;
  9406  00377E  9ED0               	bcf	208,7,c	;volatile
  9407                           
  9408                           ;system.c: 97: PIR1bits.RCIF = 0;
  9409  003780  9A9E               	bcf	158,5,c	;volatile
  9410                           
  9411                           ;system.c: 98: INTCONbits.TMR0IF = 0;
  9412  003782  94F2               	bcf	242,2,c	;volatile
  9413                           
  9414                           ;system.c: 99: INTCONbits.PEIE = 1;
  9415  003784  8CF2               	bsf	242,6,c	;volatile
  9416                           
  9417                           ;system.c: 100: INTCONbits.GIE = 1;
  9418  003786  8EF2               	bsf	242,7,c	;volatile
  9419  003788  0012               	return		;funcret
  9420  00378A                     __end_of_ConfigInterrupts:
  9421                           	callstack 0
  9422                           
  9423 ;; *************** function _Automatic_Mode *****************
  9424 ;; Defined at:
  9425 ;;		line 285 in file "main.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;		None
  9428 ;; Auto vars:     Size  Location     Type
  9429 ;;  isFull          1   30[COMRAM] unsigned char 
  9430 ;; Return value:  Size  Location     Type
  9431 ;;                  1    wreg      void 
  9432 ;; Registers used:
  9433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9434 ;; Tracked objects:
  9435 ;;		On entry : 0/0
  9436 ;;		On exit  : 0/0
  9437 ;;		Unchanged: 0/0
  9438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9439 ;;      Params:         0       0       0       0       0       0       0
  9440 ;;      Locals:         1       0       0       0       0       0       0
  9441 ;;      Temps:          0       0       0       0       0       0       0
  9442 ;;      Totals:         1       0       0       0       0       0       0
  9443 ;;Total ram usage:        1 bytes
  9444 ;; Hardware stack levels used: 1
  9445 ;; Hardware stack levels required when called: 3
  9446 ;; This function calls:
  9447 ;;		_ClearBit
  9448 ;;		_SetBit
  9449 ;;		___flge
  9450 ;; This function is called by:
  9451 ;;		_main
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           	psect	text48
  9456  0026E0                     __ptext48:
  9457                           	callstack 0
  9458  0026E0                     _Automatic_Mode:
  9459                           	callstack 27
  9460  0026E0                     
  9461                           ;main.c: 287: bool isFull = tank2.level >= tank2.max_level ? 1 : 0;
  9462  0026E0  C03B  F013         	movff	_tank2,___flge@ff1	;volatile
  9463  0026E4  C03C  F014         	movff	_tank2+1,___flge@ff1+1	;volatile
  9464  0026E8  C03D  F015         	movff	_tank2+2,___flge@ff1+2	;volatile
  9465  0026EC  C03E  F016         	movff	_tank2+3,___flge@ff1+3	;volatile
  9466  0026F0  C043  F017         	movff	_tank2+8,___flge@ff2	;volatile
  9467  0026F4  C044  F018         	movff	_tank2+9,___flge@ff2+1	;volatile
  9468  0026F8  C045  F019         	movff	_tank2+10,___flge@ff2+2	;volatile
  9469  0026FC  C046  F01A         	movff	_tank2+11,___flge@ff2+3	;volatile
  9470  002700  ECFC  F014         	call	___flge	;wreg free
  9471  002704  B0D8               	btfsc	status,0,c
  9472  002706  EF87  F013         	goto	u4251
  9473  00270A  EF8A  F013         	goto	u4250
  9474  00270E                     u4251:
  9475  00270E  0E01               	movlw	1
  9476  002710  EF8B  F013         	goto	u4260
  9477  002714                     u4250:
  9478  002714  0E00               	movlw	0
  9479  002716                     u4260:
  9480  002716  6E1F               	movwf	Automatic_Mode@isFull^0,c
  9481                           
  9482                           ;main.c: 288: if ((tank1.level > tank1.min_level) && (tank2.level < tank2.min_level))
  9483  002718  C04B  F013         	movff	_tank1+4,___flge@ff1	;volatile
  9484  00271C  C04C  F014         	movff	_tank1+5,___flge@ff1+1	;volatile
  9485  002720  C04D  F015         	movff	_tank1+6,___flge@ff1+2	;volatile
  9486  002724  C04E  F016         	movff	_tank1+7,___flge@ff1+3	;volatile
  9487  002728  C047  F017         	movff	_tank1,___flge@ff2	;volatile
  9488  00272C  C048  F018         	movff	_tank1+1,___flge@ff2+1	;volatile
  9489  002730  C049  F019         	movff	_tank1+2,___flge@ff2+2	;volatile
  9490  002734  C04A  F01A         	movff	_tank1+3,___flge@ff2+3	;volatile
  9491  002738  ECFC  F014         	call	___flge	;wreg free
  9492  00273C  B0D8               	btfsc	status,0,c
  9493  00273E  EFA3  F013         	goto	u4271
  9494  002742  EFA5  F013         	goto	u4270
  9495  002746                     u4271:
  9496  002746  EFCA  F013         	goto	l4660
  9497  00274A                     u4270:
  9498  00274A  C03B  F013         	movff	_tank2,___flge@ff1	;volatile
  9499  00274E  C03C  F014         	movff	_tank2+1,___flge@ff1+1	;volatile
  9500  002752  C03D  F015         	movff	_tank2+2,___flge@ff1+2	;volatile
  9501  002756  C03E  F016         	movff	_tank2+3,___flge@ff1+3	;volatile
  9502  00275A  C03F  F017         	movff	_tank2+4,___flge@ff2	;volatile
  9503  00275E  C040  F018         	movff	_tank2+5,___flge@ff2+1	;volatile
  9504  002762  C041  F019         	movff	_tank2+6,___flge@ff2+2	;volatile
  9505  002766  C042  F01A         	movff	_tank2+7,___flge@ff2+3	;volatile
  9506  00276A  ECFC  F014         	call	___flge	;wreg free
  9507  00276E  B0D8               	btfsc	status,0,c
  9508  002770  EFBC  F013         	goto	u4281
  9509  002774  EFBE  F013         	goto	u4280
  9510  002778                     u4281:
  9511  002778  EFCA  F013         	goto	l4660
  9512  00277C                     u4280:
  9513  00277C                     
  9514                           ;main.c: 289: {;main.c: 290: SetBit(&LATC, 0);
  9515  00277C  0E8B               	movlw	139
  9516  00277E  6E03               	movwf	SetBit@port^0,c
  9517  002780  0E0F               	movlw	15
  9518  002782  6E04               	movwf	(SetBit@port+1)^0,c
  9519  002784  0E00               	movlw	0
  9520  002786  6E06               	movwf	(SetBit@pin+1)^0,c
  9521  002788  0E00               	movlw	0
  9522  00278A  6E05               	movwf	SetBit@pin^0,c
  9523  00278C  EC1B  F01B         	call	_SetBit	;wreg free
  9524                           
  9525                           ;main.c: 291: }
  9526  002790  EFF5  F013         	goto	l268
  9527  002794                     l4660:
  9528                           
  9529                           ;main.c: 292: else if (tank1.level <= tank1.min_level || isFull)
  9530  002794  C04B  F013         	movff	_tank1+4,___flge@ff1	;volatile
  9531  002798  C04C  F014         	movff	_tank1+5,___flge@ff1+1	;volatile
  9532  00279C  C04D  F015         	movff	_tank1+6,___flge@ff1+2	;volatile
  9533  0027A0  C04E  F016         	movff	_tank1+7,___flge@ff1+3	;volatile
  9534  0027A4  C047  F017         	movff	_tank1,___flge@ff2	;volatile
  9535  0027A8  C048  F018         	movff	_tank1+1,___flge@ff2+1	;volatile
  9536  0027AC  C049  F019         	movff	_tank1+2,___flge@ff2+2	;volatile
  9537  0027B0  C04A  F01A         	movff	_tank1+3,___flge@ff2+3	;volatile
  9538  0027B4  ECFC  F014         	call	___flge	;wreg free
  9539  0027B8  B0D8               	btfsc	status,0,c
  9540  0027BA  EFE1  F013         	goto	u4291
  9541  0027BE  EFE3  F013         	goto	u4290
  9542  0027C2                     u4291:
  9543  0027C2  EFEB  F013         	goto	l4664
  9544  0027C6                     u4290:
  9545  0027C6  501F               	movf	Automatic_Mode@isFull^0,w,c
  9546  0027C8  B4D8               	btfsc	status,2,c
  9547  0027CA  EFE9  F013         	goto	u4301
  9548  0027CE  EFEB  F013         	goto	u4300
  9549  0027D2                     u4301:
  9550  0027D2  EFF5  F013         	goto	l268
  9551  0027D6                     u4300:
  9552  0027D6                     l4664:
  9553                           
  9554                           ;main.c: 293: {;main.c: 294: ClearBit(&LATC, 0);
  9555  0027D6  0E8B               	movlw	139
  9556  0027D8  6E03               	movwf	ClearBit@port^0,c
  9557  0027DA  0E0F               	movlw	15
  9558  0027DC  6E04               	movwf	(ClearBit@port+1)^0,c
  9559  0027DE  0E00               	movlw	0
  9560  0027E0  6E06               	movwf	(ClearBit@pin+1)^0,c
  9561  0027E2  0E00               	movlw	0
  9562  0027E4  6E05               	movwf	ClearBit@pin^0,c
  9563  0027E6  ECB6  F01A         	call	_ClearBit	;wreg free
  9564  0027EA                     l268:
  9565  0027EA  0012               	return		;funcret
  9566  0027EC                     __end_of_Automatic_Mode:
  9567                           	callstack 0
  9568                           
  9569 ;; *************** function ___flge *****************
  9570 ;; Defined at:
  9571 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\flge.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;  ff1             4   18[COMRAM] void 
  9574 ;;  ff2             4   22[COMRAM] void 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;		None
  9577 ;; Return value:  Size  Location     Type
  9578 ;;		None               void
  9579 ;; Registers used:
  9580 ;;		wreg, status,2, status,0
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9586 ;;      Params:         8       0       0       0       0       0       0
  9587 ;;      Locals:         0       0       0       0       0       0       0
  9588 ;;      Temps:          4       0       0       0       0       0       0
  9589 ;;      Totals:        12       0       0       0       0       0       0
  9590 ;;Total ram usage:       12 bytes
  9591 ;; Hardware stack levels used: 1
  9592 ;; Hardware stack levels required when called: 2
  9593 ;; This function calls:
  9594 ;;		Nothing
  9595 ;; This function is called by:
  9596 ;;		_Min_Lv1_Incr
  9597 ;;		_Min_Lv2_Incr
  9598 ;;		_Automatic_Mode
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           	psect	text49
  9603  0029F8                     __ptext49:
  9604                           	callstack 0
  9605  0029F8                     ___flge:
  9606                           	callstack 25
  9607  0029F8  0E00               	movlw	0
  9608  0029FA  1413               	andwf	___flge@ff1^0,w,c
  9609  0029FC  6E1B               	movwf	??___flge^0,c
  9610  0029FE  0E00               	movlw	0
  9611  002A00  1414               	andwf	(___flge@ff1+1)^0,w,c
  9612  002A02  6E1C               	movwf	(??___flge+1)^0,c
  9613  002A04  0E80               	movlw	128
  9614  002A06  1415               	andwf	(___flge@ff1+2)^0,w,c
  9615  002A08  6E1D               	movwf	(??___flge+2)^0,c
  9616  002A0A  0E7F               	movlw	127
  9617  002A0C  1416               	andwf	(___flge@ff1+3)^0,w,c
  9618  002A0E  6E1E               	movwf	(??___flge+3)^0,c
  9619  002A10  501B               	movf	??___flge^0,w,c
  9620  002A12  101C               	iorwf	(??___flge+1)^0,w,c
  9621  002A14  101D               	iorwf	(??___flge+2)^0,w,c
  9622  002A16  101E               	iorwf	(??___flge+3)^0,w,c
  9623  002A18  A4D8               	btfss	status,2,c
  9624  002A1A  EF11  F015         	goto	u3201
  9625  002A1E  EF13  F015         	goto	u3200
  9626  002A22                     u3201:
  9627  002A22  EF1B  F015         	goto	l3768
  9628  002A26                     u3200:
  9629  002A26  0E00               	movlw	0
  9630  002A28  6E13               	movwf	___flge@ff1^0,c
  9631  002A2A  0E00               	movlw	0
  9632  002A2C  6E14               	movwf	(___flge@ff1+1)^0,c
  9633  002A2E  0E00               	movlw	0
  9634  002A30  6E15               	movwf	(___flge@ff1+2)^0,c
  9635  002A32  0E00               	movlw	0
  9636  002A34  6E16               	movwf	(___flge@ff1+3)^0,c
  9637  002A36                     l3768:
  9638  002A36  0E00               	movlw	0
  9639  002A38  1417               	andwf	___flge@ff2^0,w,c
  9640  002A3A  6E1B               	movwf	??___flge^0,c
  9641  002A3C  0E00               	movlw	0
  9642  002A3E  1418               	andwf	(___flge@ff2+1)^0,w,c
  9643  002A40  6E1C               	movwf	(??___flge+1)^0,c
  9644  002A42  0E80               	movlw	128
  9645  002A44  1419               	andwf	(___flge@ff2+2)^0,w,c
  9646  002A46  6E1D               	movwf	(??___flge+2)^0,c
  9647  002A48  0E7F               	movlw	127
  9648  002A4A  141A               	andwf	(___flge@ff2+3)^0,w,c
  9649  002A4C  6E1E               	movwf	(??___flge+3)^0,c
  9650  002A4E  501B               	movf	??___flge^0,w,c
  9651  002A50  101C               	iorwf	(??___flge+1)^0,w,c
  9652  002A52  101D               	iorwf	(??___flge+2)^0,w,c
  9653  002A54  101E               	iorwf	(??___flge+3)^0,w,c
  9654  002A56  A4D8               	btfss	status,2,c
  9655  002A58  EF30  F015         	goto	u3211
  9656  002A5C  EF32  F015         	goto	u3210
  9657  002A60                     u3211:
  9658  002A60  EF3A  F015         	goto	l3772
  9659  002A64                     u3210:
  9660  002A64  0E00               	movlw	0
  9661  002A66  6E17               	movwf	___flge@ff2^0,c
  9662  002A68  0E00               	movlw	0
  9663  002A6A  6E18               	movwf	(___flge@ff2+1)^0,c
  9664  002A6C  0E00               	movlw	0
  9665  002A6E  6E19               	movwf	(___flge@ff2+2)^0,c
  9666  002A70  0E00               	movlw	0
  9667  002A72  6E1A               	movwf	(___flge@ff2+3)^0,c
  9668  002A74                     l3772:
  9669  002A74  AE16               	btfss	(___flge@ff1+3)^0,7,c
  9670  002A76  EF3F  F015         	goto	u3221
  9671  002A7A  EF41  F015         	goto	u3220
  9672  002A7E                     u3221:
  9673  002A7E  EF4A  F015         	goto	l3776
  9674  002A82                     u3220:
  9675  002A82  6C13               	negf	___flge@ff1^0,c
  9676  002A84  1E14               	comf	(___flge@ff1+1)^0,f,c
  9677  002A86  B0D8               	btfsc	status,0,c
  9678  002A88  2A14               	incf	(___flge@ff1+1)^0,f,c
  9679  002A8A  1E15               	comf	(___flge@ff1+2)^0,f,c
  9680  002A8C  B0D8               	btfsc	status,0,c
  9681  002A8E  2A15               	incf	(___flge@ff1+2)^0,f,c
  9682  002A90  0E80               	movlw	128
  9683  002A92  5616               	subfwb	(___flge@ff1+3)^0,f,c
  9684  002A94                     l3776:
  9685  002A94  AE1A               	btfss	(___flge@ff2+3)^0,7,c
  9686  002A96  EF4F  F015         	goto	u3231
  9687  002A9A  EF51  F015         	goto	u3230
  9688  002A9E                     u3231:
  9689  002A9E  EF5A  F015         	goto	l925
  9690  002AA2                     u3230:
  9691  002AA2  6C17               	negf	___flge@ff2^0,c
  9692  002AA4  1E18               	comf	(___flge@ff2+1)^0,f,c
  9693  002AA6  B0D8               	btfsc	status,0,c
  9694  002AA8  2A18               	incf	(___flge@ff2+1)^0,f,c
  9695  002AAA  1E19               	comf	(___flge@ff2+2)^0,f,c
  9696  002AAC  B0D8               	btfsc	status,0,c
  9697  002AAE  2A19               	incf	(___flge@ff2+2)^0,f,c
  9698  002AB0  0E80               	movlw	128
  9699  002AB2  561A               	subfwb	(___flge@ff2+3)^0,f,c
  9700  002AB4                     l925:
  9701  002AB4  0E00               	movlw	0
  9702  002AB6  1A13               	xorwf	___flge@ff1^0,f,c
  9703  002AB8  0E00               	movlw	0
  9704  002ABA  1A14               	xorwf	(___flge@ff1+1)^0,f,c
  9705  002ABC  0E00               	movlw	0
  9706  002ABE  1A15               	xorwf	(___flge@ff1+2)^0,f,c
  9707  002AC0  0E80               	movlw	128
  9708  002AC2  1A16               	xorwf	(___flge@ff1+3)^0,f,c
  9709  002AC4  0E00               	movlw	0
  9710  002AC6  1A17               	xorwf	___flge@ff2^0,f,c
  9711  002AC8  0E00               	movlw	0
  9712  002ACA  1A18               	xorwf	(___flge@ff2+1)^0,f,c
  9713  002ACC  0E00               	movlw	0
  9714  002ACE  1A19               	xorwf	(___flge@ff2+2)^0,f,c
  9715  002AD0  0E80               	movlw	128
  9716  002AD2  1A1A               	xorwf	(___flge@ff2+3)^0,f,c
  9717  002AD4  5017               	movf	___flge@ff2^0,w,c
  9718  002AD6  5C13               	subwf	___flge@ff1^0,w,c
  9719  002AD8  5018               	movf	(___flge@ff2+1)^0,w,c
  9720  002ADA  5814               	subwfb	(___flge@ff1+1)^0,w,c
  9721  002ADC  5019               	movf	(___flge@ff2+2)^0,w,c
  9722  002ADE  5815               	subwfb	(___flge@ff1+2)^0,w,c
  9723  002AE0  501A               	movf	(___flge@ff2+3)^0,w,c
  9724  002AE2  5816               	subwfb	(___flge@ff1+3)^0,w,c
  9725  002AE4  B0D8               	btfsc	status,0,c
  9726  002AE6  EF77  F015         	goto	u3241
  9727  002AEA  EF79  F015         	goto	u3240
  9728  002AEE                     u3241:
  9729  002AEE  EF7C  F015         	goto	l3782
  9730  002AF2                     u3240:
  9731  002AF2  90D8               	bcf	status,0,c
  9732  002AF4  EF7D  F015         	goto	l926
  9733  002AF8                     l3782:
  9734  002AF8  80D8               	bsf	status,0,c
  9735  002AFA                     l926:
  9736  002AFA  0012               	return		;funcret
  9737  002AFC                     __end_of___flge:
  9738                           	callstack 0
  9739                           
  9740 ;; *************** function _SetBit *****************
  9741 ;; Defined at:
  9742 ;;		line 3 in file "regoperations.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;  port            2    2[COMRAM] PTR unsigned int 
  9745 ;;		 -> LATC(1), 
  9746 ;;  pin             2    4[COMRAM] unsigned int 
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;		None
  9749 ;; Return value:  Size  Location     Type
  9750 ;;                  1    wreg      void 
  9751 ;; Registers used:
  9752 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9758 ;;      Params:         4       0       0       0       0       0       0
  9759 ;;      Locals:         0       0       0       0       0       0       0
  9760 ;;      Temps:          3       0       0       0       0       0       0
  9761 ;;      Totals:         7       0       0       0       0       0       0
  9762 ;;Total ram usage:        7 bytes
  9763 ;; Hardware stack levels used: 1
  9764 ;; Hardware stack levels required when called: 2
  9765 ;; This function calls:
  9766 ;;		Nothing
  9767 ;; This function is called by:
  9768 ;;		_Automatic_Mode
  9769 ;;		_Receive_Message
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           	psect	text50
  9774  003636                     __ptext50:
  9775                           	callstack 0
  9776  003636                     _SetBit:
  9777                           	callstack 27
  9778  003636                     
  9779                           ;regoperations.c: 5: (*port) |= (1UL << pin);
  9780  003636  C005  F007         	movff	SetBit@pin,??_SetBit
  9781  00363A  0E01               	movlw	1
  9782  00363C  6E08               	movwf	(??_SetBit+1)^0,c
  9783  00363E  0E00               	movlw	0
  9784  003640  6E09               	movwf	(??_SetBit+2)^0,c
  9785  003642  2A07               	incf	??_SetBit^0,f,c
  9786  003644  EF27  F01B         	goto	u3394
  9787  003648                     u3395:
  9788  003648  90D8               	bcf	status,0,c
  9789  00364A  3608               	rlcf	(??_SetBit+1)^0,f,c
  9790  00364C  3609               	rlcf	(??_SetBit+2)^0,f,c
  9791  00364E                     u3394:
  9792  00364E  2E07               	decfsz	??_SetBit^0,f,c
  9793  003650  EF24  F01B         	goto	u3395
  9794  003654  C003  FFD9         	movff	SetBit@port,fsr2l
  9795  003658  C004  FFDA         	movff	SetBit@port+1,fsr2h
  9796  00365C  5008               	movf	(??_SetBit+1)^0,w,c
  9797  00365E  12DE               	iorwf	postinc2,f,c
  9798  003660  5009               	movf	(??_SetBit+2)^0,w,c
  9799  003662  12DD               	iorwf	postdec2,f,c
  9800  003664  0012               	return		;funcret
  9801  003666                     __end_of_SetBit:
  9802                           	callstack 0
  9803                           
  9804 ;; *************** function _ClearBit *****************
  9805 ;; Defined at:
  9806 ;;		line 8 in file "regoperations.c"
  9807 ;; Parameters:    Size  Location     Type
  9808 ;;  port            2    2[COMRAM] PTR unsigned int 
  9809 ;;		 -> LATC(1), 
  9810 ;;  pin             2    4[COMRAM] unsigned int 
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;		None
  9813 ;; Return value:  Size  Location     Type
  9814 ;;                  1    wreg      void 
  9815 ;; Registers used:
  9816 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9817 ;; Tracked objects:
  9818 ;;		On entry : 0/0
  9819 ;;		On exit  : 0/0
  9820 ;;		Unchanged: 0/0
  9821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9822 ;;      Params:         4       0       0       0       0       0       0
  9823 ;;      Locals:         0       0       0       0       0       0       0
  9824 ;;      Temps:          5       0       0       0       0       0       0
  9825 ;;      Totals:         9       0       0       0       0       0       0
  9826 ;;Total ram usage:        9 bytes
  9827 ;; Hardware stack levels used: 1
  9828 ;; Hardware stack levels required when called: 2
  9829 ;; This function calls:
  9830 ;;		Nothing
  9831 ;; This function is called by:
  9832 ;;		_Change_Mode
  9833 ;;		_Automatic_Mode
  9834 ;;		_Receive_Message
  9835 ;; This function uses a non-reentrant model
  9836 ;;
  9837                           
  9838                           	psect	text51
  9839  00356C                     __ptext51:
  9840                           	callstack 0
  9841  00356C                     _ClearBit:
  9842                           	callstack 27
  9843  00356C                     
  9844                           ;regoperations.c: 10: (*port) &= ~(1UL << pin);
  9845  00356C  C005  F007         	movff	ClearBit@pin,??_ClearBit
  9846  003570  0E01               	movlw	1
  9847  003572  6E08               	movwf	(??_ClearBit+1)^0,c
  9848  003574  0E00               	movlw	0
  9849  003576  6E09               	movwf	(??_ClearBit+2)^0,c
  9850  003578  2A07               	incf	??_ClearBit^0,f,c
  9851  00357A  EFC2  F01A         	goto	u2804
  9852  00357E                     u2805:
  9853  00357E  90D8               	bcf	status,0,c
  9854  003580  3608               	rlcf	(??_ClearBit+1)^0,f,c
  9855  003582  3609               	rlcf	(??_ClearBit+2)^0,f,c
  9856  003584                     u2804:
  9857  003584  2E07               	decfsz	??_ClearBit^0,f,c
  9858  003586  EFBF  F01A         	goto	u2805
  9859  00358A  1C08               	comf	(??_ClearBit+1)^0,w,c
  9860  00358C  6E0A               	movwf	(??_ClearBit+3)^0,c
  9861  00358E  1C09               	comf	(??_ClearBit+2)^0,w,c
  9862  003590  6E0B               	movwf	(??_ClearBit+4)^0,c
  9863  003592  C003  FFD9         	movff	ClearBit@port,fsr2l
  9864  003596  C004  FFDA         	movff	ClearBit@port+1,fsr2h
  9865  00359A  500A               	movf	(??_ClearBit+3)^0,w,c
  9866  00359C  16DE               	andwf	postinc2,f,c
  9867  00359E  500B               	movf	(??_ClearBit+4)^0,w,c
  9868  0035A0  16DD               	andwf	postdec2,f,c
  9869  0035A2  0012               	return		;funcret
  9870  0035A4                     __end_of_ClearBit:
  9871                           	callstack 0
  9872                           
  9873 ;; *************** function _isr *****************
  9874 ;; Defined at:
  9875 ;;		line 140 in file "main.c"
  9876 ;; Parameters:    Size  Location     Type
  9877 ;;		None
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;		None
  9880 ;; Return value:  Size  Location     Type
  9881 ;;                  1    wreg      void 
  9882 ;; Registers used:
  9883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9884 ;; Tracked objects:
  9885 ;;		On entry : 0/0
  9886 ;;		On exit  : 0/0
  9887 ;;		Unchanged: 0/0
  9888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9889 ;;      Params:         0       0       0       0       0       0       0
  9890 ;;      Locals:         0       0       0       0       0       0       0
  9891 ;;      Temps:          2       0       0       0       0       0       0
  9892 ;;      Totals:         2       0       0       0       0       0       0
  9893 ;;Total ram usage:        2 bytes
  9894 ;; Hardware stack levels used: 1
  9895 ;; Hardware stack levels required when called: 1
  9896 ;; This function calls:
  9897 ;;		_OpenTmr0
  9898 ;;		_modbusDelay
  9899 ;; This function is called by:
  9900 ;;		Interrupt level 2
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           	psect	intcode
  9905  000008                     __pintcode:
  9906                           	callstack 0
  9907  000008                     _isr:
  9908                           	callstack 22
  9909                           
  9910                           ;incstack = 0
  9911  000008  8271               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  9912  00000A  EDC5  F00F         	call	int_func,f	;refresh shadow registers
  9913                           
  9914                           	psect	intcode_body
  9915  001F8A                     __pintcode_body:
  9916                           	callstack 22
  9917  001F8A                     int_func:
  9918                           	callstack 22
  9919  001F8A  0006               	pop		; remove dummy address from shadow register refresh
  9920  001F8C  CFD9 F001          	movff	fsr2l,??_isr
  9921  001F90  CFDA F002          	movff	fsr2h,??_isr+1
  9922  001F94                     
  9923                           ;main.c: 143: if (PIR1bits.TMR1IF == 1)
  9924  001F94  A09E               	btfss	158,0,c	;volatile
  9925  001F96  EFCF  F00F         	goto	i2u434_41
  9926  001F9A  EFD1  F00F         	goto	i2u434_40
  9927  001F9E                     i2u434_41:
  9928  001F9E  EF03  F010         	goto	i2l4738
  9929  001FA2                     i2u434_40:
  9930  001FA2                     
  9931                           ;main.c: 144: {;main.c: 145: PIR1bits.TMR1IF = 0;
  9932  001FA2  909E               	bcf	158,0,c	;volatile
  9933  001FA4                     
  9934                           ;main.c: 146: TMR1L = 0x2C;
  9935  001FA4  0E2C               	movlw	44
  9936  001FA6  6ECE               	movwf	206,c	;volatile
  9937                           
  9938                           ;main.c: 147: TMR1H = 0xCF;
  9939  001FA8  0ECF               	movlw	207
  9940  001FAA  6ECF               	movwf	207,c	;volatile
  9941  001FAC                     
  9942                           ;main.c: 148: count_screen++;
  9943  001FAC  4A55               	infsnz	_count_screen^0,f,c	;volatile
  9944  001FAE  2A56               	incf	(_count_screen+1)^0,f,c	;volatile
  9945  001FB0                     
  9946                           ;main.c: 149: count_refresh_display++;
  9947  001FB0  4A53               	infsnz	_count_refresh_display^0,f,c	;volatile
  9948  001FB2  2A54               	incf	(_count_refresh_display+1)^0,f,c	;volatile
  9949  001FB4                     
  9950                           ;main.c: 152: if (count_screen == 100)
  9951  001FB4  0E64               	movlw	100
  9952  001FB6  1855               	xorwf	_count_screen^0,w,c	;volatile
  9953  001FB8  1056               	iorwf	(_count_screen+1)^0,w,c	;volatile
  9954  001FBA  A4D8               	btfss	status,2,c
  9955  001FBC  EFE2  F00F         	goto	i2u435_41
  9956  001FC0  EFE4  F00F         	goto	i2u435_40
  9957  001FC4                     i2u435_41:
  9958  001FC4  EFF4  F00F         	goto	i2l4732
  9959  001FC8                     i2u435_40:
  9960  001FC8                     
  9961                           ;main.c: 153: {;main.c: 154: count_screen = 0;
  9962  001FC8  0E00               	movlw	0
  9963  001FCA  6E56               	movwf	(_count_screen+1)^0,c	;volatile
  9964  001FCC  0E00               	movlw	0
  9965  001FCE  6E55               	movwf	_count_screen^0,c	;volatile
  9966  001FD0                     
  9967                           ;main.c: 155: ++screen;
  9968  001FD0  2A57               	incf	_screen^0,f,c	;volatile
  9969  001FD2                     
  9970                           ;main.c: 156: if (screen == 4) screen = 0;
  9971  001FD2  0E04               	movlw	4
  9972  001FD4  1857               	xorwf	_screen^0,w,c	;volatile
  9973  001FD6  A4D8               	btfss	status,2,c
  9974  001FD8  EFF0  F00F         	goto	i2u436_41
  9975  001FDC  EFF2  F00F         	goto	i2u436_40
  9976  001FE0                     i2u436_41:
  9977  001FE0  EFF4  F00F         	goto	i2l4732
  9978  001FE4                     i2u436_40:
  9979  001FE4  0E00               	movlw	0
  9980  001FE6  6E57               	movwf	_screen^0,c	;volatile
  9981  001FE8                     i2l4732:
  9982                           
  9983                           ;main.c: 157: };main.c: 160: if (count_refresh_display == 25)
  9984  001FE8  0E19               	movlw	25
  9985  001FEA  1853               	xorwf	_count_refresh_display^0,w,c	;volatile
  9986  001FEC  1054               	iorwf	(_count_refresh_display+1)^0,w,c	;volatile
  9987  001FEE  A4D8               	btfss	status,2,c
  9988  001FF0  EFFC  F00F         	goto	i2u437_41
  9989  001FF4  EFFE  F00F         	goto	i2u437_40
  9990  001FF8                     i2u437_41:
  9991  001FF8  EF03  F010         	goto	i2l4738
  9992  001FFC                     i2u437_40:
  9993  001FFC                     
  9994                           ;main.c: 161: {;main.c: 162: count_refresh_display = 0;
  9995  001FFC  0E00               	movlw	0
  9996  001FFE  6E54               	movwf	(_count_refresh_display+1)^0,c	;volatile
  9997  002000  0E00               	movlw	0
  9998  002002  6E53               	movwf	_count_refresh_display^0,c	;volatile
  9999  002004                     
 10000                           ;main.c: 163: refresh_display = 1;
 10001  002004  8070               	bsf	(_refresh_display/(0+8))^0,_refresh_display& (0+7),c	;volatile
 10002  002006                     i2l4738:
 10003                           
 10004                           ;main.c: 164: };main.c: 165: };main.c: 168: if (PIR1bits.RCIF)
 10005  002006  AA9E               	btfss	158,5,c	;volatile
 10006  002008  EF08  F010         	goto	i2u438_41
 10007  00200C  EF0A  F010         	goto	i2u438_40
 10008  002010                     i2u438_41:
 10009  002010  EF53  F010         	goto	i2l217
 10010  002014                     i2u438_40:
 10011  002014                     
 10012                           ;main.c: 169: {;main.c: 170: if ((!endOfMessage) && (!newMessage))
 10013  002014  505D               	movf	_endOfMessage^0,w,c	;volatile
 10014  002016  A4D8               	btfss	status,2,c
 10015  002018  EF10  F010         	goto	i2u439_41
 10016  00201C  EF12  F010         	goto	i2u439_40
 10017  002020                     i2u439_41:
 10018  002020  EF2C  F010         	goto	i2l4752
 10019  002024                     i2u439_40:
 10020  002024  5067               	movf	_newMessage^0,w,c	;volatile
 10021  002026  A4D8               	btfss	status,2,c
 10022  002028  EF18  F010         	goto	i2u440_41
 10023  00202C  EF1A  F010         	goto	i2u440_40
 10024  002030                     i2u440_41:
 10025  002030  EF2C  F010         	goto	i2l4752
 10026  002034                     i2u440_40:
 10027  002034                     
 10028                           ;main.c: 171: {;main.c: 172: if (PIR1bits.TXIF)
 10029  002034  A89E               	btfss	158,4,c	;volatile
 10030  002036  EF1F  F010         	goto	i2u441_41
 10031  00203A  EF21  F010         	goto	i2u441_40
 10032  00203E                     i2u441_41:
 10033  00203E  EF2C  F010         	goto	i2l4752
 10034  002042                     i2u441_40:
 10035  002042                     
 10036                           ;main.c: 173: {;main.c: 174: received[z] = RCREG;
 10037  002042  0E00               	movlw	low _received
 10038  002044  2459               	addwf	_z^0,w,c	;volatile
 10039  002046  6ED9               	movwf	fsr2l,c
 10040  002048  6ADA               	clrf	fsr2h,c
 10041  00204A  0E01               	movlw	high _received
 10042  00204C  22DA               	addwfc	fsr2h,f,c
 10043  00204E  CFAE FFDF          	movff	4014,indf2	;volatile
 10044  002052                     
 10045                           ;main.c: 175: z++;
 10046  002052  2A59               	incf	_z^0,f,c	;volatile
 10047  002054                     
 10048                           ;main.c: 176: timerCount = 0;
 10049  002054  0E00               	movlw	0
 10050  002056  6E5C               	movwf	_timerCount^0,c	;volatile
 10051  002058                     i2l4752:
 10052                           
 10053                           ;main.c: 177: };main.c: 178: };main.c: 180: if (newMessage)
 10054  002058  5067               	movf	_newMessage^0,w,c	;volatile
 10055  00205A  B4D8               	btfsc	status,2,c
 10056  00205C  EF32  F010         	goto	i2u442_41
 10057  002060  EF34  F010         	goto	i2u442_40
 10058  002064                     i2u442_41:
 10059  002064  EF52  F010         	goto	i2l220
 10060  002068                     i2u442_40:
 10061  002068                     
 10062                           ;main.c: 181: {;main.c: 182: OpenTmr0();
 10063  002068  EC92  F01B         	call	_OpenTmr0	;wreg free
 10064  00206C                     
 10065                           ;main.c: 183: if (PIR1bits.TXIF)
 10066  00206C  A89E               	btfss	158,4,c	;volatile
 10067  00206E  EF3B  F010         	goto	i2u443_41
 10068  002072  EF3D  F010         	goto	i2u443_40
 10069  002076                     i2u443_41:
 10070  002076  EF52  F010         	goto	i2l220
 10071  00207A                     i2u443_40:
 10072  00207A                     
 10073                           ;main.c: 184: {;main.c: 185: received[z] = RCREG;
 10074  00207A  0E00               	movlw	low _received
 10075  00207C  2459               	addwf	_z^0,w,c	;volatile
 10076  00207E  6ED9               	movwf	fsr2l,c
 10077  002080  6ADA               	clrf	fsr2h,c
 10078  002082  0E01               	movlw	high _received
 10079  002084  22DA               	addwfc	fsr2h,f,c
 10080  002086  CFAE FFDF          	movff	4014,indf2	;volatile
 10081  00208A                     
 10082                           ;main.c: 186: z++;
 10083  00208A  2A59               	incf	_z^0,f,c	;volatile
 10084  00208C                     
 10085                           ;main.c: 187: newMessage = 0;
 10086  00208C  0E00               	movlw	0
 10087  00208E  6E67               	movwf	_newMessage^0,c	;volatile
 10088  002090                     
 10089                           ;main.c: 188: endOfMessage = 0;
 10090  002090  0E00               	movlw	0
 10091  002092  6E5D               	movwf	_endOfMessage^0,c	;volatile
 10092  002094                     
 10093                           ;main.c: 189: messageLength = 0;
 10094  002094  0E00               	movlw	0
 10095  002096  6E5B               	movwf	_messageLength^0,c	;volatile
 10096  002098                     
 10097                           ;main.c: 190: modbusMessage = 0;
 10098  002098  0E00               	movlw	0
 10099  00209A  6E5A               	movwf	_modbusMessage^0,c	;volatile
 10100  00209C                     
 10101                           ;main.c: 191: timerCount = 0;
 10102  00209C  0E00               	movlw	0
 10103  00209E  6E5C               	movwf	_timerCount^0,c	;volatile
 10104  0020A0  EF89  F010         	goto	i2l222
 10105  0020A4                     i2l220:
 10106                           
 10107                           ;main.c: 193: };main.c: 194: };main.c: 195: PIR1bits.RCIF = 0;
 10108  0020A4  9A9E               	bcf	158,5,c	;volatile
 10109  0020A6                     i2l217:
 10110                           
 10111                           ;main.c: 196: };main.c: 199: if (INTCONbits.TMR0IF)
 10112  0020A6  A4F2               	btfss	242,2,c	;volatile
 10113  0020A8  EF58  F010         	goto	i2u444_41
 10114  0020AC  EF5A  F010         	goto	i2u444_40
 10115  0020B0                     i2u444_41:
 10116  0020B0  EF89  F010         	goto	i2l222
 10117  0020B4                     i2u444_40:
 10118  0020B4                     
 10119                           ;main.c: 200: {;main.c: 201: modbusDelay();
 10120  0020B4  ECCA  F01B         	call	_modbusDelay	;wreg free
 10121  0020B8                     
 10122                           ;main.c: 202: timerCount++;
 10123  0020B8  2A5C               	incf	_timerCount^0,f,c	;volatile
 10124  0020BA                     
 10125                           ;main.c: 203: if (timerCount > 4)
 10126  0020BA  0E04               	movlw	4
 10127  0020BC  645C               	cpfsgt	_timerCount^0,c	;volatile
 10128  0020BE  EF63  F010         	goto	i2u445_41
 10129  0020C2  EF65  F010         	goto	i2u445_40
 10130  0020C6                     i2u445_41:
 10131  0020C6  EF88  F010         	goto	i2l4796
 10132  0020CA                     i2u445_40:
 10133  0020CA                     
 10134                           ;main.c: 204: {;main.c: 205: endOfMessage = 1;
 10135  0020CA  0E01               	movlw	1
 10136  0020CC  6E5D               	movwf	_endOfMessage^0,c	;volatile
 10137                           
 10138                           ;main.c: 206: newMessage = 1;
 10139  0020CE  0E01               	movlw	1
 10140  0020D0  6E67               	movwf	_newMessage^0,c	;volatile
 10141  0020D2                     
 10142                           ;main.c: 207: messageLength = z;
 10143  0020D2  C059  F05B         	movff	_z,_messageLength	;volatile
 10144                           
 10145                           ;main.c: 208: modbusMessage = 1;
 10146  0020D6  0E01               	movlw	1
 10147  0020D8  6E5A               	movwf	_modbusMessage^0,c	;volatile
 10148  0020DA                     
 10149                           ;main.c: 209: for (z = (messageLength); z != 125; z++)
 10150  0020DA  C05B  F059         	movff	_messageLength,_z	;volatile
 10151  0020DE  EF7A  F010         	goto	i2l4790
 10152  0020E2                     i2l4786:
 10153                           
 10154                           ;main.c: 210: {;main.c: 211: received[z] = 0;
 10155  0020E2  0E00               	movlw	low _received
 10156  0020E4  2459               	addwf	_z^0,w,c	;volatile
 10157  0020E6  6ED9               	movwf	fsr2l,c
 10158  0020E8  6ADA               	clrf	fsr2h,c
 10159  0020EA  0E01               	movlw	high _received
 10160  0020EC  22DA               	addwfc	fsr2h,f,c
 10161  0020EE  0E00               	movlw	0
 10162  0020F0  6EDF               	movwf	indf2,c
 10163  0020F2  2A59               	incf	_z^0,f,c	;volatile
 10164  0020F4                     i2l4790:
 10165  0020F4  0E7D               	movlw	125
 10166  0020F6  1859               	xorwf	_z^0,w,c	;volatile
 10167  0020F8  A4D8               	btfss	status,2,c
 10168  0020FA  EF81  F010         	goto	i2u446_41
 10169  0020FE  EF83  F010         	goto	i2u446_40
 10170  002102                     i2u446_41:
 10171  002102  EF71  F010         	goto	i2l4786
 10172  002106                     i2u446_40:
 10173  002106                     
 10174                           ;main.c: 212: };main.c: 213: z = 0;
 10175  002106  0E00               	movlw	0
 10176  002108  6E59               	movwf	_z^0,c	;volatile
 10177  00210A                     
 10178                           ;main.c: 214: T0CONbits.TMR0ON = 0;
 10179  00210A  9ED5               	bcf	213,7,c	;volatile
 10180                           
 10181                           ;main.c: 215: timerCount = 0;
 10182  00210C  0E00               	movlw	0
 10183  00210E  6E5C               	movwf	_timerCount^0,c	;volatile
 10184  002110                     i2l4796:
 10185                           
 10186                           ;main.c: 216: };main.c: 217: INTCONbits.TMR0IF = 0;
 10187  002110  94F2               	bcf	242,2,c	;volatile
 10188  002112                     i2l222:
 10189  002112  C002  FFDA         	movff	??_isr+1,fsr2h
 10190  002116  C001  FFD9         	movff	??_isr,fsr2l
 10191  00211A  9271               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 10192  00211C  0011               	retfie		f
 10193  00211E                     __end_of_isr:
 10194                           	callstack 0
 10195                           
 10196 ;; *************** function _modbusDelay *****************
 10197 ;; Defined at:
 10198 ;;		line 30 in file "modbus.c"
 10199 ;; Parameters:    Size  Location     Type
 10200 ;;		None
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;		None
 10203 ;; Return value:  Size  Location     Type
 10204 ;;                  1    wreg      void 
 10205 ;; Registers used:
 10206 ;;		wreg, status,2
 10207 ;; Tracked objects:
 10208 ;;		On entry : 0/0
 10209 ;;		On exit  : 0/0
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10212 ;;      Params:         0       0       0       0       0       0       0
 10213 ;;      Locals:         0       0       0       0       0       0       0
 10214 ;;      Temps:          0       0       0       0       0       0       0
 10215 ;;      Totals:         0       0       0       0       0       0       0
 10216 ;;Total ram usage:        0 bytes
 10217 ;; Hardware stack levels used: 1
 10218 ;; This function calls:
 10219 ;;		Nothing
 10220 ;; This function is called by:
 10221 ;;		_isr
 10222 ;; This function uses a non-reentrant model
 10223 ;;
 10224                           
 10225                           	psect	text53
 10226  003794                     __ptext53:
 10227                           	callstack 0
 10228  003794                     _modbusDelay:
 10229                           	callstack 22
 10230  003794                     
 10231                           ;modbus.c: 33: TMR0H = 0xF5;
 10232  003794  0EF5               	movlw	245
 10233  003796  6ED7               	movwf	215,c	;volatile
 10234                           
 10235                           ;modbus.c: 34: TMR0L = 0xD7;
 10236  003798  0ED7               	movlw	215
 10237  00379A  6ED6               	movwf	214,c	;volatile
 10238  00379C  0012               	return		;funcret
 10239  00379E                     __end_of_modbusDelay:
 10240                           	callstack 0
 10241                           
 10242 ;; *************** function _OpenTmr0 *****************
 10243 ;; Defined at:
 10244 ;;		line 76 in file "system.c"
 10245 ;; Parameters:    Size  Location     Type
 10246 ;;		None
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;		None
 10249 ;; Return value:  Size  Location     Type
 10250 ;;                  1    wreg      void 
 10251 ;; Registers used:
 10252 ;;		wreg, status,2
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10258 ;;      Params:         0       0       0       0       0       0       0
 10259 ;;      Locals:         0       0       0       0       0       0       0
 10260 ;;      Temps:          0       0       0       0       0       0       0
 10261 ;;      Totals:         0       0       0       0       0       0       0
 10262 ;;Total ram usage:        0 bytes
 10263 ;; Hardware stack levels used: 1
 10264 ;; This function calls:
 10265 ;;		Nothing
 10266 ;; This function is called by:
 10267 ;;		_isr
 10268 ;; This function uses a non-reentrant model
 10269 ;;
 10270                           
 10271                           	psect	text54
 10272  003724                     __ptext54:
 10273                           	callstack 0
 10274  003724                     _OpenTmr0:
 10275                           	callstack 22
 10276  003724                     
 10277                           ;system.c: 78: T0CONbits.TMR0ON = 0;
 10278  003724  9ED5               	bcf	213,7,c	;volatile
 10279                           
 10280                           ;system.c: 79: T0CONbits.T08BIT = 0;
 10281  003726  9CD5               	bcf	213,6,c	;volatile
 10282                           
 10283                           ;system.c: 80: T0CONbits.T0CS = 0;
 10284  003728  9AD5               	bcf	213,5,c	;volatile
 10285                           
 10286                           ;system.c: 81: T0CONbits.PSA = 1;
 10287  00372A  86D5               	bsf	213,3,c	;volatile
 10288  00372C                     
 10289                           ;system.c: 83: TMR0H = 0xF5;
 10290  00372C  0EF5               	movlw	245
 10291  00372E  6ED7               	movwf	215,c	;volatile
 10292                           
 10293                           ;system.c: 84: TMR0L = 0xD7;
 10294  003730  0ED7               	movlw	215
 10295  003732  6ED6               	movwf	214,c	;volatile
 10296  003734                     
 10297                           ;system.c: 86: T0CONbits.TMR0ON = 1;
 10298  003734  8ED5               	bsf	213,7,c	;volatile
 10299  003736                     
 10300                           ;system.c: 88: INTCONbits.TMR0IF = 0;
 10301  003736  94F2               	bcf	242,2,c	;volatile
 10302  003738                     
 10303                           ;system.c: 89: INTCONbits.TMR0IE = 1;
 10304  003738  8AF2               	bsf	242,5,c	;volatile
 10305  00373A  0012               	return		;funcret
 10306  00373C                     __end_of_OpenTmr0:
 10307                           	callstack 0
 10308                           
 10309                           	psect	text55
 10310  000000                     __ptext55:
 10311                           	callstack 0
 10312  000000                     
 10313                           	psect	rparam
 10314  0000                     
 10315                           	psect	temp
 10316  000071                     btemp:
 10317                           	callstack 0
 10318  000071                     	ds	1
 10319  0000                     int$flags	set	btemp
 10320  0000                     wtemp8	set	btemp+1
 10321  0000                     ttemp5	set	btemp+1
 10322  0000                     ttemp6	set	btemp+4
 10323  0000                     ttemp7	set	btemp+8
 10324                           
 10325                           	psect	idloc
 10326                           
 10327                           ;Config register IDLOC0 @ 0x200000
 10328                           ;	unspecified, using default values
 10329  200000                     	org	2097152
 10330  200000  FF                 	db	255
 10331                           
 10332                           ;Config register IDLOC1 @ 0x200001
 10333                           ;	unspecified, using default values
 10334  200001                     	org	2097153
 10335  200001  FF                 	db	255
 10336                           
 10337                           ;Config register IDLOC2 @ 0x200002
 10338                           ;	unspecified, using default values
 10339  200002                     	org	2097154
 10340  200002  FF                 	db	255
 10341                           
 10342                           ;Config register IDLOC3 @ 0x200003
 10343                           ;	unspecified, using default values
 10344  200003                     	org	2097155
 10345  200003  FF                 	db	255
 10346                           
 10347                           ;Config register IDLOC4 @ 0x200004
 10348                           ;	unspecified, using default values
 10349  200004                     	org	2097156
 10350  200004  FF                 	db	255
 10351                           
 10352                           ;Config register IDLOC5 @ 0x200005
 10353                           ;	unspecified, using default values
 10354  200005                     	org	2097157
 10355  200005  FF                 	db	255
 10356                           
 10357                           ;Config register IDLOC6 @ 0x200006
 10358                           ;	unspecified, using default values
 10359  200006                     	org	2097158
 10360  200006  FF                 	db	255
 10361                           
 10362                           ;Config register IDLOC7 @ 0x200007
 10363                           ;	unspecified, using default values
 10364  200007                     	org	2097159
 10365  200007  FF                 	db	255
 10366                           
 10367                           	psect	config
 10368                           
 10369                           ; Padding undefined space
 10370  300000                     	org	3145728
 10371  300000  FF                 	db	255
 10372                           
 10373                           ;Config register CONFIG1H @ 0x300001
 10374                           ;	Oscillator Selection bits
 10375                           ;	OSC = HS, HS oscillator
 10376                           ;	Fail-Safe Clock Monitor Enable bit
 10377                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 10378                           ;	Internal/External Oscillator Switchover bit
 10379                           ;	IESO = OFF, Oscillator Switchover mode disabled
 10380  300001                     	org	3145729
 10381  300001  02                 	db	2
 10382                           
 10383                           ;Config register CONFIG2L @ 0x300002
 10384                           ;	Power-up Timer Enable bit
 10385                           ;	PWRT = OFF, PWRT disabled
 10386                           ;	Brown-out Reset Enable bits
 10387                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 10388                           ;	Brown Out Reset Voltage bits
 10389                           ;	BORV = 3, Minimum setting
 10390  300002                     	org	3145730
 10391  300002  1F                 	db	31
 10392                           
 10393                           ;Config register CONFIG2H @ 0x300003
 10394                           ;	Watchdog Timer Enable bit
 10395                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10396                           ;	Watchdog Timer Postscale Select bits
 10397                           ;	WDTPS = 32768, 1:32768
 10398  300003                     	org	3145731
 10399  300003  1E                 	db	30
 10400                           
 10401                           ; Padding undefined space
 10402  300004                     	org	3145732
 10403  300004  FF                 	db	255
 10404                           
 10405                           ;Config register CONFIG3H @ 0x300005
 10406                           ;	CCP2 MUX bit
 10407                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
 10408                           ;	PORTB A/D Enable bit
 10409                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 10410                           ;	Low-Power Timer1 Oscillator Enable bit
 10411                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 10412                           ;	MCLR Pin Enable bit
 10413                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10414  300005                     	org	3145733
 10415  300005  81                 	db	129
 10416                           
 10417                           ;Config register CONFIG4L @ 0x300006
 10418                           ;	Stack Full/Underflow Reset Enable bit
 10419                           ;	STVREN = ON, Stack full/underflow will cause Reset
 10420                           ;	Single-Supply ICSP Enable bit
 10421                           ;	LVP = ON, Single-Supply ICSP enabled
 10422                           ;	Extended Instruction Set Enable bit
 10423                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 10424                           ;	Background Debugger Enable bit
 10425                           ;	DEBUG = 0x1, unprogrammed default
 10426  300006                     	org	3145734
 10427  300006  85                 	db	133
 10428                           
 10429                           ; Padding undefined space
 10430  300007                     	org	3145735
 10431  300007  FF                 	db	255
 10432                           
 10433                           ;Config register CONFIG5L @ 0x300008
 10434                           ;	Code Protection bit
 10435                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
 10436                           ;	Code Protection bit
 10437                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
 10438                           ;	Code Protection bit
 10439                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
 10440                           ;	Code Protection bit
 10441                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
 10442  300008                     	org	3145736
 10443  300008  0F                 	db	15
 10444                           
 10445                           ;Config register CONFIG5H @ 0x300009
 10446                           ;	Boot Block Code Protection bit
 10447                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 10448                           ;	Data EEPROM Code Protection bit
 10449                           ;	CPD = OFF, Data EEPROM not code-protected
 10450  300009                     	org	3145737
 10451  300009  C0                 	db	192
 10452                           
 10453                           ;Config register CONFIG6L @ 0x30000A
 10454                           ;	Write Protection bit
 10455                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 10456                           ;	Write Protection bit
 10457                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 10458                           ;	Write Protection bit
 10459                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 10460                           ;	Write Protection bit
 10461                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 10462  30000A                     	org	3145738
 10463  30000A  0F                 	db	15
 10464                           
 10465                           ;Config register CONFIG6H @ 0x30000B
 10466                           ;	Configuration Register Write Protection bit
 10467                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 10468                           ;	Boot Block Write Protection bit
 10469                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
 10470                           ;	Data EEPROM Write Protection bit
 10471                           ;	WRTD = OFF, Data EEPROM not write-protected
 10472  30000B                     	org	3145739
 10473  30000B  E0                 	db	224
 10474                           
 10475                           ;Config register CONFIG7L @ 0x30000C
 10476                           ;	Table Read Protection bit
 10477                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 10478                           ;	Table Read Protection bit
 10479                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 10480                           ;	Table Read Protection bit
 10481                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 10482                           ;	Table Read Protection bit
 10483                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 10484  30000C                     	org	3145740
 10485  30000C  0F                 	db	15
 10486                           
 10487                           ;Config register CONFIG7H @ 0x30000D
 10488                           ;	Boot Block Table Read Protection bit
 10489                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 10490  30000D                     	org	3145741
 10491  30000D  40                 	db	64
 10492                           tosu	equ	0xFFF
 10493                           tosh	equ	0xFFE
 10494                           tosl	equ	0xFFD
 10495                           stkptr	equ	0xFFC
 10496                           pclatu	equ	0xFFB
 10497                           pclath	equ	0xFFA
 10498                           pcl	equ	0xFF9
 10499                           tblptru	equ	0xFF8
 10500                           tblptrh	equ	0xFF7
 10501                           tblptrl	equ	0xFF6
 10502                           tablat	equ	0xFF5
 10503                           prodh	equ	0xFF4
 10504                           prodl	equ	0xFF3
 10505                           indf0	equ	0xFEF
 10506                           postinc0	equ	0xFEE
 10507                           postdec0	equ	0xFED
 10508                           preinc0	equ	0xFEC
 10509                           plusw0	equ	0xFEB
 10510                           fsr0h	equ	0xFEA
 10511                           fsr0l	equ	0xFE9
 10512                           wreg	equ	0xFE8
 10513                           indf1	equ	0xFE7
 10514                           postinc1	equ	0xFE6
 10515                           postdec1	equ	0xFE5
 10516                           preinc1	equ	0xFE4
 10517                           plusw1	equ	0xFE3
 10518                           fsr1h	equ	0xFE2
 10519                           fsr1l	equ	0xFE1
 10520                           bsr	equ	0xFE0
 10521                           indf2	equ	0xFDF
 10522                           postinc2	equ	0xFDE
 10523                           postdec2	equ	0xFDD
 10524                           preinc2	equ	0xFDC
 10525                           plusw2	equ	0xFDB
 10526                           fsr2h	equ	0xFDA
 10527                           fsr2l	equ	0xFD9
 10528                           status	equ	0xFD8

Data Sizes:
    Strings     184
    Constant    18
    Data        10
    BSS         475
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58     112
    BANK0           128      0     125
    BANK1           256      0     225
    BANK2           256      0      82
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_8(CODE[17]), STR_5(CODE[16]), STR_4(CODE[16]), STR_3(CODE[17]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> display.line1(BANK2[16]), display.line0(BANK2[16]), display(BANK2[32]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> display.line1(BANK2[16]), display.line0(BANK2[16]), display(BANK2[32]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(COMRAM[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_9(CODE[25]), STR_7(CODE[18]), STR_6(CODE[18]), STR_2(CODE[20]), 
		 -> STR_1(CODE[20]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> display.line1(BANK2[16]), display.line0(BANK2[16]), display(BANK2[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Debounce@ptr_f	PTR FTN()void  size(2) Largest target is 1
		 -> Tougle_Pump(), Min_Lv2_Incr(), Min_Lv1_Incr(), Change_Mode(), 

    Debounce@filter	PTR unsigned int  size(2) Largest target is 2
		 -> filter_bt_on_off_pump(COMRAM[2]), filter_bt_min_lv2_incr(COMRAM[2]), filter_bt_min_lv1_incr(COMRAM[2]), filter_bt_operation_mode(COMRAM[2]), 

    Debounce@bt_press	PTR unsigned int  size(2) Largest target is 2
		 -> bt_on_off_pump_press(COMRAM[2]), bt_min_lv2_incr_press(COMRAM[2]), bt_min_lv1_incr_press(COMRAM[2]), bt_operation_mode_press(COMRAM[2]), 

    TougleBit@port	PTR unsigned int  size(2) Largest target is 1
		 -> LATC(SFR[1]), 

    ClearBit@port	PTR unsigned int  size(2) Largest target is 1
		 -> LATC(SFR[1]), 

    SetBit@port	PTR unsigned int  size(2) Largest target is 1
		 -> LATC(SFR[1]), 

    Set_Display_Message$750	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[16]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> display.line1(BANK2[16]), display.line0(BANK2[16]), display(BANK2[32]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 32
		 -> display.line1(COMRAM[16]), display.line0(COMRAM[16]), Show_Display@display(COMRAM[32]), 


Critical Paths under _main in COMRAM

    _main->_Debounce
    _decodeIt->_readCoil
    _decodeIt->_readInputCoil
    _writeReg->_generateCRC
    _writeCoil->_generateCRC
    _readReg->_generateCRC
    _readInputReg->_generateCRC
    _readInputCoil->_generateCRC
    _readCoil->_generateCRC
    _clearResponse->_OpnUSART
    _Write_Message->___fltol
    _Receive_Message->___xxtofl
    _Read_Level->___fldiv
    ___fldiv->___xxtofl
    _Manual_Mode->_Debounce
    _Tougle_Pump->_TougleBit
    _Refresh_Screen->_Set_Display_Message
    _Show_Display->_Lcd_Out
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Set_Display_Message->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Change_Mode->_ClearBit
    _Lcd_Init->_Lcd_Cmd
    _Automatic_Mode->___flge
    ___flge->___fladd

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   62023
                     _Automatic_Mode
                   _ConfigInterrupts
                _Configure_Registers
                           _Debounce
                   _Initialize_Tanks
                            _Lcd_Cmd
                           _Lcd_Init
                        _Manual_Mode
                           _OpnUSART
                         _Read_Level
                    _Receive_Message
                     _Refresh_Screen
                      _Write_Message
                           _adc_init
                           _decodeIt
 ---------------------------------------------------------------------------------
 (1) _decodeIt                                             0     0      0    5232
                           _checkCRC
                           _readCoil
                      _readInputCoil
                       _readInputReg
                            _readReg
                          _writeCoil
                           _writeReg
 ---------------------------------------------------------------------------------
 (2) _writeReg                                            16    16      0     615
                                             20 COMRAM    16    16      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _writeCoil                                           16    16      0     637
                                             20 COMRAM    16    16      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readReg                                             11    11      0     837
                                             20 COMRAM    11    11      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputReg                                        11    11      0     837
                                             20 COMRAM    11    11      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputCoil                                       17    17      0    1025
                                             20 COMRAM    17    17      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readCoil                                            17    17      0    1025
                                             20 COMRAM    17    17      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (3) _generateCRC                                         18    16      2     258
                                              2 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (3) _clearResponse                                        1     1      0      94
                                              7 COMRAM     1     1      0
                           _ClsUSART
                           _OpnUSART
 ---------------------------------------------------------------------------------
 (4) _OpnUSART                                             5     5      0      26
                                              2 COMRAM     5     5      0
                           _ClsUSART
 ---------------------------------------------------------------------------------
 (5) _ClsUSART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checkCRC                                            15    15      0     256
                                              2 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Write_Message                                        0     0      0     685
                            ___fltol
 ---------------------------------------------------------------------------------
 (1) _Receive_Message                                      0     0      0    1746
                           _ClearBit
                             _SetBit
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (1) _Read_Level                                           4     4      0    2517
                                             41 COMRAM     4     4      0
                            ___fldiv
                           ___xxtofl
                        _adc_amostra
 ---------------------------------------------------------------------------------
 (2) _adc_amostra                                          7     5      2      22
                                              2 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     898
                                              2 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    1551
                                             16 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _Manual_Mode                                          0     0      0   21942
                           _Debounce
 ---------------------------------------------------------------------------------
 (2) _Debounce                                            12     2     10   21942
                                             46 COMRAM    12     2     10
                        _Change_Mode *
                           _CheckBit
                       _Min_Lv1_Incr *
                       _Min_Lv2_Incr *
                        _Tougle_Pump *
 ---------------------------------------------------------------------------------
 (3) _Tougle_Pump                                          0     0      0     196
                          _TougleBit
 ---------------------------------------------------------------------------------
 (4) _TougleBit                                            7     3      4     196
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _Min_Lv2_Incr                                         0     0      0    9416
                     _Refresh_Screen
                            ___fladd
                             ___flge
 ---------------------------------------------------------------------------------
 (3) _Min_Lv1_Incr                                         0     0      0    9416
                     _Refresh_Screen
                            ___fladd
                             ___flge
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2844
                                              2 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (1) _Refresh_Screen                                       0     0      0    5478
                _Set_Display_Message
                       _Show_Display
 ---------------------------------------------------------------------------------
 (2) _Show_Display                                        32     0     32     959
                                             10 COMRAM    32     0     32
                            _Lcd_Out
 ---------------------------------------------------------------------------------
 (3) _Lcd_Out                                              5     2      3     837
                                              5 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Chr_CP                                           3     3      0     176
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Set_Display_Message                                  2     2      0    4519
                                             44 COMRAM     2     2      0
                            ___fltol
                            _sprintf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     531
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    22     12    3279
                                             14 COMRAM    30    18     12
                            ___fltol (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     311
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              9 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     466
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     685
                                              2 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (3) _Change_Mode                                          1     1      0     848
                                             11 COMRAM     1     1      0
                           _CheckBit
                           _ClearBit
 ---------------------------------------------------------------------------------
 (3) _CheckBit                                             7     3      4     348
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              5 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              3     3      0     176
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Tanks                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Configure_Registers                                  0     0      0       0
       _Configure_External_Interrupt
          _Configure_Timer_Interrupt
 ---------------------------------------------------------------------------------
 (2) _Configure_Timer_Interrupt                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Configure_External_Interrupt                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Automatic_Mode                                       1     1      0    1965
                                             30 COMRAM     1     1      0
                           _ClearBit
                             _SetBit
                             ___flge
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1094
                                             18 COMRAM    12     4      8
                            ___fladd (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetBit                                               7     3      4     348
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ClearBit                                             9     5      4     500
                                              2 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  2     2      0       0
                                              0 COMRAM     2     2      0
                           _OpenTmr0
                        _modbusDelay
 ---------------------------------------------------------------------------------
 (9) _modbusDelay                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _OpenTmr0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Automatic_Mode
     _ClearBit
     _SetBit
     ___flge
       ___fladd (ARG)
   _ConfigInterrupts
   _Configure_Registers
     _Configure_External_Interrupt
     _Configure_Timer_Interrupt
   _Debounce
     _Change_Mode *
       _CheckBit
       _ClearBit
     _CheckBit *
     _Min_Lv1_Incr *
       _Refresh_Screen
         _Set_Display_Message
           ___fltol
           _sprintf
             ___fltol (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
           _strcpy
         _Show_Display
           _Lcd_Out
             _Lcd_Chr_CP
             _Lcd_Cmd
       ___fladd
       ___flge
     _Min_Lv2_Incr *
       _Refresh_Screen
       ___fladd
       ___flge
     _Tougle_Pump *
       _TougleBit
   _Initialize_Tanks
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Manual_Mode
     _Debounce
   _OpnUSART
     _ClsUSART
   _Read_Level
     ___fldiv
       ___xxtofl (ARG)
     ___xxtofl
     _adc_amostra
   _Receive_Message
     _ClearBit
     _SetBit
     ___xxtofl
   _Refresh_Screen
   _Write_Message
     ___fltol
   _adc_init
   _decodeIt
     _checkCRC
     _readCoil
       _clearResponse
         _ClsUSART
         _OpnUSART
       _generateCRC
     _readInputCoil
       _clearResponse
       _generateCRC
     _readInputReg
       _clearResponse
       _generateCRC
     _readReg
       _clearResponse
       _generateCRC
     _writeCoil
       _clearResponse
       _generateCRC
     _writeReg
       _clearResponse
       _generateCRC

 _isr (ROOT)
   _OpenTmr0
   _modbusDelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      52       9       32.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E1       7       87.9%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      7D       5       97.7%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     3A      70       1       88.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     220      15        0.0%
DATA                 0      0     220       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Apr 20 19:49:33 2021

                         ___fldiv@aexp 0029                           ___fldiv@bexp 0028  
                                    _z 0059                           ___fldiv@sign 0021  
                         generateCRC@i 000F                           generateCRC@j 0011  
                   writeReg@wr_Address 001D                    ___wmul@multiplicand 0005  
                 __size_of_adc_amostra 007C                                    l121 2640  
                                  l201 2B1A                                    l122 268C  
                                  l123 26DE                                    l300 34F4  
                                  l204 2B82                                    l142 24A0  
                                  l303 3664                                    l312 36B8  
                                  l136 319C                                    l241 1F88  
                                  l306 35A2                                    l322 2E62  
                                  l139 224C                                    l251 2F1A  
                                  l260 3222                                    l500 1624  
                                  l237 1F88                                    l309 3634  
                                  l254 3750                                    l246 2FD2  
                                  l342 3260                                    l406 3604  
                                  l510 25BC                                    l422 2DA6  
                                  l271 3690                                    l503 1670  
                                  l511 2586                                    l504 1676  
                                  l432 1A20                                    l416 2DA2  
                                  l345 3262                                    l337 3770  
                                  l274 3088                                    l282 356A  
                                  l522 2C54                                    l450 1C2A  
                                  l514 25C2                                    l291 3446  
                                  l435 1A60                                    l268 27EA  
                                  l348 329E                                    l532 22B0  
                                  l524 2CDE                                    l436 1A66  
                                  l285 36DE                                    l294 379E  
                                  l614 08AA                                    l446 1BE4  
                                  l454 28EA                                    l279 3112  
                                  l535 2376                                    l519 2C2E  
                                  l455 28B4                                    l288 3722  
                                  l480 189C                                    l297 3762  
                                  l529 228A                                    l481 18A2  
                                  l449 1C24                                    l458 28F0  
                                  l492 15E4                                    l661 0BF0  
                                  l477 1850                                    l469 1810  
                                  l575 3380                                    l584 3788  
                                  l664 3704                                    l578 377C  
                                  l925 2AB4                                    l926 2AFA  
                                  l953 29F6                                    _isr 0008  
                                  tosl 000FFD                                    wreg 000FE8  
                         ___fltol@exp1 000C                          ?_Min_Lv1_Incr 0001  
                        ?_Min_Lv2_Incr 0001                                   l1150 3312  
                                 l1206 0FCA                                   l1310 1DDE  
                                 l1143 330A                                   l1207 0FB8  
                                 l1160 33E4                                   l1153 33DC  
                                 l1321 1D76                                   l1234 144A  
                                 l1314 1D1A                                   l1307 1C82  
                                 l2220 3756                                   l1180 0DE0  
                                 l1236 12AA                                   l1181 0DCE  
                                 l1245 12F0                                   l1334 3530  
                                 l1182 0D94                                   l1247 1368  
                                 l1239 126E                                   l3200 32CA  
                                 l1328 35D4                                   l1248 1356  
                                 l4000 1782                                   l2218 3752  
                                 l3130 237E                                   l3210 32FE  
                                 l3202 32D8                                   l4010 17A6  
                                 l4002 1784                                   l3140 247E  
                                 l3132 23FC                                   l3212 3304  
                                 l3204 32DE                                   l3220 33A4  
                                 l3300 0838                                   l4020 17F8  
                                 l4012 17C2                                   l4004 1786  
                                 l4100 1572                                   l1197 0EFA  
                                 l1189 10B0                                   l3142 2486  
                                 l3134 2404                                   l3206 32F4  
                                 l3222 33B2                                   l3214 3382  
                                 l3310 08B8                                   l3302 0856  
                                 l3150 2120                                   l3230 3116  
                                 l4030 1826                                   l4014 17CA  
                                 l4022 17FA                                   l4006 1798  
                                 l4110 15CA                                   l4102 157A  
                                 l3144 2488                                   l3136 2406  
                                 l3128 237A                                   l3208 32FC  
                                 l3224 33C8                                   l3216 3394  
                                 l3400 0AFE                                   l3312 08C8  
                                 l3320 08EE                                   l3304 085E  
                                 l3160 21B2                                   l3152 2124  
                                 l3232 311A                                   l4040 186E  
                                 l4032 1836                                   l4016 17CE  
                                 l4008 179E                                   l4112 15CC  
                                 l4104 1596                                   l4120 15EA  
                                 l4200 1A84                                   l3146 248E  
                                 l3138 240C                                   l3226 33D0  
                                 l3218 339C                                   l3402 0B44  
                                 l3410 0BA0                                   l3330 0924  
                                 l3322 08FE                                   l3314 08D0  
                                 l3170 2236                                   l3162 2224  
                                 l3154 21A2                                   l3250 3184  
                                 l3234 3124                                   l3242 3142  
                                 l4042 1870                                   l4034 1846  
                                 l4018 17F6                                   l4130 1632  
                                 l4122 15FA                                   l4106 159E  
                                 l4114 15CE                                   l4050 1478  
                                 l4210 1AAC                                   l4202 1A90  
                                 l3148 2490                                   l3228 33D6  
                                 l3180 35CA                                   l3412 0BAC  
                                 l3404 0B72                                   l3340 095C  
                                 l3324 090A                                   l3316 08DE  
                                 l3308 086A                                   l3260 06FE  
                                 l3252 06CC                                   l3172 223C  
                                 l3164 222C                                   l3156 21AA  
                                 l3236 312E                                   l3244 3168  
                                 l3500 3772                                   l4044 189E  
                                 l4036 1848                                   l4028 1816  
                                 l4132 1642                                   l4124 160A  
                                 l4108 15A2                                   l4060 14BC  
                                 l4052 147E                                   l4220 1B1C  
                                 l4212 1AB6                                   l4204 1A96  
                                 l4140 18C0                                   l4300 257E  
                                 l3430 2908                                   l3182 35CE  
                                 l3174 35A6                                   l3414 0BB0  
                                 l3334 0952                                   l3326 090E  
                                 l3318 08E2                                   l3270 074A  
                                 l3262 070E                                   l3254 06D8  
                                 l3422 34F6                                   l3166 222E  
                                 l3158 21AC                                   l3246 3172  
                                 l3238 3138                                   l3502 3776  
                                 l3510 3352                                   l4038 185E  
                                 l4134 1644                                   l4126 161A  
                                 l4070 14DA                                   l4062 14CC  
                                 l4054 1484                                   l4046 144C  
                                 l4230 1B7A                                   l4222 1B44  
                                 l4214 1AC2                                   l4206 1A9C  
                                 l4150 18E8                                   l4142 18CC  
                                 l4310 25A8                                   l3440 2958  
                                 l3192 32A0                                   l3176 35AA  
                                 l3408 0B88                                   l3360 09E6  
                                 l3344 0972                                   l3280 07BC  
                                 l3272 0752                                   l3256 06EA  
                                 l3416 0BC2                                   l3424 3502  
                                 l3168 2234                                   l3248 3180  
                                 l3600 0CBA                                   l4400 1164  
                                 l3520 3362                                   l3512 3356  
                                 l3504 3314                                   l4136 1672  
                                 l4128 161C                                   l4072 14DE  
                                 l4064 14CE                                   l4056 148E  
                                 l4048 146C                                   l4240 1BC2  
                                 l4224 1B54                                   l4216 1AEA  
                                 l4232 1B7E                                   l4208 1AA6  
                                 l4160 1958                                   l4152 18F2  
                                 l4144 18D2                                   l4312 25BE  
                                 l4320 2836                                   l3450 2982  
                                 l3442 295C                                   l3434 291C  
                                 l3194 32A8                                   l3186 36E0  
                                 l3178 35BA                                   l3370 0A32  
                                 l3362 09EC                                   l3338 0958  
                                 l3354 09A6                                   l3418 0BE4  
                                 l3290 07FA                                   l3282 07C2  
                                 l3274 076E                                   l3266 0714  
                                 l3258 06F6                                   l3426 350A  
                                 l3610 0CF6                                   l3602 0CC2  
                                 l4410 11A4                                   l4402 1166  
                                 l3530 336C                                   l3522 3364  
                                 l3514 3358                                   l3506 3334  
                                 l4090 152E                                   l4066 14D2  
                                 l4058 1494                                   l4250 1C02  
                                 l4242 1BD2                                   l4234 1BA0  
                                 l4226 1B56                                   l4218 1B1A  
                                 l4170 19B6                                   l4162 1980  
                                 l4154 18FE                                   l4146 18D8  
                                 l4138 18A4                                   l4306 2594  
                                 l4330 2858                                   l4322 283C  
                                 l4314 27EC                                   l3460 29AA  
                                 l3452 298C                                   l3444 296A  
                                 l3436 2946                                   l3428 28F2  
                                 l3196 32BA                                   l3188 36FC  
                                 l3380 0A76                                   l3372 0A48  
                                 l3364 0A10                                   l3348 09A0  
                                 l3356 09BE                                   l3292 07FE  
                                 l3284 07D8                                   l3276 0796  
                                 l3268 072C                                   l3700 0F20  
                                 l3620 0D0A                                   l3612 0CFA  
                                 l3604 0CD2                                   l4420 11D4  
                                 l4412 11AC                                   l4404 116E  
                                 l3540 3376                                   l3532 336E  
                                 l3524 3366                                   l3516 335A  
                                 l3508 3348                                   l4092 1556  
                                 l4084 1506                                   l4076 14F2  
                                 l4068 14D6                                   l4252 1C06  
                                 l4244 1BD6                                   l4236 1BB0  
                                 l4228 1B78                                   l4180 19FE  
                                 l4164 1990                                   l4156 1926  
                                 l4172 19BA                                   l4148 18E2  
                                 l4308 25A4                                   l4260 24DA  
                                 l4340 2886                                   l4332 285E  
                                 l4324 2842                                   l4316 2824  
                                 l3462 29B6                                   l3454 2996  
                                 l3438 2948                                   l3198 32C2  
                                 l3390 0AB8                                   l3382 0A7A  
                                 l3374 0A54                                   l3366 0A1C  
                                 l3358 09D0                                   l3294 081C  
                                 l3286 07E2                                   l3278 079A  
                                 l3550 370A                                   l3710 0F4E  
                                 l3630 0D1E                                   l3622 0D0E  
                                 l3614 0CFE                                   l3606 0CE4  
                                 l4430 1212                                   l4422 11D4  
                                 l4414 11B0                                   l4406 117E  
                                 l4510 1C4C                                   l3542 3378  
                                 l3534 3370                                   l3526 3368  
                                 l3518 335E                                   l4094 1558  
                                 l4086 1522                                   l4078 1502  
                                 l4254 1C26                                   l4246 1BD8  
                                 l4238 1BC0                                   l4190 1A3E  
                                 l4182 1A0E                                   l4174 19DC  
                                 l4166 1992                                   l4158 1956  
                                 l4270 24FE                                   l4262 24E6  
                                 l4350 28A6                                   l4342 288A  
                                 l4334 2878                                   l4326 2848  
                                 l4318 2830                                   l3560 356C  
                                 l2920 34E4                                   l4600 26D2  
                                 l3464 29C6                                   l3392 0AD0  
                                 l3376 0A58                                   l3384 0A96  
                                 l3368 0A24                                   l3296 0830  
                                 l3288 07EE                                   l3480 1E78  
                                 l3472 1DE0                                   l3552 3720  
                                 l3712 0F5C                                   l3704 0F34  
                                 l3720 0F7A                                   l3632 0D22  
                                 l3624 0D12                                   l3616 0D02  
                                 l3608 0CF2                                   l3640 0D32  
                                 l3800 2FC2                                   l4440 125E  
                                 l4432 1222                                   l4408 1194  
                                 l4520 1CC4                                   l4512 1C92  
                                 l3544 337C                                   l3536 3372  
                                 l3528 336A                                   l4096 155A  
                                 l4088 152A                                   l4256 1C26  
                                 l4248 1BF2                                   l4192 1A42  
                                 l4184 1A12                                   l4176 19EC  
                                 l4168 19B4                                   l4280 254A  
                                 l4272 2508                                   l4264 24EC  
                                 l4360 28C2                                   l4352 28AA  
                                 l4344 288E                                   l4336 287E  
                                 l4328 2852                                   l2922 34E6  
                                 l2930 33E6                                   l4602 26D2  
                                 l3466 29D6                                   l3394 0AE6  
                                 l3386 0AA8                                   l3378 0A6A  
                                 l3298 0834                                   l3490 1EC6  
                                 l3482 1E88                                   l3474 1DF0  
                                 l3714 0F64                                   l3706 0F3E  
                                 l3722 0F88                                   l3650 0DA2  
                                 l3642 0D36                                   l3634 0D26  
                                 l3626 0D16                                   l3618 0D06  
                                 l3570 0C1E                                   l3562 0BF2  
                                 l3554 3606                                   l3810 2E74  
                                 l3802 2E64                                   l4450 12A8  
                                 l4442 126C                                   l4434 1232  
                                 l4426 11E8                                   l4418 11C4  
                                 l4370 10BE                                   l4530 1D4C  
                                 l4522 1CD0                                   l4514 1CA8  
                                 l4506 1C2E                                   l3546 337E  
                                 l3538 3374                                   l4098 156C  
                                 l4194 1A62                                   l4186 1A14  
                                 l4178 19FC                                   l4290 2560  
                                 l4282 2550                                   l4274 250E  
                                 l4266 24F2                                   l4258 24A2  
                                 l4362 28D2                                   l4354 28AC  
                                 l4346 2892                                   l4338 2882  
                                 l4610 2CF2                                   l2932 377E  
                                 l2924 34E8                                   l2916 34A8  
                                 l4604 26D8                                   l3556 3692  
                                 l3468 29E6                                   l3396 0AF2  
                                 l3388 0AB4                                   l3492 1F2A  
                                 l3484 1E94                                   l3476 1E54  
                                 l3548 3706                                   l3732 0FDA  
                                 l3740 1030                                   l3724 0F8C  
                                 l3716 0F68                                   l3708 0F4C  
                                 l3660 0DCC                                   l3652 0DAE  
                                 l3644 0D60                                   l3636 0D2A  
                                 l3628 0D1A                                   l3580 0C58  
                                 l3572 0C2E                                   l3564 0BFE  
                                 l3820 319E                                   l3812 2E7C  
                                 l3804 2E68                                   l4460 12EE  
                                 l4452 12BA                                   l4444 1278  
                                 l4436 123A                                   l4428 1202  
                                 l4380 10FE                                   l4372 10CC  
                                 l4540 1D8A                                   l4532 1D58  
                                 l4524 1D02                                   l4508 1C3E  
                                 l3900 322A                                   l4196 1A62  
                                 l4188 1A2E                                   l4292 2564  
                                 l4284 2554                                   l4276 2526  
                                 l4268 24F8                                   l4364 28D6  
                                 l4348 28A0                                   l4620 2D3A  
                                 l4612 2D06                                   l4700 2B3C  
                                 l2926 34F0                                   l2918 34AC  
                                 l4606 26D8                                   l3398 0AF6  
                                 l3494 1F3C                                   l3486 1E9C  
                                 l3478 1E64                                   l3750 1082  
                                 l3742 1040                                   l3734 0FE6  
                                 l3726 0F9A                                   l3718 0F78  
                                 l3670 0E22                                   l3662 0DEE  
                                 l3654 0DB2                                   l3646 0D7C  
                                 l3638 0D2E                                   l3590 0C86  
                                 l3582 0C5E                                   l3574 0C3E  
                                 l3566 0C0C                                   l3830 31EA  
                                 l3822 31BE                                   l3814 2ED2  
                                 l3806 2E6C                                   l4470 134E  
                                 l4454 12D0                                   l4462 1300  
                                 l4446 1296                                   l4438 124A  
                                 l4390 1124                                   l4382 1100  
                                 l4374 10CE                                   l4542 1DAE  
                                 l4534 1D66                                   l4526 1D04  
                                 l4518 1CBC                                   l3910 3270  
                                 l3902 3232                                   l4198 1A68  
                                 l4294 2572                                   l4286 2558  
                                 l4278 253A                                   l4366 28EC  
                                 l4630 2D80                                   l4622 2D4C  
                                 l4614 2D18                                   l4710 2BE4  
                                 l4702 2B66                                   l4552 25C4  
                                 l3496 1F50                                   l3488 1EB4  
                                 l3760 10A0                                   l3752 1088  
                                 l3744 1050                                   l3736 0FF4  
                                 l3728 0FB0                                   l3680 0E5C  
                                 l3672 0E30                                   l3664 0DFE  
                                 l3656 0DC0                                   l3648 0D8C  
                                 l3592 0C88                                   l3584 0C70  
                                 l3576 0C40                                   l3568 0C0E  
                                 l3832 320E                                   l3824 31CE  
                                 l3816 2F0A                                   l3808 2E70  
                                 l4480 13BC                                   l4464 130E  
                                 l4456 12D6                                   l4448 1298  
                                 l4392 1132                                   l4376 10DE  
                                 l4384 1108                                   l4368 10B2  
                                 l4544 1DBE                                   l4536 1D84  
                                 l4528 1D10                                   l3904 323A  
                                 l4640 309E                                   l2928 3764  
                                 l3920 2282                                   l3840 35DA  
                                 l4296 2578                                   l4288 255C  
                                 l4632 2D88                                   l4624 2D54  
                                 l4616 2D20                                   l4608 2CE0  
                                 l4704 2B76                                   l3770 2A64  
                                 l4570 2664                                   l4562 2658  
                                 l4554 25DC                                   l3498 36BA  
                                 l3754 108A                                   l3746 1070  
                                 l3738 102E                                   l3690 0EC8  
                                 l3682 0E5E                                   l3674 0E3E  
                                 l3658 0DC2                                   l3594 0C98  
                                 l3586 0C72                                   l3578 0C48  
                                 l3818 373C                                   l3826 31D6  
                                 l4490 1426                                   l4474 1378  
                                 l4482 13C0                                   l4466 1312  
                                 l4458 12E0                                   l4394 1134  
                                 l4386 1118                                   l4378 10EE  
                                 l4546 1DCC                                   l4538 1D86  
                                 l4642 30B6                                   l4650 3532  
                                 l3930 22AA                                   l3914 224E  
                                 l3842 35EA                                   l3834 35D6  
                                 l3850 2BF6                                   l4298 257C  
                                 l4634 2D9A                                   l4626 2D66  
                                 l4618 2D32                                   l4706 2B7E  
                                 l3780 2AF2                                   l3772 2A74  
                                 l3764 29F8                                   l4660 2794  
                                 l4580 26AA                                   l4572 2666  
                                 l4564 265E                                   l4556 263C  
                                 l3756 1090                                   l3748 1074  
                                 l3692 0ECA                                   l3684 0E68  
                                 l3676 0E4A                                   l3668 0E12  
                                 l3596 0CA8                                   l3588 0C78  
                                 l3828 31DA                                   l4492 142A  
                                 l4484 13DA                                   l4476 1384  
                                 l4468 1320                                   l4396 1144  
                                 l4388 111E                                   l4548 1DCE  
                                 l3908 3242                                   l4652 2FD4  
                                 l4644 30CA                                   l3940 231A  
                                 l3932 22B6                                   l3916 2252  
                                 l3844 35EC                                   l3860 2C3C  
                                 l3852 2C12                                   l4628 2D6E  
                                 l4636 2DA2                                   l4708 2BD6  
                                 l3782 2AF8                                   l3774 2A82  
                                 l3766 2A26                                   l4662 27C6  
                                 l4654 26E0                                   l4590 26B4  
                                 l4582 26AC                                   l4574 2668  
                                 l4566 2660                                   l3758 109E  
                                 l3694 0EDA                                   l3678 0E4E  
                                 l3686 0E6E                                   l3598 0CB8  
                                 l3790 2F24                                   l4494 1438  
                                 l4486 13F0                                   l4478 1392  
                                 l4398 1154                                   l4646 30CE  
                                 l4638 308A                                   l3942 2344  
                                 l3950 2374                                   l3934 22C8  
                                 l3926 2298                                   l3918 226E  
                                 l3846 35FC                                   l3862 2C42  
                                 l3854 2C26                                   l3870 2C70  
                                 l3776 2A94                                   l3768 2A36  
                                 l4664 27D6                                   l4656 274A  
                                 l4592 26C6                                   l4584 26AE  
                                 l4576 267A                                   l4568 2662  
                                 l3688 0E94                                   l3696 0EEA  
                                 l3792 2F28                                   l4496 143E  
                                 l4488 140A                                   l4648 30F0  
                                 l3944 236E                                   l3928 229E  
                                 l3936 22CC                                   l3872 2CA4  
                                 l3864 2C4E                                   l3848 2BF2  
                                 l3960 16AA                                   l4680 2AFC  
                                 l3778 2AA2                                   l4658 277C  
                                 l4594 26C6                                   l4586 26B0  
                                 l4578 26A4                                   l3698 0F10  
                                 l3794 2F2C                                   l3786 2F1C  
                                 l3890 2E14                                   l3882 2DA8  
                                 l4666 3666                                   l4498 1440  
                                 l3938 2300                                   l3874 2CC6  
                                 l3866 2C5A                                   l3970 16F8  
                                 l3962 16B0                                   l3954 1678  
                                 l4690 2B1C                                   l4682 2B04  
                                 l4596 26CC                                   l4588 26B2  
                                 l3796 2F34                                   l3788 2F20  
                                 l3892 2E24                                   l3884 2DCE  
                                 l3876 2CCE                                   l3868 2C6C  
                                 l3980 170A                                   l3972 16FA  
                                 l3964 16BA                                   l3956 1698  
                                 l4692 2B2C                                   l4684 2B08  
                                 l4598 26CC                                   l3798 2F8A  
                                 l3886 2DE8                                   l3894 2E42  
                                 l3878 2CD6                                   l3974 16FE  
                                 l3966 16C0                                   l3958 16A4  
                                 l4694 2B30                                   l4686 2B12  
                                 l3896 3636                                   l3888 2E02  
                                 l3992 1732                                   l3984 171E  
                                 l3976 1702                                   l3968 16E8  
                                 l4696 2B34                                   l4688 2B16  
                                 l3898 3226                                   l3994 174E  
                                 l3986 172E                                   l3978 1706  
                                 l4698 2B38                                   l3996 1756  
                                 ?_isr 0001                                   l3998 175A  
                                 STR_1 062C                                   STR_2 0640  
                                 STR_3 069A                                   STR_4 06BB  
                                 STR_5 06AB                                   STR_6 0654  
                                 STR_7 0666                                   STR_8 0689  
                                 STR_9 0613                                   u3000 0E5C  
                                 u3001 0E58                                   u3010 0E94  
                                 u3011 0E90                                   u2300 35BA  
                                 u3100 0FB0                                   u3020 0EDA  
                                 u2301 35B6                                   u3101 0FAC  
                                 u3021 0ED6                                   _LATA 000F89  
                                 u2310 35CA                                   u3110 0FC6  
                                 u3030 0F10                                   _LATB 000F8A  
                                 u2311 35C6                                   u3111 0FC2  
                                 u3031 0F0C                                   _LATC 000F8B  
                                 u3200 2A26                                   u2320 32BA  
                                 u2400 074A                                   u3120 0FDA  
                                 u3040 0F20                                   u4000 1378  
                                 _LATD 000F8C                                   u3201 2A22  
                                 u2321 32B6                                   u2401 0746  
                                 u3121 0FD6                                   u3041 0F1C  
                                 u4001 1374                                   _LATE 000F8D  
                                 u3210 2A64                                   u2330 32D8  
                                 u2410 07B8                                   u3130 0FF4  
                                 u3050 0F4C                                   u4010 1392  
                                 u3211 2A60                                   u2331 32D4  
                                 u2411 07B4                                   u3131 0FF0  
                                 u3051 0F48                                   u4011 138E  
                                 u3220 2A82                                   u2340 32F4  
                                 u2500 099C                                   u2420 07D8  
                                 u3140 102E                                   u3060 0F5C  
                                 u3300 320E                                   u4020 13DA  
                                 u4100 1D66                                   u3221 2A7E  
                                 u2245 2386                                   u2341 32F0  
                                 u2501 0998                                   u2421 07D4  
                                 u3141 102A                                   u3061 0F58  
                                 u3301 320A                                   u4021 13D6  
                                 u4101 1D62                                   u3230 2AA2  
                                 u2350 3394                                   u2510 09D0  
                                 u2430 0818                                   u3150 1040  
                                 u3070 0F78                                   u4030 140A  
                                 u4110 1D76                                   u3310 35FC  
                                 u3231 2A9E                                   u2255 23A0  
                                 u2351 3390                                   u2511 09CC  
                                 u2431 0814                                   u3151 103C  
                                 u3071 0F74                                   u4031 1406  
                                 u4111 1D72                                   u3311 35F8  
                                 u3240 2AF2                                   u2360 33B2  
                                 u2600 0AE6                                   u2520 09E6  
                                 u2440 0852                                   u3160 1050  
                                 u3080 0F88                                   u4040 1438  
                                 u4120 1D84                                   u3400 3270  
                                 u3320 2C3C                                   u4200 2D4C  
                                 u3241 2AEE                                   u2265 23C6  
                                 u2361 33AE                                   u2601 0AE2  
                                 u2521 09E2                                   u2441 084E  
                                 u3161 104C                                   u3081 0F84  
                                 u4041 1434                                   u4121 1D80  
                                 u3401 326C                                   u3321 2C38  
                                 u4201 2D48                                   u2370 33C8  
                                 u2610 0BC2                                   u2530 0A10  
                                 u2450 08B8                                   u3170 1070  
                                 u3090 0F9A                                   u3250 2F8A  
                                 u4130 1DBE                                   u4050 1C3E  
                                 u3330 2C6C                                   u4210 2D66  
                                 u2371 33C4                                   u2611 0BBE  
                                 u2531 0A0C                                   u2451 08B4  
                                 u2275 212C                                   u3171 106C  
                                 u3091 0F96                                   u3251 2F86  
                                 u4131 1DBA                                   u4051 1C3A  
                                 u3331 2C68                                   u4211 2D62  
                                 u4300 27D6                                   u2700 29D6  
                                 u2620 0BE4                                   u2540 0A32  
                                 u2460 08DE                                   u2380 319C  
                                 u3180 1082                                   u3260 2ED2  
                                 u4140 1DCC                                   u4060 1C4C  
                                 u3420 2298                                   u3340 2CA4  
                                 u3500 174E                                   u4220 2D80  
                                 u4301 27D2                                   u2701 29D2  
                                 u2621 0BE0                                   u2541 0A2E  
                                 u2461 08DA                                   u2285 2146  
                                 u2381 3198                                   u3181 107E  
                                 u3261 2ECE                                   u4141 1DC8  
                                 u4061 1C48                                   u3421 2294  
                                 u3341 2CA0                                   u3501 174A  
                                 u4221 2D7C                                   u4150 268C  
                                 u2550 0A48                                   u2470 0920  
                                 u2390 06EA                                   u2630 3530  
                                 u2710 1DF0                                   u3190 109E  
                                 u3270 31AE                                   u3350 2DCE  
                                 u4070 1CA8                                   u3430 22C8  
                                 u4230 2D9A                                   u4310 2B2C  
                                 u4151 2688                                   u2551 0A44  
                                 u2471 091C                                   u2391 06E6  
                                 u2631 352C                                   u2711 1DEC  
                                 u2295 216C                                   u3191 109A  
                                 u3271 31A8                                   u3351 2DCA  
                                 u4071 1CA4                                   u3415 3278  
                                 u3431 22C4                                   u4231 2D96  
                                 u4311 2B28                                   _PIE1 000F9D  
                                 u2640 2908                                   u2560 0A6A  
                                 u2480 094E                                   u2720 1E64  
                                 u3280 31CE                                   u3360 2DE8  
                                 u4080 1CFE                                   u4240 309E  
                                 u3440 2300                                   u3520 1798  
                                 u3600 1502                                   u4160 2CF2  
                                 u4320 2B76                                   u2641 2904  
                                 u2561 0A66                                   u2481 094A  
                                 u2721 1E60                                   u3281 31CA  
                                 u3361 2DE4                                   u4081 1CFA  
                                 u4241 309A                                   u3441 22FC  
                                 u3521 1794                                   u3601 14FE  
                                 u4161 2CEE                                   u4321 2B72  
                                 u4250 2714                                   u2650 293C  
                                 u2570 0A92                                   u2490 096E  
                                 u2730 1E88                                   u2810 0C0C  
                                 u3290 31EA                                   u3370 2E02  
                                 u4090 1D48                                   u3450 2344  
                                 u3530 17C2                                   u3514 176C  
                                 u3610 1522                                   u4170 2D06  
                                 u4330 2BE4                                   u4251 270E  
                                 u2571 0A8E                                   u2491 096A  
                                 u2731 1E84                                   u2811 0C08  
                                 u3291 31E6                                   u3371 2DFE  
                                 u4091 1D44                                   u3451 2340  
                                 u3531 17BE                                   u3515 1768  
                                 u3611 151E                                   u4171 2D02  
                                 u4331 2BE0                                   u2804 3584  
                                 u4260 2716                                   u2660 296A  
                                 u2580 0AA8                                   u2740 1EC6  
                                 u2900 0D60                                   u2820 0C1E  
                                 u3276 31B0                                   u3460 236E  
                                 u3700 19DC                                   u4180 2D18  
                                 u2805 357E                                   u2661 2966  
                                 u2581 0AA4                                   u2741 1EC2  
                                 u2901 0D5C                                   u2821 0C1A  
                                 u3461 236A                                   u3701 19D8  
                                 u4181 2D14                                   u4270 274A  
                                 u2670 297E                                   u2590 0AD0  
                                 u2750 1F3C                                   u2910 0D78  
                                 u2830 0C2E                                   u3550 180C  
                                 u3470 16F8                                   u3630 156C  
                                 u3710 1A2E                                   u4190 2D32  
                                 u4271 2746                                   u2671 297A  
                                 u2655 2932                                   u2591 0ACC  
                                 u2751 1F38                                   u2911 0D72  
                                 u2831 0C2A                                   u3551 1808  
                                 u3471 16F4                                   u3631 1568  
                                 u3711 1A2A                                   u4191 2D2E  
                                 u4280 277C                                   u2680 29A6  
                                 u2920 0D7A                                   u2840 0C70  
                                 u3560 185E                                   u3544 17E0  
                                 u3480 171A                                   u3640 1596  
                                 u3624 1540                                   u3720 1A60  
                                 u3800 28C2                                   u4281 2778  
                                 u2681 29A2                                   u2841 0C6C  
                                 u3561 185A                                   u3545 17DC  
                                 u3481 1716                                   u3641 1592  
                                 u3625 153C                                   u3721 1A5C  
                                 u3801 28BE                                   u3394 364E  
                                 u4290 27C6                                   u2690 29C6  
                                 u2930 0DA2                                   u2850 0C86  
                                 u3570 189C                                   u3490 172E  
                                 u3730 1AEA                                   u3810 28EA  
                                 u3395 3648                                   u4291 27C2  
                                 u2691 29C2                                   u4507 2230  
                                 u2771 3714                                   u2931 0D9E  
                                 u2851 0C82                                   u3571 1898  
                                 u3491 172A                                   u3731 1AE6  
                                 u3811 28E6                                   _PEIE 007F96  
                                 u2940 0DC0                                   u2860 0C98  
                                 u3388 2E2A                                   u3900 124A  
                                 u3820 10CC                                   u3660 15E0  
                                 u3580 14CC                                   u3740 1BA0  
                                 u4517 2238                                   u2941 0DBC  
                                 u2861 0C94                                   u3389 2E3E  
                                 u3901 1246                                   u3821 10C8  
                                 u2765 3338                                   u3661 15DC  
                                 u3581 14C8                                   u3741 1B9C  
                                 u2950 0DE0                                   u2870 0CA8  
                                 u3910 126C                                   u3830 10DE  
                                 u3670 1632                                   u3654 15B4  
                                 u3590 14EE                                   u3750 1BF2  
                                 u4607 2670                                   u4527 2242  
                                 u2951 0DDC                                   u2871 0CA4  
                                 u3911 1268                                   u3831 10DA  
                                 u3671 162E                                   u3655 15B0  
                                 u3591 14EA                                   u3751 1BEE  
                                 u2960 0DEE                                   u2880 0CE4  
                                 u2784 361E                                   u3920 1296  
                                 u3840 10EE                                   u3680 1670  
                                 u3760 1C24                                   u4617 26A6  
                                 u4537 25E2                                   u2961 0DEA  
                                 u2881 0CE0                                   u2785 3618  
                                 u3921 1292                                   u3841 10EA  
                                 u3681 166C                                   u3761 1C20  
                                 u2794 36AA                                   u2970 0DFE  
                                 u2890 0CF2                                   u3930 12BA  
                                 u3850 1132                                   u3690 1926  
                                 u3770 2526                                   u4627 26BC  
                                 u4547 25F2                                   u2795 36A4  
                                 u2971 0DFA                                   u2891 0CEE  
                                 u3931 12B6                                   u3851 112E  
                                 u3691 1922                                   u3771 2522  
                                 u2980 0E30                                   u3940 12D0  
                                 u3860 1144                                   u3780 2594  
                                 u4637 23FE                                   u4557 2602  
                                 u4477 21A4                                   u2981 0E2C  
                                 u3941 12CC                                   u3861 1140  
                                 u3781 2590                                   u2990 0E3E  
                                 u3950 12EE                                   u3870 1154  
                                 u3790 25BC                                   u4647 2408  
                                 u4567 2612                                   u4487 21AE  
                                 u2991 0E3A                                   u3951 12EA  
                                 u3871 1150                                   u3791 25B8  
                                 u3960 130E                                   u3880 1194  
                                 u4657 2480                                   u4577 2622  
                                 u4497 2226                                   u3961 130A  
                                 u3881 1190                                   u3970 1320  
                                 u3890 11D4                                   u4667 248A  
                                 u4587 2632                                   u3971 131C  
                                 u3891 11D0                                   u3980 134E  
                                 u4677 2496                                   u4597 265A  
                                 u3981 134A                                   u3990 1364  
                                 u3991 1360                         generateCRC@crc 0013  
                       _Automatic_Mode 26E0                                   _main 2AFC  
                                 fsr1h 000FE2                                   fsr2h 000FDA  
                                 indf1 000FE7                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 btemp 0071                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        ??_Manual_Mode 003B                        ___fldiv@new_exp 0022  
                 _bt_on_off_pump_press 0062                        __end_of_Lcd_Cmd 24A2  
                      __end_of_Lcd_Out 319E                        _Receive_Message 308A  
                         ___param_bank 000000                             _Lcd_Chr_CP 211E  
                                ??_isr 0001                          ___fltol@sign1 000B  
                          _Change_Mode 319E                        __end_of___fladd 10B2  
                                ?_main 0001                        __end_of___fldiv 144C  
                                STR_10 0678                        __end_of___fltol 29F8  
                                _T1CON 000FCD                         clearResponse@i 0008  
                      __end_of___lwdiv 3314                        __end_of___lwmod 33E6  
                                i2l220 20A4                                  i2l222 2112  
                                i2l401 379C                                  i2l217 20A6  
                                i2l581 373A                                  _RCREG 000FAE  
                                _RCSTA 000FAB              writeReg@wr_valToWriteHigh 001B  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR1L 000FCE  
                                _SPBRG 000FAF                                  _PORTA 000F80  
                                _PORTB 000F81                                  _PORTC 000F82  
                                _PORTD 000F83                                  _PORTE 000F84  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                                  _TXREG 000FAD  
                  _Configure_Registers 34A8                                  _TXSTA 000FAC  
                  writeCoil@wc_Address 0021                 __size_of_Write_Message 003A  
                       ??_Min_Lv1_Incr 002F                  _bt_min_lv1_incr_press 0060  
                                _coils 0200                         ??_Min_Lv2_Incr 002F  
                      __end_of_dpowers 060B                        __end_of_readReg 1A68  
                                _tank1 0047                                  _tank2 003B  
                      __end_of_isdigit 35D6                          Debounce@ptr_f 0037  
                           SetBit@port 0003                 __end_of_Automatic_Mode 27EC  
                writeReg@wr_AddressLow 0015                         __pbitbssCOMRAM 0380  
                                pclath 000FFA                                  tablat 000FF5  
                                plusw0 000FEB                                  plusw2 000FDB  
                                ttemp5 0072                                  ttemp6 0075  
                                ttemp7 0079                       __end_of_CheckBit 36BA  
                                status 000FD8                                  wtemp8 0072  
                      __end_of_sprintf 0BF2                       __end_of_ClsUSART 377E  
                     __end_of_Debounce 2E64                       __end_of_ClearBit 35A4  
                 ?_Configure_Registers 0001                           ?_modbusDelay 0001  
                     __end_of_Lcd_Init 26E0                         checkCRC@crcLow 000A  
            writeCoil@wc_valToWriteLow 0019                        __initialization 3448  
                         __end_of_main 2BF0                  _bt_min_lv2_incr_press 005E  
                           _Read_Level 2FD4                    __end_of_Manual_Mode 3692  
                         TougleBit@pin 0005              __size_of_Initialize_Tanks 0062  
                     __end_of_OpnUSART 3382                                 ??_main 003B  
                     __end_of_OpenTmr0 373C                          __activetblptr 000002  
                 Automatic_Mode@isFull 001F                          ?_readInputReg 0001  
                __end_of_clearResponse 3606               __end_of_ConfigInterrupts 378A  
               __size_of_readInputCoil 022C                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                                 _ADCON2 000FC0  
                               _ADRESH 000FC4                                 _ADRESL 000FC3  
                      ?_Automatic_Mode 0001                            readCoil@crc 001B  
                     __end_of_adc_init 3772                            readCoil@lsb 0022  
                               i2l4720 1FB0                                 i2l4712 1F94  
                               i2l4730 1FE4                                 i2l4722 1FB4  
                               i2l4714 1FA2                                 i2l4740 2014  
                               i2l4724 1FC8                                 i2l4732 1FE8  
                               i2l4716 1FA4                                 i2l4670 372C  
                               i2l4750 2054                                 i2l4742 2024  
                               i2l4734 1FFC                                 i2l4726 1FD0  
                               i2l4718 1FAC                                 i2l4672 3734  
                               i2l4760 208A                                 i2l4744 2034  
                               i2l4752 2058                                 i2l4736 2004  
                               i2l4728 1FD2                                 i2l4674 3736  
                               i2l4770 209C                                 i2l4762 208C  
                               i2l4754 2068                                 i2l4746 2042  
                               i2l4738 2006                                 i2l4676 3738  
                               i2l4668 3724                                 i2l4780 20CA  
                               i2l4764 2090                                 i2l4756 206C  
                               i2l4748 2052                                 i2l4678 3794  
                               i2l4790 20F4                                 i2l4782 20D2  
                               i2l4774 20B4                                 i2l4766 2094  
                               i2l4758 207A                                 i2l4792 2106  
                               i2l4784 20DA                                 i2l4776 20B8  
                               i2l4768 2098                                 i2l4794 210A  
                               i2l4786 20E2                                 i2l4778 20BA  
                               i2l4788 20F2                                 i2l4796 2110  
                            ??_Lcd_Cmd 0003                __end_of_Receive_Message 3114  
                            ??_Lcd_Out 0009                       __end_of_checkCRC 2378  
                     __end_of_decodeIt 2DA8                       __end_of___xxtofl 1DE0  
          __end_of_Set_Display_Message 1F8A                  ??_Configure_Registers 0003  
               writeCoil@wc_valToWrite 001D                       ??_Refresh_Screen 002F  
                 __size_of_generateCRC 00F0                          _Write_Message 3532  
                               _SetBit 3636                                 ___flge 29F8  
                          ?_Lcd_Chr_CP 0001                              ??___fladd 000B  
                               ___wmul 36E0                              ??___fldiv 0019  
                            ??___fltol 0007                              ??___lwdiv 0007  
                            ??___lwmod 000E                         Debounce@filter 0035  
                     __end_of_readCoil 18A4                                 clear_0 346E  
                               clear_1 347A                                 clear_2 3486  
                               clear_3 3494                                 _screen 0057  
                               isa$std 000001                 writeReg@wr_AddressHigh 0017  
                               _strcpy 34F6                        readInputReg@crc 0017  
                            ??_readReg 0015                           __pdataCOMRAM 0066  
                            ??_isdigit 0003                         ??_readInputReg 0015  
                         __mediumconst 0000                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                            ??_sprintf 001B                     __size_of_TougleBit 0030  
                     __end_of_writeReg 28F2                             ___flge@ff1 0013  
                           ___flge@ff2 0017                           ___xxtofl@arg 000D  
                         ___xxtofl@exp 000C                           ___xxtofl@val 0003  
                           __accesstop 0080                __end_of__initialization 349A  
             writeReg@wr_valToWriteLow 0019                          ___rparam_used 000001  
                      checkCRC@crcHigh 0008                             ___fltol@f1 0003  
                       ?_Write_Message 0001                            _Manual_Mode 3666  
                        _readInputCoil 144C                         __pcstackCOMRAM 0001  
                          ?_Read_Level 0001                   __end_of_Min_Lv1_Incr 2FD4  
                 __end_of_Min_Lv2_Incr 2F1C                              ?_CheckBit 0003  
                            ?_ClsUSART 0001                          TougleBit@port 0003  
                            ?_Debounce 002F                              ?_ClearBit 0003  
                            ?_Lcd_Init 0001                           _endOfMessage 005D  
                        ??_Tougle_Pump 000A                           sprintf@width 002A  
                  __size_of_Lcd_Chr_CP 0130                         fp__Change_Mode 0000  
            readInputCoil@howManyBytes 0020                             __pbssBANK0 0080  
                           __pbssBANK1 0100                             __pbssBANK2 0200  
              _bt_operation_mode_press 0064                       ?_Receive_Message 0001  
                            ?_OpnUSART 0001                        _refresh_display 0380  
                            ?_OpenTmr0 0001                         ?_readInputCoil 0001  
                              ?_SetBit 0003                                ?___flge 0013  
                 __size_of_modbusDelay 000A                                ?___wmul 0003  
                        ??_adc_amostra 0005                      __end_of_TougleBit 3636  
           ?_Configure_Timer_Interrupt 0001                       _Initialize_Tanks 33E6  
                         ?_Change_Mode 0001                              ?_adc_init 0001  
                              ?_strcpy 0003                              ?_checkCRC 0001  
                           ??_CheckBit 0007                              ?_decodeIt 0001  
                            ?___xxtofl 0003                             ??_ClsUSART 0003  
                           ??_Debounce 0039                             ??_ClearBit 0007  
                        ?_Show_Display 000B                             ??_Lcd_Init 0006  
                  __size_of_Read_Level 00B6                                _Lcd_Cmd 2378  
                            ?_readCoil 0001                                _Lcd_Out 3114  
                      ??_Write_Message 000D                             ??_OpnUSART 0003  
                   __size_of_writeCoil 0122                _Set_Display_Message$750 002D  
                  __end_of_Tougle_Pump 3752                      readReg@rr_Address 0019  
                           ??_OpenTmr0 0001                                __Hparam 0000  
                              __Lparam 0000                   __end_of_readInputReg 1C2C  
                      __size_of_SetBit 0030                             _holdingReg 017D  
                      __size_of___flge 0104                                ___fladd 0BF2  
                              ___fldiv 10B2                      generateCRC@crcLow 000B  
                              ___fltol 28F2                        __size_of___wmul 0026  
                              ___lwdiv 32A0                                ___lwmod 3382  
                         __psmallconst 0600                             _newMessage 0067  
                              __pcinit 3448                          _messageLength 005B  
                         CheckBit@port 0003                                __ramtop 0600  
                           ??_adc_init 0003      __end_of_Configure_Timer_Interrupt 3764  
                              __ptext0 2AFC                                __ptext1 2CE0  
                              __ptext2 27EC                                __ptext3 24A2  
                              __ptext4 18A4                                __ptext5 1A68  
                              __ptext6 144C                                __ptext7 1678  
                              __ptext8 2BF0                                __ptext9 35D6  
                            ?_writeReg 0001                                _display 0232  
                            _T0CONbits 000FD5                        __size_of_strcpy 003C  
                    __end_of_hexpowers 0613                             ??_checkCRC 0003  
                              _dpowers 0601                                _readReg 18A4  
                  __end_of_adc_amostra 32A0                                _isdigit 35A4  
                         __size_of_isr 2116                             ??_decodeIt 0026  
                           ??___xxtofl 0007                         ??_Show_Display 002B  
                     ??_Automatic_Mode 001F                              _INCREMENT 0066  
                     readInputCoil@crc 001B                       readInputCoil@lsb 0022  
                    ?_ConfigInterrupts 0001                                _sprintf 06CC  
                       __pintcode_body 1F8A                   end_of_initialization 349A  
               _filter_bt_min_lv1_incr 006A                 _filter_bt_min_lv2_incr 0068  
                   ??_ConfigInterrupts 0003                      readReg@rr_numRegs 001B  
                           ??_readCoil 0015                          __Lmediumconst 0000  
                              int_func 1F8A                        ??_readInputCoil 0015  
                        _modbusMessage 005A                  __size_of_Min_Lv1_Incr 00B8  
                __size_of_Min_Lv2_Incr 00B8                           writeCoil@crc 001F  
                            _RCSTAbits 000FAB                           ??_Lcd_Chr_CP 0003  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc1 000FE6  
                              postinc2 000FDE                             _timerCount 005C  
                           ??_writeReg 0015                              _PORTDbits 000F83  
                            _PORTEbits 000F84                      readCoil@remainder 001D  
                    __end_of_writeCoil 25C4                            ___fladd@grs 0012  
                        ___xxtofl@sign 000B                              _TRISBbits 000F93  
                            _TRISCbits 000F94                              _TRISDbits 000F95  
                            _TRISEbits 000F96                            ___fldiv@grs 0024  
                          ___fldiv@rem 001D                            _Tougle_Pump 373C  
 __end_of_Configure_External_Interrupt 37A0  __size_of_Configure_External_Interrupt 0002  
         _Configure_External_Interrupt 379E            __end_of_Configure_Registers 34F6  
                         _Min_Lv1_Incr 2F1C                           _Min_Lv2_Incr 2E64  
                   __end_of_Lcd_Chr_CP 224E                          ??_generateCRC 0005  
                            _TXSTAbits 000FAC                           ?_Manual_Mode 0001  
                writeReg@wr_valToWrite 001F                           ??_Read_Level 002A  
                       __end_of_SetBit 3666                 __size_of_clearResponse 0030  
         __size_of_Set_Display_Message 01AA                writeCoil@wc_AddressHigh 0017  
                       __end_of___flge 2AFC                            _adc_amostra 3224  
                       __end_of___wmul 3706                            _BAUDCONbits 000FB8  
                        __pidataCOMRAM 378A                              SetBit@pin 0005  
                         Debounce@port 002F                   __size_of_Change_Mode 0086  
                       __end_of_strcpy 3532                    start_initialization 3448  
                         ClearBit@port 0003                      __size_of_CheckBit 0028  
                          __end_of_isr 211E                      __size_of_ClsUSART 000C  
                    __size_of_Debounce 00BC                      __size_of_ClearBit 0038  
             _filter_bt_operation_mode 006E                          Lcd_Out@buffer 0007  
                    __size_of_Lcd_Init 011C                     __end_of_Read_Level 308A  
                         _count_screen 0055               __end_of_Initialize_Tanks 3448  
        ?_Configure_External_Interrupt 0001                  __size_of_readInputReg 01C4  
                           readReg@crc 0017                               ??_SetBit 0007  
                 __end_of_Show_Display 36E0                      __size_of_OpnUSART 006E  
                   Read_Level@adcTank1 002A                     Read_Level@adcTank2 002C  
                  __end_of_generateCRC 2CE0                               ??___flge 001B  
                    __size_of_OpenTmr0 0018                               ??___wmul 0007  
                       readInputCoil@i 0023                         readInputCoil@j 0024  
                       readInputCoil@k 0025                         readInputCoil@l 0021  
          ??_Configure_Timer_Interrupt 0003                __size_of_Refresh_Screen 001E  
                             ??_strcpy 0007                              ___fladd@a 0007  
                            ___fladd@b 0003                              ___fldiv@a 0015  
                            ___fldiv@b 0011                              _TougleBit 3606  
                    __size_of_adc_init 000E                            __pbssCOMRAM 003B  
                         _readInputReg 1A68                      __size_of_checkCRC 012A  
                    __size_of_decodeIt 00C8                          _clearResponse 35D6  
                    __size_of___xxtofl 01B4                           _isdigit$2043 0004  
                             ?_Lcd_Cmd 0001                            sprintf@flag 0029  
                             ?_Lcd_Out 0006                    Show_Display@display 000B  
                          sprintf@prec 0026                          ??_modbusDelay 0001  
                    __size_of_readCoil 022C                       ___lwdiv@dividend 0003  
                            __pintcode 0008               __size_of_Receive_Message 008A  
                             ?___fladd 0003                               ?___fldiv 0011  
                             ?___fltol 0003                               ?___lwdiv 0003  
                             ?___lwmod 000A                            __smallconst 0600  
                            checkCRC@i 0010                              checkCRC@j 000C  
                           ?_TougleBit 0003                               ?_readReg 0001  
                             ?_isdigit 0001                      __size_of_writeReg 0106  
                       ?_clearResponse 0001                              _hexpowers 060B  
                     ___lwdiv@quotient 0007                               ?_sprintf 000F  
                          CheckBit@pin 0005                   readCoil@howManyBytes 0020  
            _Configure_Timer_Interrupt 3752                            _generateCRC 2BF0  
                       ___wmul@product 0007                               _LATBbits 000F8A  
                             _LATDbits 000F8C                               _PIE1bits 000F9D  
                __end_of_Write_Message 356C         ??_Configure_External_Interrupt 0003  
                             i2u440_40 2034                               i2u440_41 2030  
                             i2u441_40 2042                               i2u441_41 203E  
                             _PIR1bits 000F9E                               i2u442_40 2068  
                             i2u434_40 1FA2                               i2u442_41 2064  
                             i2u434_41 1F9E                               i2u443_40 207A  
                             i2u435_40 1FC8                               i2u443_41 2076  
                             i2u435_41 1FC4                               i2u444_40 20B4  
                             i2u436_40 1FE4                               i2u444_41 20B0  
                             i2u436_41 1FE0                               i2u445_40 20CA  
                             i2u437_40 1FFC                               i2u445_41 20C6  
                             i2u437_41 1FF8                               i2u446_40 2106  
                             i2u438_40 2014                               i2u446_41 2102  
                             i2u438_41 2010                               i2u439_40 2024  
                             i2u439_41 2020                              _operation 0058  
            __size_of_ConfigInterrupts 000C                         fp__Tougle_Pump 0000  
                             _RCONbits 000FD0                               Lcd_Out@x 0006  
                             Lcd_Out@y 0009                   __size_of_Manual_Mode 002C  
                          writeReg@crc 0021                    __end_of_modbusDelay 379E  
                         Lcd_Init@data 0007                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0003                               _CheckBit 3692  
                             _ClsUSART 3772                               _Debounce 2DA8  
                             _ClearBit 356C                            checkCRC@crc 000E  
                _filter_bt_on_off_pump 006C                               _Lcd_Init 25C4  
                            _writeCoil 24A2                 writeCoil@wc_AddressLow 0015  
                         ?_Tougle_Pump 0001                            _INTCON2bits 000FF1  
                  _Set_Display_Message 1DE0                              copy_data0 345C  
                          Debounce@pin 0031                          OpnUSART@spbrg 0004  
                          ClearBit@pin 0005                  __size_of_Show_Display 0026  
                     __size_of_Lcd_Cmd 012A                               _OpnUSART 3314  
                     __size_of_Lcd_Out 008A                              readCoil@i 0023  
                            readCoil@j 0024                              readCoil@k 0025  
                            readCoil@l 0021                               _OpenTmr0 3724  
                             __Hrparam 0000                  __end_of_readInputCoil 1678  
                             __Lrparam 0000                          readInputReg@i 001D  
                        readInputReg@j 001F                   ?_Set_Display_Message 0001  
                         ?_adc_amostra 0003                       __size_of___fladd 04C0  
                     __size_of___fldiv 039A                       __size_of___fltol 0106  
                   generateCRC@crcHigh 000D                       __size_of___lwdiv 0074  
                     __size_of___lwmod 0064                         _Refresh_Screen 3706  
                             _adc_init 3764                      ??_Receive_Message 0011  
                             _checkCRC 224E                            ??_TougleBit 0007  
                           sprintf@idx 0021                             sprintf@len 0024  
                      ??_clearResponse 0008                             sprintf@val 0027  
                             _decodeIt 2CE0                               ___xxtofl 1C2C  
                     __size_of_readReg 01C4                       __size_of_isdigit 0032  
                       Lcd_Chr_CP@data 0005                        ___lwdiv@divisor 0005  
                         _Show_Display 36BA                        ___lwdiv@counter 0009  
                             __ptext10 3314                               __ptext11 3772  
                             __ptext20 3666                               __ptext12 224E  
                             __ptext21 2DA8                               __ptext13 3764  
                             __ptext30 3114                               __ptext22 2E64  
                             __ptext14 3532                               __ptext31 211E  
                             __ptext23 2F1C                               __ptext15 308A  
                             __ptext40 3692                               __ptext32 1DE0  
                             __ptext24 319E                               __ptext16 2FD4  
                             __ptext41 25C4                               __ptext33 34F6  
                             __ptext25 373C                               __ptext17 3224  
                             __ptext50 3636                               __ptext42 2378  
                             __ptext34 06CC                               __ptext26 3606  
                             __ptext18 1C2C                               __ptext51 356C  
                             __ptext43 33E6                               __ptext35 35A4  
                             __ptext27 0BF2                               __ptext19 10B2  
                             __ptext44 34A8                               __ptext36 36E0  
                             __ptext28 3706                               __ptext53 3794  
                             __ptext45 3752                               __ptext37 3382  
                             __ptext29 36BA                               __ptext54 3724  
                             __ptext46 379E                               __ptext38 32A0  
                             __ptext55 0000                               __ptext47 377E  
                             __ptext39 28F2                               __ptext48 26E0  
                             __ptext49 29F8                             ?_writeCoil 0001  
                     Debounce@bt_press 0033                       __size_of_sprintf 0526  
                           strcpy@from 0005             writeCoil@wc_valToWriteHigh 001B  
                          Lcd_Cmd@data 0005                               _readCoil 1678  
                    ?_Initialize_Tanks 0001                          __size_of_main 00F4  
              __size_of_Automatic_Mode 010C                  _count_refresh_display 0053  
                             _received 0100                     ??_Initialize_Tanks 0003  
                          _modbusDelay 3794           __size_of_Configure_Registers 004E  
                           writeCoil@i 0023                               isa$xinst 000000  
                             _response 0080                  ??_Set_Display_Message 002D  
                             int$flags 0071               generateCRC@messageLength 000A  
               __end_of_Refresh_Screen 3724                          ??_Change_Mode 000C  
                             _writeReg 27EC                            Lcd_Out@data 000A  
                           _INTCONbits 000FF2                 readInputReg@rr_Address 0019  
                   readCoil@rc_Address 0019                               readReg@i 001D  
                             readReg@j 001F                readInputCoil@rc_Address 0019  
                  readCoil@rc_numCoils 001E                               isdigit@c 0005  
             readInputCoil@rc_numCoils 001E                               intlevel2 0000  
                            sprintf@ap 0022                              sprintf@cp 001F  
                            sprintf@sp 000F                       ___lwmod@dividend 000A  
                     _ConfigInterrupts 377E                              writeReg@i 0023  
   __size_of_Configure_Timer_Interrupt 0012                        ?_Refresh_Screen 0001  
               readInputReg@rr_numRegs 001B                               sprintf@c 002C  
                             sprintf@f 0011                        ___lwmod@divisor 000C  
                      fp__Min_Lv1_Incr 0000                        fp__Min_Lv2_Incr 0000  
                             strcpy@cp 0007                               strcpy@to 0003  
                      ___lwmod@counter 000E                       adc_amostra@canal 0009  
                  __end_of_Change_Mode 3224                            ??_writeCoil 0015  
                        ___fladd@signs 000F                   __size_of_Tougle_Pump 0016  
                         ___fladd@aexp 0010                           ___fladd@bexp 0011  
                         ?_generateCRC 0003                 readInputCoil@remainder 001D  
