

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Apr 21 09:04:06 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=3
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=3
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77  0000                     
    78                           ; Version 2.20
    79                           ; Generated 12/02/2020 GMT
    80                           ; 
    81                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F4520 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  003822                     __pidataCOMRAM:
   115                           	callstack 0
   116                           
   117                           ;initializer for _INCREMENT
   118  003822  0A                 	db	10
   119                           
   120                           ;initializer for _newMessage
   121  003823  01                 	db	1
   122                           
   123                           ;initializer for _filter_bt_min_lv2_incr
   124  003824  000A               	dw	10
   125                           
   126                           ;initializer for _filter_bt_min_lv1_incr
   127  003826  000A               	dw	10
   128                           
   129                           ;initializer for _filter_bt_on_off_pump
   130  003828  000A               	dw	10
   131                           
   132                           ;initializer for _filter_bt_operation_mode
   133  00382A  000A               	dw	10
   134                           
   135                           	psect	smallconst
   136  000600                     __psmallconst:
   137                           	callstack 0
   138  000600  00                 	db	0
   139  000601                     _dpowers:
   140                           	callstack 0
   141  000601  0001               	dw	1
   142  000603  000A               	dw	10
   143  000605  0064               	dw	100
   144  000607  03E8               	dw	1000
   145  000609  2710               	dw	10000
   146  00060B                     __end_of_dpowers:
   147                           	callstack 0
   148  00060B                     _hexpowers:
   149                           	callstack 0
   150  00060B  0001               	dw	1
   151  00060D  0010               	dw	16
   152  00060F  0100               	dw	256
   153  000611  1000               	dw	4096
   154  000613                     __end_of_hexpowers:
   155                           	callstack 0
   156  0000                     _RCONbits	set	4048
   157  0000                     _PIE1	set	3997
   158  0000                     _SPBRG	set	4015
   159  0000                     _BAUDCONbits	set	4024
   160  0000                     _RCSTAbits	set	4011
   161  0000                     _TRISCbits	set	3988
   162  0000                     _RCSTA	set	4011
   163  0000                     _TXSTA	set	4012
   164  0000                     _TRISBbits	set	3987
   165  0000                     _TXREG	set	4013
   166  0000                     _TXSTAbits	set	4012
   167  0000                     _LATBbits	set	3978
   168  0000                     _TMR0L	set	4054
   169  0000                     _TMR0H	set	4055
   170  0000                     _ADRESL	set	4035
   171  0000                     _ADRESH	set	4036
   172  0000                     _ADCON0bits	set	4034
   173  0000                     _ADCON2	set	4032
   174  0000                     _ADCON1	set	4033
   175  0000                     _ADCON0	set	4034
   176  0000                     _LATE	set	3981
   177  0000                     _PORTE	set	3972
   178  0000                     _LATD	set	3980
   179  0000                     _PORTD	set	3971
   180  0000                     _PORTC	set	3970
   181  0000                     _LATB	set	3978
   182  0000                     _LATA	set	3977
   183  0000                     _PORTA	set	3968
   184  0000                     _TRISE	set	3990
   185  0000                     _TRISD	set	3989
   186  0000                     _TRISC	set	3988
   187  0000                     _TRISB	set	3987
   188  0000                     _TRISA	set	3986
   189  0000                     _INTCON2bits	set	4081
   190  0000                     _T1CON	set	4045
   191  0000                     _PIE1bits	set	3997
   192  0000                     _LATDbits	set	3980
   193  0000                     _T0CONbits	set	4053
   194  0000                     _INTCONbits	set	4082
   195  0000                     _RCREG	set	4014
   196  0000                     _TMR1H	set	4047
   197  0000                     _TMR1L	set	4046
   198  0000                     _PIR1bits	set	3998
   199  0000                     _PORTB	set	3969
   200  0000                     _PORTEbits	set	3972
   201  0000                     _PORTDbits	set	3971
   202  0000                     _TRISEbits	set	3990
   203  0000                     _TRISDbits	set	3989
   204  0000                     _LATC	set	3979
   205  0000                     _PEIE	set	32662
   206  000613                     STR_9:
   207  000613  25                 	db	37
   208  000614  30                 	db	48	;'0'
   209  000615  32                 	db	50	;'2'
   210  000616  58                 	db	88	;'X'
   211  000617  20                 	db	32
   212  000618  25                 	db	37
   213  000619  30                 	db	48	;'0'
   214  00061A  32                 	db	50	;'2'
   215  00061B  58                 	db	88	;'X'
   216  00061C  20                 	db	32
   217  00061D  25                 	db	37
   218  00061E  30                 	db	48	;'0'
   219  00061F  32                 	db	50	;'2'
   220  000620  58                 	db	88	;'X'
   221  000621  20                 	db	32
   222  000622  25                 	db	37
   223  000623  30                 	db	48	;'0'
   224  000624  32                 	db	50	;'2'
   225  000625  58                 	db	88	;'X'
   226  000626  20                 	db	32
   227  000627  20                 	db	32
   228  000628  20                 	db	32
   229  000629  20                 	db	32
   230  00062A  20                 	db	32
   231  00062B  00                 	db	0
   232  00062C                     STR_1:
   233  00062C  43                 	db	67	;'C'
   234  00062D  55                 	db	85	;'U'
   235  00062E  52                 	db	82	;'R'
   236  00062F  52                 	db	82	;'R'
   237  000630  45                 	db	69	;'E'
   238  000631  4E                 	db	78	;'N'
   239  000632  54                 	db	84	;'T'
   240  000633  20                 	db	32
   241  000634  4C                 	db	76	;'L'
   242  000635  56                 	db	86	;'V'
   243  000636  31                 	db	49	;'1'
   244  000637  3A                 	db	58	;':'
   245  000638  20                 	db	32
   246  000639  25                 	db	37
   247  00063A  64                 	db	100	;'d'
   248  00063B  25                 	db	37
   249  00063C  25                 	db	37
   250  00063D  20                 	db	32
   251  00063E  20                 	db	32
   252  00063F  00                 	db	0
   253  000640                     STR_2:
   254  000640  43                 	db	67	;'C'
   255  000641  55                 	db	85	;'U'
   256  000642  52                 	db	82	;'R'
   257  000643  52                 	db	82	;'R'
   258  000644  45                 	db	69	;'E'
   259  000645  4E                 	db	78	;'N'
   260  000646  54                 	db	84	;'T'
   261  000647  20                 	db	32
   262  000648  4C                 	db	76	;'L'
   263  000649  56                 	db	86	;'V'
   264  00064A  32                 	db	50	;'2'
   265  00064B  3A                 	db	58	;':'
   266  00064C  20                 	db	32
   267  00064D  25                 	db	37
   268  00064E  64                 	db	100	;'d'
   269  00064F  25                 	db	37
   270  000650  25                 	db	37
   271  000651  20                 	db	32
   272  000652  20                 	db	32
   273  000653  00                 	db	0
   274  000654                     STR_6:
   275  000654  4C                 	db	76	;'L'
   276  000655  56                 	db	86	;'V'
   277  000656  5F                 	db	95	;'_'
   278  000657  4D                 	db	77	;'M'
   279  000658  49                 	db	73	;'I'
   280  000659  4E                 	db	78	;'N'
   281  00065A  5F                 	db	95	;'_'
   282  00065B  31                 	db	49	;'1'
   283  00065C  3A                 	db	58	;':'
   284  00065D  20                 	db	32
   285  00065E  25                 	db	37
   286  00065F  64                 	db	100	;'d'
   287  000660  25                 	db	37
   288  000661  25                 	db	37
   289  000662  20                 	db	32
   290  000663  20                 	db	32
   291  000664  20                 	db	32
   292  000665  00                 	db	0
   293  000666                     STR_7:
   294  000666  4C                 	db	76	;'L'
   295  000667  56                 	db	86	;'V'
   296  000668  5F                 	db	95	;'_'
   297  000669  4D                 	db	77	;'M'
   298  00066A  49                 	db	73	;'I'
   299  00066B  4E                 	db	78	;'N'
   300  00066C  5F                 	db	95	;'_'
   301  00066D  32                 	db	50	;'2'
   302  00066E  3A                 	db	58	;':'
   303  00066F  20                 	db	32
   304  000670  25                 	db	37
   305  000671  64                 	db	100	;'d'
   306  000672  25                 	db	37
   307  000673  25                 	db	37
   308  000674  20                 	db	32
   309  000675  20                 	db	32
   310  000676  20                 	db	32
   311  000677  00                 	db	0
   312  000678                     STR_10:
   313  000678  30                 	db	48	;'0'
   314  000679  31                 	db	49	;'1'
   315  00067A  32                 	db	50	;'2'
   316  00067B  33                 	db	51	;'3'
   317  00067C  34                 	db	52	;'4'
   318  00067D  35                 	db	53	;'5'
   319  00067E  36                 	db	54	;'6'
   320  00067F  37                 	db	55	;'7'
   321  000680  38                 	db	56	;'8'
   322  000681  39                 	db	57	;'9'
   323  000682  41                 	db	65	;'A'
   324  000683  42                 	db	66	;'B'
   325  000684  43                 	db	67	;'C'
   326  000685  44                 	db	68	;'D'
   327  000686  45                 	db	69	;'E'
   328  000687  46                 	db	70	;'F'
   329  000688  00                 	db	0
   330  000689                     STR_5:
   331  000689  4D                 	db	77	;'M'
   332  00068A  41                 	db	65	;'A'
   333  00068B  4E                 	db	78	;'N'
   334  00068C  55                 	db	85	;'U'
   335  00068D  41                 	db	65	;'A'
   336  00068E  4C                 	db	76	;'L'
   337  00068F  20                 	db	32
   338  000690  20                 	db	32
   339  000691  20                 	db	32
   340  000692  20                 	db	32
   341  000693  20                 	db	32
   342  000694  20                 	db	32
   343  000695  20                 	db	32
   344  000696  20                 	db	32
   345  000697  20                 	db	32
   346  000698  20                 	db	32
   347  000699  00                 	db	0
   348  00069A                     STR_8:
   349  00069A  4D                 	db	77	;'M'
   350  00069B  4F                 	db	79	;'O'
   351  00069C  44                 	db	68	;'D'
   352  00069D  42                 	db	66	;'B'
   353  00069E  55                 	db	85	;'U'
   354  00069F  53                 	db	83	;'S'
   355  0006A0  3A                 	db	58	;':'
   356  0006A1  20                 	db	32
   357  0006A2  20                 	db	32
   358  0006A3  20                 	db	32
   359  0006A4  20                 	db	32
   360  0006A5  20                 	db	32
   361  0006A6  20                 	db	32
   362  0006A7  20                 	db	32
   363  0006A8  20                 	db	32
   364  0006A9  20                 	db	32
   365  0006AA  00                 	db	0
   366  0006AB                     STR_4:
   367  0006AB  41                 	db	65	;'A'
   368  0006AC  55                 	db	85	;'U'
   369  0006AD  54                 	db	84	;'T'
   370  0006AE  4F                 	db	79	;'O'
   371  0006AF  4D                 	db	77	;'M'
   372  0006B0  41                 	db	65	;'A'
   373  0006B1  54                 	db	84	;'T'
   374  0006B2  49                 	db	73	;'I'
   375  0006B3  43                 	db	67	;'C'
   376  0006B4  20                 	db	32
   377  0006B5  20                 	db	32
   378  0006B6  20                 	db	32
   379  0006B7  20                 	db	32
   380  0006B8  20                 	db	32
   381  0006B9  20                 	db	32
   382  0006BA  20                 	db	32
   383  0006BB  00                 	db	0
   384  0006BC                     STR_3:
   385  0006BC  4F                 	db	79	;'O'
   386  0006BD  50                 	db	80	;'P'
   387  0006BE  45                 	db	69	;'E'
   388  0006BF  52                 	db	82	;'R'
   389  0006C0  41                 	db	65	;'A'
   390  0006C1  54                 	db	84	;'T'
   391  0006C2  49                 	db	73	;'I'
   392  0006C3  4F                 	db	79	;'O'
   393  0006C4  4E                 	db	78	;'N'
   394  0006C5  20                 	db	32
   395  0006C6  4D                 	db	77	;'M'
   396  0006C7  4F                 	db	79	;'O'
   397  0006C8  44                 	db	68	;'D'
   398  0006C9  45                 	db	69	;'E'
   399  0006CA  3A                 	db	58	;':'
   400  0006CB  20                 	db	32
   401  0006CC  00                 	db	0
   402  0006CD  00                 	db	0	; dummy byte at the end
   403  0000                     
   404                           ; #config settings
   405                           
   406                           	psect	cinit
   407  0034D8                     __pcinit:
   408                           	callstack 0
   409  0034D8                     start_initialization:
   410                           	callstack 0
   411  0034D8                     __initialization:
   412                           	callstack 0
   413                           
   414                           ; Initialize objects allocated to COMRAM (10 bytes)
   415                           ; load TBLPTR registers with __pidataCOMRAM
   416  0034D8  0E22               	movlw	low __pidataCOMRAM
   417  0034DA  6EF6               	movwf	tblptrl,c
   418  0034DC  0E38               	movlw	high __pidataCOMRAM
   419  0034DE  6EF7               	movwf	tblptrh,c
   420  0034E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   421  0034E2  6EF8               	movwf	tblptru,c
   422  0034E4  EE00  F06A         	lfsr	0,__pdataCOMRAM
   423  0034E8  EE10 F00A          	lfsr	1,10
   424  0034EC                     copy_data0:
   425  0034EC  0009               	tblrd		*+
   426  0034EE  CFF5 FFEE          	movff	tablat,postinc0
   427  0034F2  50E5               	movf	postdec1,w,c
   428  0034F4  50E1               	movf	fsr1l,w,c
   429  0034F6  E1FA               	bnz	copy_data0
   430                           
   431                           ; Clear objects allocated to BANK2 (82 bytes)
   432  0034F8  EE02  F000         	lfsr	0,__pbssBANK2
   433  0034FC  0E52               	movlw	82
   434  0034FE                     clear_0:
   435  0034FE  6AEE               	clrf	postinc0,c
   436  003500  06E8               	decf	wreg,f,c
   437  003502  E1FD               	bnz	clear_0
   438                           
   439                           ; Clear objects allocated to BANK1 (250 bytes)
   440  003504  EE01  F000         	lfsr	0,__pbssBANK1
   441  003508  0EFA               	movlw	250
   442  00350A                     clear_1:
   443  00350A  6AEE               	clrf	postinc0,c
   444  00350C  06E8               	decf	wreg,f,c
   445  00350E  E1FD               	bnz	clear_1
   446                           
   447                           ; Clear objects allocated to BANK0 (100 bytes)
   448  003510  EE00  F080         	lfsr	0,__pbssBANK0
   449  003514  0E64               	movlw	100
   450  003516                     clear_2:
   451  003516  6AEE               	clrf	postinc0,c
   452  003518  06E8               	decf	wreg,f,c
   453  00351A  E1FD               	bnz	clear_2
   454                           
   455                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   456  00351C  6A74               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   457                           
   458                           ; Clear objects allocated to COMRAM (47 bytes)
   459  00351E  EE00  F03B         	lfsr	0,__pbssCOMRAM
   460  003522  0E2F               	movlw	47
   461  003524                     clear_3:
   462  003524  6AEE               	clrf	postinc0,c
   463  003526  06E8               	decf	wreg,f,c
   464  003528  E1FD               	bnz	clear_3
   465  00352A                     end_of_initialization:
   466                           	callstack 0
   467  00352A                     __end_of__initialization:
   468                           	callstack 0
   469  00352A  9075               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   470  00352C  9275               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   471  00352E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   472  003530  6EF8               	movwf	tblptru,c
   473  003532  0100               	movlb	0
   474  003534  EF79  F015         	goto	_main	;jump to C main() function
   475                           
   476                           	psect	bitbssCOMRAM
   477  0003A0                     __pbitbssCOMRAM:
   478                           	callstack 0
   479  0003A0                     _refresh_display:
   480                           	callstack 0
   481  0003A0                     	ds	1
   482                           
   483                           	psect	bssCOMRAM
   484  00003B                     __pbssCOMRAM:
   485                           	callstack 0
   486  00003B                     _tank2:
   487                           	callstack 0
   488  00003B                     	ds	12
   489  000047                     _tank1:
   490                           	callstack 0
   491  000047                     	ds	12
   492  000053                     _last_operation_mode_received:
   493                           	callstack 0
   494  000053                     	ds	2
   495  000055                     _last_pump_status_received:
   496                           	callstack 0
   497  000055                     	ds	2
   498  000057                     _count_refresh_display:
   499                           	callstack 0
   500  000057                     	ds	2
   501  000059                     _count_screen:
   502                           	callstack 0
   503  000059                     	ds	2
   504  00005B                     _screen:
   505                           	callstack 0
   506  00005B                     	ds	1
   507  00005C                     _operation:
   508                           	callstack 0
   509  00005C                     	ds	1
   510  00005D                     _z:
   511                           	callstack 0
   512  00005D                     	ds	1
   513  00005E                     _modbusMessage:
   514                           	callstack 0
   515  00005E                     	ds	1
   516  00005F                     _messageLength:
   517                           	callstack 0
   518  00005F                     	ds	1
   519  000060                     _timerCount:
   520                           	callstack 0
   521  000060                     	ds	1
   522  000061                     _endOfMessage:
   523                           	callstack 0
   524  000061                     	ds	1
   525  000062                     _bt_min_lv2_incr_press:
   526                           	callstack 0
   527  000062                     	ds	2
   528  000064                     _bt_min_lv1_incr_press:
   529                           	callstack 0
   530  000064                     	ds	2
   531  000066                     _bt_on_off_pump_press:
   532                           	callstack 0
   533  000066                     	ds	2
   534  000068                     _bt_operation_mode_press:
   535                           	callstack 0
   536  000068                     	ds	2
   537                           
   538                           	psect	dataCOMRAM
   539  00006A                     __pdataCOMRAM:
   540                           	callstack 0
   541  00006A                     _INCREMENT:
   542                           	callstack 0
   543  00006A                     	ds	1
   544  00006B                     _newMessage:
   545                           	callstack 0
   546  00006B                     	ds	1
   547  00006C                     _filter_bt_min_lv2_incr:
   548                           	callstack 0
   549  00006C                     	ds	2
   550  00006E                     _filter_bt_min_lv1_incr:
   551                           	callstack 0
   552  00006E                     	ds	2
   553  000070                     _filter_bt_on_off_pump:
   554                           	callstack 0
   555  000070                     	ds	2
   556  000072                     _filter_bt_operation_mode:
   557                           	callstack 0
   558  000072                     	ds	2
   559                           
   560                           	psect	bssBANK0
   561  000080                     __pbssBANK0:
   562                           	callstack 0
   563  000080                     _holdingReg:
   564                           	callstack 0
   565  000080                     	ds	100
   566                           
   567                           	psect	bssBANK1
   568  000100                     __pbssBANK1:
   569                           	callstack 0
   570  000100                     _received:
   571                           	callstack 0
   572  000100                     	ds	125
   573  00017D                     _response:
   574                           	callstack 0
   575  00017D                     	ds	125
   576                           
   577                           	psect	bssBANK2
   578  000200                     __pbssBANK2:
   579                           	callstack 0
   580  000200                     _coils:
   581                           	callstack 0
   582  000200                     	ds	50
   583  000232                     _display:
   584                           	callstack 0
   585  000232                     	ds	32
   586                           
   587                           	psect	cstackCOMRAM
   588  000001                     __pcstackCOMRAM:
   589                           	callstack 0
   590  000001                     ??_isr:
   591  000001                     
   592                           ; 1 bytes @ 0x0
   593  000001                     	ds	2
   594  000003                     ??_Lcd_Cmd:
   595  000003                     ??_Lcd_Chr_CP:
   596  000003                     ??_OpnUSART:
   597  000003                     ??_Change_Mode:
   598  000003                     ??_checkCRC:
   599  000003                     ??_isdigit:
   600  000003                     ?_adc_amostra:
   601                           	callstack 0
   602  000003                     ?_CheckBit:
   603                           	callstack 0
   604  000003                     ?_generateCRC:
   605                           	callstack 0
   606  000003                     ?___wmul:
   607                           	callstack 0
   608  000003                     ?___lwdiv:
   609                           	callstack 0
   610  000003                     ?___fladd:
   611                           	callstack 0
   612  000003                     ?___fltol:
   613                           	callstack 0
   614  000003                     ?___xxtofl:
   615                           	callstack 0
   616  000003                     SetBit@port:
   617                           	callstack 0
   618  000003                     ClearBit@port:
   619                           	callstack 0
   620  000003                     TougleBit@port:
   621                           	callstack 0
   622  000003                     CheckBit@port:
   623                           	callstack 0
   624  000003                     ___wmul@multiplier:
   625                           	callstack 0
   626  000003                     ___lwdiv@dividend:
   627                           	callstack 0
   628  000003                     strcpy@to:
   629                           	callstack 0
   630  000003                     ___fltol@f1:
   631                           	callstack 0
   632  000003                     ___fladd@b:
   633                           	callstack 0
   634  000003                     ___xxtofl@val:
   635                           	callstack 0
   636                           
   637                           ; 4 bytes @ 0x2
   638  000003                     	ds	1
   639  000004                     _isdigit$2041:
   640                           	callstack 0
   641  000004                     OpnUSART@spbrg:
   642                           	callstack 0
   643                           
   644                           ; 4 bytes @ 0x3
   645  000004                     	ds	1
   646  000005                     ??_adc_amostra:
   647  000005                     ??_generateCRC:
   648  000005                     Lcd_Chr_CP@data:
   649                           	callstack 0
   650  000005                     Lcd_Cmd@data:
   651                           	callstack 0
   652  000005                     isdigit@c:
   653                           	callstack 0
   654  000005                     SetBit@pin:
   655                           	callstack 0
   656  000005                     ClearBit@pin:
   657                           	callstack 0
   658  000005                     TougleBit@pin:
   659                           	callstack 0
   660  000005                     CheckBit@pin:
   661                           	callstack 0
   662  000005                     ___wmul@multiplicand:
   663                           	callstack 0
   664  000005                     ___lwdiv@divisor:
   665                           	callstack 0
   666  000005                     strcpy@from:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x4
   670  000005                     	ds	1
   671  000006                     ??_Lcd_Init:
   672  000006                     Lcd_Out@x:
   673                           	callstack 0
   674                           
   675                           ; 1 bytes @ 0x5
   676  000006                     	ds	1
   677  000007                     ??_TougleBit:
   678  000007                     ??_SetBit:
   679  000007                     ??_ClearBit:
   680  000007                     ??_CheckBit:
   681  000007                     ??___fltol:
   682  000007                     ??___xxtofl:
   683  000007                     Lcd_Init@data:
   684                           	callstack 0
   685  000007                     Lcd_Out@buffer:
   686                           	callstack 0
   687  000007                     ___wmul@product:
   688                           	callstack 0
   689  000007                     ___lwdiv@quotient:
   690                           	callstack 0
   691  000007                     strcpy@cp:
   692                           	callstack 0
   693  000007                     ___fladd@a:
   694                           	callstack 0
   695                           
   696                           ; 4 bytes @ 0x6
   697  000007                     	ds	1
   698  000008                     clearResponse@i:
   699                           	callstack 0
   700  000008                     checkCRC@crcHigh:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x7
   704  000008                     	ds	1
   705  000009                     Lcd_Out@y:
   706                           	callstack 0
   707  000009                     adc_amostra@canal:
   708                           	callstack 0
   709  000009                     ___lwdiv@counter:
   710                           	callstack 0
   711                           
   712                           ; 1 bytes @ 0x8
   713  000009                     	ds	1
   714  00000A                     ??_Sync_Registers:
   715  00000A                     ?___lwmod:
   716                           	callstack 0
   717  00000A                     Lcd_Out@data:
   718                           	callstack 0
   719  00000A                     generateCRC@messageLength:
   720                           	callstack 0
   721  00000A                     checkCRC@crcLow:
   722                           	callstack 0
   723  00000A                     ___lwmod@dividend:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x9
   727  00000A                     	ds	1
   728  00000B                     ??___fladd:
   729  00000B                     ___fltol@sign1:
   730                           	callstack 0
   731  00000B                     ___xxtofl@sign:
   732                           	callstack 0
   733  00000B                     generateCRC@crcLow:
   734                           	callstack 0
   735  00000B                     Show_Display@display:
   736                           	callstack 0
   737                           
   738                           ; 32 bytes @ 0xA
   739  00000B                     	ds	1
   740  00000C                     ___fltol@exp1:
   741                           	callstack 0
   742  00000C                     ___xxtofl@exp:
   743                           	callstack 0
   744  00000C                     checkCRC@j:
   745                           	callstack 0
   746  00000C                     ___lwmod@divisor:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0xB
   750  00000C                     	ds	1
   751  00000D                     generateCRC@crcHigh:
   752                           	callstack 0
   753  00000D                     ___xxtofl@arg:
   754                           	callstack 0
   755                           
   756                           ; 4 bytes @ 0xC
   757  00000D                     	ds	1
   758  00000E                     ___lwmod@counter:
   759                           	callstack 0
   760  00000E                     checkCRC@crc:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0xD
   764  00000E                     	ds	1
   765  00000F                     ?_sprintf:
   766                           	callstack 0
   767  00000F                     ___fladd@signs:
   768                           	callstack 0
   769  00000F                     generateCRC@i:
   770                           	callstack 0
   771  00000F                     sprintf@sp:
   772                           	callstack 0
   773                           
   774                           ; 2 bytes @ 0xE
   775  00000F                     	ds	1
   776  000010                     ___fladd@aexp:
   777                           	callstack 0
   778  000010                     checkCRC@i:
   779                           	callstack 0
   780                           
   781                           ; 2 bytes @ 0xF
   782  000010                     	ds	1
   783  000011                     ?___fldiv:
   784                           	callstack 0
   785  000011                     ___fladd@bexp:
   786                           	callstack 0
   787  000011                     generateCRC@j:
   788                           	callstack 0
   789  000011                     sprintf@f:
   790                           	callstack 0
   791  000011                     ___fldiv@b:
   792                           	callstack 0
   793                           
   794                           ; 4 bytes @ 0x10
   795  000011                     	ds	1
   796  000012                     ___fladd@grs:
   797                           	callstack 0
   798                           
   799                           ; 1 bytes @ 0x11
   800  000012                     	ds	1
   801  000013                     generateCRC@crc:
   802                           	callstack 0
   803  000013                     ___flge@ff1:
   804                           	callstack 0
   805                           
   806                           ; 4 bytes @ 0x12
   807  000013                     	ds	2
   808  000015                     ??_readCoil:
   809  000015                     ??_readInputCoil:
   810  000015                     ??_readReg:
   811  000015                     ??_readInputReg:
   812  000015                     writeReg@wr_AddressLow:
   813                           	callstack 0
   814  000015                     writeCoil@wc_AddressLow:
   815                           	callstack 0
   816  000015                     ___fldiv@a:
   817                           	callstack 0
   818                           
   819                           ; 4 bytes @ 0x14
   820  000015                     	ds	2
   821  000017                     readReg@crc:
   822                           	callstack 0
   823  000017                     readInputReg@crc:
   824                           	callstack 0
   825  000017                     writeReg@wr_AddressHigh:
   826                           	callstack 0
   827  000017                     writeCoil@wc_AddressHigh:
   828                           	callstack 0
   829  000017                     ___flge@ff2:
   830                           	callstack 0
   831                           
   832                           ; 4 bytes @ 0x16
   833  000017                     	ds	2
   834  000019                     ??___fldiv:
   835  000019                     readReg@rr_Address:
   836                           	callstack 0
   837  000019                     readInputReg@rr_Address:
   838                           	callstack 0
   839  000019                     writeReg@wr_valToWriteLow:
   840                           	callstack 0
   841  000019                     readCoil@rc_Address:
   842                           	callstack 0
   843  000019                     readInputCoil@rc_Address:
   844                           	callstack 0
   845  000019                     writeCoil@wc_valToWriteLow:
   846                           	callstack 0
   847                           
   848                           ; 2 bytes @ 0x18
   849  000019                     	ds	2
   850  00001B                     ??_sprintf:
   851  00001B                     ??___flge:
   852  00001B                     readReg@rr_numRegs:
   853                           	callstack 0
   854  00001B                     readInputReg@rr_numRegs:
   855                           	callstack 0
   856  00001B                     writeReg@wr_valToWriteHigh:
   857                           	callstack 0
   858  00001B                     readCoil@crc:
   859                           	callstack 0
   860  00001B                     readInputCoil@crc:
   861                           	callstack 0
   862  00001B                     writeCoil@wc_valToWriteHigh:
   863                           	callstack 0
   864                           
   865                           ; 2 bytes @ 0x1A
   866  00001B                     	ds	2
   867  00001D                     readCoil@remainder:
   868                           	callstack 0
   869  00001D                     readInputCoil@remainder:
   870                           	callstack 0
   871  00001D                     readReg@i:
   872                           	callstack 0
   873  00001D                     readInputReg@i:
   874                           	callstack 0
   875  00001D                     writeReg@wr_Address:
   876                           	callstack 0
   877  00001D                     writeCoil@wc_valToWrite:
   878                           	callstack 0
   879  00001D                     ___fldiv@rem:
   880                           	callstack 0
   881                           
   882                           ; 4 bytes @ 0x1C
   883  00001D                     	ds	1
   884  00001E                     readCoil@rc_numCoils:
   885                           	callstack 0
   886  00001E                     readInputCoil@rc_numCoils:
   887                           	callstack 0
   888                           
   889                           ; 2 bytes @ 0x1D
   890  00001E                     	ds	1
   891  00001F                     Automatic_Mode@isFull:
   892                           	callstack 0
   893  00001F                     readReg@j:
   894                           	callstack 0
   895  00001F                     readInputReg@j:
   896                           	callstack 0
   897  00001F                     writeReg@wr_valToWrite:
   898                           	callstack 0
   899  00001F                     writeCoil@crc:
   900                           	callstack 0
   901  00001F                     sprintf@cp:
   902                           	callstack 0
   903                           
   904                           ; 2 bytes @ 0x1E
   905  00001F                     	ds	1
   906  000020                     readCoil@howManyBytes:
   907                           	callstack 0
   908  000020                     readInputCoil@howManyBytes:
   909                           	callstack 0
   910                           
   911                           ; 1 bytes @ 0x1F
   912  000020                     	ds	1
   913  000021                     readCoil@l:
   914                           	callstack 0
   915  000021                     readInputCoil@l:
   916                           	callstack 0
   917  000021                     sprintf@idx:
   918                           	callstack 0
   919  000021                     ___fldiv@sign:
   920                           	callstack 0
   921  000021                     writeReg@crc:
   922                           	callstack 0
   923  000021                     writeCoil@wc_Address:
   924                           	callstack 0
   925                           
   926                           ; 2 bytes @ 0x20
   927  000021                     	ds	1
   928  000022                     readCoil@lsb:
   929                           	callstack 0
   930  000022                     readInputCoil@lsb:
   931                           	callstack 0
   932  000022                     sprintf@ap:
   933                           	callstack 0
   934  000022                     ___fldiv@new_exp:
   935                           	callstack 0
   936                           
   937                           ; 2 bytes @ 0x21
   938  000022                     	ds	1
   939  000023                     readCoil@i:
   940                           	callstack 0
   941  000023                     readInputCoil@i:
   942                           	callstack 0
   943  000023                     writeReg@i:
   944                           	callstack 0
   945  000023                     writeCoil@i:
   946                           	callstack 0
   947                           
   948                           ; 2 bytes @ 0x22
   949  000023                     	ds	1
   950  000024                     readCoil@j:
   951                           	callstack 0
   952  000024                     readInputCoil@j:
   953                           	callstack 0
   954  000024                     sprintf@len:
   955                           	callstack 0
   956  000024                     ___fldiv@grs:
   957                           	callstack 0
   958                           
   959                           ; 4 bytes @ 0x23
   960  000024                     	ds	1
   961  000025                     readCoil@k:
   962                           	callstack 0
   963  000025                     readInputCoil@k:
   964                           	callstack 0
   965                           
   966                           ; 1 bytes @ 0x24
   967  000025                     	ds	1
   968  000026                     sprintf@prec:
   969                           	callstack 0
   970                           
   971                           ; 1 bytes @ 0x25
   972  000026                     	ds	1
   973  000027                     sprintf@val:
   974                           	callstack 0
   975                           
   976                           ; 2 bytes @ 0x26
   977  000027                     	ds	1
   978  000028                     ___fldiv@bexp:
   979                           	callstack 0
   980                           
   981                           ; 1 bytes @ 0x27
   982  000028                     	ds	1
   983  000029                     sprintf@flag:
   984                           	callstack 0
   985  000029                     ___fldiv@aexp:
   986                           	callstack 0
   987                           
   988                           ; 1 bytes @ 0x28
   989  000029                     	ds	1
   990  00002A                     Read_Level@adcTank1:
   991                           	callstack 0
   992  00002A                     sprintf@width:
   993                           	callstack 0
   994                           
   995                           ; 2 bytes @ 0x29
   996  00002A                     	ds	1
   997  00002B                     
   998                           ; 1 bytes @ 0x2A
   999  00002B                     	ds	1
  1000  00002C                     sprintf@c:
  1001                           	callstack 0
  1002  00002C                     Read_Level@adcTank2:
  1003                           	callstack 0
  1004                           
  1005                           ; 2 bytes @ 0x2B
  1006  00002C                     	ds	1
  1007  00002D                     _Set_Display_Message$768:
  1008                           	callstack 0
  1009                           
  1010                           ; 2 bytes @ 0x2C
  1011  00002D                     	ds	2
  1012  00002F                     Debounce@port:
  1013                           	callstack 0
  1014                           
  1015                           ; 2 bytes @ 0x2E
  1016  00002F                     	ds	2
  1017  000031                     Debounce@pin:
  1018                           	callstack 0
  1019                           
  1020                           ; 2 bytes @ 0x30
  1021  000031                     	ds	2
  1022  000033                     Debounce@bt_press:
  1023                           	callstack 0
  1024                           
  1025                           ; 2 bytes @ 0x32
  1026  000033                     	ds	2
  1027  000035                     Debounce@filter:
  1028                           	callstack 0
  1029                           
  1030                           ; 2 bytes @ 0x34
  1031  000035                     	ds	2
  1032  000037                     Debounce@ptr_f:
  1033                           	callstack 0
  1034                           
  1035                           ; 2 bytes @ 0x36
  1036  000037                     	ds	2
  1037  000039                     
  1038                           ; 1 bytes @ 0x38
  1039  000039                     	ds	2
  1040  00003B                     
  1041                           ; 1 bytes @ 0x3A
  1042 ;;
  1043 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1044 ;;
  1045 ;; *************** function _main *****************
  1046 ;; Defined at:
  1047 ;;		line 105 in file "main.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;		None
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;		None
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1061 ;;      Params:         0       0       0       0       0       0       0
  1062 ;;      Locals:         0       0       0       0       0       0       0
  1063 ;;      Temps:          0       0       0       0       0       0       0
  1064 ;;      Totals:         0       0       0       0       0       0       0
  1065 ;;Total ram usage:        0 bytes
  1066 ;; Hardware stack levels required when called: 9
  1067 ;; This function calls:
  1068 ;;		_Automatic_Mode
  1069 ;;		_ConfigInterrupts
  1070 ;;		_Configure_Registers
  1071 ;;		_Debounce
  1072 ;;		_Initialize_Tanks
  1073 ;;		_Lcd_Cmd
  1074 ;;		_Lcd_Init
  1075 ;;		_Manual_Mode
  1076 ;;		_OpnUSART
  1077 ;;		_Read_Level
  1078 ;;		_Receive_Message
  1079 ;;		_Refresh_Screen
  1080 ;;		_adc_init
  1081 ;;		_decodeIt
  1082 ;; This function is called by:
  1083 ;;		Startup code after reset
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text0
  1088  002AF2                     __ptext0:
  1089                           	callstack 0
  1090  002AF2                     _main:
  1091                           	callstack 22
  1092  002AF2                     
  1093                           ;main.c: 106: Configure_Registers();
  1094  002AF2  EC9C  F01A         	call	_Configure_Registers	;wreg free
  1095                           
  1096                           ;main.c: 107: adc_init();
  1097  002AF6  ECFE  F01B         	call	_adc_init	;wreg free
  1098  002AFA                     
  1099                           ;main.c: 108: Lcd_Init();
  1100  002AFA  ECDE  F012         	call	_Lcd_Init	;wreg free
  1101  002AFE                     
  1102                           ;main.c: 109: Lcd_Cmd(12);
  1103  002AFE  0E0C               	movlw	12
  1104  002B00  ECB9  F011         	call	_Lcd_Cmd
  1105                           
  1106                           ;main.c: 110: Initialize_Tanks();
  1107  002B04  EC3B  F01A         	call	_Initialize_Tanks	;wreg free
  1108  002B08                     
  1109                           ;main.c: 113: OpnUSART();
  1110  002B08  ECD2  F019         	call	_OpnUSART	;wreg free
  1111  002B0C                     
  1112                           ;main.c: 114: ConfigInterrupts();
  1113  002B0C  EC0B  F01C         	call	_ConfigInterrupts	;wreg free
  1114  002B10                     l201:
  1115  002B10  0004               	clrwdt		;# 
  1116  002B12                     
  1117                           ;main.c: 120: last_pump_status_received = holdingReg[0];
  1118  002B12  C080  F055         	movff	_holdingReg,_last_pump_status_received	;volatile
  1119  002B16  C081  F056         	movff	_holdingReg+1,_last_pump_status_received+1	;volatile
  1120  002B1A                     
  1121                           ;main.c: 121: last_operation_mode_received = holdingReg[1];
  1122  002B1A  C082  F053         	movff	_holdingReg+2,_last_operation_mode_received	;volatile
  1123  002B1E  C083  F054         	movff	_holdingReg+3,_last_operation_mode_received+1	;volatile
  1124  002B22                     
  1125                           ;main.c: 123: if (modbusMessage)
  1126  002B22  505E               	movf	_modbusMessage^0,w,c	;volatile
  1127  002B24  B4D8               	btfsc	status,2,c
  1128  002B26  EF97  F015         	goto	u4351
  1129  002B2A  EF99  F015         	goto	u4350
  1130  002B2E                     u4351:
  1131  002B2E  EF9D  F015         	goto	l4745
  1132  002B32                     u4350:
  1133  002B32                     
  1134                           ;main.c: 124: {;main.c: 125: decodeIt();
  1135  002B32  ECBC  F017         	call	_decodeIt	;wreg free
  1136  002B36                     
  1137                           ;main.c: 126: Receive_Message();
  1138  002B36  ECCE  F018         	call	_Receive_Message	;wreg free
  1139  002B3A                     l4745:
  1140                           
  1141                           ;main.c: 127: };main.c: 129: Read_Level();
  1142  002B3A  EC71  F016         	call	_Read_Level	;wreg free
  1143  002B3E                     
  1144                           ;main.c: 131: Debounce(PORTB, 0, &bt_operation_mode_press, &filter_bt_operation_mode, Ch
      +                          ange_Mode);
  1145  002B3E  CF81 F02F          	movff	3969,Debounce@port	;volatile
  1146  002B42  6A30               	clrf	(Debounce@port+1)^0,c
  1147  002B44  0E00               	movlw	0
  1148  002B46  6E32               	movwf	(Debounce@pin+1)^0,c
  1149  002B48  0E00               	movlw	0
  1150  002B4A  6E31               	movwf	Debounce@pin^0,c
  1151  002B4C  0E68               	movlw	low _bt_operation_mode_press
  1152  002B4E  6E33               	movwf	Debounce@bt_press^0,c
  1153  002B50  0E00               	movlw	high _bt_operation_mode_press
  1154  002B52  6E34               	movwf	(Debounce@bt_press+1)^0,c
  1155  002B54  0E72               	movlw	low _filter_bt_operation_mode
  1156  002B56  6E35               	movwf	Debounce@filter^0,c
  1157  002B58  0E00               	movlw	high _filter_bt_operation_mode
  1158  002B5A  6E36               	movwf	(Debounce@filter+1)^0,c
  1159  002B5C  0E82               	movlw	low _Change_Mode
  1160  002B5E  6E37               	movwf	Debounce@ptr_f^0,c
  1161  002B60  0E35               	movlw	high _Change_Mode
  1162  002B62  6E38               	movwf	(Debounce@ptr_f+1)^0,c
  1163  002B64  EC20  F018         	call	_Debounce	;wreg free
  1164  002B68                     
  1165                           ;main.c: 133: if (operation == AUTOMATIC) Automatic_Mode(); else Manual_Mode();
  1166  002B68  505C               	movf	_operation^0,w,c	;volatile
  1167  002B6A  A4D8               	btfss	status,2,c
  1168  002B6C  EFBA  F015         	goto	u4361
  1169  002B70  EFBC  F015         	goto	u4360
  1170  002B74                     u4361:
  1171  002B74  EFC0  F015         	goto	l4753
  1172  002B78                     u4360:
  1173  002B78  EC6C  F013         	call	_Automatic_Mode	;wreg free
  1174  002B7C  EFC2  F015         	goto	l204
  1175  002B80                     l4753:
  1176  002B80  EC7F  F01B         	call	_Manual_Mode	;wreg free
  1177  002B84                     l204:
  1178                           
  1179                           ;main.c: 135: Debounce(PORTB, 3, &bt_min_lv1_incr_press, &filter_bt_min_lv1_incr, Min_Lv
      +                          1_Incr);
  1180  002B84  CF81 F02F          	movff	3969,Debounce@port	;volatile
  1181  002B88  6A30               	clrf	(Debounce@port+1)^0,c
  1182  002B8A  0E00               	movlw	0
  1183  002B8C  6E32               	movwf	(Debounce@pin+1)^0,c
  1184  002B8E  0E03               	movlw	3
  1185  002B90  6E31               	movwf	Debounce@pin^0,c
  1186  002B92  0E64               	movlw	low _bt_min_lv1_incr_press
  1187  002B94  6E33               	movwf	Debounce@bt_press^0,c
  1188  002B96  0E00               	movlw	high _bt_min_lv1_incr_press
  1189  002B98  6E34               	movwf	(Debounce@bt_press+1)^0,c
  1190  002B9A  0E6E               	movlw	low _filter_bt_min_lv1_incr
  1191  002B9C  6E35               	movwf	Debounce@filter^0,c
  1192  002B9E  0E00               	movlw	high _filter_bt_min_lv1_incr
  1193  002BA0  6E36               	movwf	(Debounce@filter+1)^0,c
  1194  002BA2  0EA4               	movlw	low _Min_Lv1_Incr
  1195  002BA4  6E37               	movwf	Debounce@ptr_f^0,c
  1196  002BA6  0E2E               	movlw	high _Min_Lv1_Incr
  1197  002BA8  6E38               	movwf	(Debounce@ptr_f+1)^0,c
  1198  002BAA  EC20  F018         	call	_Debounce	;wreg free
  1199                           
  1200                           ;main.c: 136: Debounce(PORTB, 4, &bt_min_lv2_incr_press, &filter_bt_min_lv2_incr, Min_Lv
      +                          2_Incr);
  1201  002BAE  CF81 F02F          	movff	3969,Debounce@port	;volatile
  1202  002BB2  6A30               	clrf	(Debounce@port+1)^0,c
  1203  002BB4  0E00               	movlw	0
  1204  002BB6  6E32               	movwf	(Debounce@pin+1)^0,c
  1205  002BB8  0E04               	movlw	4
  1206  002BBA  6E31               	movwf	Debounce@pin^0,c
  1207  002BBC  0E62               	movlw	low _bt_min_lv2_incr_press
  1208  002BBE  6E33               	movwf	Debounce@bt_press^0,c
  1209  002BC0  0E00               	movlw	high _bt_min_lv2_incr_press
  1210  002BC2  6E34               	movwf	(Debounce@bt_press+1)^0,c
  1211  002BC4  0E6C               	movlw	low _filter_bt_min_lv2_incr
  1212  002BC6  6E35               	movwf	Debounce@filter^0,c
  1213  002BC8  0E00               	movlw	high _filter_bt_min_lv2_incr
  1214  002BCA  6E36               	movwf	(Debounce@filter+1)^0,c
  1215  002BCC  0ED0               	movlw	low _Min_Lv2_Incr
  1216  002BCE  6E37               	movwf	Debounce@ptr_f^0,c
  1217  002BD0  0E2D               	movlw	high _Min_Lv2_Incr
  1218  002BD2  6E38               	movwf	(Debounce@ptr_f+1)^0,c
  1219  002BD4  EC20  F018         	call	_Debounce	;wreg free
  1220  002BD8                     
  1221                           ;main.c: 138: if (refresh_display) Refresh_Screen();
  1222  002BD8  A074               	btfss	(_refresh_display/(0+8))^0,_refresh_display& (0+7),c	;volatile
  1223  002BDA  EFF1  F015         	goto	u4371
  1224  002BDE  EFF3  F015         	goto	u4370
  1225  002BE2                     u4371:
  1226  002BE2  EF88  F015         	goto	l201
  1227  002BE6                     u4370:
  1228  002BE6  ECCF  F01B         	call	_Refresh_Screen	;wreg free
  1229  002BEA  EF88  F015         	goto	l201
  1230  002BEE  EF07  F000         	goto	start
  1231  002BF2                     __end_of_main:
  1232                           	callstack 0
  1233                           
  1234 ;; *************** function _decodeIt *****************
  1235 ;; Defined at:
  1236 ;;		line 47 in file "modbus.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;		None
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1250 ;;      Params:         0       0       0       0       0       0       0
  1251 ;;      Locals:         0       0       0       0       0       0       0
  1252 ;;      Temps:          0       0       0       0       0       0       0
  1253 ;;      Totals:         0       0       0       0       0       0       0
  1254 ;;Total ram usage:        0 bytes
  1255 ;; Hardware stack levels used: 1
  1256 ;; Hardware stack levels required when called: 6
  1257 ;; This function calls:
  1258 ;;		_checkCRC
  1259 ;;		_readCoil
  1260 ;;		_readInputCoil
  1261 ;;		_readInputReg
  1262 ;;		_readReg
  1263 ;;		_writeCoil
  1264 ;;		_writeReg
  1265 ;; This function is called by:
  1266 ;;		_main
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text1
  1271  002F78                     __ptext1:
  1272                           	callstack 0
  1273  002F78                     _decodeIt:
  1274                           	callstack 24
  1275  002F78                     
  1276                           ;modbus.c: 49: if(received[0] == 1){
  1277  002F78  0101               	movlb	1	; () banked
  1278  002F7A  0500               	decf	_received& (0+255),w,b	;volatile
  1279  002F7C  A4D8               	btfss	status,2,c
  1280  002F7E  EFC3  F017         	goto	u4201
  1281  002F82  EFC5  F017         	goto	u4200
  1282  002F86                     u4201:
  1283  002F86  EF1D  F018         	goto	l4681
  1284  002F8A                     u4200:
  1285  002F8A                     
  1286                           ; BSR set to: 1
  1287                           ;modbus.c: 50: if(checkCRC()){
  1288  002F8A  EC24  F011         	call	_checkCRC	;wreg free
  1289  002F8E  0900               	iorlw	0
  1290  002F90  B4D8               	btfsc	status,2,c
  1291  002F92  EFCD  F017         	goto	u4211
  1292  002F96  EFCF  F017         	goto	u4210
  1293  002F9A                     u4211:
  1294  002F9A  EF1D  F018         	goto	l4681
  1295  002F9E                     u4210:
  1296  002F9E                     
  1297                           ;modbus.c: 51: if(received[1] == 0x01){
  1298  002F9E  0101               	movlb	1	; () banked
  1299  002FA0  0501               	decf	(_received+1)& (0+255),w,b	;volatile
  1300  002FA2  A4D8               	btfss	status,2,c
  1301  002FA4  EFD6  F017         	goto	u4221
  1302  002FA8  EFD8  F017         	goto	u4220
  1303  002FAC                     u4221:
  1304  002FAC  EFDC  F017         	goto	l4661
  1305  002FB0                     u4220:
  1306  002FB0                     
  1307                           ; BSR set to: 1
  1308                           ;modbus.c: 52: readCoil();
  1309  002FB0  EC3C  F00B         	call	_readCoil	;wreg free
  1310                           
  1311                           ;modbus.c: 53: }
  1312  002FB4  EF1D  F018         	goto	l4681
  1313  002FB8                     l4661:
  1314                           
  1315                           ; BSR set to: 1
  1316                           ;modbus.c: 54: else if(received[1] == 0x02){
  1317  002FB8  0E02               	movlw	2
  1318  002FBA  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1319  002FBC  A4D8               	btfss	status,2,c
  1320  002FBE  EFE3  F017         	goto	u4231
  1321  002FC2  EFE5  F017         	goto	u4230
  1322  002FC6                     u4231:
  1323  002FC6  EFE9  F017         	goto	l4665
  1324  002FCA                     u4230:
  1325  002FCA                     
  1326                           ; BSR set to: 1
  1327                           ;modbus.c: 55: readInputCoil();
  1328  002FCA  EC27  F00A         	call	_readInputCoil	;wreg free
  1329                           
  1330                           ;modbus.c: 56: }
  1331  002FCE  EF1D  F018         	goto	l4681
  1332  002FD2                     l4665:
  1333                           
  1334                           ; BSR set to: 1
  1335                           ;modbus.c: 57: else if(received[1] == 0x03){
  1336  002FD2  0E03               	movlw	3
  1337  002FD4  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1338  002FD6  A4D8               	btfss	status,2,c
  1339  002FD8  EFF0  F017         	goto	u4241
  1340  002FDC  EFF2  F017         	goto	u4240
  1341  002FE0                     u4241:
  1342  002FE0  EFF6  F017         	goto	l4669
  1343  002FE4                     u4240:
  1344  002FE4                     
  1345                           ; BSR set to: 1
  1346                           ;modbus.c: 58: readReg();
  1347  002FE4  EC51  F00C         	call	_readReg	;wreg free
  1348                           
  1349                           ;modbus.c: 59: }
  1350  002FE8  EF1D  F018         	goto	l4681
  1351  002FEC                     l4669:
  1352                           
  1353                           ; BSR set to: 1
  1354                           ;modbus.c: 60: else if(received[1] == 0x04){
  1355  002FEC  0E04               	movlw	4
  1356  002FEE  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1357  002FF0  A4D8               	btfss	status,2,c
  1358  002FF2  EFFD  F017         	goto	u4251
  1359  002FF6  EFFF  F017         	goto	u4250
  1360  002FFA                     u4251:
  1361  002FFA  EF03  F018         	goto	l4673
  1362  002FFE                     u4250:
  1363  002FFE                     
  1364                           ; BSR set to: 1
  1365                           ;modbus.c: 61: readInputReg();
  1366  002FFE  EC32  F00D         	call	_readInputReg	;wreg free
  1367                           
  1368                           ;modbus.c: 62: }
  1369  003002  EF1D  F018         	goto	l4681
  1370  003006                     l4673:
  1371                           
  1372                           ; BSR set to: 1
  1373                           ;modbus.c: 63: else if(received[1] == 0x05){
  1374  003006  0E05               	movlw	5
  1375  003008  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1376  00300A  A4D8               	btfss	status,2,c
  1377  00300C  EF0A  F018         	goto	u4261
  1378  003010  EF0C  F018         	goto	u4260
  1379  003014                     u4261:
  1380  003014  EF10  F018         	goto	l4677
  1381  003018                     u4260:
  1382  003018                     
  1383                           ; BSR set to: 1
  1384                           ;modbus.c: 64: writeCoil();
  1385  003018  EC4E  F012         	call	_writeCoil	;wreg free
  1386                           
  1387                           ;modbus.c: 65: }
  1388  00301C  EF1D  F018         	goto	l4681
  1389  003020                     l4677:
  1390                           
  1391                           ; BSR set to: 1
  1392                           ;modbus.c: 66: else if(received[1] == 0x06){
  1393  003020  0E06               	movlw	6
  1394  003022  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1395  003024  A4D8               	btfss	status,2,c
  1396  003026  EF17  F018         	goto	u4271
  1397  00302A  EF19  F018         	goto	u4270
  1398  00302E                     u4271:
  1399  00302E  EF1D  F018         	goto	l417
  1400  003032                     u4270:
  1401  003032                     
  1402                           ; BSR set to: 1
  1403                           ;modbus.c: 67: writeReg();
  1404  003032  EC75  F014         	call	_writeReg	;wreg free
  1405  003036  EF1D  F018         	goto	l4681
  1406  00303A                     l417:
  1407  00303A                     l4681:
  1408                           
  1409                           ;modbus.c: 68: };modbus.c: 69: };modbus.c: 70: };modbus.c: 71: modbusMessage = 0;
  1410  00303A  0E00               	movlw	0
  1411  00303C  6E5E               	movwf	_modbusMessage^0,c	;volatile
  1412  00303E  0012               	return		;funcret
  1413  003040                     __end_of_decodeIt:
  1414                           	callstack 0
  1415                           
  1416 ;; *************** function _writeReg *****************
  1417 ;; Defined at:
  1418 ;;		line 182 in file "modbus.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;		None
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;  i               2   34[COMRAM] unsigned int 
  1423 ;;  crc             2   32[COMRAM] unsigned int 
  1424 ;;  wr_valToWrit    2   30[COMRAM] unsigned int 
  1425 ;;  wr_Address      2   28[COMRAM] unsigned int 
  1426 ;;  wr_valToWrit    2   26[COMRAM] unsigned int 
  1427 ;;  wr_valToWrit    2   24[COMRAM] unsigned int 
  1428 ;;  wr_AddressHi    2   22[COMRAM] unsigned int 
  1429 ;;  wr_AddressLo    2   20[COMRAM] unsigned int 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1439 ;;      Params:         0       0       0       0       0       0       0
  1440 ;;      Locals:        16       0       0       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0
  1442 ;;      Totals:        16       0       0       0       0       0       0
  1443 ;;Total ram usage:       16 bytes
  1444 ;; Hardware stack levels used: 1
  1445 ;; Hardware stack levels required when called: 5
  1446 ;; This function calls:
  1447 ;;		_clearResponse
  1448 ;;		_generateCRC
  1449 ;; This function is called by:
  1450 ;;		_decodeIt
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text2
  1455  0028EA                     __ptext2:
  1456                           	callstack 0
  1457  0028EA                     _writeReg:
  1458                           	callstack 24
  1459  0028EA                     
  1460                           ;modbus.c: 188: unsigned int wr_AddressHigh = 0;
  1461  0028EA  0E00               	movlw	0
  1462  0028EC  6E18               	movwf	(writeReg@wr_AddressHigh+1)^0,c
  1463  0028EE  0E00               	movlw	0
  1464  0028F0  6E17               	movwf	writeReg@wr_AddressHigh^0,c
  1465                           
  1466                           ;modbus.c: 189: unsigned int wr_Address = 0;
  1467  0028F2  0E00               	movlw	0
  1468  0028F4  6E1E               	movwf	(writeReg@wr_Address+1)^0,c
  1469  0028F6  0E00               	movlw	0
  1470  0028F8  6E1D               	movwf	writeReg@wr_Address^0,c
  1471                           
  1472                           ;modbus.c: 191: unsigned int wr_valToWrite = 0;
  1473  0028FA  0E00               	movlw	0
  1474  0028FC  6E20               	movwf	(writeReg@wr_valToWrite+1)^0,c
  1475  0028FE  0E00               	movlw	0
  1476  002900  6E1F               	movwf	writeReg@wr_valToWrite^0,c
  1477                           
  1478                           ;modbus.c: 192: unsigned int wr_valToWriteLow = 0;
  1479  002902  0E00               	movlw	0
  1480  002904  6E1A               	movwf	(writeReg@wr_valToWriteLow+1)^0,c
  1481  002906  0E00               	movlw	0
  1482  002908  6E19               	movwf	writeReg@wr_valToWriteLow^0,c
  1483                           
  1484                           ;modbus.c: 193: unsigned int wr_valToWriteHigh = 0;
  1485  00290A  0E00               	movlw	0
  1486  00290C  6E1C               	movwf	(writeReg@wr_valToWriteHigh+1)^0,c
  1487  00290E  0E00               	movlw	0
  1488  002910  6E1B               	movwf	writeReg@wr_valToWriteHigh^0,c
  1489                           
  1490                           ;modbus.c: 195: unsigned int crc = 0;
  1491  002912  0E00               	movlw	0
  1492  002914  6E22               	movwf	(writeReg@crc+1)^0,c
  1493  002916  0E00               	movlw	0
  1494  002918  6E21               	movwf	writeReg@crc^0,c
  1495                           
  1496                           ;modbus.c: 196: unsigned int i = 0;
  1497  00291A  0E00               	movlw	0
  1498  00291C  6E24               	movwf	(writeReg@i+1)^0,c
  1499  00291E  0E00               	movlw	0
  1500  002920  6E23               	movwf	writeReg@i^0,c
  1501  002922                     
  1502                           ;modbus.c: 199: wr_Address = received[2];
  1503  002922  C102  F01D         	movff	_received+2,writeReg@wr_Address	;volatile
  1504  002926  6A1E               	clrf	(writeReg@wr_Address+1)^0,c
  1505                           
  1506                           ;modbus.c: 200: wr_Address <<= 8;
  1507  002928  501D               	movf	writeReg@wr_Address^0,w,c
  1508  00292A  6E1E               	movwf	(writeReg@wr_Address+1)^0,c
  1509  00292C  6A1D               	clrf	writeReg@wr_Address^0,c
  1510  00292E                     
  1511                           ;modbus.c: 201: wr_Address |= received[3];
  1512  00292E  0101               	movlb	1	; () banked
  1513  002930  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  1514  002932  121D               	iorwf	writeReg@wr_Address^0,f,c
  1515  002934                     
  1516                           ; BSR set to: 1
  1517                           ;modbus.c: 203: wr_AddressLow = received[3];
  1518  002934  C103  F015         	movff	_received+3,writeReg@wr_AddressLow	;volatile
  1519  002938  6A16               	clrf	(writeReg@wr_AddressLow+1)^0,c
  1520  00293A                     
  1521                           ; BSR set to: 1
  1522                           ;modbus.c: 204: wr_AddressHigh = received[2];
  1523  00293A  C102  F017         	movff	_received+2,writeReg@wr_AddressHigh	;volatile
  1524  00293E  6A18               	clrf	(writeReg@wr_AddressHigh+1)^0,c
  1525  002940                     
  1526                           ; BSR set to: 1
  1527                           ;modbus.c: 207: wr_valToWrite = received[4];
  1528  002940  C104  F01F         	movff	_received+4,writeReg@wr_valToWrite	;volatile
  1529  002944  6A20               	clrf	(writeReg@wr_valToWrite+1)^0,c
  1530  002946                     
  1531                           ; BSR set to: 1
  1532                           ;modbus.c: 208: wr_valToWrite <<= 8;
  1533  002946  501F               	movf	writeReg@wr_valToWrite^0,w,c
  1534  002948  6E20               	movwf	(writeReg@wr_valToWrite+1)^0,c
  1535  00294A  6A1F               	clrf	writeReg@wr_valToWrite^0,c
  1536                           
  1537                           ;modbus.c: 209: wr_valToWrite |= received[5];
  1538  00294C  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  1539  00294E  121F               	iorwf	writeReg@wr_valToWrite^0,f,c
  1540  002950                     
  1541                           ; BSR set to: 1
  1542                           ;modbus.c: 211: wr_valToWriteLow = received[5];
  1543  002950  C105  F019         	movff	_received+5,writeReg@wr_valToWriteLow	;volatile
  1544  002954  6A1A               	clrf	(writeReg@wr_valToWriteLow+1)^0,c
  1545  002956                     
  1546                           ; BSR set to: 1
  1547                           ;modbus.c: 212: wr_valToWriteHigh = received[4];
  1548  002956  C104  F01B         	movff	_received+4,writeReg@wr_valToWriteHigh	;volatile
  1549  00295A  6A1C               	clrf	(writeReg@wr_valToWriteHigh+1)^0,c
  1550  00295C                     
  1551                           ; BSR set to: 1
  1552                           ;modbus.c: 214: holdingReg[wr_Address] = wr_valToWrite;
  1553  00295C  90D8               	bcf	status,0,c
  1554  00295E  341D               	rlcf	writeReg@wr_Address^0,w,c
  1555  002960  6ED9               	movwf	fsr2l,c
  1556  002962  341E               	rlcf	(writeReg@wr_Address+1)^0,w,c
  1557  002964  6EDA               	movwf	fsr2h,c
  1558  002966  0E80               	movlw	low _holdingReg
  1559  002968  26D9               	addwf	fsr2l,f,c
  1560  00296A  0E00               	movlw	high _holdingReg
  1561  00296C  22DA               	addwfc	fsr2h,f,c
  1562  00296E  C01F  FFDE         	movff	writeReg@wr_valToWrite,postinc2
  1563  002972  C020  FFDD         	movff	writeReg@wr_valToWrite+1,postdec2
  1564  002976                     
  1565                           ; BSR set to: 1
  1566                           ;modbus.c: 216: response[0] = 1;
  1567  002976  0E01               	movlw	1
  1568  002978  6F7D               	movwf	_response& (0+255),b	;volatile
  1569  00297A                     
  1570                           ; BSR set to: 1
  1571                           ;modbus.c: 217: response[1] = 0x06;
  1572  00297A  0E06               	movlw	6
  1573  00297C  6F7E               	movwf	(_response+1)& (0+255),b	;volatile
  1574  00297E                     
  1575                           ; BSR set to: 1
  1576                           ;modbus.c: 218: response[3] = wr_AddressLow;
  1577  00297E  C015  F180         	movff	writeReg@wr_AddressLow,_response+3	;volatile
  1578  002982                     
  1579                           ; BSR set to: 1
  1580                           ;modbus.c: 219: response[2] = wr_AddressHigh;
  1581  002982  C017  F17F         	movff	writeReg@wr_AddressHigh,_response+2	;volatile
  1582  002986                     
  1583                           ; BSR set to: 1
  1584                           ;modbus.c: 222: response[4] = wr_valToWriteHigh;
  1585  002986  C01B  F181         	movff	writeReg@wr_valToWriteHigh,_response+4	;volatile
  1586  00298A                     
  1587                           ; BSR set to: 1
  1588                           ;modbus.c: 223: response[5] = wr_valToWriteLow;
  1589  00298A  C019  F182         	movff	writeReg@wr_valToWriteLow,_response+5	;volatile
  1590  00298E                     
  1591                           ; BSR set to: 1
  1592                           ;modbus.c: 225: crc = generateCRC(8);
  1593  00298E  0E08               	movlw	8
  1594  002990  ECF9  F015         	call	_generateCRC
  1595  002994  C003  F021         	movff	?_generateCRC,writeReg@crc
  1596  002998  C004  F022         	movff	?_generateCRC+1,writeReg@crc+1
  1597  00299C                     
  1598                           ;modbus.c: 227: response[6] = crc >> 8;
  1599  00299C  5022               	movf	(writeReg@crc+1)^0,w,c
  1600  00299E  0101               	movlb	1	; () banked
  1601  0029A0  6F83               	movwf	(_response+6)& (0+255),b	;volatile
  1602  0029A2                     
  1603                           ; BSR set to: 1
  1604                           ;modbus.c: 228: response[7] = crc;
  1605  0029A2  C021  F184         	movff	writeReg@crc,_response+7	;volatile
  1606  0029A6                     
  1607                           ; BSR set to: 1
  1608                           ;modbus.c: 230: LATBbits.LATB7 = 1;
  1609  0029A6  8E8A               	bsf	138,7,c	;volatile
  1610  0029A8                     
  1611                           ; BSR set to: 1
  1612                           ;modbus.c: 231: for(i=0;i!=9;i++){
  1613  0029A8  0E00               	movlw	0
  1614  0029AA  6E24               	movwf	(writeReg@i+1)^0,c
  1615  0029AC  0E00               	movlw	0
  1616  0029AE  6E23               	movwf	writeReg@i^0,c
  1617  0029B0                     l456:
  1618  0029B0  A2AC               	btfss	172,1,c	;volatile
  1619  0029B2  EFDD  F014         	goto	u3841
  1620  0029B6  EFDF  F014         	goto	u3840
  1621  0029BA                     u3841:
  1622  0029BA  EFD8  F014         	goto	l456
  1623  0029BE                     u3840:
  1624  0029BE                     
  1625                           ;modbus.c: 233: TXREG = response[i];
  1626  0029BE  0E7D               	movlw	low _response
  1627  0029C0  2423               	addwf	writeReg@i^0,w,c
  1628  0029C2  6ED9               	movwf	fsr2l,c
  1629  0029C4  0E01               	movlw	high _response
  1630  0029C6  2024               	addwfc	(writeReg@i+1)^0,w,c
  1631  0029C8  6EDA               	movwf	fsr2h,c
  1632  0029CA  50DF               	movf	indf2,w,c
  1633  0029CC  6EAD               	movwf	173,c	;volatile
  1634  0029CE  4A23               	infsnz	writeReg@i^0,f,c
  1635  0029D0  2A24               	incf	(writeReg@i+1)^0,f,c
  1636  0029D2  0E09               	movlw	9
  1637  0029D4  1823               	xorwf	writeReg@i^0,w,c
  1638  0029D6  1024               	iorwf	(writeReg@i+1)^0,w,c
  1639  0029D8  A4D8               	btfss	status,2,c
  1640  0029DA  EFF1  F014         	goto	u3851
  1641  0029DE  EFF3  F014         	goto	u3850
  1642  0029E2                     u3851:
  1643  0029E2  EFD8  F014         	goto	l456
  1644  0029E6                     u3850:
  1645  0029E6                     
  1646                           ;modbus.c: 234: };modbus.c: 235: LATBbits.LATB7 = 0;
  1647  0029E6  9E8A               	bcf	138,7,c	;volatile
  1648  0029E8                     
  1649                           ;modbus.c: 236: clearResponse();
  1650  0029E8  EC37  F01B         	call	_clearResponse	;wreg free
  1651  0029EC  0012               	return		;funcret
  1652  0029EE                     __end_of_writeReg:
  1653                           	callstack 0
  1654                           
  1655 ;; *************** function _writeCoil *****************
  1656 ;; Defined at:
  1657 ;;		line 399 in file "modbus.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;		None
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;  i               2   34[COMRAM] int 
  1662 ;;  wc_Address      2   32[COMRAM] unsigned int 
  1663 ;;  crc             2   30[COMRAM] unsigned int 
  1664 ;;  wc_valToWrit    2   28[COMRAM] unsigned int 
  1665 ;;  wc_valToWrit    2   26[COMRAM] unsigned int 
  1666 ;;  wc_valToWrit    2   24[COMRAM] unsigned int 
  1667 ;;  wc_AddressHi    2   22[COMRAM] unsigned int 
  1668 ;;  wc_AddressLo    2   20[COMRAM] unsigned int 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1678 ;;      Params:         0       0       0       0       0       0       0
  1679 ;;      Locals:        16       0       0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0       0       0
  1681 ;;      Totals:        16       0       0       0       0       0       0
  1682 ;;Total ram usage:       16 bytes
  1683 ;; Hardware stack levels used: 1
  1684 ;; Hardware stack levels required when called: 5
  1685 ;; This function calls:
  1686 ;;		_clearResponse
  1687 ;;		_generateCRC
  1688 ;; This function is called by:
  1689 ;;		_decodeIt
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text3
  1694  00249C                     __ptext3:
  1695                           	callstack 0
  1696  00249C                     _writeCoil:
  1697                           	callstack 24
  1698  00249C                     
  1699                           ;modbus.c: 405: unsigned int wc_AddressHigh = 0;
  1700  00249C  0E00               	movlw	0
  1701  00249E  6E18               	movwf	(writeCoil@wc_AddressHigh+1)^0,c
  1702  0024A0  0E00               	movlw	0
  1703  0024A2  6E17               	movwf	writeCoil@wc_AddressHigh^0,c
  1704                           
  1705                           ;modbus.c: 406: unsigned int wc_Address = 0;
  1706  0024A4  0E00               	movlw	0
  1707  0024A6  6E22               	movwf	(writeCoil@wc_Address+1)^0,c
  1708  0024A8  0E00               	movlw	0
  1709  0024AA  6E21               	movwf	writeCoil@wc_Address^0,c
  1710                           
  1711                           ;modbus.c: 408: unsigned int wc_valToWrite = 0;
  1712  0024AC  0E00               	movlw	0
  1713  0024AE  6E1E               	movwf	(writeCoil@wc_valToWrite+1)^0,c
  1714  0024B0  0E00               	movlw	0
  1715  0024B2  6E1D               	movwf	writeCoil@wc_valToWrite^0,c
  1716                           
  1717                           ;modbus.c: 409: unsigned int wc_valToWriteLow = 0;
  1718  0024B4  0E00               	movlw	0
  1719  0024B6  6E1A               	movwf	(writeCoil@wc_valToWriteLow+1)^0,c
  1720  0024B8  0E00               	movlw	0
  1721  0024BA  6E19               	movwf	writeCoil@wc_valToWriteLow^0,c
  1722                           
  1723                           ;modbus.c: 410: unsigned int wc_valToWriteHigh = 0;
  1724  0024BC  0E00               	movlw	0
  1725  0024BE  6E1C               	movwf	(writeCoil@wc_valToWriteHigh+1)^0,c
  1726  0024C0  0E00               	movlw	0
  1727  0024C2  6E1B               	movwf	writeCoil@wc_valToWriteHigh^0,c
  1728                           
  1729                           ;modbus.c: 411: int i = 0;
  1730  0024C4  0E00               	movlw	0
  1731  0024C6  6E24               	movwf	(writeCoil@i+1)^0,c
  1732  0024C8  0E00               	movlw	0
  1733  0024CA  6E23               	movwf	writeCoil@i^0,c
  1734                           
  1735                           ;modbus.c: 412: unsigned int crc = 0;
  1736  0024CC  0E00               	movlw	0
  1737  0024CE  6E20               	movwf	(writeCoil@crc+1)^0,c
  1738  0024D0  0E00               	movlw	0
  1739  0024D2  6E1F               	movwf	writeCoil@crc^0,c
  1740  0024D4                     
  1741                           ;modbus.c: 415: wc_Address = received[2];
  1742  0024D4  C102  F021         	movff	_received+2,writeCoil@wc_Address	;volatile
  1743  0024D8  6A22               	clrf	(writeCoil@wc_Address+1)^0,c
  1744                           
  1745                           ;modbus.c: 416: wc_Address <<= 8;
  1746  0024DA  5021               	movf	writeCoil@wc_Address^0,w,c
  1747  0024DC  6E22               	movwf	(writeCoil@wc_Address+1)^0,c
  1748  0024DE  6A21               	clrf	writeCoil@wc_Address^0,c
  1749  0024E0                     
  1750                           ;modbus.c: 417: wc_Address |= received[3];
  1751  0024E0  0101               	movlb	1	; () banked
  1752  0024E2  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  1753  0024E4  1221               	iorwf	writeCoil@wc_Address^0,f,c
  1754  0024E6                     
  1755                           ; BSR set to: 1
  1756                           ;modbus.c: 419: wc_AddressLow = received[3];
  1757  0024E6  C103  F015         	movff	_received+3,writeCoil@wc_AddressLow	;volatile
  1758  0024EA  6A16               	clrf	(writeCoil@wc_AddressLow+1)^0,c
  1759  0024EC                     
  1760                           ; BSR set to: 1
  1761                           ;modbus.c: 420: wc_AddressHigh = received[2];
  1762  0024EC  C102  F017         	movff	_received+2,writeCoil@wc_AddressHigh	;volatile
  1763  0024F0  6A18               	clrf	(writeCoil@wc_AddressHigh+1)^0,c
  1764  0024F2                     
  1765                           ; BSR set to: 1
  1766                           ;modbus.c: 423: wc_valToWrite = received[4];
  1767  0024F2  C104  F01D         	movff	_received+4,writeCoil@wc_valToWrite	;volatile
  1768  0024F6  6A1E               	clrf	(writeCoil@wc_valToWrite+1)^0,c
  1769  0024F8                     
  1770                           ; BSR set to: 1
  1771                           ;modbus.c: 424: wc_valToWrite <<= 8;
  1772  0024F8  501D               	movf	writeCoil@wc_valToWrite^0,w,c
  1773  0024FA  6E1E               	movwf	(writeCoil@wc_valToWrite+1)^0,c
  1774  0024FC  6A1D               	clrf	writeCoil@wc_valToWrite^0,c
  1775                           
  1776                           ;modbus.c: 425: wc_valToWrite |= received[5];
  1777  0024FE  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  1778  002500  121D               	iorwf	writeCoil@wc_valToWrite^0,f,c
  1779  002502                     
  1780                           ; BSR set to: 1
  1781                           ;modbus.c: 427: wc_valToWriteLow = received[5];
  1782  002502  C105  F019         	movff	_received+5,writeCoil@wc_valToWriteLow	;volatile
  1783  002506  6A1A               	clrf	(writeCoil@wc_valToWriteLow+1)^0,c
  1784  002508                     
  1785                           ; BSR set to: 1
  1786                           ;modbus.c: 428: wc_valToWriteHigh = received[4];
  1787  002508  C104  F01B         	movff	_received+4,writeCoil@wc_valToWriteHigh	;volatile
  1788  00250C  6A1C               	clrf	(writeCoil@wc_valToWriteHigh+1)^0,c
  1789                           
  1790                           ;modbus.c: 430: if(wc_valToWrite){
  1791  00250E  501D               	movf	writeCoil@wc_valToWrite^0,w,c
  1792  002510  101E               	iorwf	(writeCoil@wc_valToWrite+1)^0,w,c
  1793  002512  B4D8               	btfsc	status,2,c
  1794  002514  EF8E  F012         	goto	u3811
  1795  002518  EF90  F012         	goto	u3810
  1796  00251C                     u3811:
  1797  00251C  EF9A  F012         	goto	l4307
  1798  002520                     u3810:
  1799  002520                     
  1800                           ; BSR set to: 1
  1801                           ;modbus.c: 431: coils[wc_Address] = 0xFF;
  1802  002520  0E00               	movlw	low _coils
  1803  002522  2421               	addwf	writeCoil@wc_Address^0,w,c
  1804  002524  6ED9               	movwf	fsr2l,c
  1805  002526  0E02               	movlw	high _coils
  1806  002528  2022               	addwfc	(writeCoil@wc_Address+1)^0,w,c
  1807  00252A  6EDA               	movwf	fsr2h,c
  1808  00252C  0EFF               	movlw	255
  1809  00252E  6EDF               	movwf	indf2,c
  1810                           
  1811                           ;modbus.c: 432: }
  1812  002530  EFA2  F012         	goto	l4309
  1813  002534                     l4307:
  1814                           
  1815                           ; BSR set to: 1
  1816                           ;modbus.c: 433: else{;modbus.c: 434: coils[wc_Address] = 0x00;
  1817  002534  0E00               	movlw	low _coils
  1818  002536  2421               	addwf	writeCoil@wc_Address^0,w,c
  1819  002538  6ED9               	movwf	fsr2l,c
  1820  00253A  0E02               	movlw	high _coils
  1821  00253C  2022               	addwfc	(writeCoil@wc_Address+1)^0,w,c
  1822  00253E  6EDA               	movwf	fsr2h,c
  1823  002540  0E00               	movlw	0
  1824  002542  6EDF               	movwf	indf2,c
  1825  002544                     l4309:
  1826                           
  1827                           ; BSR set to: 1
  1828                           ;modbus.c: 435: };modbus.c: 437: response[0] = 1;
  1829  002544  0E01               	movlw	1
  1830  002546  6F7D               	movwf	_response& (0+255),b	;volatile
  1831  002548                     
  1832                           ; BSR set to: 1
  1833                           ;modbus.c: 438: response[1] = 0x05;
  1834  002548  0E05               	movlw	5
  1835  00254A  6F7E               	movwf	(_response+1)& (0+255),b	;volatile
  1836  00254C                     
  1837                           ; BSR set to: 1
  1838                           ;modbus.c: 439: response[3] = wc_AddressLow;
  1839  00254C  C015  F180         	movff	writeCoil@wc_AddressLow,_response+3	;volatile
  1840  002550                     
  1841                           ; BSR set to: 1
  1842                           ;modbus.c: 440: response[2] = wc_AddressHigh;
  1843  002550  C017  F17F         	movff	writeCoil@wc_AddressHigh,_response+2	;volatile
  1844  002554                     
  1845                           ; BSR set to: 1
  1846                           ;modbus.c: 443: response[4] = wc_valToWriteHigh;
  1847  002554  C01B  F181         	movff	writeCoil@wc_valToWriteHigh,_response+4	;volatile
  1848  002558                     
  1849                           ; BSR set to: 1
  1850                           ;modbus.c: 444: response[5] = wc_valToWriteLow;
  1851  002558  C019  F182         	movff	writeCoil@wc_valToWriteLow,_response+5	;volatile
  1852  00255C                     
  1853                           ; BSR set to: 1
  1854                           ;modbus.c: 446: crc = generateCRC(8);
  1855  00255C  0E08               	movlw	8
  1856  00255E  ECF9  F015         	call	_generateCRC
  1857  002562  C003  F01F         	movff	?_generateCRC,writeCoil@crc
  1858  002566  C004  F020         	movff	?_generateCRC+1,writeCoil@crc+1
  1859  00256A                     
  1860                           ;modbus.c: 448: response[6] = crc >> 8;
  1861  00256A  5020               	movf	(writeCoil@crc+1)^0,w,c
  1862  00256C  0101               	movlb	1	; () banked
  1863  00256E  6F83               	movwf	(_response+6)& (0+255),b	;volatile
  1864  002570                     
  1865                           ; BSR set to: 1
  1866                           ;modbus.c: 449: response[7] = crc;
  1867  002570  C01F  F184         	movff	writeCoil@crc,_response+7	;volatile
  1868  002574                     
  1869                           ; BSR set to: 1
  1870                           ;modbus.c: 451: LATBbits.LATB7 = 1;
  1871  002574  8E8A               	bsf	138,7,c	;volatile
  1872  002576                     
  1873                           ; BSR set to: 1
  1874                           ;modbus.c: 452: for(i=0;i!=9;i++){
  1875  002576  0E00               	movlw	0
  1876  002578  6E24               	movwf	(writeCoil@i+1)^0,c
  1877  00257A  0E00               	movlw	0
  1878  00257C  6E23               	movwf	writeCoil@i^0,c
  1879  00257E                     l512:
  1880  00257E  A2AC               	btfss	172,1,c	;volatile
  1881  002580  EFC4  F012         	goto	u3821
  1882  002584  EFC6  F012         	goto	u3820
  1883  002588                     u3821:
  1884  002588  EFBF  F012         	goto	l512
  1885  00258C                     u3820:
  1886  00258C                     
  1887                           ;modbus.c: 454: TXREG = response[i];
  1888  00258C  0E7D               	movlw	low _response
  1889  00258E  2423               	addwf	writeCoil@i^0,w,c
  1890  002590  6ED9               	movwf	fsr2l,c
  1891  002592  0E01               	movlw	high _response
  1892  002594  2024               	addwfc	(writeCoil@i+1)^0,w,c
  1893  002596  6EDA               	movwf	fsr2h,c
  1894  002598  50DF               	movf	indf2,w,c
  1895  00259A  6EAD               	movwf	173,c	;volatile
  1896  00259C  4A23               	infsnz	writeCoil@i^0,f,c
  1897  00259E  2A24               	incf	(writeCoil@i+1)^0,f,c
  1898  0025A0  0E09               	movlw	9
  1899  0025A2  1823               	xorwf	writeCoil@i^0,w,c
  1900  0025A4  1024               	iorwf	(writeCoil@i+1)^0,w,c
  1901  0025A6  A4D8               	btfss	status,2,c
  1902  0025A8  EFD8  F012         	goto	u3831
  1903  0025AC  EFDA  F012         	goto	u3830
  1904  0025B0                     u3831:
  1905  0025B0  EFBF  F012         	goto	l512
  1906  0025B4                     u3830:
  1907  0025B4                     
  1908                           ;modbus.c: 455: };modbus.c: 456: LATBbits.LATB7 = 0;
  1909  0025B4  9E8A               	bcf	138,7,c	;volatile
  1910  0025B6                     
  1911                           ;modbus.c: 457: clearResponse();
  1912  0025B6  EC37  F01B         	call	_clearResponse	;wreg free
  1913  0025BA  0012               	return		;funcret
  1914  0025BC                     __end_of_writeCoil:
  1915                           	callstack 0
  1916                           
  1917 ;; *************** function _readReg *****************
  1918 ;; Defined at:
  1919 ;;		line 74 in file "modbus.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;		None
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;  i               2   28[COMRAM] unsigned int 
  1924 ;;  rr_numRegs      2   26[COMRAM] unsigned int 
  1925 ;;  rr_Address      2   24[COMRAM] unsigned int 
  1926 ;;  crc             2   22[COMRAM] unsigned int 
  1927 ;;  j               1   30[COMRAM] unsigned char 
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1937 ;;      Params:         0       0       0       0       0       0       0
  1938 ;;      Locals:         9       0       0       0       0       0       0
  1939 ;;      Temps:          2       0       0       0       0       0       0
  1940 ;;      Totals:        11       0       0       0       0       0       0
  1941 ;;Total ram usage:       11 bytes
  1942 ;; Hardware stack levels used: 1
  1943 ;; Hardware stack levels required when called: 5
  1944 ;; This function calls:
  1945 ;;		_clearResponse
  1946 ;;		_generateCRC
  1947 ;; This function is called by:
  1948 ;;		_decodeIt
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text4
  1953  0018A2                     __ptext4:
  1954                           	callstack 0
  1955  0018A2                     _readReg:
  1956                           	callstack 24
  1957  0018A2                     
  1958                           ;modbus.c: 77: unsigned int rr_numRegs = 0;
  1959  0018A2  0E00               	movlw	0
  1960  0018A4  6E1C               	movwf	(readReg@rr_numRegs+1)^0,c
  1961  0018A6  0E00               	movlw	0
  1962  0018A8  6E1B               	movwf	readReg@rr_numRegs^0,c
  1963                           
  1964                           ;modbus.c: 78: unsigned char j = 3;
  1965  0018AA  0E03               	movlw	3
  1966  0018AC  6E1F               	movwf	readReg@j^0,c
  1967                           
  1968                           ;modbus.c: 79: unsigned int crc = 0;
  1969  0018AE  0E00               	movlw	0
  1970  0018B0  6E18               	movwf	(readReg@crc+1)^0,c
  1971  0018B2  0E00               	movlw	0
  1972  0018B4  6E17               	movwf	readReg@crc^0,c
  1973                           
  1974                           ;modbus.c: 80: unsigned int i = 0;
  1975  0018B6  0E00               	movlw	0
  1976  0018B8  6E1E               	movwf	(readReg@i+1)^0,c
  1977  0018BA  0E00               	movlw	0
  1978  0018BC  6E1D               	movwf	readReg@i^0,c
  1979  0018BE                     
  1980                           ;modbus.c: 83: rr_Address = received[2];
  1981  0018BE  C102  F019         	movff	_received+2,readReg@rr_Address	;volatile
  1982  0018C2  6A1A               	clrf	(readReg@rr_Address+1)^0,c
  1983                           
  1984                           ;modbus.c: 84: rr_Address <<= 8;
  1985  0018C4  5019               	movf	readReg@rr_Address^0,w,c
  1986  0018C6  6E1A               	movwf	(readReg@rr_Address+1)^0,c
  1987  0018C8  6A19               	clrf	readReg@rr_Address^0,c
  1988  0018CA                     
  1989                           ;modbus.c: 85: rr_Address |= received[3];
  1990  0018CA  0101               	movlb	1	; () banked
  1991  0018CC  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  1992  0018CE  1219               	iorwf	readReg@rr_Address^0,f,c
  1993  0018D0                     
  1994                           ; BSR set to: 1
  1995                           ;modbus.c: 88: rr_numRegs = received[4];
  1996  0018D0  C104  F01B         	movff	_received+4,readReg@rr_numRegs	;volatile
  1997  0018D4  6A1C               	clrf	(readReg@rr_numRegs+1)^0,c
  1998  0018D6                     
  1999                           ; BSR set to: 1
  2000                           ;modbus.c: 89: rr_numRegs <<= 8;
  2001  0018D6  501B               	movf	readReg@rr_numRegs^0,w,c
  2002  0018D8  6E1C               	movwf	(readReg@rr_numRegs+1)^0,c
  2003  0018DA  6A1B               	clrf	readReg@rr_numRegs^0,c
  2004                           
  2005                           ;modbus.c: 90: rr_numRegs |= received[5];
  2006  0018DC  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  2007  0018DE  121B               	iorwf	readReg@rr_numRegs^0,f,c
  2008  0018E0                     
  2009                           ; BSR set to: 1
  2010                           ;modbus.c: 92: response[0] = 1;
  2011  0018E0  0E01               	movlw	1
  2012  0018E2  6F7D               	movwf	_response& (0+255),b	;volatile
  2013  0018E4                     
  2014                           ; BSR set to: 1
  2015                           ;modbus.c: 93: response[1] = 0x03;
  2016  0018E4  0E03               	movlw	3
  2017  0018E6  6F7E               	movwf	(_response+1)& (0+255),b	;volatile
  2018                           
  2019                           ;modbus.c: 94: response[2] = rr_numRegs*2;
  2020  0018E8  501B               	movf	readReg@rr_numRegs^0,w,c
  2021  0018EA  241B               	addwf	readReg@rr_numRegs^0,w,c
  2022  0018EC  6F7F               	movwf	(_response+2)& (0+255),b	;volatile
  2023  0018EE                     
  2024                           ; BSR set to: 1
  2025                           ;modbus.c: 96: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  2026  0018EE  C019  F01D         	movff	readReg@rr_Address,readReg@i
  2027  0018F2  C01A  F01E         	movff	readReg@rr_Address+1,readReg@i+1
  2028  0018F6  EFDB  F00C         	goto	l4201
  2029  0018FA                     l4183:
  2030                           
  2031                           ;modbus.c: 97: if(holdingReg[i] > 255){
  2032  0018FA  90D8               	bcf	status,0,c
  2033  0018FC  341D               	rlcf	readReg@i^0,w,c
  2034  0018FE  6ED9               	movwf	fsr2l,c
  2035  001900  341E               	rlcf	(readReg@i+1)^0,w,c
  2036  001902  6EDA               	movwf	fsr2h,c
  2037  001904  0E80               	movlw	low _holdingReg
  2038  001906  26D9               	addwf	fsr2l,f,c
  2039  001908  0E00               	movlw	high _holdingReg
  2040  00190A  22DA               	addwfc	fsr2h,f,c
  2041  00190C  0E00               	movlw	0
  2042  00190E  5CDE               	subwf	postinc2,w,c
  2043  001910  0E01               	movlw	1
  2044  001912  58DE               	subwfb	postinc2,w,c
  2045  001914  A0D8               	btfss	status,0,c
  2046  001916  EF8F  F00C         	goto	u3731
  2047  00191A  EF91  F00C         	goto	u3730
  2048  00191E                     u3731:
  2049  00191E  EFBE  F00C         	goto	l4191
  2050  001922                     u3730:
  2051  001922                     
  2052                           ;modbus.c: 99: response[j] = holdingReg[i] >> 8;
  2053  001922  0E7D               	movlw	low _response
  2054  001924  241F               	addwf	readReg@j^0,w,c
  2055  001926  6ED9               	movwf	fsr2l,c
  2056  001928  6ADA               	clrf	fsr2h,c
  2057  00192A  0E01               	movlw	high _response
  2058  00192C  22DA               	addwfc	fsr2h,f,c
  2059  00192E  90D8               	bcf	status,0,c
  2060  001930  341D               	rlcf	readReg@i^0,w,c
  2061  001932  6EE1               	movwf	fsr1l,c
  2062  001934  341E               	rlcf	(readReg@i+1)^0,w,c
  2063  001936  6EE2               	movwf	fsr1h,c
  2064  001938  0E80               	movlw	low _holdingReg
  2065  00193A  26E1               	addwf	fsr1l,f,c
  2066  00193C  0E00               	movlw	high _holdingReg
  2067  00193E  22E2               	addwfc	fsr1h,f,c
  2068  001940  CFE6 F015          	movff	postinc1,??_readReg
  2069  001944  CFE5 F016          	movff	postdec1,??_readReg+1
  2070  001948  C016  F015         	movff	??_readReg+1,??_readReg
  2071  00194C  6A16               	clrf	(??_readReg+1)^0,c
  2072  00194E  5015               	movf	??_readReg^0,w,c
  2073  001950  6EDF               	movwf	indf2,c
  2074  001952                     
  2075                           ;modbus.c: 100: j++;
  2076  001952  2A1F               	incf	readReg@j^0,f,c
  2077  001954                     
  2078                           ;modbus.c: 101: response[j] = holdingReg[i];
  2079  001954  90D8               	bcf	status,0,c
  2080  001956  341D               	rlcf	readReg@i^0,w,c
  2081  001958  6ED9               	movwf	fsr2l,c
  2082  00195A  341E               	rlcf	(readReg@i+1)^0,w,c
  2083  00195C  6EDA               	movwf	fsr2h,c
  2084  00195E  0E80               	movlw	low _holdingReg
  2085  001960  26D9               	addwf	fsr2l,f,c
  2086  001962  0E00               	movlw	high _holdingReg
  2087  001964  22DA               	addwfc	fsr2h,f,c
  2088  001966  0E7D               	movlw	low _response
  2089  001968  241F               	addwf	readReg@j^0,w,c
  2090  00196A  6EE1               	movwf	fsr1l,c
  2091  00196C  6AE2               	clrf	fsr1h,c
  2092  00196E  0E01               	movlw	high _response
  2093  001970  22E2               	addwfc	fsr1h,f,c
  2094  001972  CFDF FFE7          	movff	indf2,indf1
  2095                           
  2096                           ;modbus.c: 102: j++;
  2097  001976  2A1F               	incf	readReg@j^0,f,c
  2098                           
  2099                           ;modbus.c: 103: }
  2100  001978  EFD9  F00C         	goto	l4199
  2101  00197C                     l4191:
  2102                           
  2103                           ;modbus.c: 104: else{;modbus.c: 105: response[j] = 0x00;
  2104  00197C  0E7D               	movlw	low _response
  2105  00197E  241F               	addwf	readReg@j^0,w,c
  2106  001980  6ED9               	movwf	fsr2l,c
  2107  001982  6ADA               	clrf	fsr2h,c
  2108  001984  0E01               	movlw	high _response
  2109  001986  22DA               	addwfc	fsr2h,f,c
  2110  001988  0E00               	movlw	0
  2111  00198A  6EDF               	movwf	indf2,c
  2112  00198C                     
  2113                           ;modbus.c: 106: j++;
  2114  00198C  2A1F               	incf	readReg@j^0,f,c
  2115  00198E                     
  2116                           ;modbus.c: 107: response[j] = holdingReg[i];
  2117  00198E  90D8               	bcf	status,0,c
  2118  001990  341D               	rlcf	readReg@i^0,w,c
  2119  001992  6ED9               	movwf	fsr2l,c
  2120  001994  341E               	rlcf	(readReg@i+1)^0,w,c
  2121  001996  6EDA               	movwf	fsr2h,c
  2122  001998  0E80               	movlw	low _holdingReg
  2123  00199A  26D9               	addwf	fsr2l,f,c
  2124  00199C  0E00               	movlw	high _holdingReg
  2125  00199E  22DA               	addwfc	fsr2h,f,c
  2126  0019A0  0E7D               	movlw	low _response
  2127  0019A2  241F               	addwf	readReg@j^0,w,c
  2128  0019A4  6EE1               	movwf	fsr1l,c
  2129  0019A6  6AE2               	clrf	fsr1h,c
  2130  0019A8  0E01               	movlw	high _response
  2131  0019AA  22E2               	addwfc	fsr1h,f,c
  2132  0019AC  CFDF FFE7          	movff	indf2,indf1
  2133  0019B0                     
  2134                           ;modbus.c: 108: j++;
  2135  0019B0  2A1F               	incf	readReg@j^0,f,c
  2136  0019B2                     l4199:
  2137  0019B2  4A1D               	infsnz	readReg@i^0,f,c
  2138  0019B4  2A1E               	incf	(readReg@i+1)^0,f,c
  2139  0019B6                     l4201:
  2140  0019B6  501B               	movf	readReg@rr_numRegs^0,w,c
  2141  0019B8  2419               	addwf	readReg@rr_Address^0,w,c
  2142  0019BA  6E15               	movwf	??_readReg^0,c
  2143  0019BC  501C               	movf	(readReg@rr_numRegs+1)^0,w,c
  2144  0019BE  201A               	addwfc	(readReg@rr_Address+1)^0,w,c
  2145  0019C0  6E16               	movwf	(??_readReg+1)^0,c
  2146  0019C2  5015               	movf	??_readReg^0,w,c
  2147  0019C4  5C1D               	subwf	readReg@i^0,w,c
  2148  0019C6  5016               	movf	(??_readReg+1)^0,w,c
  2149  0019C8  581E               	subwfb	(readReg@i+1)^0,w,c
  2150  0019CA  A0D8               	btfss	status,0,c
  2151  0019CC  EFEA  F00C         	goto	u3741
  2152  0019D0  EFEC  F00C         	goto	u3740
  2153  0019D4                     u3741:
  2154  0019D4  EF7D  F00C         	goto	l4183
  2155  0019D8                     u3740:
  2156  0019D8                     
  2157                           ;modbus.c: 109: };modbus.c: 110: };modbus.c: 111: crc = generateCRC(j+2);
  2158  0019D8  501F               	movf	readReg@j^0,w,c
  2159  0019DA  0F02               	addlw	2
  2160  0019DC  ECF9  F015         	call	_generateCRC
  2161  0019E0  C003  F017         	movff	?_generateCRC,readReg@crc
  2162  0019E4  C004  F018         	movff	?_generateCRC+1,readReg@crc+1
  2163  0019E8                     
  2164                           ;modbus.c: 112: response[j] = crc >> 8;
  2165  0019E8  0E7D               	movlw	low _response
  2166  0019EA  241F               	addwf	readReg@j^0,w,c
  2167  0019EC  6ED9               	movwf	fsr2l,c
  2168  0019EE  6ADA               	clrf	fsr2h,c
  2169  0019F0  0E01               	movlw	high _response
  2170  0019F2  22DA               	addwfc	fsr2h,f,c
  2171  0019F4  5018               	movf	(readReg@crc+1)^0,w,c
  2172  0019F6  6EDF               	movwf	indf2,c
  2173  0019F8                     
  2174                           ;modbus.c: 113: j++;
  2175  0019F8  2A1F               	incf	readReg@j^0,f,c
  2176  0019FA                     
  2177                           ;modbus.c: 114: response[j] = crc;
  2178  0019FA  0E7D               	movlw	low _response
  2179  0019FC  241F               	addwf	readReg@j^0,w,c
  2180  0019FE  6ED9               	movwf	fsr2l,c
  2181  001A00  6ADA               	clrf	fsr2h,c
  2182  001A02  0E01               	movlw	high _response
  2183  001A04  22DA               	addwfc	fsr2h,f,c
  2184  001A06  C017  FFDF         	movff	readReg@crc,indf2
  2185  001A0A                     
  2186                           ;modbus.c: 115: j+=2;
  2187  001A0A  0E02               	movlw	2
  2188  001A0C  261F               	addwf	readReg@j^0,f,c
  2189  001A0E                     
  2190                           ;modbus.c: 117: LATBbits.LATB7 = 1;
  2191  001A0E  8E8A               	bsf	138,7,c	;volatile
  2192  001A10                     
  2193                           ;modbus.c: 118: for(i=0;i!=j;i++){
  2194  001A10  0E00               	movlw	0
  2195  001A12  6E1E               	movwf	(readReg@i+1)^0,c
  2196  001A14  0E00               	movlw	0
  2197  001A16  6E1D               	movwf	readReg@i^0,c
  2198  001A18  EF1F  F00D         	goto	l4221
  2199  001A1C                     l433:
  2200  001A1C  A2AC               	btfss	172,1,c	;volatile
  2201  001A1E  EF13  F00D         	goto	u3751
  2202  001A22  EF15  F00D         	goto	u3750
  2203  001A26                     u3751:
  2204  001A26  EF0E  F00D         	goto	l433
  2205  001A2A                     u3750:
  2206  001A2A                     
  2207                           ;modbus.c: 120: TXREG = response[i];
  2208  001A2A  0E7D               	movlw	low _response
  2209  001A2C  241D               	addwf	readReg@i^0,w,c
  2210  001A2E  6ED9               	movwf	fsr2l,c
  2211  001A30  0E01               	movlw	high _response
  2212  001A32  201E               	addwfc	(readReg@i+1)^0,w,c
  2213  001A34  6EDA               	movwf	fsr2h,c
  2214  001A36  50DF               	movf	indf2,w,c
  2215  001A38  6EAD               	movwf	173,c	;volatile
  2216  001A3A  4A1D               	infsnz	readReg@i^0,f,c
  2217  001A3C  2A1E               	incf	(readReg@i+1)^0,f,c
  2218  001A3E                     l4221:
  2219  001A3E  501F               	movf	readReg@j^0,w,c
  2220  001A40  6E15               	movwf	??_readReg^0,c
  2221  001A42  6A16               	clrf	(??_readReg+1)^0,c
  2222  001A44  501D               	movf	readReg@i^0,w,c
  2223  001A46  1815               	xorwf	??_readReg^0,w,c
  2224  001A48  E107               	bnz	u3761
  2225  001A4A  501E               	movf	(readReg@i+1)^0,w,c
  2226  001A4C  1816               	xorwf	(??_readReg+1)^0,w,c
  2227  001A4E  A4D8               	btfss	status,2,c
  2228  001A50  EF2C  F00D         	goto	u3761
  2229  001A54  EF2E  F00D         	goto	u3760
  2230  001A58                     u3761:
  2231  001A58  EF0E  F00D         	goto	l433
  2232  001A5C                     u3760:
  2233  001A5C                     
  2234                           ;modbus.c: 121: };modbus.c: 122: LATBbits.LATB7 = 0;
  2235  001A5C  9E8A               	bcf	138,7,c	;volatile
  2236  001A5E                     
  2237                           ;modbus.c: 125: clearResponse();
  2238  001A5E  EC37  F01B         	call	_clearResponse	;wreg free
  2239  001A62  0012               	return		;funcret
  2240  001A64                     __end_of_readReg:
  2241                           	callstack 0
  2242                           
  2243 ;; *************** function _readInputReg *****************
  2244 ;; Defined at:
  2245 ;;		line 128 in file "modbus.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;		None
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;  i               2   28[COMRAM] unsigned int 
  2250 ;;  rr_numRegs      2   26[COMRAM] unsigned int 
  2251 ;;  rr_Address      2   24[COMRAM] unsigned int 
  2252 ;;  crc             2   22[COMRAM] unsigned int 
  2253 ;;  j               1   30[COMRAM] unsigned char 
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  1    wreg      void 
  2256 ;; Registers used:
  2257 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2263 ;;      Params:         0       0       0       0       0       0       0
  2264 ;;      Locals:         9       0       0       0       0       0       0
  2265 ;;      Temps:          2       0       0       0       0       0       0
  2266 ;;      Totals:        11       0       0       0       0       0       0
  2267 ;;Total ram usage:       11 bytes
  2268 ;; Hardware stack levels used: 1
  2269 ;; Hardware stack levels required when called: 5
  2270 ;; This function calls:
  2271 ;;		_clearResponse
  2272 ;;		_generateCRC
  2273 ;; This function is called by:
  2274 ;;		_decodeIt
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           	psect	text5
  2279  001A64                     __ptext5:
  2280                           	callstack 0
  2281  001A64                     _readInputReg:
  2282                           	callstack 24
  2283  001A64                     
  2284                           ;modbus.c: 131: unsigned int rr_numRegs = 0;
  2285  001A64  0E00               	movlw	0
  2286  001A66  6E1C               	movwf	(readInputReg@rr_numRegs+1)^0,c
  2287  001A68  0E00               	movlw	0
  2288  001A6A  6E1B               	movwf	readInputReg@rr_numRegs^0,c
  2289                           
  2290                           ;modbus.c: 132: unsigned char j = 3;
  2291  001A6C  0E03               	movlw	3
  2292  001A6E  6E1F               	movwf	readInputReg@j^0,c
  2293                           
  2294                           ;modbus.c: 133: unsigned int crc = 0;
  2295  001A70  0E00               	movlw	0
  2296  001A72  6E18               	movwf	(readInputReg@crc+1)^0,c
  2297  001A74  0E00               	movlw	0
  2298  001A76  6E17               	movwf	readInputReg@crc^0,c
  2299                           
  2300                           ;modbus.c: 134: unsigned int i = 0;
  2301  001A78  0E00               	movlw	0
  2302  001A7A  6E1E               	movwf	(readInputReg@i+1)^0,c
  2303  001A7C  0E00               	movlw	0
  2304  001A7E  6E1D               	movwf	readInputReg@i^0,c
  2305  001A80                     
  2306                           ;modbus.c: 137: rr_Address = received[2];
  2307  001A80  C102  F019         	movff	_received+2,readInputReg@rr_Address	;volatile
  2308  001A84  6A1A               	clrf	(readInputReg@rr_Address+1)^0,c
  2309                           
  2310                           ;modbus.c: 138: rr_Address <<= 8;
  2311  001A86  5019               	movf	readInputReg@rr_Address^0,w,c
  2312  001A88  6E1A               	movwf	(readInputReg@rr_Address+1)^0,c
  2313  001A8A  6A19               	clrf	readInputReg@rr_Address^0,c
  2314  001A8C                     
  2315                           ;modbus.c: 139: rr_Address |= received[3];
  2316  001A8C  0101               	movlb	1	; () banked
  2317  001A8E  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  2318  001A90  1219               	iorwf	readInputReg@rr_Address^0,f,c
  2319  001A92                     
  2320                           ; BSR set to: 1
  2321                           ;modbus.c: 142: rr_numRegs = received[4];
  2322  001A92  C104  F01B         	movff	_received+4,readInputReg@rr_numRegs	;volatile
  2323  001A96  6A1C               	clrf	(readInputReg@rr_numRegs+1)^0,c
  2324  001A98                     
  2325                           ; BSR set to: 1
  2326                           ;modbus.c: 143: rr_numRegs <<= 8;
  2327  001A98  501B               	movf	readInputReg@rr_numRegs^0,w,c
  2328  001A9A  6E1C               	movwf	(readInputReg@rr_numRegs+1)^0,c
  2329  001A9C  6A1B               	clrf	readInputReg@rr_numRegs^0,c
  2330                           
  2331                           ;modbus.c: 144: rr_numRegs |= received[5];
  2332  001A9E  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  2333  001AA0  121B               	iorwf	readInputReg@rr_numRegs^0,f,c
  2334  001AA2                     
  2335                           ; BSR set to: 1
  2336                           ;modbus.c: 146: response[0] = 1;
  2337  001AA2  0E01               	movlw	1
  2338  001AA4  6F7D               	movwf	_response& (0+255),b	;volatile
  2339  001AA6                     
  2340                           ; BSR set to: 1
  2341                           ;modbus.c: 147: response[1] = 0x04;
  2342  001AA6  0E04               	movlw	4
  2343  001AA8  6F7E               	movwf	(_response+1)& (0+255),b	;volatile
  2344                           
  2345                           ;modbus.c: 148: response[2] = rr_numRegs*2;
  2346  001AAA  501B               	movf	readInputReg@rr_numRegs^0,w,c
  2347  001AAC  241B               	addwf	readInputReg@rr_numRegs^0,w,c
  2348  001AAE  6F7F               	movwf	(_response+2)& (0+255),b	;volatile
  2349  001AB0                     
  2350                           ; BSR set to: 1
  2351                           ;modbus.c: 150: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  2352  001AB0  C019  F01D         	movff	readInputReg@rr_Address,readInputReg@i
  2353  001AB4  C01A  F01E         	movff	readInputReg@rr_Address+1,readInputReg@i+1
  2354  001AB8  EFBC  F00D         	goto	l4261
  2355  001ABC                     l4243:
  2356                           
  2357                           ;modbus.c: 151: if(holdingReg[i] > 255){
  2358  001ABC  90D8               	bcf	status,0,c
  2359  001ABE  341D               	rlcf	readInputReg@i^0,w,c
  2360  001AC0  6ED9               	movwf	fsr2l,c
  2361  001AC2  341E               	rlcf	(readInputReg@i+1)^0,w,c
  2362  001AC4  6EDA               	movwf	fsr2h,c
  2363  001AC6  0E80               	movlw	low _holdingReg
  2364  001AC8  26D9               	addwf	fsr2l,f,c
  2365  001ACA  0E00               	movlw	high _holdingReg
  2366  001ACC  22DA               	addwfc	fsr2h,f,c
  2367  001ACE  0E00               	movlw	0
  2368  001AD0  5CDE               	subwf	postinc2,w,c
  2369  001AD2  0E01               	movlw	1
  2370  001AD4  58DE               	subwfb	postinc2,w,c
  2371  001AD6  A0D8               	btfss	status,0,c
  2372  001AD8  EF70  F00D         	goto	u3771
  2373  001ADC  EF72  F00D         	goto	u3770
  2374  001AE0                     u3771:
  2375  001AE0  EF9F  F00D         	goto	l4251
  2376  001AE4                     u3770:
  2377  001AE4                     
  2378                           ;modbus.c: 153: response[j] = holdingReg[i] >> 8;
  2379  001AE4  0E7D               	movlw	low _response
  2380  001AE6  241F               	addwf	readInputReg@j^0,w,c
  2381  001AE8  6ED9               	movwf	fsr2l,c
  2382  001AEA  6ADA               	clrf	fsr2h,c
  2383  001AEC  0E01               	movlw	high _response
  2384  001AEE  22DA               	addwfc	fsr2h,f,c
  2385  001AF0  90D8               	bcf	status,0,c
  2386  001AF2  341D               	rlcf	readInputReg@i^0,w,c
  2387  001AF4  6EE1               	movwf	fsr1l,c
  2388  001AF6  341E               	rlcf	(readInputReg@i+1)^0,w,c
  2389  001AF8  6EE2               	movwf	fsr1h,c
  2390  001AFA  0E80               	movlw	low _holdingReg
  2391  001AFC  26E1               	addwf	fsr1l,f,c
  2392  001AFE  0E00               	movlw	high _holdingReg
  2393  001B00  22E2               	addwfc	fsr1h,f,c
  2394  001B02  CFE6 F015          	movff	postinc1,??_readInputReg
  2395  001B06  CFE5 F016          	movff	postdec1,??_readInputReg+1
  2396  001B0A  C016  F015         	movff	??_readInputReg+1,??_readInputReg
  2397  001B0E  6A16               	clrf	(??_readInputReg+1)^0,c
  2398  001B10  5015               	movf	??_readInputReg^0,w,c
  2399  001B12  6EDF               	movwf	indf2,c
  2400  001B14                     
  2401                           ;modbus.c: 154: j++;
  2402  001B14  2A1F               	incf	readInputReg@j^0,f,c
  2403  001B16                     
  2404                           ;modbus.c: 155: response[j] = holdingReg[i];
  2405  001B16  90D8               	bcf	status,0,c
  2406  001B18  341D               	rlcf	readInputReg@i^0,w,c
  2407  001B1A  6ED9               	movwf	fsr2l,c
  2408  001B1C  341E               	rlcf	(readInputReg@i+1)^0,w,c
  2409  001B1E  6EDA               	movwf	fsr2h,c
  2410  001B20  0E80               	movlw	low _holdingReg
  2411  001B22  26D9               	addwf	fsr2l,f,c
  2412  001B24  0E00               	movlw	high _holdingReg
  2413  001B26  22DA               	addwfc	fsr2h,f,c
  2414  001B28  0E7D               	movlw	low _response
  2415  001B2A  241F               	addwf	readInputReg@j^0,w,c
  2416  001B2C  6EE1               	movwf	fsr1l,c
  2417  001B2E  6AE2               	clrf	fsr1h,c
  2418  001B30  0E01               	movlw	high _response
  2419  001B32  22E2               	addwfc	fsr1h,f,c
  2420  001B34  CFDF FFE7          	movff	indf2,indf1
  2421                           
  2422                           ;modbus.c: 156: j++;
  2423  001B38  2A1F               	incf	readInputReg@j^0,f,c
  2424                           
  2425                           ;modbus.c: 157: }
  2426  001B3A  EFBA  F00D         	goto	l4259
  2427  001B3E                     l4251:
  2428                           
  2429                           ;modbus.c: 158: else{;modbus.c: 159: response[j] = 0x00;
  2430  001B3E  0E7D               	movlw	low _response
  2431  001B40  241F               	addwf	readInputReg@j^0,w,c
  2432  001B42  6ED9               	movwf	fsr2l,c
  2433  001B44  6ADA               	clrf	fsr2h,c
  2434  001B46  0E01               	movlw	high _response
  2435  001B48  22DA               	addwfc	fsr2h,f,c
  2436  001B4A  0E00               	movlw	0
  2437  001B4C  6EDF               	movwf	indf2,c
  2438  001B4E                     
  2439                           ;modbus.c: 160: j++;
  2440  001B4E  2A1F               	incf	readInputReg@j^0,f,c
  2441  001B50                     
  2442                           ;modbus.c: 161: response[j] = holdingReg[i];
  2443  001B50  90D8               	bcf	status,0,c
  2444  001B52  341D               	rlcf	readInputReg@i^0,w,c
  2445  001B54  6ED9               	movwf	fsr2l,c
  2446  001B56  341E               	rlcf	(readInputReg@i+1)^0,w,c
  2447  001B58  6EDA               	movwf	fsr2h,c
  2448  001B5A  0E80               	movlw	low _holdingReg
  2449  001B5C  26D9               	addwf	fsr2l,f,c
  2450  001B5E  0E00               	movlw	high _holdingReg
  2451  001B60  22DA               	addwfc	fsr2h,f,c
  2452  001B62  0E7D               	movlw	low _response
  2453  001B64  241F               	addwf	readInputReg@j^0,w,c
  2454  001B66  6EE1               	movwf	fsr1l,c
  2455  001B68  6AE2               	clrf	fsr1h,c
  2456  001B6A  0E01               	movlw	high _response
  2457  001B6C  22E2               	addwfc	fsr1h,f,c
  2458  001B6E  CFDF FFE7          	movff	indf2,indf1
  2459  001B72                     
  2460                           ;modbus.c: 162: j++;
  2461  001B72  2A1F               	incf	readInputReg@j^0,f,c
  2462  001B74                     l4259:
  2463  001B74  4A1D               	infsnz	readInputReg@i^0,f,c
  2464  001B76  2A1E               	incf	(readInputReg@i+1)^0,f,c
  2465  001B78                     l4261:
  2466  001B78  501B               	movf	readInputReg@rr_numRegs^0,w,c
  2467  001B7A  2419               	addwf	readInputReg@rr_Address^0,w,c
  2468  001B7C  6E15               	movwf	??_readInputReg^0,c
  2469  001B7E  501C               	movf	(readInputReg@rr_numRegs+1)^0,w,c
  2470  001B80  201A               	addwfc	(readInputReg@rr_Address+1)^0,w,c
  2471  001B82  6E16               	movwf	(??_readInputReg+1)^0,c
  2472  001B84  5015               	movf	??_readInputReg^0,w,c
  2473  001B86  5C1D               	subwf	readInputReg@i^0,w,c
  2474  001B88  5016               	movf	(??_readInputReg+1)^0,w,c
  2475  001B8A  581E               	subwfb	(readInputReg@i+1)^0,w,c
  2476  001B8C  A0D8               	btfss	status,0,c
  2477  001B8E  EFCB  F00D         	goto	u3781
  2478  001B92  EFCD  F00D         	goto	u3780
  2479  001B96                     u3781:
  2480  001B96  EF5E  F00D         	goto	l4243
  2481  001B9A                     u3780:
  2482  001B9A                     
  2483                           ;modbus.c: 163: };modbus.c: 164: };modbus.c: 165: crc = generateCRC(j+2);
  2484  001B9A  501F               	movf	readInputReg@j^0,w,c
  2485  001B9C  0F02               	addlw	2
  2486  001B9E  ECF9  F015         	call	_generateCRC
  2487  001BA2  C003  F017         	movff	?_generateCRC,readInputReg@crc
  2488  001BA6  C004  F018         	movff	?_generateCRC+1,readInputReg@crc+1
  2489  001BAA                     
  2490                           ;modbus.c: 166: response[j] = crc >> 8;
  2491  001BAA  0E7D               	movlw	low _response
  2492  001BAC  241F               	addwf	readInputReg@j^0,w,c
  2493  001BAE  6ED9               	movwf	fsr2l,c
  2494  001BB0  6ADA               	clrf	fsr2h,c
  2495  001BB2  0E01               	movlw	high _response
  2496  001BB4  22DA               	addwfc	fsr2h,f,c
  2497  001BB6  5018               	movf	(readInputReg@crc+1)^0,w,c
  2498  001BB8  6EDF               	movwf	indf2,c
  2499  001BBA                     
  2500                           ;modbus.c: 167: j++;
  2501  001BBA  2A1F               	incf	readInputReg@j^0,f,c
  2502  001BBC                     
  2503                           ;modbus.c: 168: response[j] = crc;
  2504  001BBC  0E7D               	movlw	low _response
  2505  001BBE  241F               	addwf	readInputReg@j^0,w,c
  2506  001BC0  6ED9               	movwf	fsr2l,c
  2507  001BC2  6ADA               	clrf	fsr2h,c
  2508  001BC4  0E01               	movlw	high _response
  2509  001BC6  22DA               	addwfc	fsr2h,f,c
  2510  001BC8  C017  FFDF         	movff	readInputReg@crc,indf2
  2511  001BCC                     
  2512                           ;modbus.c: 169: j+=2;
  2513  001BCC  0E02               	movlw	2
  2514  001BCE  261F               	addwf	readInputReg@j^0,f,c
  2515  001BD0                     
  2516                           ;modbus.c: 171: LATBbits.LATB7 = 1;
  2517  001BD0  8E8A               	bsf	138,7,c	;volatile
  2518  001BD2                     
  2519                           ;modbus.c: 172: for(i=0;i!=j;i++){
  2520  001BD2  0E00               	movlw	0
  2521  001BD4  6E1E               	movwf	(readInputReg@i+1)^0,c
  2522  001BD6  0E00               	movlw	0
  2523  001BD8  6E1D               	movwf	readInputReg@i^0,c
  2524  001BDA  EF00  F00E         	goto	l4281
  2525  001BDE                     l447:
  2526  001BDE  A2AC               	btfss	172,1,c	;volatile
  2527  001BE0  EFF4  F00D         	goto	u3791
  2528  001BE4  EFF6  F00D         	goto	u3790
  2529  001BE8                     u3791:
  2530  001BE8  EFEF  F00D         	goto	l447
  2531  001BEC                     u3790:
  2532  001BEC                     
  2533                           ;modbus.c: 174: TXREG = response[i];
  2534  001BEC  0E7D               	movlw	low _response
  2535  001BEE  241D               	addwf	readInputReg@i^0,w,c
  2536  001BF0  6ED9               	movwf	fsr2l,c
  2537  001BF2  0E01               	movlw	high _response
  2538  001BF4  201E               	addwfc	(readInputReg@i+1)^0,w,c
  2539  001BF6  6EDA               	movwf	fsr2h,c
  2540  001BF8  50DF               	movf	indf2,w,c
  2541  001BFA  6EAD               	movwf	173,c	;volatile
  2542  001BFC  4A1D               	infsnz	readInputReg@i^0,f,c
  2543  001BFE  2A1E               	incf	(readInputReg@i+1)^0,f,c
  2544  001C00                     l4281:
  2545  001C00  501F               	movf	readInputReg@j^0,w,c
  2546  001C02  6E15               	movwf	??_readInputReg^0,c
  2547  001C04  6A16               	clrf	(??_readInputReg+1)^0,c
  2548  001C06  501D               	movf	readInputReg@i^0,w,c
  2549  001C08  1815               	xorwf	??_readInputReg^0,w,c
  2550  001C0A  E107               	bnz	u3801
  2551  001C0C  501E               	movf	(readInputReg@i+1)^0,w,c
  2552  001C0E  1816               	xorwf	(??_readInputReg+1)^0,w,c
  2553  001C10  A4D8               	btfss	status,2,c
  2554  001C12  EF0D  F00E         	goto	u3801
  2555  001C16  EF0F  F00E         	goto	u3800
  2556  001C1A                     u3801:
  2557  001C1A  EFEF  F00D         	goto	l447
  2558  001C1E                     u3800:
  2559  001C1E                     
  2560                           ;modbus.c: 175: };modbus.c: 176: LATBbits.LATB7 = 0;
  2561  001C1E  9E8A               	bcf	138,7,c	;volatile
  2562  001C20                     
  2563                           ;modbus.c: 179: clearResponse();
  2564  001C20  EC37  F01B         	call	_clearResponse	;wreg free
  2565  001C24  0012               	return		;funcret
  2566  001C26                     __end_of_readInputReg:
  2567                           	callstack 0
  2568                           
  2569 ;; *************** function _readInputCoil *****************
  2570 ;; Defined at:
  2571 ;;		line 319 in file "modbus.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;		None
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;  rc_numCoils     2   29[COMRAM] unsigned int 
  2576 ;;  crc             2   26[COMRAM] unsigned int 
  2577 ;;  rc_Address      2   24[COMRAM] unsigned int 
  2578 ;;  k               1   36[COMRAM] unsigned char 
  2579 ;;  j               1   35[COMRAM] unsigned char 
  2580 ;;  i               1   34[COMRAM] unsigned char 
  2581 ;;  lsb             1   33[COMRAM] unsigned char 
  2582 ;;  l               1   32[COMRAM] unsigned char 
  2583 ;;  howManyBytes    1   31[COMRAM] unsigned char 
  2584 ;;  remainder       1   28[COMRAM] unsigned char 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  1    wreg      void 
  2587 ;; Registers used:
  2588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2594 ;;      Params:         0       0       0       0       0       0       0
  2595 ;;      Locals:        13       0       0       0       0       0       0
  2596 ;;      Temps:          4       0       0       0       0       0       0
  2597 ;;      Totals:        17       0       0       0       0       0       0
  2598 ;;Total ram usage:       17 bytes
  2599 ;; Hardware stack levels used: 1
  2600 ;; Hardware stack levels required when called: 5
  2601 ;; This function calls:
  2602 ;;		_clearResponse
  2603 ;;		_generateCRC
  2604 ;; This function is called by:
  2605 ;;		_decodeIt
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text6
  2610  00144E                     __ptext6:
  2611                           	callstack 0
  2612  00144E                     _readInputCoil:
  2613                           	callstack 24
  2614  00144E                     
  2615                           ;modbus.c: 325: unsigned int rc_numCoils = 0;
  2616  00144E  0E00               	movlw	0
  2617  001450  6E1F               	movwf	(readInputCoil@rc_numCoils+1)^0,c
  2618  001452  0E00               	movlw	0
  2619  001454  6E1E               	movwf	readInputCoil@rc_numCoils^0,c
  2620                           
  2621                           ;modbus.c: 326: unsigned int crc = 0;
  2622  001456  0E00               	movlw	0
  2623  001458  6E1C               	movwf	(readInputCoil@crc+1)^0,c
  2624  00145A  0E00               	movlw	0
  2625  00145C  6E1B               	movwf	readInputCoil@crc^0,c
  2626                           
  2627                           ;modbus.c: 328: unsigned char howManyBytes = 0;
  2628  00145E  0E00               	movlw	0
  2629  001460  6E20               	movwf	readInputCoil@howManyBytes^0,c
  2630                           
  2631                           ;modbus.c: 329: unsigned char remainder = 0;
  2632  001462  0E00               	movlw	0
  2633  001464  6E1D               	movwf	readInputCoil@remainder^0,c
  2634                           
  2635                           ;modbus.c: 330: unsigned char lsb = 0;
  2636  001466  0E00               	movlw	0
  2637  001468  6E22               	movwf	readInputCoil@lsb^0,c
  2638                           
  2639                           ;modbus.c: 331: unsigned char i,j,k,l = 0;
  2640  00146A  0E00               	movlw	0
  2641  00146C  6E21               	movwf	readInputCoil@l^0,c
  2642  00146E                     
  2643                           ;modbus.c: 334: rc_Address = received[2];
  2644  00146E  C102  F019         	movff	_received+2,readInputCoil@rc_Address	;volatile
  2645  001472  6A1A               	clrf	(readInputCoil@rc_Address+1)^0,c
  2646                           
  2647                           ;modbus.c: 335: rc_Address <<=8;
  2648  001474  5019               	movf	readInputCoil@rc_Address^0,w,c
  2649  001476  6E1A               	movwf	(readInputCoil@rc_Address+1)^0,c
  2650  001478  6A19               	clrf	readInputCoil@rc_Address^0,c
  2651  00147A                     
  2652                           ;modbus.c: 336: rc_Address |= received[3];
  2653  00147A  0101               	movlb	1	; () banked
  2654  00147C  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  2655  00147E  1219               	iorwf	readInputCoil@rc_Address^0,f,c
  2656  001480                     
  2657                           ; BSR set to: 1
  2658                           ;modbus.c: 339: rc_numCoils = received[4];
  2659  001480  C104  F01E         	movff	_received+4,readInputCoil@rc_numCoils	;volatile
  2660  001484  6A1F               	clrf	(readInputCoil@rc_numCoils+1)^0,c
  2661  001486                     
  2662                           ; BSR set to: 1
  2663                           ;modbus.c: 340: rc_numCoils <<= 8;
  2664  001486  501E               	movf	readInputCoil@rc_numCoils^0,w,c
  2665  001488  6E1F               	movwf	(readInputCoil@rc_numCoils+1)^0,c
  2666  00148A  6A1E               	clrf	readInputCoil@rc_numCoils^0,c
  2667                           
  2668                           ;modbus.c: 341: rc_numCoils |= received[5];
  2669  00148C  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  2670  00148E  121E               	iorwf	readInputCoil@rc_numCoils^0,f,c
  2671  001490                     
  2672                           ; BSR set to: 1
  2673                           ;modbus.c: 343: response[0] = 1;
  2674  001490  0E01               	movlw	1
  2675  001492  6F7D               	movwf	_response& (0+255),b	;volatile
  2676  001494                     
  2677                           ; BSR set to: 1
  2678                           ;modbus.c: 344: response[1] = 0x02;
  2679  001494  0E02               	movlw	2
  2680  001496  6F7E               	movwf	(_response+1)& (0+255),b	;volatile
  2681                           
  2682                           ;modbus.c: 346: howManyBytes = rc_numCoils/8;
  2683  001498  C01E  F015         	movff	readInputCoil@rc_numCoils,??_readInputCoil
  2684  00149C  C01F  F016         	movff	readInputCoil@rc_numCoils+1,??_readInputCoil+1
  2685  0014A0  90D8               	bcf	status,0,c
  2686  0014A2  3216               	rrcf	(??_readInputCoil+1)^0,f,c
  2687  0014A4  3215               	rrcf	??_readInputCoil^0,f,c
  2688  0014A6  90D8               	bcf	status,0,c
  2689  0014A8  3216               	rrcf	(??_readInputCoil+1)^0,f,c
  2690  0014AA  3215               	rrcf	??_readInputCoil^0,f,c
  2691  0014AC  90D8               	bcf	status,0,c
  2692  0014AE  3216               	rrcf	(??_readInputCoil+1)^0,f,c
  2693  0014B0  3215               	rrcf	??_readInputCoil^0,f,c
  2694  0014B2  5015               	movf	??_readInputCoil^0,w,c
  2695  0014B4  6E20               	movwf	readInputCoil@howManyBytes^0,c
  2696                           
  2697                           ;modbus.c: 347: remainder = rc_numCoils % 8;
  2698  0014B6  501E               	movf	readInputCoil@rc_numCoils^0,w,c
  2699  0014B8  0B07               	andlw	7
  2700  0014BA  6E1D               	movwf	readInputCoil@remainder^0,c
  2701  0014BC                     
  2702                           ; BSR set to: 1
  2703                           ;modbus.c: 349: if(remainder){
  2704  0014BC  501D               	movf	readInputCoil@remainder^0,w,c
  2705  0014BE  B4D8               	btfsc	status,2,c
  2706  0014C0  EF64  F00A         	goto	u3621
  2707  0014C4  EF66  F00A         	goto	u3620
  2708  0014C8                     u3621:
  2709  0014C8  EF67  F00A         	goto	l4093
  2710  0014CC                     u3620:
  2711  0014CC                     
  2712                           ; BSR set to: 1
  2713                           ;modbus.c: 350: howManyBytes += 1;
  2714  0014CC  2A20               	incf	readInputCoil@howManyBytes^0,f,c
  2715  0014CE                     l4093:
  2716                           
  2717                           ; BSR set to: 1
  2718                           ;modbus.c: 351: };modbus.c: 352: response[2] = howManyBytes;
  2719  0014CE  C020  F17F         	movff	readInputCoil@howManyBytes,_response+2	;volatile
  2720  0014D2                     
  2721                           ; BSR set to: 1
  2722                           ;modbus.c: 354: l = rc_Address;
  2723  0014D2  C019  F021         	movff	readInputCoil@rc_Address,readInputCoil@l
  2724  0014D6                     
  2725                           ; BSR set to: 1
  2726                           ;modbus.c: 355: k = 3;
  2727  0014D6  0E03               	movlw	3
  2728  0014D8  6E25               	movwf	readInputCoil@k^0,c
  2729  0014DA                     
  2730                           ; BSR set to: 1
  2731                           ;modbus.c: 357: for(i=howManyBytes; i!=0; i--){
  2732  0014DA  C020  F023         	movff	readInputCoil@howManyBytes,readInputCoil@i
  2733  0014DE                     l4101:
  2734  0014DE  5023               	movf	readInputCoil@i^0,w,c
  2735  0014E0  A4D8               	btfss	status,2,c
  2736  0014E2  EF75  F00A         	goto	u3631
  2737  0014E6  EF77  F00A         	goto	u3630
  2738  0014EA                     u3631:
  2739  0014EA  EF79  F00A         	goto	l4105
  2740  0014EE                     u3630:
  2741  0014EE  EFF5  F00A         	goto	l4149
  2742  0014F2                     l4105:
  2743                           
  2744                           ;modbus.c: 358: if(i>1){
  2745  0014F2  0E01               	movlw	1
  2746  0014F4  6423               	cpfsgt	readInputCoil@i^0,c
  2747  0014F6  EF7F  F00A         	goto	u3641
  2748  0014FA  EF81  F00A         	goto	u3640
  2749  0014FE                     u3641:
  2750  0014FE  EFB9  F00A         	goto	l4129
  2751  001502                     u3640:
  2752  001502                     
  2753                           ;modbus.c: 359: for(j=0;j!=8;j++){
  2754  001502  0E00               	movlw	0
  2755  001504  6E24               	movwf	readInputCoil@j^0,c
  2756  001506                     l4113:
  2757                           
  2758                           ;modbus.c: 360: if(coils[l]){
  2759  001506  0E00               	movlw	low _coils
  2760  001508  2421               	addwf	readInputCoil@l^0,w,c
  2761  00150A  6ED9               	movwf	fsr2l,c
  2762  00150C  6ADA               	clrf	fsr2h,c
  2763  00150E  0E02               	movlw	high _coils
  2764  001510  22DA               	addwfc	fsr2h,f,c
  2765  001512  50DF               	movf	indf2,w,c
  2766  001514  B4D8               	btfsc	status,2,c
  2767  001516  EF8F  F00A         	goto	u3651
  2768  00151A  EF91  F00A         	goto	u3650
  2769  00151E                     u3651:
  2770  00151E  EF95  F00A         	goto	l4117
  2771  001522                     u3650:
  2772  001522                     
  2773                           ;modbus.c: 361: lsb = 1;
  2774  001522  0E01               	movlw	1
  2775  001524  6E22               	movwf	readInputCoil@lsb^0,c
  2776                           
  2777                           ;modbus.c: 362: }
  2778  001526  EF97  F00A         	goto	l4119
  2779  00152A                     l4117:
  2780                           
  2781                           ;modbus.c: 363: else{;modbus.c: 364: lsb = 0;
  2782  00152A  0E00               	movlw	0
  2783  00152C  6E22               	movwf	readInputCoil@lsb^0,c
  2784  00152E                     l4119:
  2785                           
  2786                           ;modbus.c: 365: };modbus.c: 366: response[k] ^= (lsb << j);
  2787  00152E  C024  F015         	movff	readInputCoil@j,??_readInputCoil
  2788  001532  C022  F016         	movff	readInputCoil@lsb,??_readInputCoil+1
  2789  001536  2A15               	incf	??_readInputCoil^0,f,c
  2790  001538  EFA0  F00A         	goto	u3664
  2791  00153C                     u3665:
  2792  00153C  90D8               	bcf	status,0,c
  2793  00153E  3616               	rlcf	(??_readInputCoil+1)^0,f,c
  2794  001540                     u3664:
  2795  001540  2E15               	decfsz	??_readInputCoil^0,f,c
  2796  001542  EF9E  F00A         	goto	u3665
  2797  001546  0E7D               	movlw	low _response
  2798  001548  2425               	addwf	readInputCoil@k^0,w,c
  2799  00154A  6ED9               	movwf	fsr2l,c
  2800  00154C  6ADA               	clrf	fsr2h,c
  2801  00154E  0E01               	movlw	high _response
  2802  001550  22DA               	addwfc	fsr2h,f,c
  2803  001552  5016               	movf	(??_readInputCoil+1)^0,w,c
  2804  001554  1ADF               	xorwf	indf2,f,c
  2805  001556                     
  2806                           ;modbus.c: 367: l++;
  2807  001556  2A21               	incf	readInputCoil@l^0,f,c
  2808  001558  2A24               	incf	readInputCoil@j^0,f,c
  2809  00155A  0E08               	movlw	8
  2810  00155C  1824               	xorwf	readInputCoil@j^0,w,c
  2811  00155E  A4D8               	btfss	status,2,c
  2812  001560  EFB4  F00A         	goto	u3671
  2813  001564  EFB6  F00A         	goto	u3670
  2814  001568                     u3671:
  2815  001568  EF83  F00A         	goto	l4113
  2816  00156C                     u3670:
  2817  00156C                     l4127:
  2818                           
  2819                           ;modbus.c: 368: };modbus.c: 369: k++;
  2820  00156C  2A25               	incf	readInputCoil@k^0,f,c
  2821                           
  2822                           ;modbus.c: 370: }
  2823  00156E  EFF2  F00A         	goto	l493
  2824  001572                     l4129:
  2825                           
  2826                           ;modbus.c: 371: else{;modbus.c: 372: for(j=0;j!=remainder;j++){
  2827  001572  0E00               	movlw	0
  2828  001574  6E24               	movwf	readInputCoil@j^0,c
  2829  001576  EFE7  F00A         	goto	l4143
  2830  00157A                     l4131:
  2831                           
  2832                           ;modbus.c: 373: if(coils[l]){
  2833  00157A  0E00               	movlw	low _coils
  2834  00157C  2421               	addwf	readInputCoil@l^0,w,c
  2835  00157E  6ED9               	movwf	fsr2l,c
  2836  001580  6ADA               	clrf	fsr2h,c
  2837  001582  0E02               	movlw	high _coils
  2838  001584  22DA               	addwfc	fsr2h,f,c
  2839  001586  50DF               	movf	indf2,w,c
  2840  001588  B4D8               	btfsc	status,2,c
  2841  00158A  EFC9  F00A         	goto	u3681
  2842  00158E  EFCB  F00A         	goto	u3680
  2843  001592                     u3681:
  2844  001592  EFCF  F00A         	goto	l4135
  2845  001596                     u3680:
  2846  001596                     
  2847                           ;modbus.c: 374: lsb = 1;
  2848  001596  0E01               	movlw	1
  2849  001598  6E22               	movwf	readInputCoil@lsb^0,c
  2850                           
  2851                           ;modbus.c: 375: }
  2852  00159A  EFD1  F00A         	goto	l4137
  2853  00159E                     l4135:
  2854                           
  2855                           ;modbus.c: 376: else{;modbus.c: 377: lsb = 0;
  2856  00159E  0E00               	movlw	0
  2857  0015A0  6E22               	movwf	readInputCoil@lsb^0,c
  2858  0015A2                     l4137:
  2859                           
  2860                           ;modbus.c: 378: };modbus.c: 379: response[k] ^= (lsb << j);
  2861  0015A2  C024  F015         	movff	readInputCoil@j,??_readInputCoil
  2862  0015A6  C022  F016         	movff	readInputCoil@lsb,??_readInputCoil+1
  2863  0015AA  2A15               	incf	??_readInputCoil^0,f,c
  2864  0015AC  EFDA  F00A         	goto	u3694
  2865  0015B0                     u3695:
  2866  0015B0  90D8               	bcf	status,0,c
  2867  0015B2  3616               	rlcf	(??_readInputCoil+1)^0,f,c
  2868  0015B4                     u3694:
  2869  0015B4  2E15               	decfsz	??_readInputCoil^0,f,c
  2870  0015B6  EFD8  F00A         	goto	u3695
  2871  0015BA  0E7D               	movlw	low _response
  2872  0015BC  2425               	addwf	readInputCoil@k^0,w,c
  2873  0015BE  6ED9               	movwf	fsr2l,c
  2874  0015C0  6ADA               	clrf	fsr2h,c
  2875  0015C2  0E01               	movlw	high _response
  2876  0015C4  22DA               	addwfc	fsr2h,f,c
  2877  0015C6  5016               	movf	(??_readInputCoil+1)^0,w,c
  2878  0015C8  1ADF               	xorwf	indf2,f,c
  2879  0015CA                     
  2880                           ;modbus.c: 380: l++;
  2881  0015CA  2A21               	incf	readInputCoil@l^0,f,c
  2882  0015CC  2A24               	incf	readInputCoil@j^0,f,c
  2883  0015CE                     l4143:
  2884  0015CE  501D               	movf	readInputCoil@remainder^0,w,c
  2885  0015D0  1824               	xorwf	readInputCoil@j^0,w,c
  2886  0015D2  A4D8               	btfss	status,2,c
  2887  0015D4  EFEE  F00A         	goto	u3701
  2888  0015D8  EFF0  F00A         	goto	u3700
  2889  0015DC                     u3701:
  2890  0015DC  EFBD  F00A         	goto	l4131
  2891  0015E0                     u3700:
  2892  0015E0  EFB6  F00A         	goto	l4127
  2893  0015E4                     l493:
  2894  0015E4  0623               	decf	readInputCoil@i^0,f,c
  2895  0015E6  EF6F  F00A         	goto	l4101
  2896  0015EA                     l4149:
  2897                           
  2898                           ;modbus.c: 383: };modbus.c: 384: };modbus.c: 385: crc = generateCRC(k+2);
  2899  0015EA  5025               	movf	readInputCoil@k^0,w,c
  2900  0015EC  0F02               	addlw	2
  2901  0015EE  ECF9  F015         	call	_generateCRC
  2902  0015F2  C003  F01B         	movff	?_generateCRC,readInputCoil@crc
  2903  0015F6  C004  F01C         	movff	?_generateCRC+1,readInputCoil@crc+1
  2904  0015FA                     
  2905                           ;modbus.c: 387: response[k] = crc >> 8;
  2906  0015FA  0E7D               	movlw	low _response
  2907  0015FC  2425               	addwf	readInputCoil@k^0,w,c
  2908  0015FE  6ED9               	movwf	fsr2l,c
  2909  001600  6ADA               	clrf	fsr2h,c
  2910  001602  0E01               	movlw	high _response
  2911  001604  22DA               	addwfc	fsr2h,f,c
  2912  001606  501C               	movf	(readInputCoil@crc+1)^0,w,c
  2913  001608  6EDF               	movwf	indf2,c
  2914  00160A                     
  2915                           ;modbus.c: 388: response[k+1] = crc;
  2916  00160A  0E7E               	movlw	low (_response+1)
  2917  00160C  2425               	addwf	readInputCoil@k^0,w,c
  2918  00160E  6ED9               	movwf	fsr2l,c
  2919  001610  6ADA               	clrf	fsr2h,c
  2920  001612  0E01               	movlw	high (_response+1)
  2921  001614  22DA               	addwfc	fsr2h,f,c
  2922  001616  C01B  FFDF         	movff	readInputCoil@crc,indf2
  2923  00161A                     
  2924                           ;modbus.c: 390: LATBbits.LATB7 = 1;
  2925  00161A  8E8A               	bsf	138,7,c	;volatile
  2926  00161C                     
  2927                           ;modbus.c: 391: for(i=0;i!=(k+3);i++){
  2928  00161C  0E00               	movlw	0
  2929  00161E  6E23               	movwf	readInputCoil@i^0,c
  2930  001620  EF22  F00B         	goto	l4163
  2931  001624                     l501:
  2932  001624  A2AC               	btfss	172,1,c	;volatile
  2933  001626  EF17  F00B         	goto	u3711
  2934  00162A  EF19  F00B         	goto	u3710
  2935  00162E                     u3711:
  2936  00162E  EF12  F00B         	goto	l501
  2937  001632                     u3710:
  2938  001632                     
  2939                           ;modbus.c: 393: TXREG = response[i];
  2940  001632  0E7D               	movlw	low _response
  2941  001634  2423               	addwf	readInputCoil@i^0,w,c
  2942  001636  6ED9               	movwf	fsr2l,c
  2943  001638  6ADA               	clrf	fsr2h,c
  2944  00163A  0E01               	movlw	high _response
  2945  00163C  22DA               	addwfc	fsr2h,f,c
  2946  00163E  50DF               	movf	indf2,w,c
  2947  001640  6EAD               	movwf	173,c	;volatile
  2948  001642  2A23               	incf	readInputCoil@i^0,f,c
  2949  001644                     l4163:
  2950  001644  5023               	movf	readInputCoil@i^0,w,c
  2951  001646  6E15               	movwf	??_readInputCoil^0,c
  2952  001648  6A16               	clrf	(??_readInputCoil+1)^0,c
  2953  00164A  5025               	movf	readInputCoil@k^0,w,c
  2954  00164C  6E17               	movwf	(??_readInputCoil+2)^0,c
  2955  00164E  6A18               	clrf	(??_readInputCoil+3)^0,c
  2956  001650  0E03               	movlw	3
  2957  001652  2617               	addwf	(??_readInputCoil+2)^0,f,c
  2958  001654  0E00               	movlw	0
  2959  001656  2218               	addwfc	(??_readInputCoil+3)^0,f,c
  2960  001658  5015               	movf	??_readInputCoil^0,w,c
  2961  00165A  1817               	xorwf	(??_readInputCoil+2)^0,w,c
  2962  00165C  E107               	bnz	u3721
  2963  00165E  5016               	movf	(??_readInputCoil+1)^0,w,c
  2964  001660  1818               	xorwf	(??_readInputCoil+3)^0,w,c
  2965  001662  A4D8               	btfss	status,2,c
  2966  001664  EF36  F00B         	goto	u3721
  2967  001668  EF38  F00B         	goto	u3720
  2968  00166C                     u3721:
  2969  00166C  EF12  F00B         	goto	l501
  2970  001670                     u3720:
  2971  001670                     
  2972                           ;modbus.c: 394: };modbus.c: 395: LATBbits.LATB7 = 0;
  2973  001670  9E8A               	bcf	138,7,c	;volatile
  2974  001672                     
  2975                           ;modbus.c: 396: clearResponse();
  2976  001672  EC37  F01B         	call	_clearResponse	;wreg free
  2977  001676  0012               	return		;funcret
  2978  001678                     __end_of_readInputCoil:
  2979                           	callstack 0
  2980                           
  2981 ;; *************** function _readCoil *****************
  2982 ;; Defined at:
  2983 ;;		line 239 in file "modbus.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;		None
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  rc_numCoils     2   29[COMRAM] unsigned int 
  2988 ;;  crc             2   26[COMRAM] unsigned int 
  2989 ;;  rc_Address      2   24[COMRAM] unsigned int 
  2990 ;;  k               1   36[COMRAM] unsigned char 
  2991 ;;  j               1   35[COMRAM] unsigned char 
  2992 ;;  i               1   34[COMRAM] unsigned char 
  2993 ;;  lsb             1   33[COMRAM] unsigned char 
  2994 ;;  l               1   32[COMRAM] unsigned char 
  2995 ;;  howManyBytes    1   31[COMRAM] unsigned char 
  2996 ;;  remainder       1   28[COMRAM] unsigned char 
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  1    wreg      void 
  2999 ;; Registers used:
  3000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3006 ;;      Params:         0       0       0       0       0       0       0
  3007 ;;      Locals:        13       0       0       0       0       0       0
  3008 ;;      Temps:          4       0       0       0       0       0       0
  3009 ;;      Totals:        17       0       0       0       0       0       0
  3010 ;;Total ram usage:       17 bytes
  3011 ;; Hardware stack levels used: 1
  3012 ;; Hardware stack levels required when called: 5
  3013 ;; This function calls:
  3014 ;;		_clearResponse
  3015 ;;		_generateCRC
  3016 ;; This function is called by:
  3017 ;;		_decodeIt
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text7
  3022  001678                     __ptext7:
  3023                           	callstack 0
  3024  001678                     _readCoil:
  3025                           	callstack 24
  3026  001678                     
  3027                           ;modbus.c: 245: unsigned int rc_numCoils = 0;
  3028  001678  0E00               	movlw	0
  3029  00167A  6E1F               	movwf	(readCoil@rc_numCoils+1)^0,c
  3030  00167C  0E00               	movlw	0
  3031  00167E  6E1E               	movwf	readCoil@rc_numCoils^0,c
  3032                           
  3033                           ;modbus.c: 246: unsigned int crc = 0;
  3034  001680  0E00               	movlw	0
  3035  001682  6E1C               	movwf	(readCoil@crc+1)^0,c
  3036  001684  0E00               	movlw	0
  3037  001686  6E1B               	movwf	readCoil@crc^0,c
  3038                           
  3039                           ;modbus.c: 248: unsigned char howManyBytes = 0;
  3040  001688  0E00               	movlw	0
  3041  00168A  6E20               	movwf	readCoil@howManyBytes^0,c
  3042                           
  3043                           ;modbus.c: 249: unsigned char remainder = 0;
  3044  00168C  0E00               	movlw	0
  3045  00168E  6E1D               	movwf	readCoil@remainder^0,c
  3046                           
  3047                           ;modbus.c: 250: unsigned char lsb = 0;
  3048  001690  0E00               	movlw	0
  3049  001692  6E22               	movwf	readCoil@lsb^0,c
  3050                           
  3051                           ;modbus.c: 251: unsigned char i,j,k,l = 0;
  3052  001694  0E00               	movlw	0
  3053  001696  6E21               	movwf	readCoil@l^0,c
  3054  001698                     
  3055                           ;modbus.c: 254: rc_Address = received[2];
  3056  001698  C102  F019         	movff	_received+2,readCoil@rc_Address	;volatile
  3057  00169C  6A1A               	clrf	(readCoil@rc_Address+1)^0,c
  3058                           
  3059                           ;modbus.c: 255: rc_Address <<=8;
  3060  00169E  5019               	movf	readCoil@rc_Address^0,w,c
  3061  0016A0  6E1A               	movwf	(readCoil@rc_Address+1)^0,c
  3062  0016A2  6A19               	clrf	readCoil@rc_Address^0,c
  3063  0016A4                     
  3064                           ;modbus.c: 256: rc_Address |= received[3];
  3065  0016A4  0101               	movlb	1	; () banked
  3066  0016A6  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  3067  0016A8  1219               	iorwf	readCoil@rc_Address^0,f,c
  3068  0016AA                     
  3069                           ; BSR set to: 1
  3070                           ;modbus.c: 259: rc_numCoils = received[4];
  3071  0016AA  C104  F01E         	movff	_received+4,readCoil@rc_numCoils	;volatile
  3072  0016AE  6A1F               	clrf	(readCoil@rc_numCoils+1)^0,c
  3073  0016B0                     
  3074                           ; BSR set to: 1
  3075                           ;modbus.c: 260: rc_numCoils <<= 8;
  3076  0016B0  501E               	movf	readCoil@rc_numCoils^0,w,c
  3077  0016B2  6E1F               	movwf	(readCoil@rc_numCoils+1)^0,c
  3078  0016B4  6A1E               	clrf	readCoil@rc_numCoils^0,c
  3079                           
  3080                           ;modbus.c: 261: rc_numCoils |= received[5];
  3081  0016B6  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  3082  0016B8  121E               	iorwf	readCoil@rc_numCoils^0,f,c
  3083  0016BA                     
  3084                           ; BSR set to: 1
  3085                           ;modbus.c: 263: response[0] = 1;
  3086  0016BA  0E01               	movlw	1
  3087  0016BC  6F7D               	movwf	_response& (0+255),b	;volatile
  3088  0016BE                     
  3089                           ; BSR set to: 1
  3090                           ;modbus.c: 264: response[1] = 0x01;
  3091  0016BE  0E01               	movlw	1
  3092  0016C0  6F7E               	movwf	(_response+1)& (0+255),b	;volatile
  3093                           
  3094                           ;modbus.c: 266: howManyBytes = rc_numCoils/8;
  3095  0016C2  C01E  F015         	movff	readCoil@rc_numCoils,??_readCoil
  3096  0016C6  C01F  F016         	movff	readCoil@rc_numCoils+1,??_readCoil+1
  3097  0016CA  90D8               	bcf	status,0,c
  3098  0016CC  3216               	rrcf	(??_readCoil+1)^0,f,c
  3099  0016CE  3215               	rrcf	??_readCoil^0,f,c
  3100  0016D0  90D8               	bcf	status,0,c
  3101  0016D2  3216               	rrcf	(??_readCoil+1)^0,f,c
  3102  0016D4  3215               	rrcf	??_readCoil^0,f,c
  3103  0016D6  90D8               	bcf	status,0,c
  3104  0016D8  3216               	rrcf	(??_readCoil+1)^0,f,c
  3105  0016DA  3215               	rrcf	??_readCoil^0,f,c
  3106  0016DC  5015               	movf	??_readCoil^0,w,c
  3107  0016DE  6E20               	movwf	readCoil@howManyBytes^0,c
  3108                           
  3109                           ;modbus.c: 267: remainder = rc_numCoils % 8;
  3110  0016E0  501E               	movf	readCoil@rc_numCoils^0,w,c
  3111  0016E2  0B07               	andlw	7
  3112  0016E4  6E1D               	movwf	readCoil@remainder^0,c
  3113  0016E6                     
  3114                           ; BSR set to: 1
  3115                           ;modbus.c: 269: if(remainder){
  3116  0016E6  501D               	movf	readCoil@remainder^0,w,c
  3117  0016E8  B4D8               	btfsc	status,2,c
  3118  0016EA  EF79  F00B         	goto	u3511
  3119  0016EE  EF7B  F00B         	goto	u3510
  3120  0016F2                     u3511:
  3121  0016F2  EF7C  F00B         	goto	l4001
  3122  0016F6                     u3510:
  3123  0016F6                     
  3124                           ; BSR set to: 1
  3125                           ;modbus.c: 270: howManyBytes += 1;
  3126  0016F6  2A20               	incf	readCoil@howManyBytes^0,f,c
  3127  0016F8                     l4001:
  3128                           
  3129                           ; BSR set to: 1
  3130                           ;modbus.c: 271: };modbus.c: 272: response[2] = howManyBytes;
  3131  0016F8  C020  F17F         	movff	readCoil@howManyBytes,_response+2	;volatile
  3132  0016FC                     
  3133                           ; BSR set to: 1
  3134                           ;modbus.c: 274: l = rc_Address;
  3135  0016FC  C019  F021         	movff	readCoil@rc_Address,readCoil@l
  3136  001700                     
  3137                           ; BSR set to: 1
  3138                           ;modbus.c: 275: k = 3;
  3139  001700  0E03               	movlw	3
  3140  001702  6E25               	movwf	readCoil@k^0,c
  3141  001704                     
  3142                           ; BSR set to: 1
  3143                           ;modbus.c: 277: for(i=howManyBytes; i!=0; i--){
  3144  001704  C020  F023         	movff	readCoil@howManyBytes,readCoil@i
  3145  001708                     l4009:
  3146  001708  5023               	movf	readCoil@i^0,w,c
  3147  00170A  A4D8               	btfss	status,2,c
  3148  00170C  EF8A  F00B         	goto	u3521
  3149  001710  EF8C  F00B         	goto	u3520
  3150  001714                     u3521:
  3151  001714  EF8E  F00B         	goto	l4013
  3152  001718                     u3520:
  3153  001718  EF0A  F00C         	goto	l4057
  3154  00171C                     l4013:
  3155                           
  3156                           ;modbus.c: 278: if(i>1){
  3157  00171C  0E01               	movlw	1
  3158  00171E  6423               	cpfsgt	readCoil@i^0,c
  3159  001720  EF94  F00B         	goto	u3531
  3160  001724  EF96  F00B         	goto	u3530
  3161  001728                     u3531:
  3162  001728  EFCE  F00B         	goto	l4037
  3163  00172C                     u3530:
  3164  00172C                     
  3165                           ;modbus.c: 279: for(j=0;j!=8;j++){
  3166  00172C  0E00               	movlw	0
  3167  00172E  6E24               	movwf	readCoil@j^0,c
  3168  001730                     l4021:
  3169                           
  3170                           ;modbus.c: 280: if(coils[l]){
  3171  001730  0E00               	movlw	low _coils
  3172  001732  2421               	addwf	readCoil@l^0,w,c
  3173  001734  6ED9               	movwf	fsr2l,c
  3174  001736  6ADA               	clrf	fsr2h,c
  3175  001738  0E02               	movlw	high _coils
  3176  00173A  22DA               	addwfc	fsr2h,f,c
  3177  00173C  50DF               	movf	indf2,w,c
  3178  00173E  B4D8               	btfsc	status,2,c
  3179  001740  EFA4  F00B         	goto	u3541
  3180  001744  EFA6  F00B         	goto	u3540
  3181  001748                     u3541:
  3182  001748  EFAA  F00B         	goto	l4025
  3183  00174C                     u3540:
  3184  00174C                     
  3185                           ;modbus.c: 281: lsb = 1;
  3186  00174C  0E01               	movlw	1
  3187  00174E  6E22               	movwf	readCoil@lsb^0,c
  3188                           
  3189                           ;modbus.c: 282: }
  3190  001750  EFAC  F00B         	goto	l4027
  3191  001754                     l4025:
  3192                           
  3193                           ;modbus.c: 283: else{;modbus.c: 284: lsb = 0;
  3194  001754  0E00               	movlw	0
  3195  001756  6E22               	movwf	readCoil@lsb^0,c
  3196  001758                     l4027:
  3197                           
  3198                           ;modbus.c: 285: };modbus.c: 286: response[k] ^= (lsb << j);
  3199  001758  C024  F015         	movff	readCoil@j,??_readCoil
  3200  00175C  C022  F016         	movff	readCoil@lsb,??_readCoil+1
  3201  001760  2A15               	incf	??_readCoil^0,f,c
  3202  001762  EFB5  F00B         	goto	u3554
  3203  001766                     u3555:
  3204  001766  90D8               	bcf	status,0,c
  3205  001768  3616               	rlcf	(??_readCoil+1)^0,f,c
  3206  00176A                     u3554:
  3207  00176A  2E15               	decfsz	??_readCoil^0,f,c
  3208  00176C  EFB3  F00B         	goto	u3555
  3209  001770  0E7D               	movlw	low _response
  3210  001772  2425               	addwf	readCoil@k^0,w,c
  3211  001774  6ED9               	movwf	fsr2l,c
  3212  001776  6ADA               	clrf	fsr2h,c
  3213  001778  0E01               	movlw	high _response
  3214  00177A  22DA               	addwfc	fsr2h,f,c
  3215  00177C  5016               	movf	(??_readCoil+1)^0,w,c
  3216  00177E  1ADF               	xorwf	indf2,f,c
  3217  001780                     
  3218                           ;modbus.c: 287: l++;
  3219  001780  2A21               	incf	readCoil@l^0,f,c
  3220  001782  2A24               	incf	readCoil@j^0,f,c
  3221  001784  0E08               	movlw	8
  3222  001786  1824               	xorwf	readCoil@j^0,w,c
  3223  001788  A4D8               	btfss	status,2,c
  3224  00178A  EFC9  F00B         	goto	u3561
  3225  00178E  EFCB  F00B         	goto	u3560
  3226  001792                     u3561:
  3227  001792  EF98  F00B         	goto	l4021
  3228  001796                     u3560:
  3229  001796                     l4035:
  3230                           
  3231                           ;modbus.c: 288: };modbus.c: 289: k++;
  3232  001796  2A25               	incf	readCoil@k^0,f,c
  3233                           
  3234                           ;modbus.c: 290: }
  3235  001798  EF07  F00C         	goto	l470
  3236  00179C                     l4037:
  3237                           
  3238                           ;modbus.c: 291: else{;modbus.c: 292: for(j=0;j!=remainder;j++){
  3239  00179C  0E00               	movlw	0
  3240  00179E  6E24               	movwf	readCoil@j^0,c
  3241  0017A0  EFFC  F00B         	goto	l4051
  3242  0017A4                     l4039:
  3243                           
  3244                           ;modbus.c: 293: if(coils[l]){
  3245  0017A4  0E00               	movlw	low _coils
  3246  0017A6  2421               	addwf	readCoil@l^0,w,c
  3247  0017A8  6ED9               	movwf	fsr2l,c
  3248  0017AA  6ADA               	clrf	fsr2h,c
  3249  0017AC  0E02               	movlw	high _coils
  3250  0017AE  22DA               	addwfc	fsr2h,f,c
  3251  0017B0  50DF               	movf	indf2,w,c
  3252  0017B2  B4D8               	btfsc	status,2,c
  3253  0017B4  EFDE  F00B         	goto	u3571
  3254  0017B8  EFE0  F00B         	goto	u3570
  3255  0017BC                     u3571:
  3256  0017BC  EFE4  F00B         	goto	l4043
  3257  0017C0                     u3570:
  3258  0017C0                     
  3259                           ;modbus.c: 294: lsb = 1;
  3260  0017C0  0E01               	movlw	1
  3261  0017C2  6E22               	movwf	readCoil@lsb^0,c
  3262                           
  3263                           ;modbus.c: 295: }
  3264  0017C4  EFE6  F00B         	goto	l4045
  3265  0017C8                     l4043:
  3266                           
  3267                           ;modbus.c: 296: else{;modbus.c: 297: lsb = 0;
  3268  0017C8  0E00               	movlw	0
  3269  0017CA  6E22               	movwf	readCoil@lsb^0,c
  3270  0017CC                     l4045:
  3271                           
  3272                           ;modbus.c: 298: };modbus.c: 299: response[k] ^= (lsb << j);
  3273  0017CC  C024  F015         	movff	readCoil@j,??_readCoil
  3274  0017D0  C022  F016         	movff	readCoil@lsb,??_readCoil+1
  3275  0017D4  2A15               	incf	??_readCoil^0,f,c
  3276  0017D6  EFEF  F00B         	goto	u3584
  3277  0017DA                     u3585:
  3278  0017DA  90D8               	bcf	status,0,c
  3279  0017DC  3616               	rlcf	(??_readCoil+1)^0,f,c
  3280  0017DE                     u3584:
  3281  0017DE  2E15               	decfsz	??_readCoil^0,f,c
  3282  0017E0  EFED  F00B         	goto	u3585
  3283  0017E4  0E7D               	movlw	low _response
  3284  0017E6  2425               	addwf	readCoil@k^0,w,c
  3285  0017E8  6ED9               	movwf	fsr2l,c
  3286  0017EA  6ADA               	clrf	fsr2h,c
  3287  0017EC  0E01               	movlw	high _response
  3288  0017EE  22DA               	addwfc	fsr2h,f,c
  3289  0017F0  5016               	movf	(??_readCoil+1)^0,w,c
  3290  0017F2  1ADF               	xorwf	indf2,f,c
  3291  0017F4                     
  3292                           ;modbus.c: 300: l++;
  3293  0017F4  2A21               	incf	readCoil@l^0,f,c
  3294  0017F6  2A24               	incf	readCoil@j^0,f,c
  3295  0017F8                     l4051:
  3296  0017F8  501D               	movf	readCoil@remainder^0,w,c
  3297  0017FA  1824               	xorwf	readCoil@j^0,w,c
  3298  0017FC  A4D8               	btfss	status,2,c
  3299  0017FE  EF03  F00C         	goto	u3591
  3300  001802  EF05  F00C         	goto	u3590
  3301  001806                     u3591:
  3302  001806  EFD2  F00B         	goto	l4039
  3303  00180A                     u3590:
  3304  00180A  EFCB  F00B         	goto	l4035
  3305  00180E                     l470:
  3306  00180E  0623               	decf	readCoil@i^0,f,c
  3307  001810  EF84  F00B         	goto	l4009
  3308  001814                     l4057:
  3309                           
  3310                           ;modbus.c: 303: };modbus.c: 304: };modbus.c: 305: crc = generateCRC(k+2);
  3311  001814  5025               	movf	readCoil@k^0,w,c
  3312  001816  0F02               	addlw	2
  3313  001818  ECF9  F015         	call	_generateCRC
  3314  00181C  C003  F01B         	movff	?_generateCRC,readCoil@crc
  3315  001820  C004  F01C         	movff	?_generateCRC+1,readCoil@crc+1
  3316  001824                     
  3317                           ;modbus.c: 307: response[k] = crc >> 8;
  3318  001824  0E7D               	movlw	low _response
  3319  001826  2425               	addwf	readCoil@k^0,w,c
  3320  001828  6ED9               	movwf	fsr2l,c
  3321  00182A  6ADA               	clrf	fsr2h,c
  3322  00182C  0E01               	movlw	high _response
  3323  00182E  22DA               	addwfc	fsr2h,f,c
  3324  001830  501C               	movf	(readCoil@crc+1)^0,w,c
  3325  001832  6EDF               	movwf	indf2,c
  3326  001834                     
  3327                           ;modbus.c: 308: response[k+1] = crc;
  3328  001834  0E7E               	movlw	low (_response+1)
  3329  001836  2425               	addwf	readCoil@k^0,w,c
  3330  001838  6ED9               	movwf	fsr2l,c
  3331  00183A  6ADA               	clrf	fsr2h,c
  3332  00183C  0E01               	movlw	high (_response+1)
  3333  00183E  22DA               	addwfc	fsr2h,f,c
  3334  001840  C01B  FFDF         	movff	readCoil@crc,indf2
  3335  001844                     
  3336                           ;modbus.c: 310: LATBbits.LATB7 = 1;
  3337  001844  8E8A               	bsf	138,7,c	;volatile
  3338  001846                     
  3339                           ;modbus.c: 311: for(i=0;i!=(k+3);i++){
  3340  001846  0E00               	movlw	0
  3341  001848  6E23               	movwf	readCoil@i^0,c
  3342  00184A  EF37  F00C         	goto	l4071
  3343  00184E                     l478:
  3344  00184E  A2AC               	btfss	172,1,c	;volatile
  3345  001850  EF2C  F00C         	goto	u3601
  3346  001854  EF2E  F00C         	goto	u3600
  3347  001858                     u3601:
  3348  001858  EF27  F00C         	goto	l478
  3349  00185C                     u3600:
  3350  00185C                     
  3351                           ;modbus.c: 313: TXREG = response[i];
  3352  00185C  0E7D               	movlw	low _response
  3353  00185E  2423               	addwf	readCoil@i^0,w,c
  3354  001860  6ED9               	movwf	fsr2l,c
  3355  001862  6ADA               	clrf	fsr2h,c
  3356  001864  0E01               	movlw	high _response
  3357  001866  22DA               	addwfc	fsr2h,f,c
  3358  001868  50DF               	movf	indf2,w,c
  3359  00186A  6EAD               	movwf	173,c	;volatile
  3360  00186C  2A23               	incf	readCoil@i^0,f,c
  3361  00186E                     l4071:
  3362  00186E  5023               	movf	readCoil@i^0,w,c
  3363  001870  6E15               	movwf	??_readCoil^0,c
  3364  001872  6A16               	clrf	(??_readCoil+1)^0,c
  3365  001874  5025               	movf	readCoil@k^0,w,c
  3366  001876  6E17               	movwf	(??_readCoil+2)^0,c
  3367  001878  6A18               	clrf	(??_readCoil+3)^0,c
  3368  00187A  0E03               	movlw	3
  3369  00187C  2617               	addwf	(??_readCoil+2)^0,f,c
  3370  00187E  0E00               	movlw	0
  3371  001880  2218               	addwfc	(??_readCoil+3)^0,f,c
  3372  001882  5015               	movf	??_readCoil^0,w,c
  3373  001884  1817               	xorwf	(??_readCoil+2)^0,w,c
  3374  001886  E107               	bnz	u3611
  3375  001888  5016               	movf	(??_readCoil+1)^0,w,c
  3376  00188A  1818               	xorwf	(??_readCoil+3)^0,w,c
  3377  00188C  A4D8               	btfss	status,2,c
  3378  00188E  EF4B  F00C         	goto	u3611
  3379  001892  EF4D  F00C         	goto	u3610
  3380  001896                     u3611:
  3381  001896  EF27  F00C         	goto	l478
  3382  00189A                     u3610:
  3383  00189A                     
  3384                           ;modbus.c: 314: };modbus.c: 315: LATBbits.LATB7 = 0;
  3385  00189A  9E8A               	bcf	138,7,c	;volatile
  3386  00189C                     
  3387                           ;modbus.c: 316: clearResponse();
  3388  00189C  EC37  F01B         	call	_clearResponse	;wreg free
  3389  0018A0  0012               	return		;funcret
  3390  0018A2                     __end_of_readCoil:
  3391                           	callstack 0
  3392                           
  3393 ;; *************** function _generateCRC *****************
  3394 ;; Defined at:
  3395 ;;		line 460 in file "modbus.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;  messageLengt    1    wreg     unsigned char 
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  messageLengt    1    9[COMRAM] unsigned char 
  3400 ;;  crc             2   18[COMRAM] unsigned int 
  3401 ;;  j               2   16[COMRAM] int 
  3402 ;;  i               2   14[COMRAM] int 
  3403 ;;  crcHigh         2   12[COMRAM] unsigned int 
  3404 ;;  crcLow          2   10[COMRAM] unsigned int 
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  2    2[COMRAM] unsigned int 
  3407 ;; Registers used:
  3408 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3414 ;;      Params:         2       0       0       0       0       0       0
  3415 ;;      Locals:        11       0       0       0       0       0       0
  3416 ;;      Temps:          5       0       0       0       0       0       0
  3417 ;;      Totals:        18       0       0       0       0       0       0
  3418 ;;Total ram usage:       18 bytes
  3419 ;; Hardware stack levels used: 1
  3420 ;; Hardware stack levels required when called: 2
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		_readReg
  3425 ;;		_readInputReg
  3426 ;;		_writeReg
  3427 ;;		_readCoil
  3428 ;;		_readInputCoil
  3429 ;;		_writeCoil
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text8
  3434  002BF2                     __ptext8:
  3435                           	callstack 0
  3436  002BF2                     _generateCRC:
  3437                           	callstack 26
  3438                           
  3439                           ;incstack = 0
  3440                           ;generateCRC@messageLength stored from wreg
  3441  002BF2  6E0A               	movwf	generateCRC@messageLength^0,c
  3442  002BF4                     
  3443                           ;modbus.c: 462: unsigned int crc = 0xFFFF;
  3444  002BF4  6813               	setf	generateCRC@crc^0,c
  3445  002BF6  6814               	setf	(generateCRC@crc+1)^0,c
  3446  002BF8                     
  3447                           ;modbus.c: 464: unsigned int crcLow = 0;
  3448  002BF8  0E00               	movlw	0
  3449  002BFA  6E0C               	movwf	(generateCRC@crcLow+1)^0,c
  3450  002BFC  0E00               	movlw	0
  3451  002BFE  6E0B               	movwf	generateCRC@crcLow^0,c
  3452                           
  3453                           ;modbus.c: 465: int i,j = 0;
  3454  002C00  0E00               	movlw	0
  3455  002C02  6E12               	movwf	(generateCRC@j+1)^0,c
  3456  002C04  0E00               	movlw	0
  3457  002C06  6E11               	movwf	generateCRC@j^0,c
  3458                           
  3459                           ;modbus.c: 467: for(i=0;i<messageLength-2;i++){
  3460  002C08  0E00               	movlw	0
  3461  002C0A  6E10               	movwf	(generateCRC@i+1)^0,c
  3462  002C0C  0E00               	movlw	0
  3463  002C0E  6E0F               	movwf	generateCRC@i^0,c
  3464  002C10  EF39  F016         	goto	l3881
  3465  002C14                     l3863:
  3466                           
  3467                           ;modbus.c: 468: crc ^= response[i];
  3468  002C14  0E7D               	movlw	low _response
  3469  002C16  240F               	addwf	generateCRC@i^0,w,c
  3470  002C18  6ED9               	movwf	fsr2l,c
  3471  002C1A  0E01               	movlw	high _response
  3472  002C1C  2010               	addwfc	(generateCRC@i+1)^0,w,c
  3473  002C1E  6EDA               	movwf	fsr2h,c
  3474  002C20  50DF               	movf	indf2,w,c
  3475  002C22  6E05               	movwf	??_generateCRC^0,c
  3476  002C24  5005               	movf	??_generateCRC^0,w,c
  3477  002C26  1A13               	xorwf	generateCRC@crc^0,f,c
  3478  002C28                     
  3479                           ;modbus.c: 469: for(j=8; j!=0; j--){
  3480  002C28  0E00               	movlw	0
  3481  002C2A  6E12               	movwf	(generateCRC@j+1)^0,c
  3482  002C2C  0E08               	movlw	8
  3483  002C2E  6E11               	movwf	generateCRC@j^0,c
  3484  002C30                     l520:
  3485                           
  3486                           ;modbus.c: 470: if((crc & 0x0001) != 0){
  3487  002C30  A013               	btfss	generateCRC@crc^0,0,c
  3488  002C32  EF1D  F016         	goto	u3311
  3489  002C36  EF1F  F016         	goto	u3310
  3490  002C3A                     u3311:
  3491  002C3A  EF28  F016         	goto	l3875
  3492  002C3E                     u3310:
  3493  002C3E                     
  3494                           ;modbus.c: 471: crc >>= 1;
  3495  002C3E  90D8               	bcf	status,0,c
  3496  002C40  3214               	rrcf	(generateCRC@crc+1)^0,f,c
  3497  002C42  3213               	rrcf	generateCRC@crc^0,f,c
  3498  002C44                     
  3499                           ;modbus.c: 472: crc ^= 0xA001;
  3500  002C44  0E01               	movlw	1
  3501  002C46  1A13               	xorwf	generateCRC@crc^0,f,c
  3502  002C48  0EA0               	movlw	160
  3503  002C4A  1A14               	xorwf	(generateCRC@crc+1)^0,f,c
  3504                           
  3505                           ;modbus.c: 473: }
  3506  002C4C  EF2B  F016         	goto	l523
  3507  002C50                     l3875:
  3508                           
  3509                           ;modbus.c: 474: else{;modbus.c: 475: crc >>= 1;
  3510  002C50  90D8               	bcf	status,0,c
  3511  002C52  3214               	rrcf	(generateCRC@crc+1)^0,f,c
  3512  002C54  3213               	rrcf	generateCRC@crc^0,f,c
  3513  002C56                     l523:
  3514  002C56  0611               	decf	generateCRC@j^0,f,c
  3515  002C58  A0D8               	btfss	status,0,c
  3516  002C5A  0612               	decf	(generateCRC@j+1)^0,f,c
  3517  002C5C  5011               	movf	generateCRC@j^0,w,c
  3518  002C5E  1012               	iorwf	(generateCRC@j+1)^0,w,c
  3519  002C60  A4D8               	btfss	status,2,c
  3520  002C62  EF35  F016         	goto	u3321
  3521  002C66  EF37  F016         	goto	u3320
  3522  002C6A                     u3321:
  3523  002C6A  EF18  F016         	goto	l520
  3524  002C6E                     u3320:
  3525  002C6E  4A0F               	infsnz	generateCRC@i^0,f,c
  3526  002C70  2A10               	incf	(generateCRC@i+1)^0,f,c
  3527  002C72                     l3881:
  3528  002C72  0EFE               	movlw	254
  3529  002C74  6E05               	movwf	??_generateCRC^0,c
  3530  002C76  0EFF               	movlw	255
  3531  002C78  6E06               	movwf	(??_generateCRC+1)^0,c
  3532  002C7A  500A               	movf	generateCRC@messageLength^0,w,c
  3533  002C7C  6E07               	movwf	(??_generateCRC+2)^0,c
  3534  002C7E  6A08               	clrf	(??_generateCRC+3)^0,c
  3535  002C80  5005               	movf	??_generateCRC^0,w,c
  3536  002C82  2607               	addwf	(??_generateCRC+2)^0,f,c
  3537  002C84  5006               	movf	(??_generateCRC+1)^0,w,c
  3538  002C86  2208               	addwfc	(??_generateCRC+3)^0,f,c
  3539  002C88  5007               	movf	(??_generateCRC+2)^0,w,c
  3540  002C8A  5C0F               	subwf	generateCRC@i^0,w,c
  3541  002C8C  5010               	movf	(generateCRC@i+1)^0,w,c
  3542  002C8E  0A80               	xorlw	128
  3543  002C90  6E09               	movwf	(??_generateCRC+4)^0,c
  3544  002C92  5008               	movf	(??_generateCRC+3)^0,w,c
  3545  002C94  0A80               	xorlw	128
  3546  002C96  5809               	subwfb	(??_generateCRC+4)^0,w,c
  3547  002C98  A0D8               	btfss	status,0,c
  3548  002C9A  EF51  F016         	goto	u3331
  3549  002C9E  EF53  F016         	goto	u3330
  3550  002CA2                     u3331:
  3551  002CA2  EF0A  F016         	goto	l3863
  3552  002CA6                     u3330:
  3553  002CA6                     
  3554                           ;modbus.c: 476: };modbus.c: 477: };modbus.c: 478: };modbus.c: 480: crcHigh = (crc & 0x00
      +                          FF) <<8;
  3555  002CA6  5013               	movf	generateCRC@crc^0,w,c
  3556  002CA8  6E06               	movwf	(??_generateCRC+1)^0,c
  3557  002CAA  6A05               	clrf	??_generateCRC^0,c
  3558  002CAC  C005  F00D         	movff	??_generateCRC,generateCRC@crcHigh
  3559  002CB0  C006  F00E         	movff	??_generateCRC+1,generateCRC@crcHigh+1
  3560                           
  3561                           ;modbus.c: 481: crcLow = (crc & 0xFF00) >>8;
  3562  002CB4  C013  F005         	movff	generateCRC@crc,??_generateCRC
  3563  002CB8  C014  F006         	movff	generateCRC@crc+1,??_generateCRC+1
  3564  002CBC  C006  F005         	movff	??_generateCRC+1,??_generateCRC
  3565  002CC0  6A06               	clrf	(??_generateCRC+1)^0,c
  3566  002CC2  5005               	movf	??_generateCRC^0,w,c
  3567  002CC4  6E0B               	movwf	generateCRC@crcLow^0,c
  3568  002CC6  6A0C               	clrf	(generateCRC@crcLow+1)^0,c
  3569  002CC8                     
  3570                           ;modbus.c: 482: crcHigh |= crcLow;
  3571  002CC8  500B               	movf	generateCRC@crcLow^0,w,c
  3572  002CCA  120D               	iorwf	generateCRC@crcHigh^0,f,c
  3573  002CCC  500C               	movf	(generateCRC@crcLow+1)^0,w,c
  3574  002CCE  120E               	iorwf	(generateCRC@crcHigh+1)^0,f,c
  3575  002CD0                     
  3576                           ;modbus.c: 483: crc = crcHigh;
  3577  002CD0  C00D  F013         	movff	generateCRC@crcHigh,generateCRC@crc
  3578  002CD4  C00E  F014         	movff	generateCRC@crcHigh+1,generateCRC@crc+1
  3579  002CD8                     
  3580                           ;modbus.c: 484: return crc;
  3581  002CD8  C013  F003         	movff	generateCRC@crc,?_generateCRC
  3582  002CDC  C014  F004         	movff	generateCRC@crc+1,?_generateCRC+1
  3583  002CE0  0012               	return		;funcret
  3584  002CE2                     __end_of_generateCRC:
  3585                           	callstack 0
  3586                           
  3587 ;; *************** function _clearResponse *****************
  3588 ;; Defined at:
  3589 ;;		line 37 in file "modbus.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;		None
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;  i               1    7[COMRAM] unsigned char 
  3594 ;; Return value:  Size  Location     Type
  3595 ;;                  1    wreg      void 
  3596 ;; Registers used:
  3597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3603 ;;      Params:         0       0       0       0       0       0       0
  3604 ;;      Locals:         1       0       0       0       0       0       0
  3605 ;;      Temps:          0       0       0       0       0       0       0
  3606 ;;      Totals:         1       0       0       0       0       0       0
  3607 ;;Total ram usage:        1 bytes
  3608 ;; Hardware stack levels used: 1
  3609 ;; Hardware stack levels required when called: 4
  3610 ;; This function calls:
  3611 ;;		_ClsUSART
  3612 ;;		_OpnUSART
  3613 ;; This function is called by:
  3614 ;;		_readReg
  3615 ;;		_readInputReg
  3616 ;;		_writeReg
  3617 ;;		_readCoil
  3618 ;;		_readInputCoil
  3619 ;;		_writeCoil
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           	psect	text9
  3624  00366E                     __ptext9:
  3625                           	callstack 0
  3626  00366E                     _clearResponse:
  3627                           	callstack 24
  3628  00366E                     
  3629                           ;modbus.c: 39: unsigned char i;;modbus.c: 40: for(i=0;i<125;i++){
  3630  00366E  0E00               	movlw	0
  3631  003670  6E08               	movwf	clearResponse@i^0,c
  3632  003672                     l3851:
  3633                           
  3634                           ;modbus.c: 41: response[i] = 0;
  3635  003672  0E7D               	movlw	low _response
  3636  003674  2408               	addwf	clearResponse@i^0,w,c
  3637  003676  6ED9               	movwf	fsr2l,c
  3638  003678  6ADA               	clrf	fsr2h,c
  3639  00367A  0E01               	movlw	high _response
  3640  00367C  22DA               	addwfc	fsr2h,f,c
  3641  00367E  0E00               	movlw	0
  3642  003680  6EDF               	movwf	indf2,c
  3643  003682  2A08               	incf	clearResponse@i^0,f,c
  3644  003684  0E7C               	movlw	124
  3645  003686  6408               	cpfsgt	clearResponse@i^0,c
  3646  003688  EF48  F01B         	goto	u3301
  3647  00368C  EF4A  F01B         	goto	u3300
  3648  003690                     u3301:
  3649  003690  EF39  F01B         	goto	l3851
  3650  003694                     u3300:
  3651  003694                     
  3652                           ;modbus.c: 42: };modbus.c: 43: ClsUSART();
  3653  003694  EC05  F01C         	call	_ClsUSART	;wreg free
  3654                           
  3655                           ;modbus.c: 44: OpnUSART();
  3656  003698  ECD2  F019         	call	_OpnUSART	;wreg free
  3657  00369C  0012               	return		;funcret
  3658  00369E                     __end_of_clearResponse:
  3659                           	callstack 0
  3660                           
  3661 ;; *************** function _OpnUSART *****************
  3662 ;; Defined at:
  3663 ;;		line 23 in file "system.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;  spbrg           4    3[COMRAM] unsigned long 
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		wreg, status,2, status,0, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3677 ;;      Params:         0       0       0       0       0       0       0
  3678 ;;      Locals:         4       0       0       0       0       0       0
  3679 ;;      Temps:          1       0       0       0       0       0       0
  3680 ;;      Totals:         5       0       0       0       0       0       0
  3681 ;;Total ram usage:        5 bytes
  3682 ;; Hardware stack levels used: 1
  3683 ;; Hardware stack levels required when called: 3
  3684 ;; This function calls:
  3685 ;;		_ClsUSART
  3686 ;; This function is called by:
  3687 ;;		_main
  3688 ;;		_clearResponse
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text10
  3693  0033A4                     __ptext10:
  3694                           	callstack 0
  3695  0033A4                     _OpnUSART:
  3696                           	callstack 24
  3697  0033A4                     
  3698                           ;system.c: 29: unsigned long spbrg = 0;
  3699  0033A4  0E00               	movlw	0
  3700  0033A6  6E04               	movwf	OpnUSART@spbrg^0,c
  3701  0033A8  0E00               	movlw	0
  3702  0033AA  6E05               	movwf	(OpnUSART@spbrg+1)^0,c
  3703  0033AC  0E00               	movlw	0
  3704  0033AE  6E06               	movwf	(OpnUSART@spbrg+2)^0,c
  3705  0033B0  0E00               	movlw	0
  3706  0033B2  6E07               	movwf	(OpnUSART@spbrg+3)^0,c
  3707                           
  3708                           ;system.c: 31: spbrg = 10000000L/9600;
  3709  0033B4  0E11               	movlw	17
  3710  0033B6  6E04               	movwf	OpnUSART@spbrg^0,c
  3711  0033B8  0E04               	movlw	4
  3712  0033BA  6E05               	movwf	(OpnUSART@spbrg+1)^0,c
  3713  0033BC  0E00               	movlw	0
  3714  0033BE  6E06               	movwf	(OpnUSART@spbrg+2)^0,c
  3715  0033C0  0E00               	movlw	0
  3716  0033C2  6E07               	movwf	(OpnUSART@spbrg+3)^0,c
  3717  0033C4                     
  3718                           ;system.c: 32: spbrg /= 64;
  3719  0033C4  0E06               	movlw	6
  3720  0033C6  6E03               	movwf	??_OpnUSART^0,c
  3721  0033C8                     u2785:
  3722  0033C8  90D8               	bcf	status,0,c
  3723  0033CA  3207               	rrcf	(OpnUSART@spbrg+3)^0,f,c
  3724  0033CC  3206               	rrcf	(OpnUSART@spbrg+2)^0,f,c
  3725  0033CE  3205               	rrcf	(OpnUSART@spbrg+1)^0,f,c
  3726  0033D0  3204               	rrcf	OpnUSART@spbrg^0,f,c
  3727  0033D2  2E03               	decfsz	??_OpnUSART^0,f,c
  3728  0033D4  EFE4  F019         	goto	u2785
  3729  0033D8                     
  3730                           ;system.c: 33: spbrg -= 1;
  3731  0033D8  0604               	decf	OpnUSART@spbrg^0,f,c
  3732  0033DA  0E00               	movlw	0
  3733  0033DC  5A05               	subwfb	(OpnUSART@spbrg+1)^0,f,c
  3734  0033DE  5A06               	subwfb	(OpnUSART@spbrg+2)^0,f,c
  3735  0033E0  5A07               	subwfb	(OpnUSART@spbrg+3)^0,f,c
  3736  0033E2                     
  3737                           ;system.c: 34: ClsUSART();
  3738  0033E2  EC05  F01C         	call	_ClsUSART	;wreg free
  3739  0033E6                     
  3740                           ;system.c: 35: TRISBbits.TRISB7 = 0;
  3741  0033E6  9E93               	bcf	147,7,c	;volatile
  3742  0033E8                     
  3743                           ;system.c: 36: LATBbits.LATB7 = 0;
  3744  0033E8  9E8A               	bcf	138,7,c	;volatile
  3745  0033EA                     
  3746                           ;system.c: 38: TXSTA = 0;
  3747  0033EA  0E00               	movlw	0
  3748  0033EC  6EAC               	movwf	172,c	;volatile
  3749  0033EE                     
  3750                           ;system.c: 39: RCSTA = 0;
  3751  0033EE  0E00               	movlw	0
  3752  0033F0  6EAB               	movwf	171,c	;volatile
  3753  0033F2                     
  3754                           ;system.c: 41: TRISCbits.TRISC6 = 0;
  3755  0033F2  9C94               	bcf	148,6,c	;volatile
  3756  0033F4                     
  3757                           ;system.c: 42: TRISCbits.TRISC7 = 1;
  3758  0033F4  8E94               	bsf	148,7,c	;volatile
  3759  0033F6                     
  3760                           ;system.c: 44: TXSTAbits.SYNC = 0;
  3761  0033F6  98AC               	bcf	172,4,c	;volatile
  3762  0033F8                     
  3763                           ;system.c: 45: TXSTAbits.TX9 = 0;
  3764  0033F8  9CAC               	bcf	172,6,c	;volatile
  3765  0033FA                     
  3766                           ;system.c: 46: TXSTAbits.SENDB = 0;
  3767  0033FA  96AC               	bcf	172,3,c	;volatile
  3768  0033FC                     
  3769                           ;system.c: 47: TXSTAbits.BRGH = 0;
  3770  0033FC  94AC               	bcf	172,2,c	;volatile
  3771  0033FE                     
  3772                           ;system.c: 49: RCSTAbits.CREN = 1;
  3773  0033FE  88AB               	bsf	171,4,c	;volatile
  3774  003400                     
  3775                           ;system.c: 50: RCSTAbits.RX9 = 0;
  3776  003400  9CAB               	bcf	171,6,c	;volatile
  3777  003402                     
  3778                           ;system.c: 52: PIE1bits.RCIE = 1;
  3779  003402  8A9D               	bsf	157,5,c	;volatile
  3780  003404                     
  3781                           ;system.c: 53: PIE1bits.TXIE = 0;
  3782  003404  989D               	bcf	157,4,c	;volatile
  3783  003406                     
  3784                           ;system.c: 55: BAUDCONbits.BRG16 = 0;
  3785  003406  96B8               	bcf	184,3,c	;volatile
  3786  003408                     
  3787                           ;system.c: 56: SPBRG = spbrg;
  3788  003408  C004  FFAF         	movff	OpnUSART@spbrg,4015	;volatile
  3789  00340C                     
  3790                           ;system.c: 58: TXSTAbits.TXEN = 1;
  3791  00340C  8AAC               	bsf	172,5,c	;volatile
  3792  00340E                     
  3793                           ;system.c: 59: RCSTAbits.SPEN = 1;
  3794  00340E  8EAB               	bsf	171,7,c	;volatile
  3795  003410  0012               	return		;funcret
  3796  003412                     __end_of_OpnUSART:
  3797                           	callstack 0
  3798                           
  3799 ;; *************** function _ClsUSART *****************
  3800 ;; Defined at:
  3801 ;;		line 62 in file "system.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;		None
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;		None
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  1    wreg      void 
  3808 ;; Registers used:
  3809 ;;		wreg, status,2, status,0
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3815 ;;      Params:         0       0       0       0       0       0       0
  3816 ;;      Locals:         0       0       0       0       0       0       0
  3817 ;;      Temps:          0       0       0       0       0       0       0
  3818 ;;      Totals:         0       0       0       0       0       0       0
  3819 ;;Total ram usage:        0 bytes
  3820 ;; Hardware stack levels used: 1
  3821 ;; Hardware stack levels required when called: 2
  3822 ;; This function calls:
  3823 ;;		Nothing
  3824 ;; This function is called by:
  3825 ;;		_clearResponse
  3826 ;;		_OpnUSART
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text11
  3831  00380A                     __ptext11:
  3832                           	callstack 0
  3833  00380A                     _ClsUSART:
  3834                           	callstack 24
  3835  00380A                     
  3836                           ;system.c: 65: RCSTA &= 0b01001111;
  3837  00380A  0E4F               	movlw	79
  3838  00380C  16AB               	andwf	171,f,c	;volatile
  3839  00380E                     
  3840                           ;system.c: 66: TXSTAbits.TXEN = 0;
  3841  00380E  9AAC               	bcf	172,5,c	;volatile
  3842                           
  3843                           ;system.c: 67: PIE1 &= 0b11001111;
  3844  003810  0ECF               	movlw	207
  3845  003812  169D               	andwf	157,f,c	;volatile
  3846  003814  0012               	return		;funcret
  3847  003816                     __end_of_ClsUSART:
  3848                           	callstack 0
  3849                           
  3850 ;; *************** function _checkCRC *****************
  3851 ;; Defined at:
  3852 ;;		line 487 in file "modbus.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;  i               2   15[COMRAM] int 
  3857 ;;  crc             2   13[COMRAM] unsigned int 
  3858 ;;  j               2   11[COMRAM] int 
  3859 ;;  crcLow          2    9[COMRAM] unsigned int 
  3860 ;;  crcHigh         2    7[COMRAM] unsigned int 
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  1    wreg      unsigned char 
  3863 ;; Registers used:
  3864 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3870 ;;      Params:         0       0       0       0       0       0       0
  3871 ;;      Locals:        10       0       0       0       0       0       0
  3872 ;;      Temps:          5       0       0       0       0       0       0
  3873 ;;      Totals:        15       0       0       0       0       0       0
  3874 ;;Total ram usage:       15 bytes
  3875 ;; Hardware stack levels used: 1
  3876 ;; Hardware stack levels required when called: 2
  3877 ;; This function calls:
  3878 ;;		Nothing
  3879 ;; This function is called by:
  3880 ;;		_decodeIt
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text12
  3885  002248                     __ptext12:
  3886                           	callstack 0
  3887  002248                     _checkCRC:
  3888                           	callstack 27
  3889  002248                     
  3890                           ;modbus.c: 489: unsigned int crc = 0xFFFF;
  3891  002248  680E               	setf	checkCRC@crc^0,c
  3892  00224A  680F               	setf	(checkCRC@crc+1)^0,c
  3893  00224C                     
  3894                           ;modbus.c: 491: unsigned int crcLow = 0;
  3895  00224C  0E00               	movlw	0
  3896  00224E  6E0B               	movwf	(checkCRC@crcLow+1)^0,c
  3897  002250  0E00               	movlw	0
  3898  002252  6E0A               	movwf	checkCRC@crcLow^0,c
  3899                           
  3900                           ;modbus.c: 492: int i,j = 0;
  3901  002254  0E00               	movlw	0
  3902  002256  6E0D               	movwf	(checkCRC@j+1)^0,c
  3903  002258  0E00               	movlw	0
  3904  00225A  6E0C               	movwf	checkCRC@j^0,c
  3905                           
  3906                           ;modbus.c: 494: for(i=0;i<messageLength-2;i++){
  3907  00225C  0E00               	movlw	0
  3908  00225E  6E11               	movwf	(checkCRC@i+1)^0,c
  3909  002260  0E00               	movlw	0
  3910  002262  6E10               	movwf	checkCRC@i^0,c
  3911  002264  EF63  F011         	goto	l3965
  3912  002268                     l3947:
  3913                           
  3914                           ;modbus.c: 495: crc ^= received[i];
  3915  002268  0E00               	movlw	low _received
  3916  00226A  2410               	addwf	checkCRC@i^0,w,c
  3917  00226C  6ED9               	movwf	fsr2l,c
  3918  00226E  0E01               	movlw	high _received
  3919  002270  2011               	addwfc	(checkCRC@i+1)^0,w,c
  3920  002272  6EDA               	movwf	fsr2h,c
  3921  002274  50DF               	movf	indf2,w,c
  3922  002276  6E03               	movwf	??_checkCRC^0,c
  3923  002278  5003               	movf	??_checkCRC^0,w,c
  3924  00227A  1A0E               	xorwf	checkCRC@crc^0,f,c
  3925  00227C                     
  3926                           ;modbus.c: 496: for(j=8; j!=0; j--){
  3927  00227C  0E00               	movlw	0
  3928  00227E  6E0D               	movwf	(checkCRC@j+1)^0,c
  3929  002280  0E08               	movlw	8
  3930  002282  6E0C               	movwf	checkCRC@j^0,c
  3931  002284                     l530:
  3932                           
  3933                           ;modbus.c: 497: if((crc & 0x0001) != 0){
  3934  002284  A00E               	btfss	checkCRC@crc^0,0,c
  3935  002286  EF47  F011         	goto	u3461
  3936  00228A  EF49  F011         	goto	u3460
  3937  00228E                     u3461:
  3938  00228E  EF52  F011         	goto	l3959
  3939  002292                     u3460:
  3940  002292                     
  3941                           ;modbus.c: 498: crc >>= 1;
  3942  002292  90D8               	bcf	status,0,c
  3943  002294  320F               	rrcf	(checkCRC@crc+1)^0,f,c
  3944  002296  320E               	rrcf	checkCRC@crc^0,f,c
  3945  002298                     
  3946                           ;modbus.c: 499: crc ^= 0xA001;
  3947  002298  0E01               	movlw	1
  3948  00229A  1A0E               	xorwf	checkCRC@crc^0,f,c
  3949  00229C  0EA0               	movlw	160
  3950  00229E  1A0F               	xorwf	(checkCRC@crc+1)^0,f,c
  3951                           
  3952                           ;modbus.c: 500: }
  3953  0022A0  EF55  F011         	goto	l533
  3954  0022A4                     l3959:
  3955                           
  3956                           ;modbus.c: 501: else{;modbus.c: 502: crc >>= 1;
  3957  0022A4  90D8               	bcf	status,0,c
  3958  0022A6  320F               	rrcf	(checkCRC@crc+1)^0,f,c
  3959  0022A8  320E               	rrcf	checkCRC@crc^0,f,c
  3960  0022AA                     l533:
  3961  0022AA  060C               	decf	checkCRC@j^0,f,c
  3962  0022AC  A0D8               	btfss	status,0,c
  3963  0022AE  060D               	decf	(checkCRC@j+1)^0,f,c
  3964  0022B0  500C               	movf	checkCRC@j^0,w,c
  3965  0022B2  100D               	iorwf	(checkCRC@j+1)^0,w,c
  3966  0022B4  A4D8               	btfss	status,2,c
  3967  0022B6  EF5F  F011         	goto	u3471
  3968  0022BA  EF61  F011         	goto	u3470
  3969  0022BE                     u3471:
  3970  0022BE  EF42  F011         	goto	l530
  3971  0022C2                     u3470:
  3972  0022C2  4A10               	infsnz	checkCRC@i^0,f,c
  3973  0022C4  2A11               	incf	(checkCRC@i+1)^0,f,c
  3974  0022C6                     l3965:
  3975  0022C6  0EFE               	movlw	254
  3976  0022C8  6E03               	movwf	??_checkCRC^0,c
  3977  0022CA  0EFF               	movlw	255
  3978  0022CC  6E04               	movwf	(??_checkCRC+1)^0,c
  3979  0022CE  505F               	movf	_messageLength^0,w,c	;volatile
  3980  0022D0  6E05               	movwf	(??_checkCRC+2)^0,c
  3981  0022D2  6A06               	clrf	(??_checkCRC+3)^0,c
  3982  0022D4  5003               	movf	??_checkCRC^0,w,c
  3983  0022D6  2605               	addwf	(??_checkCRC+2)^0,f,c
  3984  0022D8  5004               	movf	(??_checkCRC+1)^0,w,c
  3985  0022DA  2206               	addwfc	(??_checkCRC+3)^0,f,c
  3986  0022DC  5005               	movf	(??_checkCRC+2)^0,w,c
  3987  0022DE  5C10               	subwf	checkCRC@i^0,w,c
  3988  0022E0  5011               	movf	(checkCRC@i+1)^0,w,c
  3989  0022E2  0A80               	xorlw	128
  3990  0022E4  6E07               	movwf	(??_checkCRC+4)^0,c
  3991  0022E6  5006               	movf	(??_checkCRC+3)^0,w,c
  3992  0022E8  0A80               	xorlw	128
  3993  0022EA  5807               	subwfb	(??_checkCRC+4)^0,w,c
  3994  0022EC  A0D8               	btfss	status,0,c
  3995  0022EE  EF7B  F011         	goto	u3481
  3996  0022F2  EF7D  F011         	goto	u3480
  3997  0022F6                     u3481:
  3998  0022F6  EF34  F011         	goto	l3947
  3999  0022FA                     u3480:
  4000  0022FA                     
  4001                           ;modbus.c: 503: };modbus.c: 504: };modbus.c: 505: };modbus.c: 507: crcHigh = (crc & 0x00
      +                          FF);
  4002  0022FA  500E               	movf	checkCRC@crc^0,w,c
  4003  0022FC  6E08               	movwf	checkCRC@crcHigh^0,c
  4004  0022FE  6A09               	clrf	(checkCRC@crcHigh+1)^0,c
  4005                           
  4006                           ;modbus.c: 508: crcLow = (crc & 0xFF00) >>8;
  4007  002300  C00E  F003         	movff	checkCRC@crc,??_checkCRC
  4008  002304  C00F  F004         	movff	checkCRC@crc+1,??_checkCRC+1
  4009  002308  C004  F003         	movff	??_checkCRC+1,??_checkCRC
  4010  00230C  6A04               	clrf	(??_checkCRC+1)^0,c
  4011  00230E  5003               	movf	??_checkCRC^0,w,c
  4012  002310  6E0A               	movwf	checkCRC@crcLow^0,c
  4013  002312  6A0B               	clrf	(checkCRC@crcLow+1)^0,c
  4014  002314                     
  4015                           ;modbus.c: 509: if((crcHigh == received[i])&&(crcLow == received[i+1]))
  4016  002314  0E00               	movlw	low _received
  4017  002316  2410               	addwf	checkCRC@i^0,w,c
  4018  002318  6ED9               	movwf	fsr2l,c
  4019  00231A  0E01               	movlw	high _received
  4020  00231C  2011               	addwfc	(checkCRC@i+1)^0,w,c
  4021  00231E  6EDA               	movwf	fsr2h,c
  4022  002320  50DF               	movf	indf2,w,c
  4023  002322  6E03               	movwf	??_checkCRC^0,c
  4024  002324  6A04               	clrf	(??_checkCRC+1)^0,c
  4025  002326  5008               	movf	checkCRC@crcHigh^0,w,c
  4026  002328  1803               	xorwf	??_checkCRC^0,w,c
  4027  00232A  E107               	bnz	u3491
  4028  00232C  5009               	movf	(checkCRC@crcHigh+1)^0,w,c
  4029  00232E  1804               	xorwf	(??_checkCRC+1)^0,w,c
  4030  002330  A4D8               	btfss	status,2,c
  4031  002332  EF9D  F011         	goto	u3491
  4032  002336  EF9F  F011         	goto	u3490
  4033  00233A                     u3491:
  4034  00233A  EFB7  F011         	goto	l3979
  4035  00233E                     u3490:
  4036  00233E  0E01               	movlw	low (_received+1)
  4037  002340  2410               	addwf	checkCRC@i^0,w,c
  4038  002342  6ED9               	movwf	fsr2l,c
  4039  002344  0E01               	movlw	high (_received+1)
  4040  002346  2011               	addwfc	(checkCRC@i+1)^0,w,c
  4041  002348  6EDA               	movwf	fsr2h,c
  4042  00234A  50DF               	movf	indf2,w,c
  4043  00234C  6E03               	movwf	??_checkCRC^0,c
  4044  00234E  6A04               	clrf	(??_checkCRC+1)^0,c
  4045  002350  500A               	movf	checkCRC@crcLow^0,w,c
  4046  002352  1803               	xorwf	??_checkCRC^0,w,c
  4047  002354  E107               	bnz	u3501
  4048  002356  500B               	movf	(checkCRC@crcLow+1)^0,w,c
  4049  002358  1804               	xorwf	(??_checkCRC+1)^0,w,c
  4050  00235A  A4D8               	btfss	status,2,c
  4051  00235C  EFB2  F011         	goto	u3501
  4052  002360  EFB4  F011         	goto	u3500
  4053  002364                     u3501:
  4054  002364  EFB7  F011         	goto	l3979
  4055  002368                     u3500:
  4056  002368                     
  4057                           ;modbus.c: 510: {;modbus.c: 511: return 1;
  4058  002368  0E01               	movlw	1
  4059  00236A  EFB8  F011         	goto	l536
  4060  00236E                     l3979:
  4061                           
  4062                           ;modbus.c: 513: else{;modbus.c: 514: return 0;
  4063  00236E  0E00               	movlw	0
  4064  002370                     l536:
  4065  002370  0012               	return		;funcret
  4066  002372                     __end_of_checkCRC:
  4067                           	callstack 0
  4068                           
  4069 ;; *************** function _adc_init *****************
  4070 ;; Defined at:
  4071 ;;		line 30 in file "adc.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;		None
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;		None
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  1    wreg      void 
  4078 ;; Registers used:
  4079 ;;		wreg, status,2
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4085 ;;      Params:         0       0       0       0       0       0       0
  4086 ;;      Locals:         0       0       0       0       0       0       0
  4087 ;;      Temps:          0       0       0       0       0       0       0
  4088 ;;      Totals:         0       0       0       0       0       0       0
  4089 ;;Total ram usage:        0 bytes
  4090 ;; Hardware stack levels used: 1
  4091 ;; Hardware stack levels required when called: 2
  4092 ;; This function calls:
  4093 ;;		Nothing
  4094 ;; This function is called by:
  4095 ;;		_main
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           	psect	text13
  4100  0037FC                     __ptext13:
  4101                           	callstack 0
  4102  0037FC                     _adc_init:
  4103                           	callstack 28
  4104  0037FC                     
  4105                           ;adc.c: 36: ADCON0=0x01;
  4106  0037FC  0E01               	movlw	1
  4107  0037FE  6EC2               	movwf	194,c	;volatile
  4108                           
  4109                           ;adc.c: 37: ADCON1=0x0B;
  4110  003800  0E0B               	movlw	11
  4111  003802  6EC1               	movwf	193,c	;volatile
  4112                           
  4113                           ;adc.c: 38: ADCON2=0x01;
  4114  003804  0E01               	movlw	1
  4115  003806  6EC0               	movwf	192,c	;volatile
  4116  003808  0012               	return		;funcret
  4117  00380A                     __end_of_adc_init:
  4118                           	callstack 0
  4119                           
  4120 ;; *************** function _Receive_Message *****************
  4121 ;; Defined at:
  4122 ;;		line 315 in file "main.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;		None
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;		None
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  1    wreg      void 
  4129 ;; Registers used:
  4130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4136 ;;      Params:         0       0       0       0       0       0       0
  4137 ;;      Locals:         0       0       0       0       0       0       0
  4138 ;;      Temps:          0       0       0       0       0       0       0
  4139 ;;      Totals:         0       0       0       0       0       0       0
  4140 ;;Total ram usage:        0 bytes
  4141 ;; Hardware stack levels used: 1
  4142 ;; Hardware stack levels required when called: 4
  4143 ;; This function calls:
  4144 ;;		_ClearBit
  4145 ;;		_SetBit
  4146 ;;		_Sync_Registers
  4147 ;;		___xxtofl
  4148 ;; This function is called by:
  4149 ;;		_main
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text14
  4154  00319C                     __ptext14:
  4155                           	callstack 0
  4156  00319C                     _Receive_Message:
  4157                           	callstack 26
  4158  00319C                     
  4159                           ;main.c: 317: Sync_Registers();
  4160  00319C  EC7E  F018         	call	_Sync_Registers	;wreg free
  4161  0031A0                     
  4162                           ;main.c: 318: if (holdingReg[0] == 1) SetBit(&LATC, 0);
  4163  0031A0  0100               	movlb	0	; () banked
  4164  0031A2  0580               	decf	_holdingReg& (0+255),w,b	;volatile
  4165  0031A4  1181               	iorwf	(_holdingReg+1)& (0+255),w,b	;volatile
  4166  0031A6  A4D8               	btfss	status,2,c
  4167  0031A8  EFD8  F018         	goto	u4281
  4168  0031AC  EFDA  F018         	goto	u4280
  4169  0031B0                     u4281:
  4170  0031B0  EFE6  F018         	goto	l4689
  4171  0031B4                     u4280:
  4172  0031B4                     
  4173                           ; BSR set to: 0
  4174  0031B4  0E8B               	movlw	139
  4175  0031B6  6E03               	movwf	SetBit@port^0,c
  4176  0031B8  0E0F               	movlw	15
  4177  0031BA  6E04               	movwf	(SetBit@port+1)^0,c
  4178  0031BC  0E00               	movlw	0
  4179  0031BE  6E06               	movwf	(SetBit@pin+1)^0,c
  4180  0031C0  0E00               	movlw	0
  4181  0031C2  6E05               	movwf	SetBit@pin^0,c
  4182  0031C4  EC67  F01B         	call	_SetBit	;wreg free
  4183  0031C8  EFF0  F018         	goto	l4691
  4184  0031CC                     l4689:
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;main.c: 319: else ClearBit(&LATC, 0);
  4188  0031CC  0E8B               	movlw	139
  4189  0031CE  6E03               	movwf	ClearBit@port^0,c
  4190  0031D0  0E0F               	movlw	15
  4191  0031D2  6E04               	movwf	(ClearBit@port+1)^0,c
  4192  0031D4  0E00               	movlw	0
  4193  0031D6  6E06               	movwf	(ClearBit@pin+1)^0,c
  4194  0031D8  0E00               	movlw	0
  4195  0031DA  6E05               	movwf	ClearBit@pin^0,c
  4196  0031DC  EC02  F01B         	call	_ClearBit	;wreg free
  4197  0031E0                     l4691:
  4198                           
  4199                           ;main.c: 320: operation = holdingReg[1];
  4200  0031E0  C082  F05C         	movff	_holdingReg+2,_operation	;volatile
  4201  0031E4                     
  4202                           ;main.c: 321: tank1.min_level = holdingReg[2];
  4203  0031E4  C084  F003         	movff	_holdingReg+4,___xxtofl@val	;volatile
  4204  0031E8  C085  F004         	movff	_holdingReg+5,___xxtofl@val+1	;volatile
  4205  0031EC  6A05               	clrf	(___xxtofl@val+2)^0,c
  4206  0031EE  6A06               	clrf	(___xxtofl@val+3)^0,c
  4207  0031F0  0E00               	movlw	0
  4208  0031F2  EC13  F00E         	call	___xxtofl
  4209  0031F6  C003  F04B         	movff	?___xxtofl,_tank1+4	;volatile
  4210  0031FA  C004  F04C         	movff	?___xxtofl+1,_tank1+5	;volatile
  4211  0031FE  C005  F04D         	movff	?___xxtofl+2,_tank1+6	;volatile
  4212  003202  C006  F04E         	movff	?___xxtofl+3,_tank1+7	;volatile
  4213  003206                     
  4214                           ;main.c: 322: tank2.min_level = holdingReg[3];
  4215  003206  C086  F003         	movff	_holdingReg+6,___xxtofl@val	;volatile
  4216  00320A  C087  F004         	movff	_holdingReg+7,___xxtofl@val+1	;volatile
  4217  00320E  6A05               	clrf	(___xxtofl@val+2)^0,c
  4218  003210  6A06               	clrf	(___xxtofl@val+3)^0,c
  4219  003212  0E00               	movlw	0
  4220  003214  EC13  F00E         	call	___xxtofl
  4221  003218  C003  F03F         	movff	?___xxtofl,_tank2+4	;volatile
  4222  00321C  C004  F040         	movff	?___xxtofl+1,_tank2+5	;volatile
  4223  003220  C005  F041         	movff	?___xxtofl+2,_tank2+6	;volatile
  4224  003224  C006  F042         	movff	?___xxtofl+3,_tank2+7	;volatile
  4225  003228  0012               	return		;funcret
  4226  00322A                     __end_of_Receive_Message:
  4227                           	callstack 0
  4228                           
  4229 ;; *************** function _Sync_Registers *****************
  4230 ;; Defined at:
  4231 ;;		line 304 in file "main.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;		None
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg, status,2, status,0, cstack
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4245 ;;      Params:         0       0       0       0       0       0       0
  4246 ;;      Locals:         0       0       0       0       0       0       0
  4247 ;;      Temps:          2       0       0       0       0       0       0
  4248 ;;      Totals:         2       0       0       0       0       0       0
  4249 ;;Total ram usage:        2 bytes
  4250 ;; Hardware stack levels used: 1
  4251 ;; Hardware stack levels required when called: 3
  4252 ;; This function calls:
  4253 ;;		_CheckBit
  4254 ;; This function is called by:
  4255 ;;		_Receive_Message
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           	psect	text15
  4260  0030FC                     __ptext15:
  4261                           	callstack 0
  4262  0030FC                     _Sync_Registers:
  4263                           	callstack 26
  4264  0030FC                     
  4265                           ;main.c: 307: if ((last_pump_status_received == holdingReg[0]) && (holdingReg[0] != Chec
      +                          kBit(LATC, 0)))
  4266  0030FC  0100               	movlb	0	; () banked
  4267  0030FE  5180               	movf	_holdingReg& (0+255),w,b	;volatile
  4268  003100  1855               	xorwf	_last_pump_status_received^0,w,c
  4269  003102  E107               	bnz	u3421
  4270  003104  5181               	movf	(_holdingReg+1)& (0+255),w,b	;volatile
  4271  003106  1856               	xorwf	(_last_pump_status_received+1)^0,w,c
  4272  003108  A4D8               	btfss	status,2,c
  4273  00310A  EF89  F018         	goto	u3421
  4274  00310E  EF8B  F018         	goto	u3420
  4275  003112                     u3421:
  4276  003112  EFAE  F018         	goto	l3933
  4277  003116                     u3420:
  4278  003116                     
  4279                           ; BSR set to: 0
  4280  003116  CF8B F003          	movff	3979,CheckBit@port	;volatile
  4281  00311A  6A04               	clrf	(CheckBit@port+1)^0,c
  4282  00311C  0E00               	movlw	0
  4283  00311E  6E06               	movwf	(CheckBit@pin+1)^0,c
  4284  003120  0E00               	movlw	0
  4285  003122  6E05               	movwf	CheckBit@pin^0,c
  4286  003124  EC95  F01B         	call	_CheckBit	;wreg free
  4287  003128  0100               	movlb	0	; () banked
  4288  00312A  5180               	movf	_holdingReg& (0+255),w,b	;volatile
  4289  00312C  1803               	xorwf	?_CheckBit^0,w,c
  4290  00312E  E109               	bnz	u3430
  4291  003130  5181               	movf	(_holdingReg+1)& (0+255),w,b	;volatile
  4292  003132  1804               	xorwf	(?_CheckBit+1)^0,w,c
  4293  003134  B4D8               	btfsc	status,2,c
  4294  003136  EF9F  F018         	goto	u3431
  4295  00313A  EFA1  F018         	goto	u3430
  4296  00313E                     u3431:
  4297  00313E  EFAE  F018         	goto	l3933
  4298  003142                     u3430:
  4299  003142                     
  4300                           ; BSR set to: 0
  4301                           ;main.c: 308: holdingReg[0] = CheckBit(LATC, 0);
  4302  003142  CF8B F003          	movff	3979,CheckBit@port	;volatile
  4303  003146  6A04               	clrf	(CheckBit@port+1)^0,c
  4304  003148  0E00               	movlw	0
  4305  00314A  6E06               	movwf	(CheckBit@pin+1)^0,c
  4306  00314C  0E00               	movlw	0
  4307  00314E  6E05               	movwf	CheckBit@pin^0,c
  4308  003150  EC95  F01B         	call	_CheckBit	;wreg free
  4309  003154  C003  F080         	movff	?_CheckBit,_holdingReg	;volatile
  4310  003158  C004  F081         	movff	?_CheckBit+1,_holdingReg+1	;volatile
  4311  00315C                     l3933:
  4312                           
  4313                           ;main.c: 311: if ((last_operation_mode_received == holdingReg[1]) && (holdingReg[1] != o
      +                          peration))
  4314  00315C  5053               	movf	_last_operation_mode_received^0,w,c
  4315  00315E  0100               	movlb	0	; () banked
  4316  003160  1982               	xorwf	(_holdingReg+2)& (0+255),w,b	;volatile
  4317  003162  E107               	bnz	u3441
  4318  003164  5054               	movf	(_last_operation_mode_received+1)^0,w,c
  4319  003166  1983               	xorwf	(_holdingReg+3)& (0+255),w,b	;volatile
  4320  003168  A4D8               	btfss	status,2,c
  4321  00316A  EFB9  F018         	goto	u3441
  4322  00316E  EFBB  F018         	goto	u3440
  4323  003172                     u3441:
  4324  003172  EFCD  F018         	goto	l264
  4325  003176                     u3440:
  4326  003176                     
  4327                           ; BSR set to: 0
  4328  003176  505C               	movf	_operation^0,w,c	;volatile
  4329  003178  6E0A               	movwf	??_Sync_Registers^0,c
  4330  00317A  6A0B               	clrf	(??_Sync_Registers+1)^0,c
  4331  00317C  5182               	movf	(_holdingReg+2)& (0+255),w,b	;volatile
  4332  00317E  180A               	xorwf	??_Sync_Registers^0,w,c
  4333  003180  E109               	bnz	u3450
  4334  003182  5183               	movf	(_holdingReg+3)& (0+255),w,b	;volatile
  4335  003184  180B               	xorwf	(??_Sync_Registers+1)^0,w,c
  4336  003186  B4D8               	btfsc	status,2,c
  4337  003188  EFC8  F018         	goto	u3451
  4338  00318C  EFCA  F018         	goto	u3450
  4339  003190                     u3451:
  4340  003190  EFCD  F018         	goto	l264
  4341  003194                     u3450:
  4342  003194                     
  4343                           ; BSR set to: 0
  4344                           ;main.c: 312: holdingReg[1] = operation;
  4345  003194  C05C  F082         	movff	_operation,_holdingReg+2	;volatile
  4346  003198  6B83               	clrf	(_holdingReg+3)& (0+255),b	;volatile
  4347  00319A                     l264:
  4348                           
  4349                           ; BSR set to: 0
  4350  00319A  0012               	return		;funcret
  4351  00319C                     __end_of_Sync_Registers:
  4352                           	callstack 0
  4353                           
  4354 ;; *************** function _Read_Level *****************
  4355 ;; Defined at:
  4356 ;;		line 292 in file "main.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;		None
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  adcTank2        2   43[COMRAM] int 
  4361 ;;  adcTank1        2   41[COMRAM] int 
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  1    wreg      void 
  4364 ;; Registers used:
  4365 ;;		wreg, status,2, status,0, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4371 ;;      Params:         0       0       0       0       0       0       0
  4372 ;;      Locals:         4       0       0       0       0       0       0
  4373 ;;      Temps:          0       0       0       0       0       0       0
  4374 ;;      Totals:         4       0       0       0       0       0       0
  4375 ;;Total ram usage:        4 bytes
  4376 ;; Hardware stack levels used: 1
  4377 ;; Hardware stack levels required when called: 3
  4378 ;; This function calls:
  4379 ;;		___fldiv
  4380 ;;		___fltol
  4381 ;;		___xxtofl
  4382 ;;		_adc_amostra
  4383 ;; This function is called by:
  4384 ;;		_main
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text16
  4389  002CE2                     __ptext16:
  4390                           	callstack 0
  4391  002CE2                     _Read_Level:
  4392                           	callstack 27
  4393  002CE2                     
  4394                           ;main.c: 294: int adcTank1 = adc_amostra(0);
  4395  002CE2  0E00               	movlw	0
  4396  002CE4  EC5A  F019         	call	_adc_amostra
  4397  002CE8  C003  F02A         	movff	?_adc_amostra,Read_Level@adcTank1
  4398  002CEC  C004  F02B         	movff	?_adc_amostra+1,Read_Level@adcTank1+1
  4399                           
  4400                           ;main.c: 295: int adcTank2 = adc_amostra(1);
  4401  002CF0  0E01               	movlw	1
  4402  002CF2  EC5A  F019         	call	_adc_amostra
  4403  002CF6  C003  F02C         	movff	?_adc_amostra,Read_Level@adcTank2
  4404  002CFA  C004  F02D         	movff	?_adc_amostra+1,Read_Level@adcTank2+1
  4405                           
  4406                           ;main.c: 297: tank1.level = (adcTank1 / 10.23);
  4407  002CFE  C02A  F003         	movff	Read_Level@adcTank1,___xxtofl@val
  4408  002D02  C02B  F004         	movff	Read_Level@adcTank1+1,___xxtofl@val+1
  4409  002D06  0E00               	movlw	0
  4410  002D08  BE04               	btfsc	(___xxtofl@val+1)^0,7,c
  4411  002D0A  0EFF               	movlw	-1
  4412  002D0C  6E05               	movwf	(___xxtofl@val+2)^0,c
  4413  002D0E  6E06               	movwf	(___xxtofl@val+3)^0,c
  4414  002D10  0E01               	movlw	1
  4415  002D12  EC13  F00E         	call	___xxtofl
  4416  002D16  C003  F011         	movff	?___xxtofl,___fldiv@b
  4417  002D1A  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  4418  002D1E  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  4419  002D22  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  4420  002D26  0E14               	movlw	20
  4421  002D28  6E15               	movwf	___fldiv@a^0,c
  4422  002D2A  0EAE               	movlw	174
  4423  002D2C  6E16               	movwf	(___fldiv@a+1)^0,c
  4424  002D2E  0E23               	movlw	35
  4425  002D30  6E17               	movwf	(___fldiv@a+2)^0,c
  4426  002D32  0E41               	movlw	65
  4427  002D34  6E18               	movwf	(___fldiv@a+3)^0,c
  4428  002D36  EC5A  F008         	call	___fldiv	;wreg free
  4429  002D3A  C011  F047         	movff	?___fldiv,_tank1	;volatile
  4430  002D3E  C012  F048         	movff	?___fldiv+1,_tank1+1	;volatile
  4431  002D42  C013  F049         	movff	?___fldiv+2,_tank1+2	;volatile
  4432  002D46  C014  F04A         	movff	?___fldiv+3,_tank1+3	;volatile
  4433                           
  4434                           ;main.c: 298: tank2.level = (adcTank2 / 10.23);
  4435  002D4A  C02C  F003         	movff	Read_Level@adcTank2,___xxtofl@val
  4436  002D4E  C02D  F004         	movff	Read_Level@adcTank2+1,___xxtofl@val+1
  4437  002D52  0E00               	movlw	0
  4438  002D54  BE04               	btfsc	(___xxtofl@val+1)^0,7,c
  4439  002D56  0EFF               	movlw	-1
  4440  002D58  6E05               	movwf	(___xxtofl@val+2)^0,c
  4441  002D5A  6E06               	movwf	(___xxtofl@val+3)^0,c
  4442  002D5C  0E01               	movlw	1
  4443  002D5E  EC13  F00E         	call	___xxtofl
  4444  002D62  C003  F011         	movff	?___xxtofl,___fldiv@b
  4445  002D66  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  4446  002D6A  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  4447  002D6E  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  4448  002D72  0E14               	movlw	20
  4449  002D74  6E15               	movwf	___fldiv@a^0,c
  4450  002D76  0EAE               	movlw	174
  4451  002D78  6E16               	movwf	(___fldiv@a+1)^0,c
  4452  002D7A  0E23               	movlw	35
  4453  002D7C  6E17               	movwf	(___fldiv@a+2)^0,c
  4454  002D7E  0E41               	movlw	65
  4455  002D80  6E18               	movwf	(___fldiv@a+3)^0,c
  4456  002D82  EC5A  F008         	call	___fldiv	;wreg free
  4457  002D86  C011  F03B         	movff	?___fldiv,_tank2	;volatile
  4458  002D8A  C012  F03C         	movff	?___fldiv+1,_tank2+1	;volatile
  4459  002D8E  C013  F03D         	movff	?___fldiv+2,_tank2+2	;volatile
  4460  002D92  C014  F03E         	movff	?___fldiv+3,_tank2+3	;volatile
  4461                           
  4462                           ;main.c: 300: holdingReg[4] = tank1.level;
  4463  002D96  C047  F003         	movff	_tank1,___fltol@f1	;volatile
  4464  002D9A  C048  F004         	movff	_tank1+1,___fltol@f1+1	;volatile
  4465  002D9E  C049  F005         	movff	_tank1+2,___fltol@f1+2	;volatile
  4466  002DA2  C04A  F006         	movff	_tank1+3,___fltol@f1+3	;volatile
  4467  002DA6  ECF2  F013         	call	___fltol	;wreg free
  4468  002DAA  C003  F088         	movff	?___fltol,_holdingReg+8	;volatile
  4469  002DAE  C004  F089         	movff	?___fltol+1,_holdingReg+9	;volatile
  4470                           
  4471                           ;main.c: 301: holdingReg[5] = tank2.level;
  4472  002DB2  C03B  F003         	movff	_tank2,___fltol@f1	;volatile
  4473  002DB6  C03C  F004         	movff	_tank2+1,___fltol@f1+1	;volatile
  4474  002DBA  C03D  F005         	movff	_tank2+2,___fltol@f1+2	;volatile
  4475  002DBE  C03E  F006         	movff	_tank2+3,___fltol@f1+3	;volatile
  4476  002DC2  ECF2  F013         	call	___fltol	;wreg free
  4477  002DC6  C003  F08A         	movff	?___fltol,_holdingReg+10	;volatile
  4478  002DCA  C004  F08B         	movff	?___fltol+1,_holdingReg+11	;volatile
  4479  002DCE  0012               	return		;funcret
  4480  002DD0                     __end_of_Read_Level:
  4481                           	callstack 0
  4482                           
  4483 ;; *************** function _adc_amostra *****************
  4484 ;; Defined at:
  4485 ;;		line 44 in file "adc.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;  canal           1    wreg     unsigned char 
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;  canal           1    8[COMRAM] unsigned char 
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  2    2[COMRAM] unsigned int 
  4492 ;; Registers used:
  4493 ;;		wreg, status,2, status,0
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4499 ;;      Params:         2       0       0       0       0       0       0
  4500 ;;      Locals:         1       0       0       0       0       0       0
  4501 ;;      Temps:          4       0       0       0       0       0       0
  4502 ;;      Totals:         7       0       0       0       0       0       0
  4503 ;;Total ram usage:        7 bytes
  4504 ;; Hardware stack levels used: 1
  4505 ;; Hardware stack levels required when called: 2
  4506 ;; This function calls:
  4507 ;;		Nothing
  4508 ;; This function is called by:
  4509 ;;		_Read_Level
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text17
  4514  0032B4                     __ptext17:
  4515                           	callstack 0
  4516  0032B4                     _adc_amostra:
  4517                           	callstack 27
  4518                           
  4519                           ;incstack = 0
  4520                           ;adc_amostra@canal stored from wreg
  4521  0032B4  6E09               	movwf	adc_amostra@canal^0,c
  4522  0032B6                     
  4523                           ;adc.c: 62: switch(canal)
  4524  0032B6  EF69  F019         	goto	l3921
  4525  0032BA                     l3913:
  4526                           
  4527                           ;adc.c: 65: ADCON0=0x01;
  4528  0032BA  0E01               	movlw	1
  4529  0032BC  6EC2               	movwf	194,c	;volatile
  4530                           
  4531                           ;adc.c: 66: break;
  4532  0032BE  EF78  F019         	goto	l343
  4533  0032C2                     l3915:
  4534                           
  4535                           ;adc.c: 68: ADCON0=0x05;
  4536  0032C2  0E05               	movlw	5
  4537  0032C4  6EC2               	movwf	194,c	;volatile
  4538                           
  4539                           ;adc.c: 69: break;
  4540  0032C6  EF78  F019         	goto	l343
  4541  0032CA                     l3917:
  4542                           
  4543                           ;adc.c: 71: ADCON0=0x11;
  4544  0032CA  0E11               	movlw	17
  4545  0032CC  6EC2               	movwf	194,c	;volatile
  4546                           
  4547                           ;adc.c: 72: break;
  4548  0032CE  EF78  F019         	goto	l343
  4549  0032D2                     l3921:
  4550  0032D2  5009               	movf	adc_amostra@canal^0,w,c
  4551                           
  4552                           ; Switch size 1, requested type "simple"
  4553                           ; Number of cases is 3, Range of values is 0 to 2
  4554                           ; switch strategies available:
  4555                           ; Name         Instructions Cycles
  4556                           ; simple_byte           10     6 (average)
  4557                           ;	Chosen strategy is simple_byte
  4558  0032D4  0A00               	xorlw	0	; case 0
  4559  0032D6  B4D8               	btfsc	status,2,c
  4560  0032D8  EF5D  F019         	goto	l3913
  4561  0032DC  0A01               	xorlw	1	; case 1
  4562  0032DE  B4D8               	btfsc	status,2,c
  4563  0032E0  EF61  F019         	goto	l3915
  4564  0032E4  0A03               	xorlw	3	; case 2
  4565  0032E6  B4D8               	btfsc	status,2,c
  4566  0032E8  EF65  F019         	goto	l3917
  4567  0032EC  EF78  F019         	goto	l343
  4568  0032F0                     l343:
  4569                           
  4570                           ;adc.c: 77: ADCON0bits.GO=1;
  4571  0032F0  82C2               	bsf	194,1,c	;volatile
  4572  0032F2                     l346:
  4573  0032F2  B2C2               	btfsc	194,1,c	;volatile
  4574  0032F4  EF7E  F019         	goto	u3401
  4575  0032F8  EF80  F019         	goto	u3400
  4576  0032FC                     u3401:
  4577  0032FC  EF79  F019         	goto	l346
  4578  003300                     u3400:
  4579  003300                     
  4580                           ;adc.c: 80: return ((((unsigned int)ADRESH)<<2)|(ADRESL>>6));
  4581  003300  CFC3 F005          	movff	4035,??_adc_amostra	;volatile
  4582  003304  0E06               	movlw	6
  4583  003306  6E06               	movwf	(??_adc_amostra+1)^0,c
  4584  003308                     u3415:
  4585  003308  90D8               	bcf	status,0,c
  4586  00330A  3205               	rrcf	??_adc_amostra^0,f,c
  4587  00330C  2E06               	decfsz	(??_adc_amostra+1)^0,f,c
  4588  00330E  EF84  F019         	goto	u3415
  4589  003312  5005               	movf	??_adc_amostra^0,w,c
  4590  003314  CFC4 F007          	movff	4036,??_adc_amostra+2	;volatile
  4591  003318  6A08               	clrf	(??_adc_amostra+3)^0,c
  4592  00331A  90D8               	bcf	status,0,c
  4593  00331C  3607               	rlcf	(??_adc_amostra+2)^0,f,c
  4594  00331E  3608               	rlcf	(??_adc_amostra+3)^0,f,c
  4595  003320  90D8               	bcf	status,0,c
  4596  003322  3607               	rlcf	(??_adc_amostra+2)^0,f,c
  4597  003324  3608               	rlcf	(??_adc_amostra+3)^0,f,c
  4598  003326  1007               	iorwf	(??_adc_amostra+2)^0,w,c
  4599  003328  6E03               	movwf	?_adc_amostra^0,c
  4600  00332A  5008               	movf	(??_adc_amostra+3)^0,w,c
  4601  00332C  6E04               	movwf	(?_adc_amostra+1)^0,c
  4602  00332E  0012               	return		;funcret
  4603  003330                     __end_of_adc_amostra:
  4604                           	callstack 0
  4605                           
  4606 ;; *************** function ___xxtofl *****************
  4607 ;; Defined at:
  4608 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\xxtofl.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  sign            1    wreg     unsigned char 
  4611 ;;  val             4    2[COMRAM] long 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  sign            1   10[COMRAM] unsigned char 
  4614 ;;  arg             4   12[COMRAM] unsigned long 
  4615 ;;  exp             1   11[COMRAM] unsigned char 
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  4    2[COMRAM] unsigned char 
  4618 ;; Registers used:
  4619 ;;		wreg, status,2, status,0
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4625 ;;      Params:         4       0       0       0       0       0       0
  4626 ;;      Locals:         6       0       0       0       0       0       0
  4627 ;;      Temps:          4       0       0       0       0       0       0
  4628 ;;      Totals:        14       0       0       0       0       0       0
  4629 ;;Total ram usage:       14 bytes
  4630 ;; Hardware stack levels used: 1
  4631 ;; Hardware stack levels required when called: 2
  4632 ;; This function calls:
  4633 ;;		Nothing
  4634 ;; This function is called by:
  4635 ;;		_Min_Lv1_Incr
  4636 ;;		_Min_Lv2_Incr
  4637 ;;		_Read_Level
  4638 ;;		_Receive_Message
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text18
  4643  001C26                     __ptext18:
  4644                           	callstack 0
  4645  001C26                     ___xxtofl:
  4646                           	callstack 27
  4647                           
  4648                           ;incstack = 0
  4649                           ;___xxtofl@sign stored from wreg
  4650  001C26  6E0B               	movwf	___xxtofl@sign^0,c
  4651  001C28  500B               	movf	___xxtofl@sign^0,w,c
  4652  001C2A  B4D8               	btfsc	status,2,c
  4653  001C2C  EF1A  F00E         	goto	u4091
  4654  001C30  EF1C  F00E         	goto	u4090
  4655  001C34                     u4091:
  4656  001C34  EF3E  F00E         	goto	l1308
  4657  001C38                     u4090:
  4658  001C38  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  4659  001C3A  EF23  F00E         	goto	u4100
  4660  001C3E  EF21  F00E         	goto	u4101
  4661  001C42                     u4101:
  4662  001C42  EF3E  F00E         	goto	l1308
  4663  001C46                     u4100:
  4664  001C46  C003  F007         	movff	___xxtofl@val,??___xxtofl
  4665  001C4A  C004  F008         	movff	___xxtofl@val+1,??___xxtofl+1
  4666  001C4E  C005  F009         	movff	___xxtofl@val+2,??___xxtofl+2
  4667  001C52  C006  F00A         	movff	___xxtofl@val+3,??___xxtofl+3
  4668  001C56  1E07               	comf	??___xxtofl^0,f,c
  4669  001C58  1E08               	comf	(??___xxtofl+1)^0,f,c
  4670  001C5A  1E09               	comf	(??___xxtofl+2)^0,f,c
  4671  001C5C  1E0A               	comf	(??___xxtofl+3)^0,f,c
  4672  001C5E  2A07               	incf	??___xxtofl^0,f,c
  4673  001C60  0E00               	movlw	0
  4674  001C62  2208               	addwfc	(??___xxtofl+1)^0,f,c
  4675  001C64  2209               	addwfc	(??___xxtofl+2)^0,f,c
  4676  001C66  220A               	addwfc	(??___xxtofl+3)^0,f,c
  4677  001C68  C007  F00D         	movff	??___xxtofl,___xxtofl@arg
  4678  001C6C  C008  F00E         	movff	??___xxtofl+1,___xxtofl@arg+1
  4679  001C70  C009  F00F         	movff	??___xxtofl+2,___xxtofl@arg+2
  4680  001C74  C00A  F010         	movff	??___xxtofl+3,___xxtofl@arg+3
  4681  001C78  EF46  F00E         	goto	l4541
  4682  001C7C                     l1308:
  4683  001C7C  C003  F00D         	movff	___xxtofl@val,___xxtofl@arg
  4684  001C80  C004  F00E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4685  001C84  C005  F00F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4686  001C88  C006  F010         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4687  001C8C                     l4541:
  4688  001C8C  5003               	movf	___xxtofl@val^0,w,c
  4689  001C8E  1004               	iorwf	(___xxtofl@val+1)^0,w,c
  4690  001C90  1005               	iorwf	(___xxtofl@val+2)^0,w,c
  4691  001C92  1006               	iorwf	(___xxtofl@val+3)^0,w,c
  4692  001C94  A4D8               	btfss	status,2,c
  4693  001C96  EF4F  F00E         	goto	u4111
  4694  001C9A  EF51  F00E         	goto	u4110
  4695  001C9E                     u4111:
  4696  001C9E  EF5B  F00E         	goto	l4547
  4697  001CA2                     u4110:
  4698  001CA2  0E00               	movlw	0
  4699  001CA4  6E03               	movwf	?___xxtofl^0,c
  4700  001CA6  0E00               	movlw	0
  4701  001CA8  6E04               	movwf	(?___xxtofl+1)^0,c
  4702  001CAA  0E00               	movlw	0
  4703  001CAC  6E05               	movwf	(?___xxtofl+2)^0,c
  4704  001CAE  0E00               	movlw	0
  4705  001CB0  6E06               	movwf	(?___xxtofl+3)^0,c
  4706  001CB2  EFEC  F00E         	goto	l1311
  4707  001CB6                     l4547:
  4708  001CB6  0E96               	movlw	150
  4709  001CB8  6E0C               	movwf	___xxtofl@exp^0,c
  4710  001CBA  EF65  F00E         	goto	l4551
  4711  001CBE                     l4549:
  4712  001CBE  2A0C               	incf	___xxtofl@exp^0,f,c
  4713  001CC0  90D8               	bcf	status,0,c
  4714  001CC2  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  4715  001CC4  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  4716  001CC6  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  4717  001CC8  320D               	rrcf	___xxtofl@arg^0,f,c
  4718  001CCA                     l4551:
  4719  001CCA  0E00               	movlw	0
  4720  001CCC  140D               	andwf	___xxtofl@arg^0,w,c
  4721  001CCE  6E07               	movwf	??___xxtofl^0,c
  4722  001CD0  0E00               	movlw	0
  4723  001CD2  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  4724  001CD4  6E08               	movwf	(??___xxtofl+1)^0,c
  4725  001CD6  0E00               	movlw	0
  4726  001CD8  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  4727  001CDA  6E09               	movwf	(??___xxtofl+2)^0,c
  4728  001CDC  0EFE               	movlw	254
  4729  001CDE  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  4730  001CE0  6E0A               	movwf	(??___xxtofl+3)^0,c
  4731  001CE2  5007               	movf	??___xxtofl^0,w,c
  4732  001CE4  1008               	iorwf	(??___xxtofl+1)^0,w,c
  4733  001CE6  1009               	iorwf	(??___xxtofl+2)^0,w,c
  4734  001CE8  100A               	iorwf	(??___xxtofl+3)^0,w,c
  4735  001CEA  A4D8               	btfss	status,2,c
  4736  001CEC  EF7A  F00E         	goto	u4121
  4737  001CF0  EF7C  F00E         	goto	u4120
  4738  001CF4                     u4121:
  4739  001CF4  EF5F  F00E         	goto	l4549
  4740  001CF8                     u4120:
  4741  001CF8  EF8A  F00E         	goto	l1315
  4742  001CFC                     l4553:
  4743  001CFC  2A0C               	incf	___xxtofl@exp^0,f,c
  4744  001CFE  0E01               	movlw	1
  4745  001D00  260D               	addwf	___xxtofl@arg^0,f,c
  4746  001D02  0E00               	movlw	0
  4747  001D04  220E               	addwfc	(___xxtofl@arg+1)^0,f,c
  4748  001D06  220F               	addwfc	(___xxtofl@arg+2)^0,f,c
  4749  001D08  2210               	addwfc	(___xxtofl@arg+3)^0,f,c
  4750  001D0A  90D8               	bcf	status,0,c
  4751  001D0C  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  4752  001D0E  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  4753  001D10  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  4754  001D12  320D               	rrcf	___xxtofl@arg^0,f,c
  4755  001D14                     l1315:
  4756  001D14  0E00               	movlw	0
  4757  001D16  140D               	andwf	___xxtofl@arg^0,w,c
  4758  001D18  6E07               	movwf	??___xxtofl^0,c
  4759  001D1A  0E00               	movlw	0
  4760  001D1C  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  4761  001D1E  6E08               	movwf	(??___xxtofl+1)^0,c
  4762  001D20  0E00               	movlw	0
  4763  001D22  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  4764  001D24  6E09               	movwf	(??___xxtofl+2)^0,c
  4765  001D26  0EFF               	movlw	255
  4766  001D28  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  4767  001D2A  6E0A               	movwf	(??___xxtofl+3)^0,c
  4768  001D2C  5007               	movf	??___xxtofl^0,w,c
  4769  001D2E  1008               	iorwf	(??___xxtofl+1)^0,w,c
  4770  001D30  1009               	iorwf	(??___xxtofl+2)^0,w,c
  4771  001D32  100A               	iorwf	(??___xxtofl+3)^0,w,c
  4772  001D34  A4D8               	btfss	status,2,c
  4773  001D36  EF9F  F00E         	goto	u4131
  4774  001D3A  EFA1  F00E         	goto	u4130
  4775  001D3E                     u4131:
  4776  001D3E  EF7E  F00E         	goto	l4553
  4777  001D42                     u4130:
  4778  001D42  EFA9  F00E         	goto	l4561
  4779  001D46                     l4559:
  4780  001D46  060C               	decf	___xxtofl@exp^0,f,c
  4781  001D48  90D8               	bcf	status,0,c
  4782  001D4A  360D               	rlcf	___xxtofl@arg^0,f,c
  4783  001D4C  360E               	rlcf	(___xxtofl@arg+1)^0,f,c
  4784  001D4E  360F               	rlcf	(___xxtofl@arg+2)^0,f,c
  4785  001D50  3610               	rlcf	(___xxtofl@arg+3)^0,f,c
  4786  001D52                     l4561:
  4787  001D52  BE0F               	btfsc	(___xxtofl@arg+2)^0,7,c
  4788  001D54  EFAE  F00E         	goto	u4141
  4789  001D58  EFB0  F00E         	goto	u4140
  4790  001D5C                     u4141:
  4791  001D5C  EFB8  F00E         	goto	l1322
  4792  001D60                     u4140:
  4793  001D60  0E02               	movlw	2
  4794  001D62  600C               	cpfslt	___xxtofl@exp^0,c
  4795  001D64  EFB6  F00E         	goto	u4151
  4796  001D68  EFB8  F00E         	goto	u4150
  4797  001D6C                     u4151:
  4798  001D6C  EFA3  F00E         	goto	l4559
  4799  001D70                     u4150:
  4800  001D70                     l1322:
  4801  001D70  B00C               	btfsc	___xxtofl@exp^0,0,c
  4802  001D72  EFBD  F00E         	goto	u4161
  4803  001D76  EFBF  F00E         	goto	u4160
  4804  001D7A                     u4161:
  4805  001D7A  EFC0  F00E         	goto	l4567
  4806  001D7E                     u4160:
  4807  001D7E  9E0F               	bcf	(___xxtofl@arg+2)^0,7,c
  4808  001D80                     l4567:
  4809  001D80  90D8               	bcf	status,0,c
  4810  001D82  320C               	rrcf	___xxtofl@exp^0,f,c
  4811  001D84  C00C  F007         	movff	___xxtofl@exp,??___xxtofl
  4812  001D88  6A08               	clrf	(??___xxtofl+1)^0,c
  4813  001D8A  6A09               	clrf	(??___xxtofl+2)^0,c
  4814  001D8C  6A0A               	clrf	(??___xxtofl+3)^0,c
  4815  001D8E  C007  F00A         	movff	??___xxtofl,??___xxtofl+3
  4816  001D92  6A09               	clrf	(??___xxtofl+2)^0,c
  4817  001D94  6A08               	clrf	(??___xxtofl+1)^0,c
  4818  001D96  6A07               	clrf	??___xxtofl^0,c
  4819  001D98  5007               	movf	??___xxtofl^0,w,c
  4820  001D9A  120D               	iorwf	___xxtofl@arg^0,f,c
  4821  001D9C  5008               	movf	(??___xxtofl+1)^0,w,c
  4822  001D9E  120E               	iorwf	(___xxtofl@arg+1)^0,f,c
  4823  001DA0  5009               	movf	(??___xxtofl+2)^0,w,c
  4824  001DA2  120F               	iorwf	(___xxtofl@arg+2)^0,f,c
  4825  001DA4  500A               	movf	(??___xxtofl+3)^0,w,c
  4826  001DA6  1210               	iorwf	(___xxtofl@arg+3)^0,f,c
  4827  001DA8  500B               	movf	___xxtofl@sign^0,w,c
  4828  001DAA  B4D8               	btfsc	status,2,c
  4829  001DAC  EFDA  F00E         	goto	u4171
  4830  001DB0  EFDC  F00E         	goto	u4170
  4831  001DB4                     u4171:
  4832  001DB4  EFE4  F00E         	goto	l4577
  4833  001DB8                     u4170:
  4834  001DB8  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  4835  001DBA  EFE3  F00E         	goto	u4180
  4836  001DBE  EFE1  F00E         	goto	u4181
  4837  001DC2                     u4181:
  4838  001DC2  EFE4  F00E         	goto	l4577
  4839  001DC6                     u4180:
  4840  001DC6  8E10               	bsf	(___xxtofl@arg+3)^0,7,c
  4841  001DC8                     l4577:
  4842  001DC8  C00D  F003         	movff	___xxtofl@arg,?___xxtofl
  4843  001DCC  C00E  F004         	movff	___xxtofl@arg+1,?___xxtofl+1
  4844  001DD0  C00F  F005         	movff	___xxtofl@arg+2,?___xxtofl+2
  4845  001DD4  C010  F006         	movff	___xxtofl@arg+3,?___xxtofl+3
  4846  001DD8                     l1311:
  4847  001DD8  0012               	return		;funcret
  4848  001DDA                     __end_of___xxtofl:
  4849                           	callstack 0
  4850                           
  4851 ;; *************** function ___fldiv *****************
  4852 ;; Defined at:
  4853 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\sprcdiv.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;  b               4   16[COMRAM] unsigned char 
  4856 ;;  a               4   20[COMRAM] unsigned char 
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  grs             4   35[COMRAM] unsigned long 
  4859 ;;  rem             4   28[COMRAM] unsigned long 
  4860 ;;  new_exp         2   33[COMRAM] int 
  4861 ;;  aexp            1   40[COMRAM] unsigned char 
  4862 ;;  bexp            1   39[COMRAM] unsigned char 
  4863 ;;  sign            1   32[COMRAM] unsigned char 
  4864 ;; Return value:  Size  Location     Type
  4865 ;;                  4   16[COMRAM] unsigned char 
  4866 ;; Registers used:
  4867 ;;		wreg, status,2, status,0
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4873 ;;      Params:         8       0       0       0       0       0       0
  4874 ;;      Locals:        13       0       0       0       0       0       0
  4875 ;;      Temps:          4       0       0       0       0       0       0
  4876 ;;      Totals:        25       0       0       0       0       0       0
  4877 ;;Total ram usage:       25 bytes
  4878 ;; Hardware stack levels used: 1
  4879 ;; Hardware stack levels required when called: 2
  4880 ;; This function calls:
  4881 ;;		Nothing
  4882 ;; This function is called by:
  4883 ;;		_Read_Level
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           	psect	text19
  4888  0010B4                     __ptext19:
  4889                           	callstack 0
  4890  0010B4                     ___fldiv:
  4891                           	callstack 27
  4892  0010B4  5014               	movf	(___fldiv@b+3)^0,w,c
  4893  0010B6  0B80               	andlw	128
  4894  0010B8  6E21               	movwf	___fldiv@sign^0,c
  4895  0010BA  5014               	movf	(___fldiv@b+3)^0,w,c
  4896  0010BC  2414               	addwf	(___fldiv@b+3)^0,w,c
  4897  0010BE  6E28               	movwf	___fldiv@bexp^0,c
  4898  0010C0  AE13               	btfss	(___fldiv@b+2)^0,7,c
  4899  0010C2  EF65  F008         	goto	u3861
  4900  0010C6  EF67  F008         	goto	u3860
  4901  0010CA                     u3861:
  4902  0010CA  EF68  F008         	goto	l4403
  4903  0010CE                     u3860:
  4904  0010CE  8028               	bsf	___fldiv@bexp^0,0,c
  4905  0010D0                     l4403:
  4906  0010D0  5028               	movf	___fldiv@bexp^0,w,c
  4907  0010D2  B4D8               	btfsc	status,2,c
  4908  0010D4  EF6E  F008         	goto	u3871
  4909  0010D8  EF70  F008         	goto	u3870
  4910  0010DC                     u3871:
  4911  0010DC  EF85  F008         	goto	l4413
  4912  0010E0                     u3870:
  4913  0010E0  2828               	incf	___fldiv@bexp^0,w,c
  4914  0010E2  A4D8               	btfss	status,2,c
  4915  0010E4  EF76  F008         	goto	u3881
  4916  0010E8  EF78  F008         	goto	u3880
  4917  0010EC                     u3881:
  4918  0010EC  EF80  F008         	goto	l4409
  4919  0010F0                     u3880:
  4920  0010F0  0E00               	movlw	0
  4921  0010F2  6E11               	movwf	___fldiv@b^0,c
  4922  0010F4  0E00               	movlw	0
  4923  0010F6  6E12               	movwf	(___fldiv@b+1)^0,c
  4924  0010F8  0E00               	movlw	0
  4925  0010FA  6E13               	movwf	(___fldiv@b+2)^0,c
  4926  0010FC  0E00               	movlw	0
  4927  0010FE  6E14               	movwf	(___fldiv@b+3)^0,c
  4928  001100                     l4409:
  4929  001100  8E13               	bsf	(___fldiv@b+2)^0,7,c
  4930  001102  0E00               	movlw	0
  4931  001104  6E14               	movwf	(___fldiv@b+3)^0,c
  4932  001106  EF8D  F008         	goto	l4415
  4933  00110A                     l4413:
  4934  00110A  0E00               	movlw	0
  4935  00110C  6E11               	movwf	___fldiv@b^0,c
  4936  00110E  0E00               	movlw	0
  4937  001110  6E12               	movwf	(___fldiv@b+1)^0,c
  4938  001112  0E00               	movlw	0
  4939  001114  6E13               	movwf	(___fldiv@b+2)^0,c
  4940  001116  0E00               	movlw	0
  4941  001118  6E14               	movwf	(___fldiv@b+3)^0,c
  4942  00111A                     l4415:
  4943  00111A  5018               	movf	(___fldiv@a+3)^0,w,c
  4944  00111C  0B80               	andlw	128
  4945  00111E  1A21               	xorwf	___fldiv@sign^0,f,c
  4946  001120  5018               	movf	(___fldiv@a+3)^0,w,c
  4947  001122  2418               	addwf	(___fldiv@a+3)^0,w,c
  4948  001124  6E29               	movwf	___fldiv@aexp^0,c
  4949  001126  AE17               	btfss	(___fldiv@a+2)^0,7,c
  4950  001128  EF98  F008         	goto	u3891
  4951  00112C  EF9A  F008         	goto	u3890
  4952  001130                     u3891:
  4953  001130  EF9B  F008         	goto	l4423
  4954  001134                     u3890:
  4955  001134  8029               	bsf	___fldiv@aexp^0,0,c
  4956  001136                     l4423:
  4957  001136  5029               	movf	___fldiv@aexp^0,w,c
  4958  001138  B4D8               	btfsc	status,2,c
  4959  00113A  EFA1  F008         	goto	u3901
  4960  00113E  EFA3  F008         	goto	u3900
  4961  001142                     u3901:
  4962  001142  EFB8  F008         	goto	l4433
  4963  001146                     u3900:
  4964  001146  2829               	incf	___fldiv@aexp^0,w,c
  4965  001148  A4D8               	btfss	status,2,c
  4966  00114A  EFA9  F008         	goto	u3911
  4967  00114E  EFAB  F008         	goto	u3910
  4968  001152                     u3911:
  4969  001152  EFB3  F008         	goto	l4429
  4970  001156                     u3910:
  4971  001156  0E00               	movlw	0
  4972  001158  6E15               	movwf	___fldiv@a^0,c
  4973  00115A  0E00               	movlw	0
  4974  00115C  6E16               	movwf	(___fldiv@a+1)^0,c
  4975  00115E  0E00               	movlw	0
  4976  001160  6E17               	movwf	(___fldiv@a+2)^0,c
  4977  001162  0E00               	movlw	0
  4978  001164  6E18               	movwf	(___fldiv@a+3)^0,c
  4979  001166                     l4429:
  4980  001166  8E17               	bsf	(___fldiv@a+2)^0,7,c
  4981  001168  0E00               	movlw	0
  4982  00116A  6E18               	movwf	(___fldiv@a+3)^0,c
  4983  00116C  EFC0  F008         	goto	l4435
  4984  001170                     l4433:
  4985  001170  0E00               	movlw	0
  4986  001172  6E15               	movwf	___fldiv@a^0,c
  4987  001174  0E00               	movlw	0
  4988  001176  6E16               	movwf	(___fldiv@a+1)^0,c
  4989  001178  0E00               	movlw	0
  4990  00117A  6E17               	movwf	(___fldiv@a+2)^0,c
  4991  00117C  0E00               	movlw	0
  4992  00117E  6E18               	movwf	(___fldiv@a+3)^0,c
  4993  001180                     l4435:
  4994  001180  5015               	movf	___fldiv@a^0,w,c
  4995  001182  1016               	iorwf	(___fldiv@a+1)^0,w,c
  4996  001184  1017               	iorwf	(___fldiv@a+2)^0,w,c
  4997  001186  1018               	iorwf	(___fldiv@a+3)^0,w,c
  4998  001188  A4D8               	btfss	status,2,c
  4999  00118A  EFC9  F008         	goto	u3921
  5000  00118E  EFCB  F008         	goto	u3920
  5001  001192                     u3921:
  5002  001192  EFE3  F008         	goto	l4447
  5003  001196                     u3920:
  5004  001196  0E00               	movlw	0
  5005  001198  6E11               	movwf	___fldiv@b^0,c
  5006  00119A  0E00               	movlw	0
  5007  00119C  6E12               	movwf	(___fldiv@b+1)^0,c
  5008  00119E  0E00               	movlw	0
  5009  0011A0  6E13               	movwf	(___fldiv@b+2)^0,c
  5010  0011A2  0E00               	movlw	0
  5011  0011A4  6E14               	movwf	(___fldiv@b+3)^0,c
  5012  0011A6  0E80               	movlw	128
  5013  0011A8  1213               	iorwf	(___fldiv@b+2)^0,f,c
  5014  0011AA  0E7F               	movlw	127
  5015  0011AC  1214               	iorwf	(___fldiv@b+3)^0,f,c
  5016  0011AE                     l4441:
  5017  0011AE  5021               	movf	___fldiv@sign^0,w,c
  5018  0011B0  1214               	iorwf	(___fldiv@b+3)^0,f,c
  5019  0011B2  C011  F011         	movff	___fldiv@b,?___fldiv
  5020  0011B6  C012  F012         	movff	___fldiv@b+1,?___fldiv+1
  5021  0011BA  C013  F013         	movff	___fldiv@b+2,?___fldiv+2
  5022  0011BE  C014  F014         	movff	___fldiv@b+3,?___fldiv+3
  5023  0011C2  EF26  F00A         	goto	l1235
  5024  0011C6                     l4447:
  5025  0011C6  5028               	movf	___fldiv@bexp^0,w,c
  5026  0011C8  A4D8               	btfss	status,2,c
  5027  0011CA  EFE9  F008         	goto	u3931
  5028  0011CE  EFEB  F008         	goto	u3930
  5029  0011D2                     u3931:
  5030  0011D2  EFF5  F008         	goto	l4455
  5031  0011D6                     u3930:
  5032  0011D6  0E00               	movlw	0
  5033  0011D8  6E11               	movwf	?___fldiv^0,c
  5034  0011DA  0E00               	movlw	0
  5035  0011DC  6E12               	movwf	(?___fldiv+1)^0,c
  5036  0011DE  0E00               	movlw	0
  5037  0011E0  6E13               	movwf	(?___fldiv+2)^0,c
  5038  0011E2  0E00               	movlw	0
  5039  0011E4  6E14               	movwf	(?___fldiv+3)^0,c
  5040  0011E6  EF26  F00A         	goto	l1235
  5041  0011EA                     l4455:
  5042  0011EA  5029               	movf	___fldiv@aexp^0,w,c
  5043  0011EC  C028  F019         	movff	___fldiv@bexp,??___fldiv
  5044  0011F0  6A1A               	clrf	(??___fldiv+1)^0,c
  5045  0011F2  5E19               	subwf	??___fldiv^0,f,c
  5046  0011F4  0E00               	movlw	0
  5047  0011F6  5A1A               	subwfb	(??___fldiv+1)^0,f,c
  5048  0011F8  0E7F               	movlw	127
  5049  0011FA  2419               	addwf	??___fldiv^0,w,c
  5050  0011FC  6E22               	movwf	___fldiv@new_exp^0,c
  5051  0011FE  0E00               	movlw	0
  5052  001200  201A               	addwfc	(??___fldiv+1)^0,w,c
  5053  001202  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  5054  001204  C011  F01D         	movff	___fldiv@b,___fldiv@rem
  5055  001208  C012  F01E         	movff	___fldiv@b+1,___fldiv@rem+1
  5056  00120C  C013  F01F         	movff	___fldiv@b+2,___fldiv@rem+2
  5057  001210  C014  F020         	movff	___fldiv@b+3,___fldiv@rem+3
  5058  001214  0E00               	movlw	0
  5059  001216  6E11               	movwf	___fldiv@b^0,c
  5060  001218  0E00               	movlw	0
  5061  00121A  6E12               	movwf	(___fldiv@b+1)^0,c
  5062  00121C  0E00               	movlw	0
  5063  00121E  6E13               	movwf	(___fldiv@b+2)^0,c
  5064  001220  0E00               	movlw	0
  5065  001222  6E14               	movwf	(___fldiv@b+3)^0,c
  5066  001224  0E00               	movlw	0
  5067  001226  6E24               	movwf	___fldiv@grs^0,c
  5068  001228  0E00               	movlw	0
  5069  00122A  6E25               	movwf	(___fldiv@grs+1)^0,c
  5070  00122C  0E00               	movlw	0
  5071  00122E  6E26               	movwf	(___fldiv@grs+2)^0,c
  5072  001230  0E00               	movlw	0
  5073  001232  6E27               	movwf	(___fldiv@grs+3)^0,c
  5074  001234  0E00               	movlw	0
  5075  001236  6E29               	movwf	___fldiv@aexp^0,c
  5076  001238  EF56  F009         	goto	l1237
  5077  00123C                     l4465:
  5078  00123C  5029               	movf	___fldiv@aexp^0,w,c
  5079  00123E  B4D8               	btfsc	status,2,c
  5080  001240  EF24  F009         	goto	u3941
  5081  001244  EF26  F009         	goto	u3940
  5082  001248                     u3941:
  5083  001248  EF3D  F009         	goto	l4473
  5084  00124C                     u3940:
  5085  00124C  90D8               	bcf	status,0,c
  5086  00124E  361D               	rlcf	___fldiv@rem^0,f,c
  5087  001250  361E               	rlcf	(___fldiv@rem+1)^0,f,c
  5088  001252  361F               	rlcf	(___fldiv@rem+2)^0,f,c
  5089  001254  3620               	rlcf	(___fldiv@rem+3)^0,f,c
  5090  001256  90D8               	bcf	status,0,c
  5091  001258  3611               	rlcf	___fldiv@b^0,f,c
  5092  00125A  3612               	rlcf	(___fldiv@b+1)^0,f,c
  5093  00125C  3613               	rlcf	(___fldiv@b+2)^0,f,c
  5094  00125E  3614               	rlcf	(___fldiv@b+3)^0,f,c
  5095  001260  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  5096  001262  EF35  F009         	goto	u3951
  5097  001266  EF37  F009         	goto	u3950
  5098  00126A                     u3951:
  5099  00126A  EF38  F009         	goto	l1240
  5100  00126E                     u3950:
  5101  00126E  8011               	bsf	___fldiv@b^0,0,c
  5102  001270                     l1240:
  5103  001270  90D8               	bcf	status,0,c
  5104  001272  3624               	rlcf	___fldiv@grs^0,f,c
  5105  001274  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  5106  001276  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  5107  001278  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  5108  00127A                     l4473:
  5109  00127A  5015               	movf	___fldiv@a^0,w,c
  5110  00127C  5C1D               	subwf	___fldiv@rem^0,w,c
  5111  00127E  5016               	movf	(___fldiv@a+1)^0,w,c
  5112  001280  581E               	subwfb	(___fldiv@rem+1)^0,w,c
  5113  001282  5017               	movf	(___fldiv@a+2)^0,w,c
  5114  001284  581F               	subwfb	(___fldiv@rem+2)^0,w,c
  5115  001286  5018               	movf	(___fldiv@a+3)^0,w,c
  5116  001288  5820               	subwfb	(___fldiv@rem+3)^0,w,c
  5117  00128A  A0D8               	btfss	status,0,c
  5118  00128C  EF4A  F009         	goto	u3961
  5119  001290  EF4C  F009         	goto	u3960
  5120  001294                     u3961:
  5121  001294  EF55  F009         	goto	l4479
  5122  001298                     u3960:
  5123  001298  8C27               	bsf	(___fldiv@grs+3)^0,6,c
  5124  00129A  5015               	movf	___fldiv@a^0,w,c
  5125  00129C  5E1D               	subwf	___fldiv@rem^0,f,c
  5126  00129E  5016               	movf	(___fldiv@a+1)^0,w,c
  5127  0012A0  5A1E               	subwfb	(___fldiv@rem+1)^0,f,c
  5128  0012A2  5017               	movf	(___fldiv@a+2)^0,w,c
  5129  0012A4  5A1F               	subwfb	(___fldiv@rem+2)^0,f,c
  5130  0012A6  5018               	movf	(___fldiv@a+3)^0,w,c
  5131  0012A8  5A20               	subwfb	(___fldiv@rem+3)^0,f,c
  5132  0012AA                     l4479:
  5133  0012AA  2A29               	incf	___fldiv@aexp^0,f,c
  5134  0012AC                     l1237:
  5135  0012AC  0E19               	movlw	25
  5136  0012AE  6429               	cpfsgt	___fldiv@aexp^0,c
  5137  0012B0  EF5C  F009         	goto	u3971
  5138  0012B4  EF5E  F009         	goto	u3970
  5139  0012B8                     u3971:
  5140  0012B8  EF1E  F009         	goto	l4465
  5141  0012BC                     u3970:
  5142  0012BC  501D               	movf	___fldiv@rem^0,w,c
  5143  0012BE  101E               	iorwf	(___fldiv@rem+1)^0,w,c
  5144  0012C0  101F               	iorwf	(___fldiv@rem+2)^0,w,c
  5145  0012C2  1020               	iorwf	(___fldiv@rem+3)^0,w,c
  5146  0012C4  B4D8               	btfsc	status,2,c
  5147  0012C6  EF67  F009         	goto	u3981
  5148  0012CA  EF69  F009         	goto	u3980
  5149  0012CE                     u3981:
  5150  0012CE  EF81  F009         	goto	l4491
  5151  0012D2                     u3980:
  5152  0012D2  8024               	bsf	___fldiv@grs^0,0,c
  5153  0012D4  EF81  F009         	goto	l4491
  5154  0012D8                     l4485:
  5155  0012D8  90D8               	bcf	status,0,c
  5156  0012DA  3611               	rlcf	___fldiv@b^0,f,c
  5157  0012DC  3612               	rlcf	(___fldiv@b+1)^0,f,c
  5158  0012DE  3613               	rlcf	(___fldiv@b+2)^0,f,c
  5159  0012E0  3614               	rlcf	(___fldiv@b+3)^0,f,c
  5160  0012E2  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  5161  0012E4  EF76  F009         	goto	u3991
  5162  0012E8  EF78  F009         	goto	u3990
  5163  0012EC                     u3991:
  5164  0012EC  EF79  F009         	goto	l1246
  5165  0012F0                     u3990:
  5166  0012F0  8011               	bsf	___fldiv@b^0,0,c
  5167  0012F2                     l1246:
  5168  0012F2  90D8               	bcf	status,0,c
  5169  0012F4  3624               	rlcf	___fldiv@grs^0,f,c
  5170  0012F6  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  5171  0012F8  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  5172  0012FA  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  5173  0012FC  0622               	decf	___fldiv@new_exp^0,f,c
  5174  0012FE  A0D8               	btfss	status,0,c
  5175  001300  0623               	decf	(___fldiv@new_exp+1)^0,f,c
  5176  001302                     l4491:
  5177  001302  AE13               	btfss	(___fldiv@b+2)^0,7,c
  5178  001304  EF86  F009         	goto	u4001
  5179  001308  EF88  F009         	goto	u4000
  5180  00130C                     u4001:
  5181  00130C  EF6C  F009         	goto	l4485
  5182  001310                     u4000:
  5183  001310  0E00               	movlw	0
  5184  001312  6E29               	movwf	___fldiv@aexp^0,c
  5185  001314  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  5186  001316  EF8F  F009         	goto	u4011
  5187  00131A  EF91  F009         	goto	u4010
  5188  00131E                     u4011:
  5189  00131E  EFB5  F009         	goto	l1248
  5190  001322                     u4010:
  5191  001322  0EFF               	movlw	255
  5192  001324  1424               	andwf	___fldiv@grs^0,w,c
  5193  001326  6E19               	movwf	??___fldiv^0,c
  5194  001328  0EFF               	movlw	255
  5195  00132A  1425               	andwf	(___fldiv@grs+1)^0,w,c
  5196  00132C  6E1A               	movwf	(??___fldiv+1)^0,c
  5197  00132E  0EFF               	movlw	255
  5198  001330  1426               	andwf	(___fldiv@grs+2)^0,w,c
  5199  001332  6E1B               	movwf	(??___fldiv+2)^0,c
  5200  001334  0E7F               	movlw	127
  5201  001336  1427               	andwf	(___fldiv@grs+3)^0,w,c
  5202  001338  6E1C               	movwf	(??___fldiv+3)^0,c
  5203  00133A  5019               	movf	??___fldiv^0,w,c
  5204  00133C  101A               	iorwf	(??___fldiv+1)^0,w,c
  5205  00133E  101B               	iorwf	(??___fldiv+2)^0,w,c
  5206  001340  101C               	iorwf	(??___fldiv+3)^0,w,c
  5207  001342  B4D8               	btfsc	status,2,c
  5208  001344  EFA6  F009         	goto	u4021
  5209  001348  EFA8  F009         	goto	u4020
  5210  00134C                     u4021:
  5211  00134C  EFAC  F009         	goto	l1249
  5212  001350                     u4020:
  5213  001350                     l4499:
  5214  001350  0E01               	movlw	1
  5215  001352  6E29               	movwf	___fldiv@aexp^0,c
  5216  001354  EFB5  F009         	goto	l1248
  5217  001358                     l1249:
  5218  001358  A011               	btfss	___fldiv@b^0,0,c
  5219  00135A  EFB1  F009         	goto	u4031
  5220  00135E  EFB3  F009         	goto	u4030
  5221  001362                     u4031:
  5222  001362  EFB5  F009         	goto	l1248
  5223  001366                     u4030:
  5224  001366  EFA8  F009         	goto	l4499
  5225  00136A                     l1248:
  5226  00136A  5029               	movf	___fldiv@aexp^0,w,c
  5227  00136C  B4D8               	btfsc	status,2,c
  5228  00136E  EFBB  F009         	goto	u4041
  5229  001372  EFBD  F009         	goto	u4040
  5230  001376                     u4041:
  5231  001376  EFE1  F009         	goto	l4511
  5232  00137A                     u4040:
  5233  00137A  0E01               	movlw	1
  5234  00137C  2611               	addwf	___fldiv@b^0,f,c
  5235  00137E  0E00               	movlw	0
  5236  001380  2212               	addwfc	(___fldiv@b+1)^0,f,c
  5237  001382  2213               	addwfc	(___fldiv@b+2)^0,f,c
  5238  001384  2214               	addwfc	(___fldiv@b+3)^0,f,c
  5239  001386  A014               	btfss	(___fldiv@b+3)^0,0,c
  5240  001388  EFC8  F009         	goto	u4051
  5241  00138C  EFCA  F009         	goto	u4050
  5242  001390                     u4051:
  5243  001390  EFE1  F009         	goto	l4511
  5244  001394                     u4050:
  5245  001394  C011  F019         	movff	___fldiv@b,??___fldiv
  5246  001398  C012  F01A         	movff	___fldiv@b+1,??___fldiv+1
  5247  00139C  C013  F01B         	movff	___fldiv@b+2,??___fldiv+2
  5248  0013A0  C014  F01C         	movff	___fldiv@b+3,??___fldiv+3
  5249  0013A4  341C               	rlcf	(??___fldiv+3)^0,w,c
  5250  0013A6  321C               	rrcf	(??___fldiv+3)^0,f,c
  5251  0013A8  321B               	rrcf	(??___fldiv+2)^0,f,c
  5252  0013AA  321A               	rrcf	(??___fldiv+1)^0,f,c
  5253  0013AC  3219               	rrcf	??___fldiv^0,f,c
  5254  0013AE  C019  F011         	movff	??___fldiv,___fldiv@b
  5255  0013B2  C01A  F012         	movff	??___fldiv+1,___fldiv@b+1
  5256  0013B6  C01B  F013         	movff	??___fldiv+2,___fldiv@b+2
  5257  0013BA  C01C  F014         	movff	??___fldiv+3,___fldiv@b+3
  5258  0013BE  4A22               	infsnz	___fldiv@new_exp^0,f,c
  5259  0013C0  2A23               	incf	(___fldiv@new_exp+1)^0,f,c
  5260  0013C2                     l4511:
  5261  0013C2  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5262  0013C4  EFEC  F009         	goto	u4061
  5263  0013C8  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  5264  0013CA  E108               	bnz	u4060
  5265  0013CC  2822               	incf	___fldiv@new_exp^0,w,c
  5266  0013CE  A0D8               	btfss	status,0,c
  5267  0013D0  EFEC  F009         	goto	u4061
  5268  0013D4  EFEE  F009         	goto	u4060
  5269  0013D8                     u4061:
  5270  0013D8  EFF9  F009         	goto	l4515
  5271  0013DC                     u4060:
  5272  0013DC  0E00               	movlw	0
  5273  0013DE  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  5274  0013E0  6822               	setf	___fldiv@new_exp^0,c
  5275  0013E2  0E00               	movlw	0
  5276  0013E4  6E11               	movwf	___fldiv@b^0,c
  5277  0013E6  0E00               	movlw	0
  5278  0013E8  6E12               	movwf	(___fldiv@b+1)^0,c
  5279  0013EA  0E00               	movlw	0
  5280  0013EC  6E13               	movwf	(___fldiv@b+2)^0,c
  5281  0013EE  0E00               	movlw	0
  5282  0013F0  6E14               	movwf	(___fldiv@b+3)^0,c
  5283  0013F2                     l4515:
  5284  0013F2  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5285  0013F4  EF06  F00A         	goto	u4070
  5286  0013F8  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  5287  0013FA  E106               	bnz	u4071
  5288  0013FC  0422               	decf	___fldiv@new_exp^0,w,c
  5289  0013FE  B0D8               	btfsc	status,0,c
  5290  001400  EF04  F00A         	goto	u4071
  5291  001404  EF06  F00A         	goto	u4070
  5292  001408                     u4071:
  5293  001408  EF14  F00A         	goto	l4519
  5294  00140C                     u4070:
  5295  00140C  0E00               	movlw	0
  5296  00140E  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  5297  001410  0E00               	movlw	0
  5298  001412  6E22               	movwf	___fldiv@new_exp^0,c
  5299  001414  0E00               	movlw	0
  5300  001416  6E11               	movwf	___fldiv@b^0,c
  5301  001418  0E00               	movlw	0
  5302  00141A  6E12               	movwf	(___fldiv@b+1)^0,c
  5303  00141C  0E00               	movlw	0
  5304  00141E  6E13               	movwf	(___fldiv@b+2)^0,c
  5305  001420  0E00               	movlw	0
  5306  001422  6E14               	movwf	(___fldiv@b+3)^0,c
  5307  001424  0E00               	movlw	0
  5308  001426  6E21               	movwf	___fldiv@sign^0,c
  5309  001428                     l4519:
  5310  001428  C022  F028         	movff	___fldiv@new_exp,___fldiv@bexp
  5311  00142C  A028               	btfss	___fldiv@bexp^0,0,c
  5312  00142E  EF1B  F00A         	goto	u4081
  5313  001432  EF1D  F00A         	goto	u4080
  5314  001436                     u4081:
  5315  001436  EF20  F00A         	goto	l4525
  5316  00143A                     u4080:
  5317  00143A  8E13               	bsf	(___fldiv@b+2)^0,7,c
  5318  00143C  EF21  F00A         	goto	l4527
  5319  001440                     l4525:
  5320  001440  9E13               	bcf	(___fldiv@b+2)^0,7,c
  5321  001442                     l4527:
  5322  001442  90D8               	bcf	status,0,c
  5323  001444  3028               	rrcf	___fldiv@bexp^0,w,c
  5324  001446  6E14               	movwf	(___fldiv@b+3)^0,c
  5325  001448  EFD7  F008         	goto	l4441
  5326  00144C                     l1235:
  5327  00144C  0012               	return		;funcret
  5328  00144E                     __end_of___fldiv:
  5329                           	callstack 0
  5330                           
  5331 ;; *************** function _Manual_Mode *****************
  5332 ;; Defined at:
  5333 ;;		line 250 in file "main.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;		None
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;		None
  5338 ;; Return value:  Size  Location     Type
  5339 ;;                  1    wreg      void 
  5340 ;; Registers used:
  5341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5342 ;; Tracked objects:
  5343 ;;		On entry : 0/0
  5344 ;;		On exit  : 0/0
  5345 ;;		Unchanged: 0/0
  5346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5347 ;;      Params:         0       0       0       0       0       0       0
  5348 ;;      Locals:         0       0       0       0       0       0       0
  5349 ;;      Temps:          0       0       0       0       0       0       0
  5350 ;;      Totals:         0       0       0       0       0       0       0
  5351 ;;Total ram usage:        0 bytes
  5352 ;; Hardware stack levels used: 1
  5353 ;; Hardware stack levels required when called: 8
  5354 ;; This function calls:
  5355 ;;		_Debounce
  5356 ;; This function is called by:
  5357 ;;		_main
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           	psect	text20
  5362  0036FE                     __ptext20:
  5363                           	callstack 0
  5364  0036FE                     _Manual_Mode:
  5365                           	callstack 22
  5366  0036FE                     
  5367                           ;main.c: 252: Debounce(PORTB, 1, &bt_on_off_pump_press, &filter_bt_on_off_pump, Tougle_P
      +                          ump);
  5368  0036FE  CF81 F02F          	movff	3969,Debounce@port	;volatile
  5369  003702  6A30               	clrf	(Debounce@port+1)^0,c
  5370  003704  0E00               	movlw	0
  5371  003706  6E32               	movwf	(Debounce@pin+1)^0,c
  5372  003708  0E01               	movlw	1
  5373  00370A  6E31               	movwf	Debounce@pin^0,c
  5374  00370C  0E66               	movlw	low _bt_on_off_pump_press
  5375  00370E  6E33               	movwf	Debounce@bt_press^0,c
  5376  003710  0E00               	movlw	high _bt_on_off_pump_press
  5377  003712  6E34               	movwf	(Debounce@bt_press+1)^0,c
  5378  003714  0E70               	movlw	low _filter_bt_on_off_pump
  5379  003716  6E35               	movwf	Debounce@filter^0,c
  5380  003718  0E00               	movlw	high _filter_bt_on_off_pump
  5381  00371A  6E36               	movwf	(Debounce@filter+1)^0,c
  5382  00371C  0ED4               	movlw	low _Tougle_Pump
  5383  00371E  6E37               	movwf	Debounce@ptr_f^0,c
  5384  003720  0E37               	movlw	high _Tougle_Pump
  5385  003722  6E38               	movwf	(Debounce@ptr_f+1)^0,c
  5386  003724  EC20  F018         	call	_Debounce	;wreg free
  5387  003728  0012               	return		;funcret
  5388  00372A                     __end_of_Manual_Mode:
  5389                           	callstack 0
  5390                           
  5391 ;; *************** function _Debounce *****************
  5392 ;; Defined at:
  5393 ;;		line 3 in file "debounce.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  port            2   46[COMRAM] unsigned int 
  5396 ;;  pin             2   48[COMRAM] unsigned int 
  5397 ;;  bt_press        2   50[COMRAM] PTR unsigned int 
  5398 ;;		 -> bt_on_off_pump_press(2), bt_min_lv2_incr_press(2), bt_min_lv1_incr_press(2), bt_operation_mode_press(2), 
  5399 ;;  filter          2   52[COMRAM] PTR unsigned int 
  5400 ;;		 -> filter_bt_on_off_pump(2), filter_bt_min_lv2_incr(2), filter_bt_min_lv1_incr(2), filter_bt_operation_mode(2), 
  5401 ;;  ptr_f           2   54[COMRAM] PTR FTN()void 
  5402 ;;		 -> Tougle_Pump(1), Min_Lv2_Incr(1), Min_Lv1_Incr(1), Change_Mode(1), 
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;		None
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  1    wreg      void 
  5407 ;; Registers used:
  5408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5414 ;;      Params:        10       0       0       0       0       0       0
  5415 ;;      Locals:         0       0       0       0       0       0       0
  5416 ;;      Temps:          2       0       0       0       0       0       0
  5417 ;;      Totals:        12       0       0       0       0       0       0
  5418 ;;Total ram usage:       12 bytes
  5419 ;; Hardware stack levels used: 1
  5420 ;; Hardware stack levels required when called: 7
  5421 ;; This function calls:
  5422 ;;		_Change_Mode
  5423 ;;		_CheckBit
  5424 ;;		_Min_Lv1_Incr
  5425 ;;		_Min_Lv2_Incr
  5426 ;;		_Tougle_Pump
  5427 ;; This function is called by:
  5428 ;;		_main
  5429 ;;		_Manual_Mode
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text21
  5434  003040                     __ptext21:
  5435                           	callstack 0
  5436  003040                     _Debounce:
  5437                           	callstack 22
  5438  003040                     
  5439                           ;debounce.c: 5: if (!CheckBit(port, pin))
  5440  003040  C02F  F003         	movff	Debounce@port,CheckBit@port
  5441  003044  C030  F004         	movff	Debounce@port+1,CheckBit@port+1
  5442  003048  C031  F005         	movff	Debounce@pin,CheckBit@pin
  5443  00304C  C032  F006         	movff	Debounce@pin+1,CheckBit@pin+1
  5444  003050  EC95  F01B         	call	_CheckBit	;wreg free
  5445  003054  5003               	movf	?_CheckBit^0,w,c
  5446  003056  1004               	iorwf	(?_CheckBit+1)^0,w,c
  5447  003058  A4D8               	btfss	status,2,c
  5448  00305A  EF31  F018         	goto	u3341
  5449  00305E  EF33  F018         	goto	u3340
  5450  003062                     u3341:
  5451  003062  EF6D  F018         	goto	l3905
  5452  003066                     u3340:
  5453  003066                     
  5454                           ;debounce.c: 6: {;debounce.c: 8: if (!(*bt_press))
  5455  003066  C033  FFD9         	movff	Debounce@bt_press,fsr2l
  5456  00306A  C034  FFDA         	movff	Debounce@bt_press+1,fsr2h
  5457  00306E  50DE               	movf	postinc2,w,c
  5458  003070  10DE               	iorwf	postinc2,w,c
  5459  003072  A4D8               	btfss	status,2,c
  5460  003074  EF3E  F018         	goto	u3351
  5461  003078  EF40  F018         	goto	u3350
  5462  00307C                     u3351:
  5463  00307C  EF7D  F018         	goto	l323
  5464  003080                     u3350:
  5465  003080                     
  5466                           ;debounce.c: 9: {;debounce.c: 10: if (*filter > 0)
  5467  003080  C035  FFD9         	movff	Debounce@filter,fsr2l
  5468  003084  C036  FFDA         	movff	Debounce@filter+1,fsr2h
  5469  003088  50DE               	movf	postinc2,w,c
  5470  00308A  10DE               	iorwf	postinc2,w,c
  5471  00308C  B4D8               	btfsc	status,2,c
  5472  00308E  EF4B  F018         	goto	u3361
  5473  003092  EF4D  F018         	goto	u3360
  5474  003096                     u3361:
  5475  003096  EF56  F018         	goto	l3901
  5476  00309A                     u3360:
  5477  00309A                     
  5478                           ;debounce.c: 11: {;debounce.c: 12: (*filter)--;
  5479  00309A  C035  FFD9         	movff	Debounce@filter,fsr2l
  5480  00309E  C036  FFDA         	movff	Debounce@filter+1,fsr2h
  5481  0030A2  06DE               	decf	postinc2,f,c
  5482  0030A4  0E00               	movlw	0
  5483  0030A6  5ADD               	subwfb	postdec2,f,c
  5484                           
  5485                           ;debounce.c: 13: }
  5486  0030A8  EF7D  F018         	goto	l323
  5487  0030AC                     l3901:
  5488                           
  5489                           ;debounce.c: 14: else;debounce.c: 15: {;debounce.c: 16: *bt_press = 1;
  5490  0030AC  C033  FFD9         	movff	Debounce@bt_press,fsr2l
  5491  0030B0  C034  FFDA         	movff	Debounce@bt_press+1,fsr2h
  5492  0030B4  0E01               	movlw	1
  5493  0030B6  6EDE               	movwf	postinc2,c
  5494  0030B8  0E00               	movlw	0
  5495  0030BA  6EDD               	movwf	postdec2,c
  5496  0030BC                     
  5497                           ;debounce.c: 17: ptr_f();
  5498  0030BC  D802               	call	u3378
  5499  0030BE  EF6B  F018         	goto	u3379
  5500  0030C2                     u3378:
  5501  0030C2  0005               	push	
  5502  0030C4  6EFA               	movwf	pclath,c
  5503  0030C6  5037               	movf	Debounce@ptr_f^0,w,c
  5504  0030C8  6EFD               	movwf	tosl,c
  5505  0030CA  5038               	movf	(Debounce@ptr_f+1)^0,w,c
  5506  0030CC  6EFE               	movwf	tosh,c
  5507  0030CE  50F8               	movf	tblptru,w,c
  5508  0030D0  6EFF               	movwf	tosu,c
  5509  0030D2  50FA               	movf	pclath,w,c
  5510  0030D4  0012               	return		;indir
  5511  0030D6                     u3379:
  5512  0030D6  EF7D  F018         	goto	l323
  5513  0030DA                     l3905:
  5514                           
  5515                           ;debounce.c: 21: else;debounce.c: 22: {;debounce.c: 23: *filter = 10;;
  5516  0030DA  C035  FFD9         	movff	Debounce@filter,fsr2l
  5517  0030DE  C036  FFDA         	movff	Debounce@filter+1,fsr2h
  5518  0030E2  0E0A               	movlw	10
  5519  0030E4  6EDE               	movwf	postinc2,c
  5520  0030E6  0E00               	movlw	0
  5521  0030E8  6EDD               	movwf	postdec2,c
  5522                           
  5523                           ;debounce.c: 24: *bt_press = 0;
  5524  0030EA  C033  FFD9         	movff	Debounce@bt_press,fsr2l
  5525  0030EE  C034  FFDA         	movff	Debounce@bt_press+1,fsr2h
  5526  0030F2  0E00               	movlw	0
  5527  0030F4  6EDE               	movwf	postinc2,c
  5528  0030F6  0E00               	movlw	0
  5529  0030F8  6EDD               	movwf	postdec2,c
  5530  0030FA                     l323:
  5531  0030FA  0012               	return		;funcret
  5532  0030FC                     __end_of_Debounce:
  5533                           	callstack 0
  5534                           
  5535 ;; *************** function _Min_Lv2_Incr *****************
  5536 ;; Defined at:
  5537 ;;		line 278 in file "main.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;		None
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;		None
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  1    wreg      void 
  5544 ;; Registers used:
  5545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5551 ;;      Params:         0       0       0       0       0       0       0
  5552 ;;      Locals:         0       0       0       0       0       0       0
  5553 ;;      Temps:          0       0       0       0       0       0       0
  5554 ;;      Totals:         0       0       0       0       0       0       0
  5555 ;;Total ram usage:        0 bytes
  5556 ;; Hardware stack levels used: 1
  5557 ;; Hardware stack levels required when called: 6
  5558 ;; This function calls:
  5559 ;;		_Refresh_Screen
  5560 ;;		___fladd
  5561 ;;		___flge
  5562 ;;		___fltol
  5563 ;; This function is called by:
  5564 ;;		_main
  5565 ;;		_Debounce
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text22
  5570  002DD0                     __ptext22:
  5571                           	callstack 0
  5572  002DD0                     _Min_Lv2_Incr:
  5573                           	callstack 22
  5574  002DD0                     
  5575                           ;main.c: 280: screen = MIN_LEVEL;
  5576  002DD0  0E02               	movlw	2
  5577  002DD2  6E5B               	movwf	_screen^0,c	;volatile
  5578  002DD4                     
  5579                           ;main.c: 281: Refresh_Screen();
  5580  002DD4  ECCF  F01B         	call	_Refresh_Screen	;wreg free
  5581  002DD8                     
  5582                           ;main.c: 282: TMR1L = 0x2C;
  5583  002DD8  0E2C               	movlw	44
  5584  002DDA  6ECE               	movwf	206,c	;volatile
  5585  002DDC                     
  5586                           ;main.c: 283: TMR1H = 0xCF;
  5587  002DDC  0ECF               	movlw	207
  5588  002DDE  6ECF               	movwf	207,c	;volatile
  5589  002DE0                     
  5590                           ;main.c: 284: count_screen = -250;
  5591  002DE0  0EFF               	movlw	255
  5592  002DE2  6E5A               	movwf	(_count_screen+1)^0,c	;volatile
  5593  002DE4  0E06               	movlw	6
  5594  002DE6  6E59               	movwf	_count_screen^0,c	;volatile
  5595  002DE8                     
  5596                           ;main.c: 286: if ((tank2.min_level + INCREMENT) <= 100) tank2.min_level += INCREMENT;
  5597  002DE8  0E00               	movlw	0
  5598  002DEA  6E13               	movwf	___flge@ff1^0,c
  5599  002DEC  0E00               	movlw	0
  5600  002DEE  6E14               	movwf	(___flge@ff1+1)^0,c
  5601  002DF0  0EC8               	movlw	200
  5602  002DF2  6E15               	movwf	(___flge@ff1+2)^0,c
  5603  002DF4  0E42               	movlw	66
  5604  002DF6  6E16               	movwf	(___flge@ff1+3)^0,c
  5605  002DF8  0E00               	movlw	0
  5606  002DFA  6E07               	movwf	___fladd@a^0,c
  5607  002DFC  0E00               	movlw	0
  5608  002DFE  6E08               	movwf	(___fladd@a+1)^0,c
  5609  002E00  0E20               	movlw	32
  5610  002E02  6E09               	movwf	(___fladd@a+2)^0,c
  5611  002E04  0E41               	movlw	65
  5612  002E06  6E0A               	movwf	(___fladd@a+3)^0,c
  5613  002E08  C03F  F003         	movff	_tank2+4,___fladd@b	;volatile
  5614  002E0C  C040  F004         	movff	_tank2+5,___fladd@b+1	;volatile
  5615  002E10  C041  F005         	movff	_tank2+6,___fladd@b+2	;volatile
  5616  002E14  C042  F006         	movff	_tank2+7,___fladd@b+3	;volatile
  5617  002E18  ECFA  F005         	call	___fladd	;wreg free
  5618  002E1C  C003  F017         	movff	?___fladd,___flge@ff2
  5619  002E20  C004  F018         	movff	?___fladd+1,___flge@ff2+1
  5620  002E24  C005  F019         	movff	?___fladd+2,___flge@ff2+2
  5621  002E28  C006  F01A         	movff	?___fladd+3,___flge@ff2+3
  5622  002E2C  ECF7  F014         	call	___flge	;wreg free
  5623  002E30  A0D8               	btfss	status,0,c
  5624  002E32  EF1D  F017         	goto	u3281
  5625  002E36  EF1F  F017         	goto	u3280
  5626  002E3A                     u3281:
  5627  002E3A  EF3B  F017         	goto	l3837
  5628  002E3E                     u3280:
  5629  002E3E  C03F  F003         	movff	_tank2+4,___fladd@b	;volatile
  5630  002E42  C040  F004         	movff	_tank2+5,___fladd@b+1	;volatile
  5631  002E46  C041  F005         	movff	_tank2+6,___fladd@b+2	;volatile
  5632  002E4A  C042  F006         	movff	_tank2+7,___fladd@b+3	;volatile
  5633  002E4E  0E00               	movlw	0
  5634  002E50  6E07               	movwf	___fladd@a^0,c
  5635  002E52  0E00               	movlw	0
  5636  002E54  6E08               	movwf	(___fladd@a+1)^0,c
  5637  002E56  0E20               	movlw	32
  5638  002E58  6E09               	movwf	(___fladd@a+2)^0,c
  5639  002E5A  0E41               	movlw	65
  5640  002E5C  6E0A               	movwf	(___fladd@a+3)^0,c
  5641  002E5E  ECFA  F005         	call	___fladd	;wreg free
  5642  002E62  C003  F03F         	movff	?___fladd,_tank2+4	;volatile
  5643  002E66  C004  F040         	movff	?___fladd+1,_tank2+5	;volatile
  5644  002E6A  C005  F041         	movff	?___fladd+2,_tank2+6	;volatile
  5645  002E6E  C006  F042         	movff	?___fladd+3,_tank2+7	;volatile
  5646  002E72  EF43  F017         	goto	l3839
  5647  002E76                     l3837:
  5648                           
  5649                           ;main.c: 287: else tank2.min_level = 0;
  5650  002E76  0E00               	movlw	0
  5651  002E78  6E3F               	movwf	(_tank2+4)^0,c	;volatile
  5652  002E7A  0E00               	movlw	0
  5653  002E7C  6E40               	movwf	(_tank2+5)^0,c	;volatile
  5654  002E7E  0E00               	movlw	0
  5655  002E80  6E41               	movwf	(_tank2+6)^0,c	;volatile
  5656  002E82  0E00               	movlw	0
  5657  002E84  6E42               	movwf	(_tank2+7)^0,c	;volatile
  5658  002E86                     l3839:
  5659                           
  5660                           ;main.c: 289: holdingReg[3] = tank2.min_level;
  5661  002E86  C03F  F003         	movff	_tank2+4,___fltol@f1	;volatile
  5662  002E8A  C040  F004         	movff	_tank2+5,___fltol@f1+1	;volatile
  5663  002E8E  C041  F005         	movff	_tank2+6,___fltol@f1+2	;volatile
  5664  002E92  C042  F006         	movff	_tank2+7,___fltol@f1+3	;volatile
  5665  002E96  ECF2  F013         	call	___fltol	;wreg free
  5666  002E9A  C003  F086         	movff	?___fltol,_holdingReg+6	;volatile
  5667  002E9E  C004  F087         	movff	?___fltol+1,_holdingReg+7	;volatile
  5668  002EA2  0012               	return		;funcret
  5669  002EA4                     __end_of_Min_Lv2_Incr:
  5670                           	callstack 0
  5671                           
  5672 ;; *************** function _Min_Lv1_Incr *****************
  5673 ;; Defined at:
  5674 ;;		line 264 in file "main.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;		None
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;		None
  5679 ;; Return value:  Size  Location     Type
  5680 ;;                  1    wreg      void 
  5681 ;; Registers used:
  5682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5683 ;; Tracked objects:
  5684 ;;		On entry : 0/0
  5685 ;;		On exit  : 0/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5688 ;;      Params:         0       0       0       0       0       0       0
  5689 ;;      Locals:         0       0       0       0       0       0       0
  5690 ;;      Temps:          0       0       0       0       0       0       0
  5691 ;;      Totals:         0       0       0       0       0       0       0
  5692 ;;Total ram usage:        0 bytes
  5693 ;; Hardware stack levels used: 1
  5694 ;; Hardware stack levels required when called: 6
  5695 ;; This function calls:
  5696 ;;		_Refresh_Screen
  5697 ;;		___fladd
  5698 ;;		___flge
  5699 ;;		___fltol
  5700 ;; This function is called by:
  5701 ;;		_main
  5702 ;;		_Debounce
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           	psect	text23
  5707  002EA4                     __ptext23:
  5708                           	callstack 0
  5709  002EA4                     _Min_Lv1_Incr:
  5710                           	callstack 22
  5711  002EA4                     
  5712                           ;main.c: 266: screen = MIN_LEVEL;
  5713  002EA4  0E02               	movlw	2
  5714  002EA6  6E5B               	movwf	_screen^0,c	;volatile
  5715  002EA8                     
  5716                           ;main.c: 267: Refresh_Screen();
  5717  002EA8  ECCF  F01B         	call	_Refresh_Screen	;wreg free
  5718  002EAC                     
  5719                           ;main.c: 268: TMR1L = 0x2C;
  5720  002EAC  0E2C               	movlw	44
  5721  002EAE  6ECE               	movwf	206,c	;volatile
  5722  002EB0                     
  5723                           ;main.c: 269: TMR1H = 0xCF;
  5724  002EB0  0ECF               	movlw	207
  5725  002EB2  6ECF               	movwf	207,c	;volatile
  5726  002EB4                     
  5727                           ;main.c: 270: count_screen = -250;
  5728  002EB4  0EFF               	movlw	255
  5729  002EB6  6E5A               	movwf	(_count_screen+1)^0,c	;volatile
  5730  002EB8  0E06               	movlw	6
  5731  002EBA  6E59               	movwf	_count_screen^0,c	;volatile
  5732  002EBC                     
  5733                           ;main.c: 272: if ((tank1.min_level + INCREMENT) <= 100) tank1.min_level += INCREMENT;
  5734  002EBC  0E00               	movlw	0
  5735  002EBE  6E13               	movwf	___flge@ff1^0,c
  5736  002EC0  0E00               	movlw	0
  5737  002EC2  6E14               	movwf	(___flge@ff1+1)^0,c
  5738  002EC4  0EC8               	movlw	200
  5739  002EC6  6E15               	movwf	(___flge@ff1+2)^0,c
  5740  002EC8  0E42               	movlw	66
  5741  002ECA  6E16               	movwf	(___flge@ff1+3)^0,c
  5742  002ECC  0E00               	movlw	0
  5743  002ECE  6E07               	movwf	___fladd@a^0,c
  5744  002ED0  0E00               	movlw	0
  5745  002ED2  6E08               	movwf	(___fladd@a+1)^0,c
  5746  002ED4  0E20               	movlw	32
  5747  002ED6  6E09               	movwf	(___fladd@a+2)^0,c
  5748  002ED8  0E41               	movlw	65
  5749  002EDA  6E0A               	movwf	(___fladd@a+3)^0,c
  5750  002EDC  C04B  F003         	movff	_tank1+4,___fladd@b	;volatile
  5751  002EE0  C04C  F004         	movff	_tank1+5,___fladd@b+1	;volatile
  5752  002EE4  C04D  F005         	movff	_tank1+6,___fladd@b+2	;volatile
  5753  002EE8  C04E  F006         	movff	_tank1+7,___fladd@b+3	;volatile
  5754  002EEC  ECFA  F005         	call	___fladd	;wreg free
  5755  002EF0  C003  F017         	movff	?___fladd,___flge@ff2
  5756  002EF4  C004  F018         	movff	?___fladd+1,___flge@ff2+1
  5757  002EF8  C005  F019         	movff	?___fladd+2,___flge@ff2+2
  5758  002EFC  C006  F01A         	movff	?___fladd+3,___flge@ff2+3
  5759  002F00  ECF7  F014         	call	___flge	;wreg free
  5760  002F04  A0D8               	btfss	status,0,c
  5761  002F06  EF87  F017         	goto	u3271
  5762  002F0A  EF89  F017         	goto	u3270
  5763  002F0E                     u3271:
  5764  002F0E  EFA5  F017         	goto	l3819
  5765  002F12                     u3270:
  5766  002F12  C04B  F003         	movff	_tank1+4,___fladd@b	;volatile
  5767  002F16  C04C  F004         	movff	_tank1+5,___fladd@b+1	;volatile
  5768  002F1A  C04D  F005         	movff	_tank1+6,___fladd@b+2	;volatile
  5769  002F1E  C04E  F006         	movff	_tank1+7,___fladd@b+3	;volatile
  5770  002F22  0E00               	movlw	0
  5771  002F24  6E07               	movwf	___fladd@a^0,c
  5772  002F26  0E00               	movlw	0
  5773  002F28  6E08               	movwf	(___fladd@a+1)^0,c
  5774  002F2A  0E20               	movlw	32
  5775  002F2C  6E09               	movwf	(___fladd@a+2)^0,c
  5776  002F2E  0E41               	movlw	65
  5777  002F30  6E0A               	movwf	(___fladd@a+3)^0,c
  5778  002F32  ECFA  F005         	call	___fladd	;wreg free
  5779  002F36  C003  F04B         	movff	?___fladd,_tank1+4	;volatile
  5780  002F3A  C004  F04C         	movff	?___fladd+1,_tank1+5	;volatile
  5781  002F3E  C005  F04D         	movff	?___fladd+2,_tank1+6	;volatile
  5782  002F42  C006  F04E         	movff	?___fladd+3,_tank1+7	;volatile
  5783  002F46  EFAD  F017         	goto	l3821
  5784  002F4A                     l3819:
  5785                           
  5786                           ;main.c: 273: else tank1.min_level = 0;
  5787  002F4A  0E00               	movlw	0
  5788  002F4C  6E4B               	movwf	(_tank1+4)^0,c	;volatile
  5789  002F4E  0E00               	movlw	0
  5790  002F50  6E4C               	movwf	(_tank1+5)^0,c	;volatile
  5791  002F52  0E00               	movlw	0
  5792  002F54  6E4D               	movwf	(_tank1+6)^0,c	;volatile
  5793  002F56  0E00               	movlw	0
  5794  002F58  6E4E               	movwf	(_tank1+7)^0,c	;volatile
  5795  002F5A                     l3821:
  5796                           
  5797                           ;main.c: 275: holdingReg[2] = tank1.min_level;
  5798  002F5A  C04B  F003         	movff	_tank1+4,___fltol@f1	;volatile
  5799  002F5E  C04C  F004         	movff	_tank1+5,___fltol@f1+1	;volatile
  5800  002F62  C04D  F005         	movff	_tank1+6,___fltol@f1+2	;volatile
  5801  002F66  C04E  F006         	movff	_tank1+7,___fltol@f1+3	;volatile
  5802  002F6A  ECF2  F013         	call	___fltol	;wreg free
  5803  002F6E  C003  F084         	movff	?___fltol,_holdingReg+4	;volatile
  5804  002F72  C004  F085         	movff	?___fltol+1,_holdingReg+5	;volatile
  5805  002F76  0012               	return		;funcret
  5806  002F78                     __end_of_Min_Lv1_Incr:
  5807                           	callstack 0
  5808                           
  5809 ;; *************** function _Change_Mode *****************
  5810 ;; Defined at:
  5811 ;;		line 255 in file "main.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;		None
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;		None
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      void 
  5818 ;; Registers used:
  5819 ;;		wreg, status,2, status,0
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5825 ;;      Params:         0       0       0       0       0       0       0
  5826 ;;      Locals:         0       0       0       0       0       0       0
  5827 ;;      Temps:          1       0       0       0       0       0       0
  5828 ;;      Totals:         1       0       0       0       0       0       0
  5829 ;;Total ram usage:        1 bytes
  5830 ;; Hardware stack levels used: 1
  5831 ;; Hardware stack levels required when called: 2
  5832 ;; This function calls:
  5833 ;;		Nothing
  5834 ;; This function is called by:
  5835 ;;		_main
  5836 ;;		_Debounce
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text24
  5841  003582                     __ptext24:
  5842                           	callstack 0
  5843  003582                     _Change_Mode:
  5844                           	callstack 26
  5845  003582                     
  5846                           ;main.c: 257: LATDbits.LATD0 = ~LATDbits.LATD0;
  5847  003582  B08C               	btfsc	140,0,c	;volatile
  5848  003584  EFC6  F01A         	goto	u3251
  5849  003588  EFC9  F01A         	goto	u3250
  5850  00358C                     u3251:
  5851  00358C  0E01               	movlw	1
  5852  00358E  EFCA  F01A         	goto	u3256
  5853  003592                     u3250:
  5854  003592  0E00               	movlw	0
  5855  003594                     u3256:
  5856  003594  0AFF               	xorlw	255
  5857  003596  6E03               	movwf	??_Change_Mode^0,c
  5858  003598  508C               	movf	140,w,c	;volatile
  5859  00359A  1803               	xorwf	??_Change_Mode^0,w,c
  5860  00359C  0BFE               	andlw	-2
  5861  00359E  1803               	xorwf	??_Change_Mode^0,w,c
  5862  0035A0  6E8C               	movwf	140,c	;volatile
  5863  0035A2                     
  5864                           ;main.c: 258: if (operation == AUTOMATIC) operation = MANUAL;
  5865  0035A2  505C               	movf	_operation^0,w,c	;volatile
  5866  0035A4  A4D8               	btfss	status,2,c
  5867  0035A6  EFD7  F01A         	goto	u3261
  5868  0035AA  EFD9  F01A         	goto	u3260
  5869  0035AE                     u3261:
  5870  0035AE  EFDD  F01A         	goto	l3801
  5871  0035B2                     u3260:
  5872  0035B2  0E01               	movlw	1
  5873  0035B4  6E5C               	movwf	_operation^0,c	;volatile
  5874  0035B6  EFDF  F01A         	goto	l3803
  5875  0035BA                     l3801:
  5876                           
  5877                           ;main.c: 259: else operation = AUTOMATIC;
  5878  0035BA  0E00               	movlw	0
  5879  0035BC  6E5C               	movwf	_operation^0,c	;volatile
  5880  0035BE                     l3803:
  5881                           
  5882                           ;main.c: 261: holdingReg[1] = operation;
  5883  0035BE  C05C  F082         	movff	_operation,_holdingReg+2	;volatile
  5884  0035C2  0100               	movlb	0	; () banked
  5885  0035C4  6B83               	clrf	(_holdingReg+3)& (0+255),b	;volatile
  5886  0035C6                     
  5887                           ; BSR set to: 0
  5888  0035C6  0012               	return		;funcret
  5889  0035C8                     __end_of_Change_Mode:
  5890                           	callstack 0
  5891                           
  5892 ;; *************** function _Tougle_Pump *****************
  5893 ;; Defined at:
  5894 ;;		line 232 in file "main.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;		None
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;		None
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  1    wreg      void 
  5901 ;; Registers used:
  5902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5908 ;;      Params:         0       0       0       0       0       0       0
  5909 ;;      Locals:         0       0       0       0       0       0       0
  5910 ;;      Temps:          0       0       0       0       0       0       0
  5911 ;;      Totals:         0       0       0       0       0       0       0
  5912 ;;Total ram usage:        0 bytes
  5913 ;; Hardware stack levels used: 1
  5914 ;; Hardware stack levels required when called: 3
  5915 ;; This function calls:
  5916 ;;		_TougleBit
  5917 ;; This function is called by:
  5918 ;;		_Manual_Mode
  5919 ;;		_Debounce
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text25
  5924  0037D4                     __ptext25:
  5925                           	callstack 0
  5926  0037D4                     _Tougle_Pump:
  5927                           	callstack 25
  5928  0037D4                     
  5929                           ;main.c: 234: TougleBit(&LATC, 0);
  5930  0037D4  0E8B               	movlw	139
  5931  0037D6  6E03               	movwf	TougleBit@port^0,c
  5932  0037D8  0E0F               	movlw	15
  5933  0037DA  6E04               	movwf	(TougleBit@port+1)^0,c
  5934  0037DC  0E00               	movlw	0
  5935  0037DE  6E06               	movwf	(TougleBit@pin+1)^0,c
  5936  0037E0  0E00               	movlw	0
  5937  0037E2  6E05               	movwf	TougleBit@pin^0,c
  5938  0037E4  EC4F  F01B         	call	_TougleBit	;wreg free
  5939  0037E8  0012               	return		;funcret
  5940  0037EA                     __end_of_Tougle_Pump:
  5941                           	callstack 0
  5942                           
  5943 ;; *************** function _TougleBit *****************
  5944 ;; Defined at:
  5945 ;;		line 13 in file "regoperations.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  port            2    2[COMRAM] PTR unsigned int 
  5948 ;;		 -> LATC(1), 
  5949 ;;  pin             2    4[COMRAM] unsigned int 
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;		None
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  1    wreg      void 
  5954 ;; Registers used:
  5955 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5961 ;;      Params:         4       0       0       0       0       0       0
  5962 ;;      Locals:         0       0       0       0       0       0       0
  5963 ;;      Temps:          3       0       0       0       0       0       0
  5964 ;;      Totals:         7       0       0       0       0       0       0
  5965 ;;Total ram usage:        7 bytes
  5966 ;; Hardware stack levels used: 1
  5967 ;; Hardware stack levels required when called: 2
  5968 ;; This function calls:
  5969 ;;		Nothing
  5970 ;; This function is called by:
  5971 ;;		_Tougle_Pump
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text26
  5976  00369E                     __ptext26:
  5977                           	callstack 0
  5978  00369E                     _TougleBit:
  5979                           	callstack 25
  5980  00369E                     
  5981                           ;regoperations.c: 15: (*port) ^= (1UL << pin);
  5982  00369E  C005  F007         	movff	TougleBit@pin,??_TougleBit
  5983  0036A2  0E01               	movlw	1
  5984  0036A4  6E08               	movwf	(??_TougleBit+1)^0,c
  5985  0036A6  0E00               	movlw	0
  5986  0036A8  6E09               	movwf	(??_TougleBit+2)^0,c
  5987  0036AA  2A07               	incf	??_TougleBit^0,f,c
  5988  0036AC  EF5B  F01B         	goto	u2804
  5989  0036B0                     u2805:
  5990  0036B0  90D8               	bcf	status,0,c
  5991  0036B2  3608               	rlcf	(??_TougleBit+1)^0,f,c
  5992  0036B4  3609               	rlcf	(??_TougleBit+2)^0,f,c
  5993  0036B6                     u2804:
  5994  0036B6  2E07               	decfsz	??_TougleBit^0,f,c
  5995  0036B8  EF58  F01B         	goto	u2805
  5996  0036BC  C003  FFD9         	movff	TougleBit@port,fsr2l
  5997  0036C0  C004  FFDA         	movff	TougleBit@port+1,fsr2h
  5998  0036C4  5008               	movf	(??_TougleBit+1)^0,w,c
  5999  0036C6  1ADE               	xorwf	postinc2,f,c
  6000  0036C8  5009               	movf	(??_TougleBit+2)^0,w,c
  6001  0036CA  1ADD               	xorwf	postdec2,f,c
  6002  0036CC  0012               	return		;funcret
  6003  0036CE                     __end_of_TougleBit:
  6004                           	callstack 0
  6005                           
  6006 ;; *************** function ___fladd *****************
  6007 ;; Defined at:
  6008 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\sprcadd.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  b               4    2[COMRAM] void 
  6011 ;;  a               4    6[COMRAM] void 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  grs             1   17[COMRAM] unsigned char 
  6014 ;;  bexp            1   16[COMRAM] unsigned char 
  6015 ;;  aexp            1   15[COMRAM] unsigned char 
  6016 ;;  signs           1   14[COMRAM] unsigned char 
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  4    2[COMRAM] unsigned char 
  6019 ;; Registers used:
  6020 ;;		wreg, status,2, status,0
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6026 ;;      Params:         8       0       0       0       0       0       0
  6027 ;;      Locals:         4       0       0       0       0       0       0
  6028 ;;      Temps:          4       0       0       0       0       0       0
  6029 ;;      Totals:        16       0       0       0       0       0       0
  6030 ;;Total ram usage:       16 bytes
  6031 ;; Hardware stack levels used: 1
  6032 ;; Hardware stack levels required when called: 2
  6033 ;; This function calls:
  6034 ;;		Nothing
  6035 ;; This function is called by:
  6036 ;;		_Min_Lv1_Incr
  6037 ;;		_Min_Lv2_Incr
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text27
  6042  000BF4                     __ptext27:
  6043                           	callstack 0
  6044  000BF4                     ___fladd:
  6045                           	callstack 25
  6046  000BF4  5006               	movf	(___fladd@b+3)^0,w,c
  6047  000BF6  0B80               	andlw	128
  6048  000BF8  6E0F               	movwf	___fladd@signs^0,c
  6049  000BFA  5006               	movf	(___fladd@b+3)^0,w,c
  6050  000BFC  2406               	addwf	(___fladd@b+3)^0,w,c
  6051  000BFE  6E11               	movwf	___fladd@bexp^0,c
  6052  000C00  AE05               	btfss	(___fladd@b+2)^0,7,c
  6053  000C02  EF05  F006         	goto	u2811
  6054  000C06  EF07  F006         	goto	u2810
  6055  000C0A                     u2811:
  6056  000C0A  EF08  F006         	goto	l3575
  6057  000C0E                     u2810:
  6058  000C0E  8011               	bsf	___fladd@bexp^0,0,c
  6059  000C10                     l3575:
  6060  000C10  5011               	movf	___fladd@bexp^0,w,c
  6061  000C12  B4D8               	btfsc	status,2,c
  6062  000C14  EF0E  F006         	goto	u2821
  6063  000C18  EF10  F006         	goto	u2820
  6064  000C1C                     u2821:
  6065  000C1C  EF25  F006         	goto	l3585
  6066  000C20                     u2820:
  6067  000C20  2811               	incf	___fladd@bexp^0,w,c
  6068  000C22  A4D8               	btfss	status,2,c
  6069  000C24  EF16  F006         	goto	u2831
  6070  000C28  EF18  F006         	goto	u2830
  6071  000C2C                     u2831:
  6072  000C2C  EF20  F006         	goto	l3581
  6073  000C30                     u2830:
  6074  000C30  0E00               	movlw	0
  6075  000C32  6E03               	movwf	___fladd@b^0,c
  6076  000C34  0E00               	movlw	0
  6077  000C36  6E04               	movwf	(___fladd@b+1)^0,c
  6078  000C38  0E00               	movlw	0
  6079  000C3A  6E05               	movwf	(___fladd@b+2)^0,c
  6080  000C3C  0E00               	movlw	0
  6081  000C3E  6E06               	movwf	(___fladd@b+3)^0,c
  6082  000C40                     l3581:
  6083  000C40  8E05               	bsf	(___fladd@b+2)^0,7,c
  6084  000C42  0E00               	movlw	0
  6085  000C44  6E06               	movwf	(___fladd@b+3)^0,c
  6086  000C46  EF2D  F006         	goto	l3587
  6087  000C4A                     l3585:
  6088  000C4A  0E00               	movlw	0
  6089  000C4C  6E03               	movwf	___fladd@b^0,c
  6090  000C4E  0E00               	movlw	0
  6091  000C50  6E04               	movwf	(___fladd@b+1)^0,c
  6092  000C52  0E00               	movlw	0
  6093  000C54  6E05               	movwf	(___fladd@b+2)^0,c
  6094  000C56  0E00               	movlw	0
  6095  000C58  6E06               	movwf	(___fladd@b+3)^0,c
  6096  000C5A                     l3587:
  6097  000C5A  500A               	movf	(___fladd@a+3)^0,w,c
  6098  000C5C  0B80               	andlw	128
  6099  000C5E  6E10               	movwf	___fladd@aexp^0,c
  6100  000C60  500F               	movf	___fladd@signs^0,w,c
  6101  000C62  1810               	xorwf	___fladd@aexp^0,w,c
  6102  000C64  B4D8               	btfsc	status,2,c
  6103  000C66  EF37  F006         	goto	u2841
  6104  000C6A  EF39  F006         	goto	u2840
  6105  000C6E                     u2841:
  6106  000C6E  EF3A  F006         	goto	l3593
  6107  000C72                     u2840:
  6108  000C72  8C0F               	bsf	___fladd@signs^0,6,c
  6109  000C74                     l3593:
  6110  000C74  500A               	movf	(___fladd@a+3)^0,w,c
  6111  000C76  240A               	addwf	(___fladd@a+3)^0,w,c
  6112  000C78  6E10               	movwf	___fladd@aexp^0,c
  6113  000C7A  AE09               	btfss	(___fladd@a+2)^0,7,c
  6114  000C7C  EF42  F006         	goto	u2851
  6115  000C80  EF44  F006         	goto	u2850
  6116  000C84                     u2851:
  6117  000C84  EF45  F006         	goto	l3599
  6118  000C88                     u2850:
  6119  000C88  8010               	bsf	___fladd@aexp^0,0,c
  6120  000C8A                     l3599:
  6121  000C8A  5010               	movf	___fladd@aexp^0,w,c
  6122  000C8C  B4D8               	btfsc	status,2,c
  6123  000C8E  EF4B  F006         	goto	u2861
  6124  000C92  EF4D  F006         	goto	u2860
  6125  000C96                     u2861:
  6126  000C96  EF62  F006         	goto	l3609
  6127  000C9A                     u2860:
  6128  000C9A  2810               	incf	___fladd@aexp^0,w,c
  6129  000C9C  A4D8               	btfss	status,2,c
  6130  000C9E  EF53  F006         	goto	u2871
  6131  000CA2  EF55  F006         	goto	u2870
  6132  000CA6                     u2871:
  6133  000CA6  EF5D  F006         	goto	l3605
  6134  000CAA                     u2870:
  6135  000CAA  0E00               	movlw	0
  6136  000CAC  6E07               	movwf	___fladd@a^0,c
  6137  000CAE  0E00               	movlw	0
  6138  000CB0  6E08               	movwf	(___fladd@a+1)^0,c
  6139  000CB2  0E00               	movlw	0
  6140  000CB4  6E09               	movwf	(___fladd@a+2)^0,c
  6141  000CB6  0E00               	movlw	0
  6142  000CB8  6E0A               	movwf	(___fladd@a+3)^0,c
  6143  000CBA                     l3605:
  6144  000CBA  8E09               	bsf	(___fladd@a+2)^0,7,c
  6145  000CBC  0E00               	movlw	0
  6146  000CBE  6E0A               	movwf	(___fladd@a+3)^0,c
  6147  000CC0  EF6A  F006         	goto	l3611
  6148  000CC4                     l3609:
  6149  000CC4  0E00               	movlw	0
  6150  000CC6  6E07               	movwf	___fladd@a^0,c
  6151  000CC8  0E00               	movlw	0
  6152  000CCA  6E08               	movwf	(___fladd@a+1)^0,c
  6153  000CCC  0E00               	movlw	0
  6154  000CCE  6E09               	movwf	(___fladd@a+2)^0,c
  6155  000CD0  0E00               	movlw	0
  6156  000CD2  6E0A               	movwf	(___fladd@a+3)^0,c
  6157  000CD4                     l3611:
  6158  000CD4  5011               	movf	___fladd@bexp^0,w,c
  6159  000CD6  5C10               	subwf	___fladd@aexp^0,w,c
  6160  000CD8  B0D8               	btfsc	status,0,c
  6161  000CDA  EF71  F006         	goto	u2881
  6162  000CDE  EF73  F006         	goto	u2880
  6163  000CE2                     u2881:
  6164  000CE2  EF9A  F006         	goto	l3647
  6165  000CE6                     u2880:
  6166  000CE6  AC0F               	btfss	___fladd@signs^0,6,c
  6167  000CE8  EF78  F006         	goto	u2891
  6168  000CEC  EF7A  F006         	goto	u2890
  6169  000CF0                     u2891:
  6170  000CF0  EF7C  F006         	goto	l3617
  6171  000CF4                     u2890:
  6172  000CF4  0E80               	movlw	128
  6173  000CF6  1A0F               	xorwf	___fladd@signs^0,f,c
  6174  000CF8                     l3617:
  6175  000CF8  C011  F012         	movff	___fladd@bexp,___fladd@grs
  6176  000CFC  C010  F011         	movff	___fladd@aexp,___fladd@bexp
  6177  000D00  C012  F010         	movff	___fladd@grs,___fladd@aexp
  6178  000D04  C003  F012         	movff	___fladd@b,___fladd@grs
  6179  000D08  C007  F003         	movff	___fladd@a,___fladd@b
  6180  000D0C  C012  F007         	movff	___fladd@grs,___fladd@a
  6181  000D10  C004  F012         	movff	___fladd@b+1,___fladd@grs
  6182  000D14  C008  F004         	movff	___fladd@a+1,___fladd@b+1
  6183  000D18  C012  F008         	movff	___fladd@grs,___fladd@a+1
  6184  000D1C  C005  F012         	movff	___fladd@b+2,___fladd@grs
  6185  000D20  C009  F005         	movff	___fladd@a+2,___fladd@b+2
  6186  000D24  C012  F009         	movff	___fladd@grs,___fladd@a+2
  6187  000D28  C006  F012         	movff	___fladd@b+3,___fladd@grs
  6188  000D2C  C00A  F006         	movff	___fladd@a+3,___fladd@b+3
  6189  000D30  C012  F00A         	movff	___fladd@grs,___fladd@a+3
  6190  000D34                     l3647:
  6191  000D34  0E00               	movlw	0
  6192  000D36  6E12               	movwf	___fladd@grs^0,c
  6193  000D38  5011               	movf	___fladd@bexp^0,w,c
  6194  000D3A  C010  F00B         	movff	___fladd@aexp,??___fladd
  6195  000D3E  6A0C               	clrf	(??___fladd+1)^0,c
  6196  000D40  5E0B               	subwf	??___fladd^0,f,c
  6197  000D42  0E00               	movlw	0
  6198  000D44  5A0C               	subwfb	(??___fladd+1)^0,f,c
  6199  000D46  BE0C               	btfsc	(??___fladd+1)^0,7,c
  6200  000D48  EFAF  F006         	goto	u2901
  6201  000D4C  500C               	movf	(??___fladd+1)^0,w,c
  6202  000D4E  E109               	bnz	u2900
  6203  000D50  0E1A               	movlw	26
  6204  000D52  5C0B               	subwf	??___fladd^0,w,c
  6205  000D54  A0D8               	btfss	status,0,c
  6206  000D56  EFAF  F006         	goto	u2901
  6207  000D5A  EFB1  F006         	goto	u2900
  6208  000D5E                     u2901:
  6209  000D5E  EFE8  F006         	goto	l1182
  6210  000D62                     u2900:
  6211  000D62  5003               	movf	___fladd@b^0,w,c
  6212  000D64  1004               	iorwf	(___fladd@b+1)^0,w,c
  6213  000D66  1005               	iorwf	(___fladd@b+2)^0,w,c
  6214  000D68  1006               	iorwf	(___fladd@b+3)^0,w,c
  6215  000D6A  A4D8               	btfss	status,2,c
  6216  000D6C  EFBA  F006         	goto	u2911
  6217  000D70  EFBD  F006         	goto	u2910
  6218  000D74                     u2911:
  6219  000D74  0E01               	movlw	1
  6220  000D76  EFBE  F006         	goto	u2920
  6221  000D7A                     u2910:
  6222  000D7A  0E00               	movlw	0
  6223  000D7C                     u2920:
  6224  000D7C  6E12               	movwf	___fladd@grs^0,c
  6225  000D7E  0E00               	movlw	0
  6226  000D80  6E03               	movwf	___fladd@b^0,c
  6227  000D82  0E00               	movlw	0
  6228  000D84  6E04               	movwf	(___fladd@b+1)^0,c
  6229  000D86  0E00               	movlw	0
  6230  000D88  6E05               	movwf	(___fladd@b+2)^0,c
  6231  000D8A  0E00               	movlw	0
  6232  000D8C  6E06               	movwf	(___fladd@b+3)^0,c
  6233  000D8E  C010  F011         	movff	___fladd@aexp,___fladd@bexp
  6234  000D92  EFF1  F006         	goto	l1181
  6235  000D96                     l1183:
  6236  000D96  A012               	btfss	___fladd@grs^0,0,c
  6237  000D98  EFD0  F006         	goto	u2931
  6238  000D9C  EFD2  F006         	goto	u2930
  6239  000DA0                     u2931:
  6240  000DA0  EFD8  F006         	goto	l3659
  6241  000DA4                     u2930:
  6242  000DA4  90D8               	bcf	status,0,c
  6243  000DA6  3012               	rrcf	___fladd@grs^0,w,c
  6244  000DA8  0901               	iorlw	1
  6245  000DAA  6E12               	movwf	___fladd@grs^0,c
  6246  000DAC  EFDA  F006         	goto	l3661
  6247  000DB0                     l3659:
  6248  000DB0  90D8               	bcf	status,0,c
  6249  000DB2  3212               	rrcf	___fladd@grs^0,f,c
  6250  000DB4                     l3661:
  6251  000DB4  A003               	btfss	___fladd@b^0,0,c
  6252  000DB6  EFDF  F006         	goto	u2941
  6253  000DBA  EFE1  F006         	goto	u2940
  6254  000DBE                     u2941:
  6255  000DBE  EFE2  F006         	goto	l3665
  6256  000DC2                     u2940:
  6257  000DC2  8E12               	bsf	___fladd@grs^0,7,c
  6258  000DC4                     l3665:
  6259  000DC4  3406               	rlcf	(___fladd@b+3)^0,w,c
  6260  000DC6  3206               	rrcf	(___fladd@b+3)^0,f,c
  6261  000DC8  3205               	rrcf	(___fladd@b+2)^0,f,c
  6262  000DCA  3204               	rrcf	(___fladd@b+1)^0,f,c
  6263  000DCC  3203               	rrcf	___fladd@b^0,f,c
  6264  000DCE  2A11               	incf	___fladd@bexp^0,f,c
  6265  000DD0                     l1182:
  6266  000DD0  5010               	movf	___fladd@aexp^0,w,c
  6267  000DD2  5C11               	subwf	___fladd@bexp^0,w,c
  6268  000DD4  A0D8               	btfss	status,0,c
  6269  000DD6  EFEF  F006         	goto	u2951
  6270  000DDA  EFF1  F006         	goto	u2950
  6271  000DDE                     u2951:
  6272  000DDE  EFCB  F006         	goto	l1183
  6273  000DE2                     u2950:
  6274  000DE2                     l1181:
  6275  000DE2  BC0F               	btfsc	___fladd@signs^0,6,c
  6276  000DE4  EFF6  F006         	goto	u2961
  6277  000DE8  EFF8  F006         	goto	u2960
  6278  000DEC                     u2961:
  6279  000DEC  EF38  F007         	goto	l3693
  6280  000DF0                     u2960:
  6281  000DF0  5011               	movf	___fladd@bexp^0,w,c
  6282  000DF2  A4D8               	btfss	status,2,c
  6283  000DF4  EFFE  F006         	goto	u2971
  6284  000DF8  EF00  F007         	goto	u2970
  6285  000DFC                     u2971:
  6286  000DFC  EF0A  F007         	goto	l3675
  6287  000E00                     u2970:
  6288  000E00  0E00               	movlw	0
  6289  000E02  6E03               	movwf	?___fladd^0,c
  6290  000E04  0E00               	movlw	0
  6291  000E06  6E04               	movwf	(?___fladd+1)^0,c
  6292  000E08  0E00               	movlw	0
  6293  000E0A  6E05               	movwf	(?___fladd+2)^0,c
  6294  000E0C  0E00               	movlw	0
  6295  000E0E  6E06               	movwf	(?___fladd+3)^0,c
  6296  000E10  EF59  F008         	goto	l1190
  6297  000E14                     l3675:
  6298  000E14  5007               	movf	___fladd@a^0,w,c
  6299  000E16  2603               	addwf	___fladd@b^0,f,c
  6300  000E18  5008               	movf	(___fladd@a+1)^0,w,c
  6301  000E1A  2204               	addwfc	(___fladd@b+1)^0,f,c
  6302  000E1C  5009               	movf	(___fladd@a+2)^0,w,c
  6303  000E1E  2205               	addwfc	(___fladd@b+2)^0,f,c
  6304  000E20  500A               	movf	(___fladd@a+3)^0,w,c
  6305  000E22  2206               	addwfc	(___fladd@b+3)^0,f,c
  6306  000E24  A006               	btfss	(___fladd@b+3)^0,0,c
  6307  000E26  EF17  F007         	goto	u2981
  6308  000E2A  EF19  F007         	goto	u2980
  6309  000E2E                     u2981:
  6310  000E2E  EFC5  F007         	goto	l3729
  6311  000E32                     u2980:
  6312  000E32  A012               	btfss	___fladd@grs^0,0,c
  6313  000E34  EF1E  F007         	goto	u2991
  6314  000E38  EF20  F007         	goto	u2990
  6315  000E3C                     u2991:
  6316  000E3C  EF26  F007         	goto	l3683
  6317  000E40                     u2990:
  6318  000E40  90D8               	bcf	status,0,c
  6319  000E42  3012               	rrcf	___fladd@grs^0,w,c
  6320  000E44  0901               	iorlw	1
  6321  000E46  6E12               	movwf	___fladd@grs^0,c
  6322  000E48  EF28  F007         	goto	l3685
  6323  000E4C                     l3683:
  6324  000E4C  90D8               	bcf	status,0,c
  6325  000E4E  3212               	rrcf	___fladd@grs^0,f,c
  6326  000E50                     l3685:
  6327  000E50  A003               	btfss	___fladd@b^0,0,c
  6328  000E52  EF2D  F007         	goto	u3001
  6329  000E56  EF2F  F007         	goto	u3000
  6330  000E5A                     u3001:
  6331  000E5A  EF30  F007         	goto	l3689
  6332  000E5E                     u3000:
  6333  000E5E  8E12               	bsf	___fladd@grs^0,7,c
  6334  000E60                     l3689:
  6335  000E60  3406               	rlcf	(___fladd@b+3)^0,w,c
  6336  000E62  3206               	rrcf	(___fladd@b+3)^0,f,c
  6337  000E64  3205               	rrcf	(___fladd@b+2)^0,f,c
  6338  000E66  3204               	rrcf	(___fladd@b+1)^0,f,c
  6339  000E68  3203               	rrcf	___fladd@b^0,f,c
  6340  000E6A  2A11               	incf	___fladd@bexp^0,f,c
  6341  000E6C  EFC5  F007         	goto	l3729
  6342  000E70                     l3693:
  6343  000E70  5007               	movf	___fladd@a^0,w,c
  6344  000E72  5C03               	subwf	___fladd@b^0,w,c
  6345  000E74  5008               	movf	(___fladd@a+1)^0,w,c
  6346  000E76  5804               	subwfb	(___fladd@b+1)^0,w,c
  6347  000E78  5009               	movf	(___fladd@a+2)^0,w,c
  6348  000E7A  5805               	subwfb	(___fladd@b+2)^0,w,c
  6349  000E7C  5006               	movf	(___fladd@b+3)^0,w,c
  6350  000E7E  0A80               	xorlw	128
  6351  000E80  6E0B               	movwf	??___fladd^0,c
  6352  000E82  500A               	movf	(___fladd@a+3)^0,w,c
  6353  000E84  0A80               	xorlw	128
  6354  000E86  580B               	subwfb	??___fladd^0,w,c
  6355  000E88  B0D8               	btfsc	status,0,c
  6356  000E8A  EF49  F007         	goto	u3011
  6357  000E8E  EF4B  F007         	goto	u3010
  6358  000E92                     u3011:
  6359  000E92  EF76  F007         	goto	l3703
  6360  000E96                     u3010:
  6361  000E96  5003               	movf	___fladd@b^0,w,c
  6362  000E98  5C07               	subwf	___fladd@a^0,w,c
  6363  000E9A  6E0B               	movwf	??___fladd^0,c
  6364  000E9C  5004               	movf	(___fladd@b+1)^0,w,c
  6365  000E9E  5808               	subwfb	(___fladd@a+1)^0,w,c
  6366  000EA0  6E0C               	movwf	(??___fladd+1)^0,c
  6367  000EA2  5005               	movf	(___fladd@b+2)^0,w,c
  6368  000EA4  5809               	subwfb	(___fladd@a+2)^0,w,c
  6369  000EA6  6E0D               	movwf	(??___fladd+2)^0,c
  6370  000EA8  5006               	movf	(___fladd@b+3)^0,w,c
  6371  000EAA  580A               	subwfb	(___fladd@a+3)^0,w,c
  6372  000EAC  6E0E               	movwf	(??___fladd+3)^0,c
  6373  000EAE  0EFF               	movlw	255
  6374  000EB0  240B               	addwf	??___fladd^0,w,c
  6375  000EB2  6E03               	movwf	___fladd@b^0,c
  6376  000EB4  0EFF               	movlw	255
  6377  000EB6  200C               	addwfc	(??___fladd+1)^0,w,c
  6378  000EB8  6E04               	movwf	(___fladd@b+1)^0,c
  6379  000EBA  0EFF               	movlw	255
  6380  000EBC  200D               	addwfc	(??___fladd+2)^0,w,c
  6381  000EBE  6E05               	movwf	(___fladd@b+2)^0,c
  6382  000EC0  0EFF               	movlw	255
  6383  000EC2  200E               	addwfc	(??___fladd+3)^0,w,c
  6384  000EC4  6E06               	movwf	(___fladd@b+3)^0,c
  6385  000EC6  0E80               	movlw	128
  6386  000EC8  1A0F               	xorwf	___fladd@signs^0,f,c
  6387  000ECA  6C12               	negf	___fladd@grs^0,c
  6388  000ECC  5012               	movf	___fladd@grs^0,w,c
  6389  000ECE  A4D8               	btfss	status,2,c
  6390  000ED0  EF6C  F007         	goto	u3021
  6391  000ED4  EF6E  F007         	goto	u3020
  6392  000ED8                     u3021:
  6393  000ED8  EF7E  F007         	goto	l1198
  6394  000EDC                     u3020:
  6395  000EDC  0E01               	movlw	1
  6396  000EDE  2603               	addwf	___fladd@b^0,f,c
  6397  000EE0  0E00               	movlw	0
  6398  000EE2  2204               	addwfc	(___fladd@b+1)^0,f,c
  6399  000EE4  2205               	addwfc	(___fladd@b+2)^0,f,c
  6400  000EE6  2206               	addwfc	(___fladd@b+3)^0,f,c
  6401  000EE8  EF7E  F007         	goto	l1198
  6402  000EEC                     l3703:
  6403  000EEC  5007               	movf	___fladd@a^0,w,c
  6404  000EEE  5E03               	subwf	___fladd@b^0,f,c
  6405  000EF0  5008               	movf	(___fladd@a+1)^0,w,c
  6406  000EF2  5A04               	subwfb	(___fladd@b+1)^0,f,c
  6407  000EF4  5009               	movf	(___fladd@a+2)^0,w,c
  6408  000EF6  5A05               	subwfb	(___fladd@b+2)^0,f,c
  6409  000EF8  500A               	movf	(___fladd@a+3)^0,w,c
  6410  000EFA  5A06               	subwfb	(___fladd@b+3)^0,f,c
  6411  000EFC                     l1198:
  6412  000EFC  5003               	movf	___fladd@b^0,w,c
  6413  000EFE  1004               	iorwf	(___fladd@b+1)^0,w,c
  6414  000F00  1005               	iorwf	(___fladd@b+2)^0,w,c
  6415  000F02  1006               	iorwf	(___fladd@b+3)^0,w,c
  6416  000F04  A4D8               	btfss	status,2,c
  6417  000F06  EF87  F007         	goto	u3031
  6418  000F0A  EF89  F007         	goto	u3030
  6419  000F0E                     u3031:
  6420  000F0E  EFBE  F007         	goto	l3727
  6421  000F12                     u3030:
  6422  000F12  5012               	movf	___fladd@grs^0,w,c
  6423  000F14  A4D8               	btfss	status,2,c
  6424  000F16  EF8F  F007         	goto	u3041
  6425  000F1A  EF91  F007         	goto	u3040
  6426  000F1E                     u3041:
  6427  000F1E  EFBE  F007         	goto	l3727
  6428  000F22                     u3040:
  6429  000F22  0E00               	movlw	0
  6430  000F24  6E03               	movwf	?___fladd^0,c
  6431  000F26  0E00               	movlw	0
  6432  000F28  6E04               	movwf	(?___fladd+1)^0,c
  6433  000F2A  0E00               	movlw	0
  6434  000F2C  6E05               	movwf	(?___fladd+2)^0,c
  6435  000F2E  0E00               	movlw	0
  6436  000F30  6E06               	movwf	(?___fladd+3)^0,c
  6437  000F32  EF59  F008         	goto	l1190
  6438  000F36                     l3711:
  6439  000F36  90D8               	bcf	status,0,c
  6440  000F38  3603               	rlcf	___fladd@b^0,f,c
  6441  000F3A  3604               	rlcf	(___fladd@b+1)^0,f,c
  6442  000F3C  3605               	rlcf	(___fladd@b+2)^0,f,c
  6443  000F3E  3606               	rlcf	(___fladd@b+3)^0,f,c
  6444  000F40  AE12               	btfss	___fladd@grs^0,7,c
  6445  000F42  EFA5  F007         	goto	u3051
  6446  000F46  EFA7  F007         	goto	u3050
  6447  000F4A                     u3051:
  6448  000F4A  EFA8  F007         	goto	l3717
  6449  000F4E                     u3050:
  6450  000F4E  8003               	bsf	___fladd@b^0,0,c
  6451  000F50                     l3717:
  6452  000F50  A012               	btfss	___fladd@grs^0,0,c
  6453  000F52  EFAD  F007         	goto	u3061
  6454  000F56  EFAF  F007         	goto	u3060
  6455  000F5A                     u3061:
  6456  000F5A  EFB3  F007         	goto	l3721
  6457  000F5E                     u3060:
  6458  000F5E  80D8               	bsf	status,0,c
  6459  000F60  3612               	rlcf	___fladd@grs^0,f,c
  6460  000F62  EFB5  F007         	goto	l3723
  6461  000F66                     l3721:
  6462  000F66  90D8               	bcf	status,0,c
  6463  000F68  3612               	rlcf	___fladd@grs^0,f,c
  6464  000F6A                     l3723:
  6465  000F6A  5011               	movf	___fladd@bexp^0,w,c
  6466  000F6C  B4D8               	btfsc	status,2,c
  6467  000F6E  EFBB  F007         	goto	u3071
  6468  000F72  EFBD  F007         	goto	u3070
  6469  000F76                     u3071:
  6470  000F76  EFBE  F007         	goto	l3727
  6471  000F7A                     u3070:
  6472  000F7A  0611               	decf	___fladd@bexp^0,f,c
  6473  000F7C                     l3727:
  6474  000F7C  AE05               	btfss	(___fladd@b+2)^0,7,c
  6475  000F7E  EFC3  F007         	goto	u3081
  6476  000F82  EFC5  F007         	goto	u3080
  6477  000F86                     u3081:
  6478  000F86  EF9B  F007         	goto	l3711
  6479  000F8A                     u3080:
  6480  000F8A                     l3729:
  6481  000F8A  0E00               	movlw	0
  6482  000F8C  6E10               	movwf	___fladd@aexp^0,c
  6483  000F8E  AE12               	btfss	___fladd@grs^0,7,c
  6484  000F90  EFCC  F007         	goto	u3091
  6485  000F94  EFCE  F007         	goto	u3090
  6486  000F98                     u3091:
  6487  000F98  EFE6  F007         	goto	l1207
  6488  000F9C                     u3090:
  6489  000F9C  C012  F00B         	movff	___fladd@grs,??___fladd
  6490  000FA0  0E7F               	movlw	127
  6491  000FA2  160B               	andwf	??___fladd^0,f,c
  6492  000FA4  B4D8               	btfsc	status,2,c
  6493  000FA6  EFD7  F007         	goto	u3101
  6494  000FAA  EFD9  F007         	goto	u3100
  6495  000FAE                     u3101:
  6496  000FAE  EFDD  F007         	goto	l1208
  6497  000FB2                     u3100:
  6498  000FB2                     l3735:
  6499  000FB2  0E01               	movlw	1
  6500  000FB4  6E10               	movwf	___fladd@aexp^0,c
  6501  000FB6  EFE6  F007         	goto	l1207
  6502  000FBA                     l1208:
  6503  000FBA  A003               	btfss	___fladd@b^0,0,c
  6504  000FBC  EFE2  F007         	goto	u3111
  6505  000FC0  EFE4  F007         	goto	u3110
  6506  000FC4                     u3111:
  6507  000FC4  EFE6  F007         	goto	l1207
  6508  000FC8                     u3110:
  6509  000FC8  EFD9  F007         	goto	l3735
  6510  000FCC                     l1207:
  6511  000FCC  5010               	movf	___fladd@aexp^0,w,c
  6512  000FCE  B4D8               	btfsc	status,2,c
  6513  000FD0  EFEC  F007         	goto	u3121
  6514  000FD4  EFEE  F007         	goto	u3120
  6515  000FD8                     u3121:
  6516  000FD8  EF19  F008         	goto	l3747
  6517  000FDC                     u3120:
  6518  000FDC  0E01               	movlw	1
  6519  000FDE  2603               	addwf	___fladd@b^0,f,c
  6520  000FE0  0E00               	movlw	0
  6521  000FE2  2204               	addwfc	(___fladd@b+1)^0,f,c
  6522  000FE4  2205               	addwfc	(___fladd@b+2)^0,f,c
  6523  000FE6  2206               	addwfc	(___fladd@b+3)^0,f,c
  6524  000FE8  A006               	btfss	(___fladd@b+3)^0,0,c
  6525  000FEA  EFF9  F007         	goto	u3131
  6526  000FEE  EFFB  F007         	goto	u3130
  6527  000FF2                     u3131:
  6528  000FF2  EF19  F008         	goto	l3747
  6529  000FF6                     u3130:
  6530  000FF6  C003  F00B         	movff	___fladd@b,??___fladd
  6531  000FFA  C004  F00C         	movff	___fladd@b+1,??___fladd+1
  6532  000FFE  C005  F00D         	movff	___fladd@b+2,??___fladd+2
  6533  001002  C006  F00E         	movff	___fladd@b+3,??___fladd+3
  6534  001006  340E               	rlcf	(??___fladd+3)^0,w,c
  6535  001008  320E               	rrcf	(??___fladd+3)^0,f,c
  6536  00100A  320D               	rrcf	(??___fladd+2)^0,f,c
  6537  00100C  320C               	rrcf	(??___fladd+1)^0,f,c
  6538  00100E  320B               	rrcf	??___fladd^0,f,c
  6539  001010  C00B  F003         	movff	??___fladd,___fladd@b
  6540  001014  C00C  F004         	movff	??___fladd+1,___fladd@b+1
  6541  001018  C00D  F005         	movff	??___fladd+2,___fladd@b+2
  6542  00101C  C00E  F006         	movff	??___fladd+3,___fladd@b+3
  6543  001020  2811               	incf	___fladd@bexp^0,w,c
  6544  001022  B4D8               	btfsc	status,2,c
  6545  001024  EF16  F008         	goto	u3141
  6546  001028  EF18  F008         	goto	u3140
  6547  00102C                     u3141:
  6548  00102C  EF19  F008         	goto	l3747
  6549  001030                     u3140:
  6550  001030  2A11               	incf	___fladd@bexp^0,f,c
  6551  001032                     l3747:
  6552  001032  2811               	incf	___fladd@bexp^0,w,c
  6553  001034  B4D8               	btfsc	status,2,c
  6554  001036  EF1F  F008         	goto	u3151
  6555  00103A  EF21  F008         	goto	u3150
  6556  00103E                     u3151:
  6557  00103E  EF29  F008         	goto	l3751
  6558  001042                     u3150:
  6559  001042  5011               	movf	___fladd@bexp^0,w,c
  6560  001044  A4D8               	btfss	status,2,c
  6561  001046  EF27  F008         	goto	u3161
  6562  00104A  EF29  F008         	goto	u3160
  6563  00104E                     u3161:
  6564  00104E  EF3B  F008         	goto	l3755
  6565  001052                     u3160:
  6566  001052                     l3751:
  6567  001052  0E00               	movlw	0
  6568  001054  6E03               	movwf	___fladd@b^0,c
  6569  001056  0E00               	movlw	0
  6570  001058  6E04               	movwf	(___fladd@b+1)^0,c
  6571  00105A  0E00               	movlw	0
  6572  00105C  6E05               	movwf	(___fladd@b+2)^0,c
  6573  00105E  0E00               	movlw	0
  6574  001060  6E06               	movwf	(___fladd@b+3)^0,c
  6575  001062  5011               	movf	___fladd@bexp^0,w,c
  6576  001064  A4D8               	btfss	status,2,c
  6577  001066  EF37  F008         	goto	u3171
  6578  00106A  EF39  F008         	goto	u3170
  6579  00106E                     u3171:
  6580  00106E  EF3B  F008         	goto	l3755
  6581  001072                     u3170:
  6582  001072  0E00               	movlw	0
  6583  001074  6E0F               	movwf	___fladd@signs^0,c
  6584  001076                     l3755:
  6585  001076  A011               	btfss	___fladd@bexp^0,0,c
  6586  001078  EF40  F008         	goto	u3181
  6587  00107C  EF42  F008         	goto	u3180
  6588  001080                     u3181:
  6589  001080  EF45  F008         	goto	l3759
  6590  001084                     u3180:
  6591  001084  8E05               	bsf	(___fladd@b+2)^0,7,c
  6592  001086  EF46  F008         	goto	l3761
  6593  00108A                     l3759:
  6594  00108A  9E05               	bcf	(___fladd@b+2)^0,7,c
  6595  00108C                     l3761:
  6596  00108C  90D8               	bcf	status,0,c
  6597  00108E  3011               	rrcf	___fladd@bexp^0,w,c
  6598  001090  6E06               	movwf	(___fladd@b+3)^0,c
  6599  001092  AE0F               	btfss	___fladd@signs^0,7,c
  6600  001094  EF4E  F008         	goto	u3191
  6601  001098  EF50  F008         	goto	u3190
  6602  00109C                     u3191:
  6603  00109C  EF51  F008         	goto	l3767
  6604  0010A0                     u3190:
  6605  0010A0  8E06               	bsf	(___fladd@b+3)^0,7,c
  6606  0010A2                     l3767:
  6607  0010A2  C003  F003         	movff	___fladd@b,?___fladd
  6608  0010A6  C004  F004         	movff	___fladd@b+1,?___fladd+1
  6609  0010AA  C005  F005         	movff	___fladd@b+2,?___fladd+2
  6610  0010AE  C006  F006         	movff	___fladd@b+3,?___fladd+3
  6611  0010B2                     l1190:
  6612  0010B2  0012               	return		;funcret
  6613  0010B4                     __end_of___fladd:
  6614                           	callstack 0
  6615                           
  6616 ;; *************** function _Refresh_Screen *****************
  6617 ;; Defined at:
  6618 ;;		line 355 in file "main.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;		None
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      void 
  6625 ;; Registers used:
  6626 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6632 ;;      Params:         0       0       0       0       0       0       0
  6633 ;;      Locals:         0       0       0       0       0       0       0
  6634 ;;      Temps:          0       0       0       0       0       0       0
  6635 ;;      Totals:         0       0       0       0       0       0       0
  6636 ;;Total ram usage:        0 bytes
  6637 ;; Hardware stack levels used: 1
  6638 ;; Hardware stack levels required when called: 5
  6639 ;; This function calls:
  6640 ;;		_Set_Display_Message
  6641 ;;		_Show_Display
  6642 ;; This function is called by:
  6643 ;;		_main
  6644 ;;		_Min_Lv1_Incr
  6645 ;;		_Min_Lv2_Incr
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text28
  6650  00379E                     __ptext28:
  6651                           	callstack 0
  6652  00379E                     _Refresh_Screen:
  6653                           	callstack 25
  6654  00379E                     
  6655                           ;main.c: 357: Set_Display_Message();
  6656  00379E  ECED  F00E         	call	_Set_Display_Message	;wreg free
  6657  0037A2                     
  6658                           ;main.c: 358: Show_Display(display);
  6659  0037A2  EE22  F032         	lfsr	2,_display	;volatile
  6660  0037A6  EE00  F00B         	lfsr	0,Show_Display@display
  6661  0037AA  0E1F               	movlw	31
  6662  0037AC                     u2791:
  6663  0037AC  CFDB FFEB          	movff	plusw2,plusw0
  6664  0037B0  06E8               	decf	wreg,f,c
  6665  0037B2  E2FC               	bc	u2791
  6666  0037B4  ECA9  F01B         	call	_Show_Display	;wreg free
  6667  0037B8                     
  6668                           ;main.c: 359: refresh_display = 0;
  6669  0037B8  9074               	bcf	(_refresh_display/(0+8))^0,_refresh_display& (0+7),c	;volatile
  6670  0037BA  0012               	return		;funcret
  6671  0037BC                     __end_of_Refresh_Screen:
  6672                           	callstack 0
  6673                           
  6674 ;; *************** function _Show_Display *****************
  6675 ;; Defined at:
  6676 ;;		line 349 in file "main.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;  display        32   10[COMRAM] struct .
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      void 
  6683 ;; Registers used:
  6684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6690 ;;      Params:        32       0       0       0       0       0       0
  6691 ;;      Locals:         0       0       0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0
  6693 ;;      Totals:        32       0       0       0       0       0       0
  6694 ;;Total ram usage:       32 bytes
  6695 ;; Hardware stack levels used: 1
  6696 ;; Hardware stack levels required when called: 4
  6697 ;; This function calls:
  6698 ;;		_Lcd_Out
  6699 ;; This function is called by:
  6700 ;;		_Refresh_Screen
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           	psect	text29
  6705  003752                     __ptext29:
  6706                           	callstack 0
  6707  003752                     _Show_Display:
  6708                           	callstack 25
  6709  003752                     
  6710                           ;main.c: 351: Lcd_Out(1, 0, display.line0);
  6711  003752  0E00               	movlw	0
  6712  003754  6E06               	movwf	Lcd_Out@x^0,c
  6713  003756  0E0B               	movlw	low Show_Display@display
  6714  003758  6E07               	movwf	Lcd_Out@buffer^0,c
  6715  00375A  0E00               	movlw	high Show_Display@display
  6716  00375C  6E08               	movwf	(Lcd_Out@buffer+1)^0,c
  6717  00375E  0E01               	movlw	1
  6718  003760  EC15  F019         	call	_Lcd_Out
  6719                           
  6720                           ;main.c: 352: Lcd_Out(2, 0, display.line1);
  6721  003764  0E00               	movlw	0
  6722  003766  6E06               	movwf	Lcd_Out@x^0,c
  6723  003768  0E1B               	movlw	low (Show_Display@display+16)
  6724  00376A  6E07               	movwf	Lcd_Out@buffer^0,c
  6725  00376C  0E00               	movlw	high (Show_Display@display+16)
  6726  00376E  6E08               	movwf	(Lcd_Out@buffer+1)^0,c
  6727  003770  0E02               	movlw	2
  6728  003772  EC15  F019         	call	_Lcd_Out
  6729  003776  0012               	return		;funcret
  6730  003778                     __end_of_Show_Display:
  6731                           	callstack 0
  6732                           
  6733 ;; *************** function _Lcd_Out *****************
  6734 ;; Defined at:
  6735 ;;		line 96 in file "flexlcd.h"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;  y               1    wreg     unsigned char 
  6738 ;;  x               1    5[COMRAM] unsigned char 
  6739 ;;  buffer          2    6[COMRAM] PTR const unsigned char 
  6740 ;;		 -> display.line1(16), display.line0(16), Show_Display@display(32), 
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  y               1    8[COMRAM] unsigned char 
  6743 ;;  data            1    9[COMRAM] unsigned char 
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  1    wreg      void 
  6746 ;; Registers used:
  6747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6753 ;;      Params:         3       0       0       0       0       0       0
  6754 ;;      Locals:         2       0       0       0       0       0       0
  6755 ;;      Temps:          0       0       0       0       0       0       0
  6756 ;;      Totals:         5       0       0       0       0       0       0
  6757 ;;Total ram usage:        5 bytes
  6758 ;; Hardware stack levels used: 1
  6759 ;; Hardware stack levels required when called: 3
  6760 ;; This function calls:
  6761 ;;		_Lcd_Chr_CP
  6762 ;;		_Lcd_Cmd
  6763 ;; This function is called by:
  6764 ;;		_Show_Display
  6765 ;; This function uses a non-reentrant model
  6766 ;;
  6767                           
  6768                           	psect	text30
  6769  00322A                     __ptext30:
  6770                           	callstack 0
  6771  00322A                     _Lcd_Out:
  6772                           	callstack 25
  6773                           
  6774                           ;incstack = 0
  6775                           ;Lcd_Out@y stored from wreg
  6776  00322A  6E09               	movwf	Lcd_Out@y^0,c
  6777  00322C                     
  6778                           ;flexlcd.h: 98: unsigned char data;;flexlcd.h: 99: switch (y)
  6779  00322C  EF2C  F019         	goto	l3255
  6780  003230                     l3245:
  6781  003230  5006               	movf	Lcd_Out@x^0,w,c
  6782  003232  0F80               	addlw	128
  6783  003234  6E0A               	movwf	Lcd_Out@data^0,c
  6784  003236  EF3F  F019         	goto	l3257
  6785  00323A                     l3247:
  6786  00323A  5006               	movf	Lcd_Out@x^0,w,c
  6787  00323C  0FC0               	addlw	192
  6788  00323E  6E0A               	movwf	Lcd_Out@data^0,c
  6789  003240  EF3F  F019         	goto	l3257
  6790  003244                     l3249:
  6791  003244  5006               	movf	Lcd_Out@x^0,w,c
  6792  003246  0F94               	addlw	148
  6793  003248  6E0A               	movwf	Lcd_Out@data^0,c
  6794  00324A  EF3F  F019         	goto	l3257
  6795  00324E                     l3251:
  6796  00324E  5006               	movf	Lcd_Out@x^0,w,c
  6797  003250  0FD4               	addlw	212
  6798  003252  6E0A               	movwf	Lcd_Out@data^0,c
  6799  003254  EF3F  F019         	goto	l3257
  6800  003258                     l3255:
  6801  003258  5009               	movf	Lcd_Out@y^0,w,c
  6802                           
  6803                           ; Switch size 1, requested type "simple"
  6804                           ; Number of cases is 4, Range of values is 1 to 4
  6805                           ; switch strategies available:
  6806                           ; Name         Instructions Cycles
  6807                           ; simple_byte           13     7 (average)
  6808                           ;	Chosen strategy is simple_byte
  6809  00325A  0A01               	xorlw	1	; case 1
  6810  00325C  B4D8               	btfsc	status,2,c
  6811  00325E  EF18  F019         	goto	l3245
  6812  003262  0A03               	xorlw	3	; case 2
  6813  003264  B4D8               	btfsc	status,2,c
  6814  003266  EF1D  F019         	goto	l3247
  6815  00326A  0A01               	xorlw	1	; case 3
  6816  00326C  B4D8               	btfsc	status,2,c
  6817  00326E  EF22  F019         	goto	l3249
  6818  003272  0A07               	xorlw	7	; case 4
  6819  003274  B4D8               	btfsc	status,2,c
  6820  003276  EF27  F019         	goto	l3251
  6821  00327A  EF3F  F019         	goto	l3257
  6822  00327E                     l3257:
  6823                           
  6824                           ;flexlcd.h: 107: Lcd_Cmd(data);
  6825  00327E  500A               	movf	Lcd_Out@data^0,w,c
  6826  003280  ECB9  F011         	call	_Lcd_Cmd
  6827                           
  6828                           ;flexlcd.h: 108: while(*buffer)
  6829  003284  EF4D  F019         	goto	l3263
  6830  003288                     l3259:
  6831                           
  6832                           ;flexlcd.h: 109: {;flexlcd.h: 110: Lcd_Chr_CP(*buffer);
  6833  003288  C007  FFD9         	movff	Lcd_Out@buffer,fsr2l
  6834  00328C  C008  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
  6835  003290  50DF               	movf	indf2,w,c
  6836  003292  EC8C  F010         	call	_Lcd_Chr_CP
  6837  003296                     
  6838                           ;flexlcd.h: 111: buffer++;
  6839  003296  4A07               	infsnz	Lcd_Out@buffer^0,f,c
  6840  003298  2A08               	incf	(Lcd_Out@buffer+1)^0,f,c
  6841  00329A                     l3263:
  6842  00329A  C007  FFD9         	movff	Lcd_Out@buffer,fsr2l
  6843  00329E  C008  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
  6844  0032A2  50DF               	movf	indf2,w,c
  6845  0032A4  A4D8               	btfss	status,2,c
  6846  0032A6  EF57  F019         	goto	u2401
  6847  0032AA  EF59  F019         	goto	u2400
  6848  0032AE                     u2401:
  6849  0032AE  EF44  F019         	goto	l3259
  6850  0032B2                     u2400:
  6851  0032B2  0012               	return		;funcret
  6852  0032B4                     __end_of_Lcd_Out:
  6853                           	callstack 0
  6854                           
  6855 ;; *************** function _Lcd_Chr_CP *****************
  6856 ;; Defined at:
  6857 ;;		line 117 in file "flexlcd.h"
  6858 ;; Parameters:    Size  Location     Type
  6859 ;;  data            1    wreg     unsigned char 
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;  data            1    4[COMRAM] unsigned char 
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  1    wreg      void 
  6864 ;; Registers used:
  6865 ;;		wreg, status,2, status,0
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6871 ;;      Params:         0       0       0       0       0       0       0
  6872 ;;      Locals:         1       0       0       0       0       0       0
  6873 ;;      Temps:          2       0       0       0       0       0       0
  6874 ;;      Totals:         3       0       0       0       0       0       0
  6875 ;;Total ram usage:        3 bytes
  6876 ;; Hardware stack levels used: 1
  6877 ;; Hardware stack levels required when called: 2
  6878 ;; This function calls:
  6879 ;;		Nothing
  6880 ;; This function is called by:
  6881 ;;		_Lcd_Out
  6882 ;; This function uses a non-reentrant model
  6883 ;;
  6884                           
  6885                           	psect	text31
  6886  002118                     __ptext31:
  6887                           	callstack 0
  6888  002118                     _Lcd_Chr_CP:
  6889                           	callstack 25
  6890                           
  6891                           ;incstack = 0
  6892                           ;Lcd_Chr_CP@data stored from wreg
  6893  002118  6E05               	movwf	Lcd_Chr_CP@data^0,c
  6894  00211A                     
  6895                           ;flexlcd.h: 118: PORTEbits.RE1 = 0; PORTEbits.RE2 = 1;
  6896  00211A  9284               	bcf	132,1,c	;volatile
  6897  00211C  8484               	bsf	132,2,c	;volatile
  6898  00211E                     
  6899                           ;flexlcd.h: 119: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  6900  00211E  6A03               	clrf	??_Lcd_Chr_CP^0,c
  6901  002120  AE05               	btfss	Lcd_Chr_CP@data^0,7,c
  6902  002122  D001               	bra	u2295
  6903  002124  2A03               	incf	??_Lcd_Chr_CP^0,f,c
  6904  002126                     u2295:
  6905  002126  0E01               	movlw	1
  6906  002128  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6907  00212A  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6908  00212C  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6909  00212E  5083               	movf	131,w,c	;volatile
  6910  002130  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6911  002132  0B7F               	andlw	-129
  6912  002134  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6913  002136  6E83               	movwf	131,c	;volatile
  6914  002138  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6915  00213C  0E06               	movlw	6
  6916  00213E  6E04               	movwf	(??_Lcd_Chr_CP+1)^0,c
  6917  002140                     u2305:
  6918  002140  90D8               	bcf	status,0,c
  6919  002142  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6920  002144  2E04               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  6921  002146  EFA0  F010         	goto	u2305
  6922  00214A  0E01               	movlw	1
  6923  00214C  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6924  00214E  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  6925  002150  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  6926  002152  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  6927  002154  5083               	movf	131,w,c	;volatile
  6928  002156  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6929  002158  0BBF               	andlw	-65
  6930  00215A  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6931  00215C  6E83               	movwf	131,c	;volatile
  6932                           
  6933                           ;flexlcd.h: 120: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  6934  00215E  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6935  002162  0E05               	movlw	5
  6936  002164  6E04               	movwf	(??_Lcd_Chr_CP+1)^0,c
  6937  002166                     u2315:
  6938  002166  90D8               	bcf	status,0,c
  6939  002168  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6940  00216A  2E04               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  6941  00216C  EFB3  F010         	goto	u2315
  6942  002170  0E01               	movlw	1
  6943  002172  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6944  002174  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  6945  002176  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  6946  002178  5083               	movf	131,w,c	;volatile
  6947  00217A  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6948  00217C  0BDF               	andlw	-33
  6949  00217E  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6950  002180  6E83               	movwf	131,c	;volatile
  6951  002182  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6952  002186  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  6953  002188  0E0F               	movlw	15
  6954  00218A  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6955  00218C  0E01               	movlw	1
  6956  00218E  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6957  002190  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  6958  002192  5083               	movf	131,w,c	;volatile
  6959  002194  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6960  002196  0BEF               	andlw	-17
  6961  002198  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6962  00219A  6E83               	movwf	131,c	;volatile
  6963  00219C                     
  6964                           ;flexlcd.h: 121: _delay(10);
  6965  00219C  0E03               	movlw	3
  6966  00219E                     u4517:
  6967  00219E  2EE8               	decfsz	wreg,f,c
  6968  0021A0  D7FE               	bra	u4517
  6969  0021A2  F000               	nop	
  6970  0021A4                     
  6971                           ;flexlcd.h: 122: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  6972  0021A4  8284               	bsf	132,1,c	;volatile
  6973  0021A6  0E04               	movlw	4
  6974  0021A8                     u4527:
  6975  0021A8  2EE8               	decfsz	wreg,f,c
  6976  0021AA  D7FE               	bra	u4527
  6977  0021AC  9284               	bcf	132,1,c	;volatile
  6978                           
  6979                           ;flexlcd.h: 123: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  6980  0021AE  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6981  0021B2  90D8               	bcf	status,0,c
  6982  0021B4  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6983  0021B6  90D8               	bcf	status,0,c
  6984  0021B8  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6985  0021BA  90D8               	bcf	status,0,c
  6986  0021BC  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6987  0021BE  0E01               	movlw	1
  6988  0021C0  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  6989  0021C2  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6990  0021C4  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6991  0021C6  5083               	movf	131,w,c	;volatile
  6992  0021C8  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6993  0021CA  0B7F               	andlw	-129
  6994  0021CC  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  6995  0021CE  6E83               	movwf	131,c	;volatile
  6996  0021D0  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6997  0021D4  90D8               	bcf	status,0,c
  6998  0021D6  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  6999  0021D8  90D8               	bcf	status,0,c
  7000  0021DA  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  7001  0021DC  0E01               	movlw	1
  7002  0021DE  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  7003  0021E0  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  7004  0021E2  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  7005  0021E4  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  7006  0021E6  5083               	movf	131,w,c	;volatile
  7007  0021E8  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  7008  0021EA  0BBF               	andlw	-65
  7009  0021EC  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  7010  0021EE  6E83               	movwf	131,c	;volatile
  7011                           
  7012                           ;flexlcd.h: 124: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  7013  0021F0  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7014  0021F4  90D8               	bcf	status,0,c
  7015  0021F6  3203               	rrcf	??_Lcd_Chr_CP^0,f,c
  7016  0021F8  0E01               	movlw	1
  7017  0021FA  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  7018  0021FC  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  7019  0021FE  4603               	rlncf	??_Lcd_Chr_CP^0,f,c
  7020  002200  5083               	movf	131,w,c	;volatile
  7021  002202  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  7022  002204  0BDF               	andlw	-33
  7023  002206  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  7024  002208  6E83               	movwf	131,c	;volatile
  7025  00220A  C005  F003         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7026  00220E  0E01               	movlw	1
  7027  002210  1603               	andwf	??_Lcd_Chr_CP^0,f,c
  7028  002212  3A03               	swapf	??_Lcd_Chr_CP^0,f,c
  7029  002214  5083               	movf	131,w,c	;volatile
  7030  002216  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  7031  002218  0BEF               	andlw	-17
  7032  00221A  1803               	xorwf	??_Lcd_Chr_CP^0,w,c
  7033  00221C  6E83               	movwf	131,c	;volatile
  7034  00221E                     
  7035                           ;flexlcd.h: 125: _delay(10);
  7036  00221E  0E03               	movlw	3
  7037  002220                     u4537:
  7038  002220  2EE8               	decfsz	wreg,f,c
  7039  002222  D7FE               	bra	u4537
  7040  002224  F000               	nop	
  7041  002226                     
  7042                           ;flexlcd.h: 126: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  7043  002226  8284               	bsf	132,1,c	;volatile
  7044  002228  0E04               	movlw	4
  7045  00222A                     u4547:
  7046  00222A  2EE8               	decfsz	wreg,f,c
  7047  00222C  D7FE               	bra	u4547
  7048  00222E  9284               	bcf	132,1,c	;volatile
  7049  002230                     
  7050                           ;flexlcd.h: 127: _delay((unsigned long)((5)*(10000000/4000000.0))); _delay((unsigned lon
      +                          g)((5500)*(10000000/4000000.0)));
  7051  002230  0E04               	movlw	4
  7052  002232                     u4557:
  7053  002232  2EE8               	decfsz	wreg,f,c
  7054  002234  D7FE               	bra	u4557
  7055  002236  0E12               	movlw	18
  7056  002238  6E03               	movwf	??_Lcd_Chr_CP^0,c
  7057  00223A  0EDA               	movlw	218
  7058  00223C                     u4567:
  7059  00223C  2EE8               	decfsz	wreg,f,c
  7060  00223E  D7FE               	bra	u4567
  7061  002240  2E03               	decfsz	??_Lcd_Chr_CP^0,f,c
  7062  002242  D7FC               	bra	u4567
  7063  002244  D000               	nop2	
  7064  002246  0012               	return		;funcret
  7065  002248                     __end_of_Lcd_Chr_CP:
  7066                           	callstack 0
  7067                           
  7068 ;; *************** function _Set_Display_Message *****************
  7069 ;; Defined at:
  7070 ;;		line 325 in file "main.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;		None
  7073 ;; Auto vars:     Size  Location     Type
  7074 ;;		None
  7075 ;; Return value:  Size  Location     Type
  7076 ;;                  1    wreg      void 
  7077 ;; Registers used:
  7078 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7084 ;;      Params:         0       0       0       0       0       0       0
  7085 ;;      Locals:         2       0       0       0       0       0       0
  7086 ;;      Temps:          0       0       0       0       0       0       0
  7087 ;;      Totals:         2       0       0       0       0       0       0
  7088 ;;Total ram usage:        2 bytes
  7089 ;; Hardware stack levels used: 1
  7090 ;; Hardware stack levels required when called: 4
  7091 ;; This function calls:
  7092 ;;		___fltol
  7093 ;;		_sprintf
  7094 ;;		_strcpy
  7095 ;; This function is called by:
  7096 ;;		_Refresh_Screen
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text32
  7101  001DDA                     __ptext32:
  7102                           	callstack 0
  7103  001DDA                     _Set_Display_Message:
  7104                           	callstack 25
  7105  001DDA                     
  7106                           ;main.c: 327: if (screen == CURRENT_LEVEL)
  7107  001DDA  505B               	movf	_screen^0,w,c	;volatile
  7108  001DDC  A4D8               	btfss	status,2,c
  7109  001DDE  EFF3  F00E         	goto	u2731
  7110  001DE2  EFF5  F00E         	goto	u2730
  7111  001DE6                     u2731:
  7112  001DE6  EF27  F00F         	goto	l3489
  7113  001DEA                     u2730:
  7114  001DEA                     
  7115                           ;main.c: 328: {;main.c: 329: sprintf(display.line0, "CURRENT LV1: %d%%  ", (int)tank1.le
      +                          vel);
  7116  001DEA  0E32               	movlw	low _display
  7117  001DEC  6E0F               	movwf	sprintf@sp^0,c
  7118  001DEE  0E02               	movlw	high _display
  7119  001DF0  6E10               	movwf	(sprintf@sp+1)^0,c
  7120  001DF2  0E2C               	movlw	low STR_1
  7121  001DF4  6E11               	movwf	sprintf@f^0,c
  7122  001DF6  0E06               	movlw	high STR_1
  7123  001DF8  6E12               	movwf	(sprintf@f+1)^0,c
  7124  001DFA  C047  F003         	movff	_tank1,___fltol@f1	;volatile
  7125  001DFE  C048  F004         	movff	_tank1+1,___fltol@f1+1	;volatile
  7126  001E02  C049  F005         	movff	_tank1+2,___fltol@f1+2	;volatile
  7127  001E06  C04A  F006         	movff	_tank1+3,___fltol@f1+3	;volatile
  7128  001E0A  ECF2  F013         	call	___fltol	;wreg free
  7129  001E0E  C003  F013         	movff	?___fltol,?_sprintf+4
  7130  001E12  C004  F014         	movff	?___fltol+1,?_sprintf+5
  7131  001E16  EC67  F003         	call	_sprintf	;wreg free
  7132                           
  7133                           ;main.c: 330: sprintf(display.line1, "CURRENT LV2: %d%%  ", (int)tank2.level);
  7134  001E1A  0E42               	movlw	low (_display+16)
  7135  001E1C  6E0F               	movwf	sprintf@sp^0,c
  7136  001E1E  0E02               	movlw	high (_display+16)
  7137  001E20  6E10               	movwf	(sprintf@sp+1)^0,c
  7138  001E22  0E40               	movlw	low STR_2
  7139  001E24  6E11               	movwf	sprintf@f^0,c
  7140  001E26  0E06               	movlw	high STR_2
  7141  001E28  6E12               	movwf	(sprintf@f+1)^0,c
  7142  001E2A  C03B  F003         	movff	_tank2,___fltol@f1	;volatile
  7143  001E2E  C03C  F004         	movff	_tank2+1,___fltol@f1+1	;volatile
  7144  001E32  C03D  F005         	movff	_tank2+2,___fltol@f1+2	;volatile
  7145  001E36  C03E  F006         	movff	_tank2+3,___fltol@f1+3	;volatile
  7146  001E3A  ECF2  F013         	call	___fltol	;wreg free
  7147  001E3E  C003  F013         	movff	?___fltol,?_sprintf+4
  7148  001E42  C004  F014         	movff	?___fltol+1,?_sprintf+5
  7149  001E46  EC67  F003         	call	_sprintf	;wreg free
  7150                           
  7151                           ;main.c: 331: }
  7152  001E4A  EFC1  F00F         	goto	l283
  7153  001E4E                     l3489:
  7154                           
  7155                           ;main.c: 332: else if (screen == OPERATION_MODE)
  7156  001E4E  045B               	decf	_screen^0,w,c	;volatile
  7157  001E50  A4D8               	btfss	status,2,c
  7158  001E52  EF2D  F00F         	goto	u2741
  7159  001E56  EF2F  F00F         	goto	u2740
  7160  001E5A                     u2741:
  7161  001E5A  EF57  F00F         	goto	l3501
  7162  001E5E                     u2740:
  7163  001E5E                     
  7164                           ;main.c: 333: {;main.c: 334: strcpy(display.line0, "OPERATION MODE: ");
  7165  001E5E  0E32               	movlw	low _display
  7166  001E60  6E03               	movwf	strcpy@to^0,c
  7167  001E62  0E02               	movlw	high _display
  7168  001E64  6E04               	movwf	(strcpy@to+1)^0,c
  7169  001E66  0EBC               	movlw	low STR_3
  7170  001E68  6E05               	movwf	strcpy@from^0,c
  7171  001E6A  0E06               	movlw	high STR_3
  7172  001E6C  6E06               	movwf	(strcpy@from+1)^0,c
  7173  001E6E  ECE4  F01A         	call	_strcpy	;wreg free
  7174  001E72                     
  7175                           ;main.c: 335: strcpy(display.line1, operation == AUTOMATIC ? "AUTOMATIC       " : "MANUA
      +                          L          ");
  7176  001E72  505C               	movf	_operation^0,w,c	;volatile
  7177  001E74  B4D8               	btfsc	status,2,c
  7178  001E76  EF3F  F00F         	goto	u2751
  7179  001E7A  EF41  F00F         	goto	u2750
  7180  001E7E                     u2751:
  7181  001E7E  EF47  F00F         	goto	l3497
  7182  001E82                     u2750:
  7183  001E82  0E89               	movlw	low STR_5
  7184  001E84  6E2D               	movwf	_Set_Display_Message$768^0,c
  7185  001E86  0E06               	movlw	high STR_5
  7186  001E88  6E2E               	movwf	(_Set_Display_Message$768+1)^0,c
  7187  001E8A  EF4B  F00F         	goto	l3499
  7188  001E8E                     l3497:
  7189  001E8E  0EAB               	movlw	low STR_4
  7190  001E90  6E2D               	movwf	_Set_Display_Message$768^0,c
  7191  001E92  0E06               	movlw	high STR_4
  7192  001E94  6E2E               	movwf	(_Set_Display_Message$768+1)^0,c
  7193  001E96                     l3499:
  7194  001E96  0E42               	movlw	low (_display+16)
  7195  001E98  6E03               	movwf	strcpy@to^0,c
  7196  001E9A  0E02               	movlw	high (_display+16)
  7197  001E9C  6E04               	movwf	(strcpy@to+1)^0,c
  7198  001E9E  C02D  F005         	movff	_Set_Display_Message$768,strcpy@from
  7199  001EA2  C02E  F006         	movff	_Set_Display_Message$768+1,strcpy@from+1
  7200  001EA6  ECE4  F01A         	call	_strcpy	;wreg free
  7201                           
  7202                           ;main.c: 336: }
  7203  001EAA  EFC1  F00F         	goto	l283
  7204  001EAE                     l3501:
  7205                           
  7206                           ;main.c: 337: else if (screen == MIN_LEVEL)
  7207  001EAE  0E02               	movlw	2
  7208  001EB0  185B               	xorwf	_screen^0,w,c	;volatile
  7209  001EB2  A4D8               	btfss	status,2,c
  7210  001EB4  EF5E  F00F         	goto	u2761
  7211  001EB8  EF60  F00F         	goto	u2760
  7212  001EBC                     u2761:
  7213  001EBC  EF92  F00F         	goto	l3505
  7214  001EC0                     u2760:
  7215  001EC0                     
  7216                           ;main.c: 338: {;main.c: 339: sprintf(display.line0, "LV_MIN_1: %d%%   ", (int)tank1.min_
      +                          level);
  7217  001EC0  0E32               	movlw	low _display
  7218  001EC2  6E0F               	movwf	sprintf@sp^0,c
  7219  001EC4  0E02               	movlw	high _display
  7220  001EC6  6E10               	movwf	(sprintf@sp+1)^0,c
  7221  001EC8  0E54               	movlw	low STR_6
  7222  001ECA  6E11               	movwf	sprintf@f^0,c
  7223  001ECC  0E06               	movlw	high STR_6
  7224  001ECE  6E12               	movwf	(sprintf@f+1)^0,c
  7225  001ED0  C04B  F003         	movff	_tank1+4,___fltol@f1	;volatile
  7226  001ED4  C04C  F004         	movff	_tank1+5,___fltol@f1+1	;volatile
  7227  001ED8  C04D  F005         	movff	_tank1+6,___fltol@f1+2	;volatile
  7228  001EDC  C04E  F006         	movff	_tank1+7,___fltol@f1+3	;volatile
  7229  001EE0  ECF2  F013         	call	___fltol	;wreg free
  7230  001EE4  C003  F013         	movff	?___fltol,?_sprintf+4
  7231  001EE8  C004  F014         	movff	?___fltol+1,?_sprintf+5
  7232  001EEC  EC67  F003         	call	_sprintf	;wreg free
  7233                           
  7234                           ;main.c: 340: sprintf(display.line1, "LV_MIN_2: %d%%   ", (int)tank2.min_level);
  7235  001EF0  0E42               	movlw	low (_display+16)
  7236  001EF2  6E0F               	movwf	sprintf@sp^0,c
  7237  001EF4  0E02               	movlw	high (_display+16)
  7238  001EF6  6E10               	movwf	(sprintf@sp+1)^0,c
  7239  001EF8  0E66               	movlw	low STR_7
  7240  001EFA  6E11               	movwf	sprintf@f^0,c
  7241  001EFC  0E06               	movlw	high STR_7
  7242  001EFE  6E12               	movwf	(sprintf@f+1)^0,c
  7243  001F00  C03F  F003         	movff	_tank2+4,___fltol@f1	;volatile
  7244  001F04  C040  F004         	movff	_tank2+5,___fltol@f1+1	;volatile
  7245  001F08  C041  F005         	movff	_tank2+6,___fltol@f1+2	;volatile
  7246  001F0C  C042  F006         	movff	_tank2+7,___fltol@f1+3	;volatile
  7247  001F10  ECF2  F013         	call	___fltol	;wreg free
  7248  001F14  C003  F013         	movff	?___fltol,?_sprintf+4
  7249  001F18  C004  F014         	movff	?___fltol+1,?_sprintf+5
  7250  001F1C  EC67  F003         	call	_sprintf	;wreg free
  7251                           
  7252                           ;main.c: 341: }
  7253  001F20  EFC1  F00F         	goto	l283
  7254  001F24                     l3505:
  7255                           
  7256                           ;main.c: 342: else if (screen == MODBUS)
  7257  001F24  0E03               	movlw	3
  7258  001F26  185B               	xorwf	_screen^0,w,c	;volatile
  7259  001F28  A4D8               	btfss	status,2,c
  7260  001F2A  EF99  F00F         	goto	u2771
  7261  001F2E  EF9B  F00F         	goto	u2770
  7262  001F32                     u2771:
  7263  001F32  EFC1  F00F         	goto	l279
  7264  001F36                     u2770:
  7265  001F36                     
  7266                           ;main.c: 343: {;main.c: 344: strcpy(display.line0, "MODBUS:         ");
  7267  001F36  0E32               	movlw	low _display
  7268  001F38  6E03               	movwf	strcpy@to^0,c
  7269  001F3A  0E02               	movlw	high _display
  7270  001F3C  6E04               	movwf	(strcpy@to+1)^0,c
  7271  001F3E  0E9A               	movlw	low STR_8
  7272  001F40  6E05               	movwf	strcpy@from^0,c
  7273  001F42  0E06               	movlw	high STR_8
  7274  001F44  6E06               	movwf	(strcpy@from+1)^0,c
  7275  001F46  ECE4  F01A         	call	_strcpy	;wreg free
  7276  001F4A                     
  7277                           ;main.c: 345: sprintf(display.line1, "%02X %02X %02X %02X     ", holdingReg[0], holdingR
      +                          eg[1], holdingReg[2], holdingReg[3]);
  7278  001F4A  0E42               	movlw	low (_display+16)
  7279  001F4C  6E0F               	movwf	sprintf@sp^0,c
  7280  001F4E  0E02               	movlw	high (_display+16)
  7281  001F50  6E10               	movwf	(sprintf@sp+1)^0,c
  7282  001F52  0E13               	movlw	low STR_9
  7283  001F54  6E11               	movwf	sprintf@f^0,c
  7284  001F56  0E06               	movlw	high STR_9
  7285  001F58  6E12               	movwf	(sprintf@f+1)^0,c
  7286  001F5A  C080  F013         	movff	_holdingReg,?_sprintf+4	;volatile
  7287  001F5E  C081  F014         	movff	_holdingReg+1,?_sprintf+5	;volatile
  7288  001F62  C082  F015         	movff	_holdingReg+2,?_sprintf+6	;volatile
  7289  001F66  C083  F016         	movff	_holdingReg+3,?_sprintf+7	;volatile
  7290  001F6A  C084  F017         	movff	_holdingReg+4,?_sprintf+8	;volatile
  7291  001F6E  C085  F018         	movff	_holdingReg+5,?_sprintf+9	;volatile
  7292  001F72  C086  F019         	movff	_holdingReg+6,?_sprintf+10	;volatile
  7293  001F76  C087  F01A         	movff	_holdingReg+7,?_sprintf+11	;volatile
  7294  001F7A  EC67  F003         	call	_sprintf	;wreg free
  7295  001F7E  EFC1  F00F         	goto	l283
  7296  001F82                     l279:
  7297  001F82                     l283:
  7298  001F82  0012               	return		;funcret
  7299  001F84                     __end_of_Set_Display_Message:
  7300                           	callstack 0
  7301                           
  7302 ;; *************** function _strcpy *****************
  7303 ;; Defined at:
  7304 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\strcpy.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  to              2    2[COMRAM] PTR unsigned char 
  7307 ;;		 -> display.line1(16), display.line0(16), display(32), 
  7308 ;;  from            2    4[COMRAM] PTR const unsigned char 
  7309 ;;		 -> STR_8(17), STR_5(17), STR_4(17), STR_3(17), 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  cp              2    6[COMRAM] PTR unsigned char 
  7312 ;;		 -> display.line1(16), display.line0(16), display(32), 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  2    2[COMRAM] PTR unsigned char 
  7315 ;; Registers used:
  7316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7322 ;;      Params:         4       0       0       0       0       0       0
  7323 ;;      Locals:         2       0       0       0       0       0       0
  7324 ;;      Temps:          0       0       0       0       0       0       0
  7325 ;;      Totals:         6       0       0       0       0       0       0
  7326 ;;Total ram usage:        6 bytes
  7327 ;; Hardware stack levels used: 1
  7328 ;; Hardware stack levels required when called: 2
  7329 ;; This function calls:
  7330 ;;		Nothing
  7331 ;; This function is called by:
  7332 ;;		_Set_Display_Message
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text33
  7337  0035C8                     __ptext33:
  7338                           	callstack 0
  7339  0035C8                     _strcpy:
  7340                           	callstack 26
  7341  0035C8  C003  F007         	movff	strcpy@to,strcpy@cp
  7342  0035CC  C004  F008         	movff	strcpy@to+1,strcpy@cp+1
  7343  0035D0  EFEE  F01A         	goto	l3439
  7344  0035D4                     l3437:
  7345  0035D4  4A07               	infsnz	strcpy@cp^0,f,c
  7346  0035D6  2A08               	incf	(strcpy@cp+1)^0,f,c
  7347  0035D8  4A05               	infsnz	strcpy@from^0,f,c
  7348  0035DA  2A06               	incf	(strcpy@from+1)^0,f,c
  7349  0035DC                     l3439:
  7350  0035DC  C005  FFF6         	movff	strcpy@from,tblptrl
  7351  0035E0  C006  FFF7         	movff	strcpy@from+1,tblptrh
  7352  0035E4                     	if	0	;tblptru may be non-zero
  7353  0035E4                     	endif
  7354  0035E4                     	if	0	;tblptru may be non-zero
  7355  0035E4                     	endif
  7356  0035E4  C007  FFD9         	movff	strcpy@cp,fsr2l
  7357  0035E8  C008  FFDA         	movff	strcpy@cp+1,fsr2h
  7358  0035EC  0008               	tblrd		*
  7359  0035EE  CFF5 FFDF          	movff	tablat,indf2
  7360  0035F2  50DF               	movf	indf2,w,c
  7361  0035F4  A4D8               	btfss	status,2,c
  7362  0035F6  EFFF  F01A         	goto	u2651
  7363  0035FA  EF01  F01B         	goto	u2650
  7364  0035FE                     u2651:
  7365  0035FE  EFEA  F01A         	goto	l3437
  7366  003602                     u2650:
  7367  003602  0012               	return		;funcret
  7368  003604                     __end_of_strcpy:
  7369                           	callstack 0
  7370                           
  7371 ;; *************** function _sprintf *****************
  7372 ;; Defined at:
  7373 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;  sp              2   14[COMRAM] PTR unsigned char 
  7376 ;;		 -> display.line1(16), display.line0(16), display(32), 
  7377 ;;  f               2   16[COMRAM] PTR const unsigned char 
  7378 ;;		 -> STR_9(25), STR_7(18), STR_6(18), STR_2(20), 
  7379 ;;		 -> STR_1(20), 
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;  idx             1   32[COMRAM] unsigned char 
  7382 ;;  tmpval          4    0        struct .
  7383 ;;  width           2   41[COMRAM] int 
  7384 ;;  val             2   38[COMRAM] unsigned int 
  7385 ;;  len             2   35[COMRAM] unsigned int 
  7386 ;;  ap              2   33[COMRAM] PTR void [1]
  7387 ;;		 -> ?_sprintf(2), 
  7388 ;;  cp              2   30[COMRAM] PTR const unsigned char 
  7389 ;;		 -> sprintf@c(1), 
  7390 ;;  c               1   43[COMRAM] unsigned char 
  7391 ;;  flag            1   40[COMRAM] unsigned char 
  7392 ;;  prec            1   37[COMRAM] char 
  7393 ;; Return value:  Size  Location     Type
  7394 ;;                  2   14[COMRAM] int 
  7395 ;; Registers used:
  7396 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7402 ;;      Params:        12       0       0       0       0       0       0
  7403 ;;      Locals:        14       0       0       0       0       0       0
  7404 ;;      Temps:          4       0       0       0       0       0       0
  7405 ;;      Totals:        30       0       0       0       0       0       0
  7406 ;;Total ram usage:       30 bytes
  7407 ;; Hardware stack levels used: 1
  7408 ;; Hardware stack levels required when called: 3
  7409 ;; This function calls:
  7410 ;;		___lwdiv
  7411 ;;		___lwmod
  7412 ;;		___wmul
  7413 ;;		_isdigit
  7414 ;; This function is called by:
  7415 ;;		_Set_Display_Message
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           	psect	text34
  7420  0006CE                     __ptext34:
  7421                           	callstack 0
  7422  0006CE                     _sprintf:
  7423                           	callstack 25
  7424  0006CE                     
  7425                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
  7426  0006CE  0E13               	movlw	low (?_sprintf+4)
  7427  0006D0  6E22               	movwf	sprintf@ap^0,c
  7428  0006D2  0E00               	movlw	high (?_sprintf+4)
  7429  0006D4  6E23               	movwf	(sprintf@ap+1)^0,c
  7430                           
  7431                           ;doprnt.c: 553: while((c = *f++)) {
  7432  0006D6  EFE2  F005         	goto	l3429
  7433  0006DA                     l3267:
  7434                           
  7435                           ;doprnt.c: 555: if(c != '%')
  7436  0006DA  0E25               	movlw	37
  7437  0006DC  182C               	xorwf	sprintf@c^0,w,c
  7438  0006DE  B4D8               	btfsc	status,2,c
  7439  0006E0  EF74  F003         	goto	u2411
  7440  0006E4  EF76  F003         	goto	u2410
  7441  0006E8                     u2411:
  7442  0006E8  EF80  F003         	goto	l3273
  7443  0006EC                     u2410:
  7444  0006EC                     
  7445                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  7446  0006EC  C00F  FFD9         	movff	sprintf@sp,fsr2l
  7447  0006F0  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  7448  0006F4  C02C  FFDF         	movff	sprintf@c,indf2
  7449  0006F8  4A0F               	infsnz	sprintf@sp^0,f,c
  7450  0006FA  2A10               	incf	(sprintf@sp+1)^0,f,c
  7451                           
  7452                           ;doprnt.c: 559: continue;
  7453  0006FC  EFE2  F005         	goto	l3429
  7454  000700                     l3273:
  7455                           
  7456                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
  7457  000700  0E00               	movlw	0
  7458  000702  6E2B               	movwf	(sprintf@width+1)^0,c
  7459  000704  0E00               	movlw	0
  7460  000706  6E2A               	movwf	sprintf@width^0,c
  7461                           
  7462                           ;doprnt.c: 565: flag = 0;
  7463  000708  0E00               	movlw	0
  7464  00070A  6E29               	movwf	sprintf@flag^0,c
  7465  00070C  EF8B  F003         	goto	l3279
  7466  000710                     l3275:
  7467                           
  7468                           ;doprnt.c: 597: flag |= 0x04;
  7469  000710  8429               	bsf	sprintf@flag^0,2,c
  7470                           
  7471                           ;doprnt.c: 598: f++;
  7472  000712  4A11               	infsnz	sprintf@f^0,f,c
  7473  000714  2A12               	incf	(sprintf@f+1)^0,f,c
  7474  000716                     l3279:
  7475  000716  C011  FFF6         	movff	sprintf@f,tblptrl
  7476  00071A  C012  FFF7         	movff	sprintf@f+1,tblptrh
  7477  00071E                     	if	0	;tblptru may be non-zero
  7478  00071E                     	endif
  7479  00071E                     	if	0	;tblptru may be non-zero
  7480  00071E                     	endif
  7481  00071E  0008               	tblrd		*
  7482  000720  50F5               	movf	tablat,w,c
  7483                           
  7484                           ; Switch size 1, requested type "simple"
  7485                           ; Number of cases is 1, Range of values is 48 to 48
  7486                           ; switch strategies available:
  7487                           ; Name         Instructions Cycles
  7488                           ; simple_byte            4     3 (average)
  7489                           ;	Chosen strategy is simple_byte
  7490  000722  0A30               	xorlw	48	; case 48
  7491  000724  B4D8               	btfsc	status,2,c
  7492  000726  EF88  F003         	goto	l3275
  7493  00072A  EF97  F003         	goto	l3281
  7494  00072E                     l3281:
  7495                           
  7496                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
  7497  00072E  C011  FFF6         	movff	sprintf@f,tblptrl
  7498  000732  C012  FFF7         	movff	sprintf@f+1,tblptrh
  7499  000736                     	if	0	;tblptru may be non-zero
  7500  000736                     	endif
  7501  000736                     	if	0	;tblptru may be non-zero
  7502  000736                     	endif
  7503  000736  0008               	tblrd		*
  7504  000738  50F5               	movf	tablat,w,c
  7505  00073A  EC1E  F01B         	call	_isdigit
  7506  00073E  A0D8               	btfss	status,0,c
  7507  000740  EFA4  F003         	goto	u2421
  7508  000744  EFA6  F003         	goto	u2420
  7509  000748                     u2421:
  7510  000748  EF36  F004         	goto	l3321
  7511  00074C                     u2420:
  7512  00074C                     
  7513                           ;doprnt.c: 615: width = 0;
  7514  00074C  0E00               	movlw	0
  7515  00074E  6E2B               	movwf	(sprintf@width+1)^0,c
  7516  000750  0E00               	movlw	0
  7517  000752  6E2A               	movwf	sprintf@width^0,c
  7518  000754                     l3285:
  7519                           
  7520                           ;doprnt.c: 617: width *= 10;
  7521  000754  C02A  F003         	movff	sprintf@width,___wmul@multiplier
  7522  000758  C02B  F004         	movff	sprintf@width+1,___wmul@multiplier+1
  7523  00075C  0E00               	movlw	0
  7524  00075E  6E06               	movwf	(___wmul@multiplicand+1)^0,c
  7525  000760  0E0A               	movlw	10
  7526  000762  6E05               	movwf	___wmul@multiplicand^0,c
  7527  000764  ECBC  F01B         	call	___wmul	;wreg free
  7528  000768  C003  F02A         	movff	?___wmul,sprintf@width
  7529  00076C  C004  F02B         	movff	?___wmul+1,sprintf@width+1
  7530  000770                     
  7531                           ;doprnt.c: 618: width += *f++ - '0';
  7532  000770  0ED0               	movlw	208
  7533  000772  6E1B               	movwf	??_sprintf^0,c
  7534  000774  0EFF               	movlw	255
  7535  000776  6E1C               	movwf	(??_sprintf+1)^0,c
  7536  000778  C011  FFF6         	movff	sprintf@f,tblptrl
  7537  00077C  C012  FFF7         	movff	sprintf@f+1,tblptrh
  7538  000780                     	if	0	;tblptru may be non-zero
  7539  000780                     	endif
  7540  000780                     	if	0	;tblptru may be non-zero
  7541  000780                     	endif
  7542  000780  0008               	tblrd		*
  7543  000782  50F5               	movf	tablat,w,c
  7544  000784  6E1D               	movwf	(??_sprintf+2)^0,c
  7545  000786  6A1E               	clrf	(??_sprintf+3)^0,c
  7546  000788  501B               	movf	??_sprintf^0,w,c
  7547  00078A  261D               	addwf	(??_sprintf+2)^0,f,c
  7548  00078C  501C               	movf	(??_sprintf+1)^0,w,c
  7549  00078E  221E               	addwfc	(??_sprintf+3)^0,f,c
  7550  000790  501D               	movf	(??_sprintf+2)^0,w,c
  7551  000792  262A               	addwf	sprintf@width^0,f,c
  7552  000794  501E               	movf	(??_sprintf+3)^0,w,c
  7553  000796  222B               	addwfc	(sprintf@width+1)^0,f,c
  7554  000798  4A11               	infsnz	sprintf@f^0,f,c
  7555  00079A  2A12               	incf	(sprintf@f+1)^0,f,c
  7556  00079C                     
  7557                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  7558  00079C  C011  FFF6         	movff	sprintf@f,tblptrl
  7559  0007A0  C012  FFF7         	movff	sprintf@f+1,tblptrh
  7560  0007A4                     	if	0	;tblptru may be non-zero
  7561  0007A4                     	endif
  7562  0007A4                     	if	0	;tblptru may be non-zero
  7563  0007A4                     	endif
  7564  0007A4  0008               	tblrd		*
  7565  0007A6  50F5               	movf	tablat,w,c
  7566  0007A8  EC1E  F01B         	call	_isdigit
  7567  0007AC  B0D8               	btfsc	status,0,c
  7568  0007AE  EFDB  F003         	goto	u2431
  7569  0007B2  EFDD  F003         	goto	u2430
  7570  0007B6                     u2431:
  7571  0007B6  EFAA  F003         	goto	l3285
  7572  0007BA                     u2430:
  7573  0007BA  EF36  F004         	goto	l3321
  7574  0007BE                     l3293:
  7575                           
  7576                           ;doprnt.c: 744: case 'x':;doprnt.c: 747: flag |= 0x80;
  7577  0007BE  8E29               	bsf	sprintf@flag^0,7,c
  7578                           
  7579                           ;doprnt.c: 749: break;
  7580  0007C0  EF56  F004         	goto	l615
  7581  0007C4                     l3295:
  7582                           
  7583                           ;doprnt.c: 783: if(((unsigned)width) > len)
  7584  0007C4  502B               	movf	(sprintf@width+1)^0,w,c
  7585  0007C6  E109               	bnz	u2440
  7586  0007C8  0E02               	movlw	2
  7587  0007CA  5C2A               	subwf	sprintf@width^0,w,c
  7588  0007CC  A0D8               	btfss	status,0,c
  7589  0007CE  EFEB  F003         	goto	u2441
  7590  0007D2  EFED  F003         	goto	u2440
  7591  0007D6                     u2441:
  7592  0007D6  EFF2  F003         	goto	l3299
  7593  0007DA                     u2440:
  7594  0007DA                     
  7595                           ;doprnt.c: 784: width -= len;
  7596  0007DA  062A               	decf	sprintf@width^0,f,c
  7597  0007DC  A0D8               	btfss	status,0,c
  7598  0007DE  062B               	decf	(sprintf@width+1)^0,f,c
  7599  0007E0  EF00  F004         	goto	l3305
  7600  0007E4                     l3299:
  7601                           
  7602                           ;doprnt.c: 785: else;doprnt.c: 786: width = 0;
  7603  0007E4  0E00               	movlw	0
  7604  0007E6  6E2B               	movwf	(sprintf@width+1)^0,c
  7605  0007E8  0E00               	movlw	0
  7606  0007EA  6E2A               	movwf	sprintf@width^0,c
  7607  0007EC  EF00  F004         	goto	l3305
  7608  0007F0                     l3301:
  7609                           
  7610                           ;doprnt.c: 791: ((*sp++ = (' ')));
  7611  0007F0  C00F  FFD9         	movff	sprintf@sp,fsr2l
  7612  0007F4  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  7613  0007F8  0E20               	movlw	32
  7614  0007FA  6EDF               	movwf	indf2,c
  7615  0007FC  4A0F               	infsnz	sprintf@sp^0,f,c
  7616  0007FE  2A10               	incf	(sprintf@sp+1)^0,f,c
  7617  000800                     l3305:
  7618  000800  062A               	decf	sprintf@width^0,f,c
  7619  000802  A0D8               	btfss	status,0,c
  7620  000804  062B               	decf	(sprintf@width+1)^0,f,c
  7621  000806  282A               	incf	sprintf@width^0,w,c
  7622  000808  E106               	bnz	u2451
  7623  00080A  282B               	incf	(sprintf@width+1)^0,w,c
  7624  00080C  A4D8               	btfss	status,2,c
  7625  00080E  EF0B  F004         	goto	u2451
  7626  000812  EF0D  F004         	goto	u2450
  7627  000816                     u2451:
  7628  000816  EFF8  F003         	goto	l3301
  7629  00081A                     u2450:
  7630  00081A  EF1D  F004         	goto	l3313
  7631  00081E                     l3307:
  7632                           
  7633                           ;doprnt.c: 794: ((*sp++ = (*cp++)));
  7634  00081E  C01F  FFD9         	movff	sprintf@cp,fsr2l
  7635  000822  C020  FFDA         	movff	sprintf@cp+1,fsr2h
  7636  000826  C00F  FFE1         	movff	sprintf@sp,fsr1l
  7637  00082A  C010  FFE2         	movff	sprintf@sp+1,fsr1h
  7638  00082E  CFDF FFE7          	movff	indf2,indf1
  7639  000832  4A1F               	infsnz	sprintf@cp^0,f,c
  7640  000834  2A20               	incf	(sprintf@cp+1)^0,f,c
  7641  000836  4A0F               	infsnz	sprintf@sp^0,f,c
  7642  000838  2A10               	incf	(sprintf@sp+1)^0,f,c
  7643  00083A                     l3313:
  7644  00083A  0624               	decf	sprintf@len^0,f,c
  7645  00083C  A0D8               	btfss	status,0,c
  7646  00083E  0625               	decf	(sprintf@len+1)^0,f,c
  7647  000840  2824               	incf	sprintf@len^0,w,c
  7648  000842  E106               	bnz	u2461
  7649  000844  2825               	incf	(sprintf@len+1)^0,w,c
  7650  000846  A4D8               	btfss	status,2,c
  7651  000848  EF28  F004         	goto	u2461
  7652  00084C  EF2A  F004         	goto	u2460
  7653  000850                     u2461:
  7654  000850  EF0F  F004         	goto	l3307
  7655  000854                     u2460:
  7656  000854  EFE2  F005         	goto	l3429
  7657  000858                     l3315:
  7658                           
  7659                           ;doprnt.c: 831: cp = (char *)&c;
  7660  000858  0E2C               	movlw	low sprintf@c
  7661  00085A  6E1F               	movwf	sprintf@cp^0,c
  7662  00085C  0E00               	movlw	high sprintf@c
  7663  00085E  6E20               	movwf	(sprintf@cp+1)^0,c
  7664  000860                     
  7665                           ;doprnt.c: 832: len = 1;
  7666  000860  0E00               	movlw	0
  7667  000862  6E25               	movwf	(sprintf@len+1)^0,c
  7668  000864  0E01               	movlw	1
  7669  000866  6E24               	movwf	sprintf@len^0,c
  7670                           
  7671                           ;doprnt.c: 833: goto dostring;
  7672  000868  EFE2  F003         	goto	l3295
  7673  00086C                     l3321:
  7674  00086C  C011  FFF6         	movff	sprintf@f,tblptrl
  7675  000870  C012  FFF7         	movff	sprintf@f+1,tblptrh
  7676  000874  4A11               	infsnz	sprintf@f^0,f,c
  7677  000876  2A12               	incf	(sprintf@f+1)^0,f,c
  7678  000878                     	if	0	;tblptru may be non-zero
  7679  000878                     	endif
  7680  000878                     	if	0	;tblptru may be non-zero
  7681  000878                     	endif
  7682  000878  0008               	tblrd		*
  7683  00087A  CFF5 F02C          	movff	tablat,sprintf@c
  7684  00087E  502C               	movf	sprintf@c^0,w,c
  7685                           
  7686                           ; Switch size 1, requested type "simple"
  7687                           ; Number of cases is 5, Range of values is 0 to 120
  7688                           ; switch strategies available:
  7689                           ; Name         Instructions Cycles
  7690                           ; simple_byte           16     9 (average)
  7691                           ;	Chosen strategy is simple_byte
  7692  000880  0A00               	xorlw	0	; case 0
  7693  000882  B4D8               	btfsc	status,2,c
  7694  000884  EFF3  F005         	goto	l3431
  7695  000888  0A58               	xorlw	88	; case 88
  7696  00088A  B4D8               	btfsc	status,2,c
  7697  00088C  EFDF  F003         	goto	l3293
  7698  000890  0A3C               	xorlw	60	; case 100
  7699  000892  B4D8               	btfsc	status,2,c
  7700  000894  EF56  F004         	goto	l615
  7701  000898  0A0D               	xorlw	13	; case 105
  7702  00089A  B4D8               	btfsc	status,2,c
  7703  00089C  EF56  F004         	goto	l615
  7704  0008A0  0A11               	xorlw	17	; case 120
  7705  0008A2  B4D8               	btfsc	status,2,c
  7706  0008A4  EFDF  F003         	goto	l3293
  7707  0008A8  EF2C  F004         	goto	l3315
  7708  0008AC                     l615:
  7709                           
  7710                           ;doprnt.c: 1277: if((flag & 0x80) == 0x00)
  7711  0008AC  BE29               	btfsc	sprintf@flag^0,7,c
  7712  0008AE  EF5B  F004         	goto	u2471
  7713  0008B2  EF5D  F004         	goto	u2470
  7714  0008B6                     u2471:
  7715  0008B6  EF78  F004         	goto	l3333
  7716  0008BA                     u2470:
  7717  0008BA                     
  7718                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
  7719  0008BA  C022  FFD9         	movff	sprintf@ap,fsr2l
  7720  0008BE  C023  FFDA         	movff	sprintf@ap+1,fsr2h
  7721  0008C2  CFDE F027          	movff	postinc2,sprintf@val
  7722  0008C6  CFDD F028          	movff	postdec2,sprintf@val+1
  7723  0008CA  0E02               	movlw	2
  7724  0008CC  2622               	addwf	sprintf@ap^0,f,c
  7725  0008CE  0E00               	movlw	0
  7726  0008D0  2223               	addwfc	(sprintf@ap+1)^0,f,c
  7727  0008D2                     
  7728                           ;doprnt.c: 1287: if((int)val < 0) {
  7729  0008D2  BE28               	btfsc	(sprintf@val+1)^0,7,c
  7730  0008D4  EF70  F004         	goto	u2480
  7731  0008D8  EF6E  F004         	goto	u2481
  7732  0008DC                     u2481:
  7733  0008DC  EFD4  F004         	goto	l3367
  7734  0008E0                     u2480:
  7735  0008E0                     
  7736                           ;doprnt.c: 1288: flag |= 0x03;
  7737  0008E0  0E03               	movlw	3
  7738  0008E2  1229               	iorwf	sprintf@flag^0,f,c
  7739  0008E4                     
  7740                           ;doprnt.c: 1289: val = -val;
  7741  0008E4  6C27               	negf	sprintf@val^0,c
  7742  0008E6  1E28               	comf	(sprintf@val+1)^0,f,c
  7743  0008E8  B0D8               	btfsc	status,0,c
  7744  0008EA  2A28               	incf	(sprintf@val+1)^0,f,c
  7745  0008EC  EFD4  F004         	goto	l3367
  7746  0008F0                     l3333:
  7747                           
  7748                           ;doprnt.c: 1294: else;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(
      +                          unsigned **)ap), (unsigned)0));
  7749  0008F0  C022  FFD9         	movff	sprintf@ap,fsr2l
  7750  0008F4  C023  FFDA         	movff	sprintf@ap+1,fsr2h
  7751  0008F8  CFDE F027          	movff	postinc2,sprintf@val
  7752  0008FC  CFDD F028          	movff	postdec2,sprintf@val+1
  7753  000900  0E02               	movlw	2
  7754  000902  2622               	addwf	sprintf@ap^0,f,c
  7755  000904  0E00               	movlw	0
  7756  000906  2223               	addwfc	(sprintf@ap+1)^0,f,c
  7757  000908  EFD4  F004         	goto	l3367
  7758  00090C                     l3337:
  7759                           
  7760                           ;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7761  00090C  0E01               	movlw	1
  7762  00090E  6E2C               	movwf	sprintf@c^0,c
  7763  000910                     l3339:
  7764  000910  0E05               	movlw	5
  7765  000912  182C               	xorwf	sprintf@c^0,w,c
  7766  000914  A4D8               	btfss	status,2,c
  7767  000916  EF8F  F004         	goto	u2491
  7768  00091A  EF91  F004         	goto	u2490
  7769  00091E                     u2491:
  7770  00091E  EF93  F004         	goto	l3343
  7771  000922                     u2490:
  7772  000922  EFE0  F004         	goto	l3369
  7773  000926                     l3343:
  7774                           
  7775                           ;doprnt.c: 1332: if(val < dpowers[c])
  7776  000926  502C               	movf	sprintf@c^0,w,c
  7777  000928  0D02               	mullw	2
  7778  00092A  0E01               	movlw	low _dpowers
  7779  00092C  24F3               	addwf	243,w,c
  7780  00092E  6EF6               	movwf	tblptrl,c
  7781  000930  0E06               	movlw	high _dpowers
  7782  000932  20F4               	addwfc	244,w,c
  7783  000934  6EF7               	movwf	tblptrh,c
  7784  000936                     	if	0	;There are less than 3 active tblptr bytes
  7785  000936                     	endif
  7786  000936  0009               	tblrd		*+
  7787  000938  50F5               	movf	tablat,w,c
  7788  00093A  5C27               	subwf	sprintf@val^0,w,c
  7789  00093C  0009               	tblrd		*+
  7790  00093E  50F5               	movf	tablat,w,c
  7791  000940  5828               	subwfb	(sprintf@val+1)^0,w,c
  7792  000942  B0D8               	btfsc	status,0,c
  7793  000944  EFA6  F004         	goto	u2501
  7794  000948  EFA8  F004         	goto	u2500
  7795  00094C                     u2501:
  7796  00094C  EFAA  F004         	goto	l3347
  7797  000950                     u2500:
  7798  000950  EFE0  F004         	goto	l3369
  7799  000954                     l3347:
  7800  000954  2A2C               	incf	sprintf@c^0,f,c
  7801  000956  EF88  F004         	goto	l3339
  7802  00095A                     l3351:
  7803                           
  7804                           ;doprnt.c: 1342: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7805  00095A  0E01               	movlw	1
  7806  00095C  6E2C               	movwf	sprintf@c^0,c
  7807  00095E                     l3353:
  7808  00095E  0E04               	movlw	4
  7809  000960  182C               	xorwf	sprintf@c^0,w,c
  7810  000962  A4D8               	btfss	status,2,c
  7811  000964  EFB6  F004         	goto	u2511
  7812  000968  EFB8  F004         	goto	u2510
  7813  00096C                     u2511:
  7814  00096C  EFBA  F004         	goto	l3357
  7815  000970                     u2510:
  7816  000970  EFE0  F004         	goto	l3369
  7817  000974                     l3357:
  7818                           
  7819                           ;doprnt.c: 1343: if(val < hexpowers[c])
  7820  000974  502C               	movf	sprintf@c^0,w,c
  7821  000976  0D02               	mullw	2
  7822  000978  0E0B               	movlw	low _hexpowers
  7823  00097A  24F3               	addwf	243,w,c
  7824  00097C  6EF6               	movwf	tblptrl,c
  7825  00097E  0E06               	movlw	high _hexpowers
  7826  000980  20F4               	addwfc	244,w,c
  7827  000982  6EF7               	movwf	tblptrh,c
  7828  000984                     	if	0	;There are less than 3 active tblptr bytes
  7829  000984                     	endif
  7830  000984  0009               	tblrd		*+
  7831  000986  50F5               	movf	tablat,w,c
  7832  000988  5C27               	subwf	sprintf@val^0,w,c
  7833  00098A  0009               	tblrd		*+
  7834  00098C  50F5               	movf	tablat,w,c
  7835  00098E  5828               	subwfb	(sprintf@val+1)^0,w,c
  7836  000990  B0D8               	btfsc	status,0,c
  7837  000992  EFCD  F004         	goto	u2521
  7838  000996  EFCF  F004         	goto	u2520
  7839  00099A                     u2521:
  7840  00099A  EFD1  F004         	goto	l3361
  7841  00099E                     u2520:
  7842  00099E  EFE0  F004         	goto	l3369
  7843  0009A2                     l3361:
  7844  0009A2  2A2C               	incf	sprintf@c^0,f,c
  7845  0009A4  EFAF  F004         	goto	l3353
  7846  0009A8                     l3367:
  7847  0009A8  5029               	movf	sprintf@flag^0,w,c
  7848  0009AA  0B80               	andlw	128
  7849                           
  7850                           ; Switch size 1, requested type "simple"
  7851                           ; Number of cases is 2, Range of values is 0 to 128
  7852                           ; switch strategies available:
  7853                           ; Name         Instructions Cycles
  7854                           ; simple_byte            7     4 (average)
  7855                           ;	Chosen strategy is simple_byte
  7856  0009AC  0A00               	xorlw	0	; case 0
  7857  0009AE  B4D8               	btfsc	status,2,c
  7858  0009B0  EF86  F004         	goto	l3337
  7859  0009B4  0A80               	xorlw	128	; case 128
  7860  0009B6  B4D8               	btfsc	status,2,c
  7861  0009B8  EFAD  F004         	goto	l3351
  7862  0009BC  EFE0  F004         	goto	l3369
  7863  0009C0                     l3369:
  7864                           
  7865                           ;doprnt.c: 1371: if(width && flag & 0x03)
  7866  0009C0  502A               	movf	sprintf@width^0,w,c
  7867  0009C2  102B               	iorwf	(sprintf@width+1)^0,w,c
  7868  0009C4  B4D8               	btfsc	status,2,c
  7869  0009C6  EFE7  F004         	goto	u2531
  7870  0009CA  EFE9  F004         	goto	u2530
  7871  0009CE                     u2531:
  7872  0009CE  EFF7  F004         	goto	l3375
  7873  0009D2                     u2530:
  7874  0009D2  C029  F01B         	movff	sprintf@flag,??_sprintf
  7875  0009D6  0E03               	movlw	3
  7876  0009D8  161B               	andwf	??_sprintf^0,f,c
  7877  0009DA  B4D8               	btfsc	status,2,c
  7878  0009DC  EFF2  F004         	goto	u2541
  7879  0009E0  EFF4  F004         	goto	u2540
  7880  0009E4                     u2541:
  7881  0009E4  EFF7  F004         	goto	l3375
  7882  0009E8                     u2540:
  7883  0009E8                     
  7884                           ;doprnt.c: 1372: width--;
  7885  0009E8  062A               	decf	sprintf@width^0,f,c
  7886  0009EA  A0D8               	btfss	status,0,c
  7887  0009EC  062B               	decf	(sprintf@width+1)^0,f,c
  7888  0009EE                     l3375:
  7889                           
  7890                           ;doprnt.c: 1407: if(width > c)
  7891  0009EE  502C               	movf	sprintf@c^0,w,c
  7892  0009F0  6E1B               	movwf	??_sprintf^0,c
  7893  0009F2  6A1C               	clrf	(??_sprintf+1)^0,c
  7894  0009F4  502A               	movf	sprintf@width^0,w,c
  7895  0009F6  5C1B               	subwf	??_sprintf^0,w,c
  7896  0009F8  501C               	movf	(??_sprintf+1)^0,w,c
  7897  0009FA  0A80               	xorlw	128
  7898  0009FC  6E1D               	movwf	(??_sprintf+2)^0,c
  7899  0009FE  502B               	movf	(sprintf@width+1)^0,w,c
  7900  000A00  0A80               	xorlw	128
  7901  000A02  581D               	subwfb	(??_sprintf+2)^0,w,c
  7902  000A04  B0D8               	btfsc	status,0,c
  7903  000A06  EF07  F005         	goto	u2551
  7904  000A0A  EF09  F005         	goto	u2550
  7905  000A0E                     u2551:
  7906  000A0E  EF0F  F005         	goto	l3379
  7907  000A12                     u2550:
  7908  000A12                     
  7909                           ;doprnt.c: 1408: width -= c;
  7910  000A12  502C               	movf	sprintf@c^0,w,c
  7911  000A14  5E2A               	subwf	sprintf@width^0,f,c
  7912  000A16  0E00               	movlw	0
  7913  000A18  5A2B               	subwfb	(sprintf@width+1)^0,f,c
  7914  000A1A  EF13  F005         	goto	l3381
  7915  000A1E                     l3379:
  7916                           
  7917                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  7918  000A1E  0E00               	movlw	0
  7919  000A20  6E2B               	movwf	(sprintf@width+1)^0,c
  7920  000A22  0E00               	movlw	0
  7921  000A24  6E2A               	movwf	sprintf@width^0,c
  7922  000A26                     l3381:
  7923                           
  7924                           ;doprnt.c: 1413: if(flag & 0x04) {
  7925  000A26  A429               	btfss	sprintf@flag^0,2,c
  7926  000A28  EF18  F005         	goto	u2561
  7927  000A2C  EF1A  F005         	goto	u2560
  7928  000A30                     u2561:
  7929  000A30  EF4C  F005         	goto	l3397
  7930  000A34                     u2560:
  7931  000A34                     
  7932                           ;doprnt.c: 1418: if(flag & 0x03)
  7933  000A34  C029  F01B         	movff	sprintf@flag,??_sprintf
  7934  000A38  0E03               	movlw	3
  7935  000A3A  161B               	andwf	??_sprintf^0,f,c
  7936  000A3C  B4D8               	btfsc	status,2,c
  7937  000A3E  EF23  F005         	goto	u2571
  7938  000A42  EF25  F005         	goto	u2570
  7939  000A46                     u2571:
  7940  000A46  EF2D  F005         	goto	l3389
  7941  000A4A                     u2570:
  7942  000A4A                     
  7943                           ;doprnt.c: 1419: ((*sp++ = ('-')));
  7944  000A4A  C00F  FFD9         	movff	sprintf@sp,fsr2l
  7945  000A4E  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  7946  000A52  0E2D               	movlw	45
  7947  000A54  6EDF               	movwf	indf2,c
  7948  000A56  4A0F               	infsnz	sprintf@sp^0,f,c
  7949  000A58  2A10               	incf	(sprintf@sp+1)^0,f,c
  7950  000A5A                     l3389:
  7951                           
  7952                           ;doprnt.c: 1441: if(width)
  7953  000A5A  502A               	movf	sprintf@width^0,w,c
  7954  000A5C  102B               	iorwf	(sprintf@width+1)^0,w,c
  7955  000A5E  B4D8               	btfsc	status,2,c
  7956  000A60  EF34  F005         	goto	u2581
  7957  000A64  EF36  F005         	goto	u2580
  7958  000A68                     u2581:
  7959  000A68  EF7C  F005         	goto	l3411
  7960  000A6C                     u2580:
  7961  000A6C                     l3391:
  7962                           
  7963                           ;doprnt.c: 1443: ((*sp++ = ('0')));
  7964  000A6C  C00F  FFD9         	movff	sprintf@sp,fsr2l
  7965  000A70  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  7966  000A74  0E30               	movlw	48
  7967  000A76  6EDF               	movwf	indf2,c
  7968  000A78  4A0F               	infsnz	sprintf@sp^0,f,c
  7969  000A7A  2A10               	incf	(sprintf@sp+1)^0,f,c
  7970  000A7C                     
  7971                           ;doprnt.c: 1444: while(--width);
  7972  000A7C  062A               	decf	sprintf@width^0,f,c
  7973  000A7E  A0D8               	btfss	status,0,c
  7974  000A80  062B               	decf	(sprintf@width+1)^0,f,c
  7975  000A82  502A               	movf	sprintf@width^0,w,c
  7976  000A84  102B               	iorwf	(sprintf@width+1)^0,w,c
  7977  000A86  A4D8               	btfss	status,2,c
  7978  000A88  EF48  F005         	goto	u2591
  7979  000A8C  EF4A  F005         	goto	u2590
  7980  000A90                     u2591:
  7981  000A90  EF36  F005         	goto	l3391
  7982  000A94                     u2590:
  7983  000A94  EF7C  F005         	goto	l3411
  7984  000A98                     l3397:
  7985                           
  7986                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  7987  000A98  502A               	movf	sprintf@width^0,w,c
  7988  000A9A  102B               	iorwf	(sprintf@width+1)^0,w,c
  7989  000A9C  B4D8               	btfsc	status,2,c
  7990  000A9E  EF53  F005         	goto	u2601
  7991  000AA2  EF55  F005         	goto	u2600
  7992  000AA6                     u2601:
  7993  000AA6  EF69  F005         	goto	l3405
  7994  000AAA                     u2600:
  7995  000AAA                     l3399:
  7996                           
  7997                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  7998  000AAA  C00F  FFD9         	movff	sprintf@sp,fsr2l
  7999  000AAE  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  8000  000AB2  0E20               	movlw	32
  8001  000AB4  6EDF               	movwf	indf2,c
  8002  000AB6  4A0F               	infsnz	sprintf@sp^0,f,c
  8003  000AB8  2A10               	incf	(sprintf@sp+1)^0,f,c
  8004  000ABA                     
  8005                           ;doprnt.c: 1457: while(--width);
  8006  000ABA  062A               	decf	sprintf@width^0,f,c
  8007  000ABC  A0D8               	btfss	status,0,c
  8008  000ABE  062B               	decf	(sprintf@width+1)^0,f,c
  8009  000AC0  502A               	movf	sprintf@width^0,w,c
  8010  000AC2  102B               	iorwf	(sprintf@width+1)^0,w,c
  8011  000AC4  A4D8               	btfss	status,2,c
  8012  000AC6  EF67  F005         	goto	u2611
  8013  000ACA  EF69  F005         	goto	u2610
  8014  000ACE                     u2611:
  8015  000ACE  EF55  F005         	goto	l3399
  8016  000AD2                     u2610:
  8017  000AD2                     l3405:
  8018                           
  8019                           ;doprnt.c: 1464: if(flag & 0x03)
  8020  000AD2  C029  F01B         	movff	sprintf@flag,??_sprintf
  8021  000AD6  0E03               	movlw	3
  8022  000AD8  161B               	andwf	??_sprintf^0,f,c
  8023  000ADA  B4D8               	btfsc	status,2,c
  8024  000ADC  EF72  F005         	goto	u2621
  8025  000AE0  EF74  F005         	goto	u2620
  8026  000AE4                     u2621:
  8027  000AE4  EF7C  F005         	goto	l3411
  8028  000AE8                     u2620:
  8029  000AE8                     
  8030                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  8031  000AE8  C00F  FFD9         	movff	sprintf@sp,fsr2l
  8032  000AEC  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  8033  000AF0  0E2D               	movlw	45
  8034  000AF2  6EDF               	movwf	indf2,c
  8035  000AF4  4A0F               	infsnz	sprintf@sp^0,f,c
  8036  000AF6  2A10               	incf	(sprintf@sp+1)^0,f,c
  8037  000AF8                     l3411:
  8038                           
  8039                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  8040  000AF8  C02C  F026         	movff	sprintf@c,sprintf@prec
  8041                           
  8042                           ;doprnt.c: 1500: while(prec--) {
  8043  000AFC  EFD9  F005         	goto	l3427
  8044  000B00                     l3413:
  8045                           
  8046                           ;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  8047  000B00  5026               	movf	sprintf@prec^0,w,c
  8048  000B02  0D02               	mullw	2
  8049  000B04  0E01               	movlw	low _dpowers
  8050  000B06  24F3               	addwf	243,w,c
  8051  000B08  6EF6               	movwf	tblptrl,c
  8052  000B0A  0E06               	movlw	high _dpowers
  8053  000B0C  20F4               	addwfc	244,w,c
  8054  000B0E  6EF7               	movwf	tblptrh,c
  8055  000B10                     	if	0	;There are less than 3 active tblptr bytes
  8056  000B10                     	endif
  8057  000B10  0009               	tblrd		*+
  8058  000B12  CFF5 F005          	movff	tablat,___lwdiv@divisor
  8059  000B16  000A               	tblrd		*-
  8060  000B18  CFF5 F006          	movff	tablat,___lwdiv@divisor+1
  8061  000B1C  C027  F003         	movff	sprintf@val,___lwdiv@dividend
  8062  000B20  C028  F004         	movff	sprintf@val+1,___lwdiv@dividend+1
  8063  000B24  EC98  F019         	call	___lwdiv	;wreg free
  8064  000B28  C003  F00A         	movff	?___lwdiv,___lwmod@dividend
  8065  000B2C  C004  F00B         	movff	?___lwdiv+1,___lwmod@dividend+1
  8066  000B30  0E00               	movlw	0
  8067  000B32  6E0D               	movwf	(___lwmod@divisor+1)^0,c
  8068  000B34  0E0A               	movlw	10
  8069  000B36  6E0C               	movwf	___lwmod@divisor^0,c
  8070  000B38  EC09  F01A         	call	___lwmod	;wreg free
  8071  000B3C  500A               	movf	?___lwmod^0,w,c
  8072  000B3E  0F30               	addlw	48
  8073  000B40  6E2C               	movwf	sprintf@c^0,c
  8074                           
  8075                           ;doprnt.c: 1517: break;
  8076  000B42  EFD1  F005         	goto	l3423
  8077  000B46                     l3415:
  8078                           
  8079                           ;doprnt.c: 1525: {;doprnt.c: 1526: unsigned char idx = (val / hexpowers[(unsigned char)p
      +                          rec]) & 0xF;
  8080  000B46  C027  F003         	movff	sprintf@val,___lwdiv@dividend
  8081  000B4A  C028  F004         	movff	sprintf@val+1,___lwdiv@dividend+1
  8082  000B4E  5026               	movf	sprintf@prec^0,w,c
  8083  000B50  0D02               	mullw	2
  8084  000B52  0E0B               	movlw	low _hexpowers
  8085  000B54  24F3               	addwf	243,w,c
  8086  000B56  6EF6               	movwf	tblptrl,c
  8087  000B58  0E06               	movlw	high _hexpowers
  8088  000B5A  20F4               	addwfc	244,w,c
  8089  000B5C  6EF7               	movwf	tblptrh,c
  8090  000B5E                     	if	0	;There are less than 3 active tblptr bytes
  8091  000B5E                     	endif
  8092  000B5E  0009               	tblrd		*+
  8093  000B60  CFF5 F005          	movff	tablat,___lwdiv@divisor
  8094  000B64  000A               	tblrd		*-
  8095  000B66  CFF5 F006          	movff	tablat,___lwdiv@divisor+1
  8096  000B6A  EC98  F019         	call	___lwdiv	;wreg free
  8097  000B6E  5003               	movf	?___lwdiv^0,w,c
  8098  000B70  0B0F               	andlw	15
  8099  000B72  6E21               	movwf	sprintf@idx^0,c
  8100  000B74                     
  8101                           ;doprnt.c: 1530: c = "0123456789ABCDEF"[idx];
  8102  000B74  0E78               	movlw	low STR_10
  8103  000B76  2421               	addwf	sprintf@idx^0,w,c
  8104  000B78  6EF6               	movwf	tblptrl,c
  8105  000B7A  6AF7               	clrf	tblptrh,c
  8106  000B7C  0E06               	movlw	high STR_10
  8107  000B7E  22F7               	addwfc	tblptrh,f,c
  8108  000B80                     	if	0	;There are less than 3 active tblptr bytes
  8109  000B80                     	endif
  8110  000B80  0008               	tblrd		*
  8111  000B82  CFF5 F02C          	movff	tablat,sprintf@c
  8112                           
  8113                           ;doprnt.c: 1534: };doprnt.c: 1536: break;
  8114  000B86  EFD1  F005         	goto	l3423
  8115  000B8A                     l3421:
  8116  000B8A  5029               	movf	sprintf@flag^0,w,c
  8117  000B8C  0B80               	andlw	128
  8118                           
  8119                           ; Switch size 1, requested type "simple"
  8120                           ; Number of cases is 2, Range of values is 0 to 128
  8121                           ; switch strategies available:
  8122                           ; Name         Instructions Cycles
  8123                           ; simple_byte            7     4 (average)
  8124                           ;	Chosen strategy is simple_byte
  8125  000B8E  0A00               	xorlw	0	; case 0
  8126  000B90  B4D8               	btfsc	status,2,c
  8127  000B92  EF80  F005         	goto	l3413
  8128  000B96  0A80               	xorlw	128	; case 128
  8129  000B98  B4D8               	btfsc	status,2,c
  8130  000B9A  EFA3  F005         	goto	l3415
  8131  000B9E  EFD1  F005         	goto	l3423
  8132  000BA2                     l3423:
  8133                           
  8134                           ;doprnt.c: 1550: ((*sp++ = (c)));
  8135  000BA2  C00F  FFD9         	movff	sprintf@sp,fsr2l
  8136  000BA6  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  8137  000BAA  C02C  FFDF         	movff	sprintf@c,indf2
  8138  000BAE  4A0F               	infsnz	sprintf@sp^0,f,c
  8139  000BB0  2A10               	incf	(sprintf@sp+1)^0,f,c
  8140  000BB2                     l3427:
  8141  000BB2  0626               	decf	sprintf@prec^0,f,c
  8142  000BB4  2826               	incf	sprintf@prec^0,w,c
  8143  000BB6  A4D8               	btfss	status,2,c
  8144  000BB8  EFE0  F005         	goto	u2631
  8145  000BBC  EFE2  F005         	goto	u2630
  8146  000BC0                     u2631:
  8147  000BC0  EFC5  F005         	goto	l3421
  8148  000BC4                     u2630:
  8149  000BC4                     l3429:
  8150  000BC4  C011  FFF6         	movff	sprintf@f,tblptrl
  8151  000BC8  C012  FFF7         	movff	sprintf@f+1,tblptrh
  8152  000BCC  4A11               	infsnz	sprintf@f^0,f,c
  8153  000BCE  2A12               	incf	(sprintf@f+1)^0,f,c
  8154  000BD0                     	if	0	;tblptru may be non-zero
  8155  000BD0                     	endif
  8156  000BD0                     	if	0	;tblptru may be non-zero
  8157  000BD0                     	endif
  8158  000BD0  0008               	tblrd		*
  8159  000BD2  CFF5 F02C          	movff	tablat,sprintf@c
  8160  000BD6  502C               	movf	sprintf@c^0,w,c
  8161  000BD8  A4D8               	btfss	status,2,c
  8162  000BDA  EFF1  F005         	goto	u2641
  8163  000BDE  EFF3  F005         	goto	u2640
  8164  000BE2                     u2641:
  8165  000BE2  EF6D  F003         	goto	l3267
  8166  000BE6                     u2640:
  8167  000BE6                     l3431:
  8168                           
  8169                           ;doprnt.c: 1564: *sp = 0;
  8170  000BE6  C00F  FFD9         	movff	sprintf@sp,fsr2l
  8171  000BEA  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  8172  000BEE  0E00               	movlw	0
  8173  000BF0  6EDF               	movwf	indf2,c
  8174  000BF2  0012               	return		;funcret
  8175  000BF4                     __end_of_sprintf:
  8176                           	callstack 0
  8177                           
  8178 ;; *************** function _isdigit *****************
  8179 ;; Defined at:
  8180 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\isdigit.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  c               1    wreg     unsigned char 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  c               1    4[COMRAM] unsigned char 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;		None               void
  8187 ;; Registers used:
  8188 ;;		wreg, status,2, status,0
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8194 ;;      Params:         0       0       0       0       0       0       0
  8195 ;;      Locals:         2       0       0       0       0       0       0
  8196 ;;      Temps:          1       0       0       0       0       0       0
  8197 ;;      Totals:         3       0       0       0       0       0       0
  8198 ;;Total ram usage:        3 bytes
  8199 ;; Hardware stack levels used: 1
  8200 ;; Hardware stack levels required when called: 2
  8201 ;; This function calls:
  8202 ;;		Nothing
  8203 ;; This function is called by:
  8204 ;;		_sprintf
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           	psect	text35
  8209  00363C                     __ptext35:
  8210                           	callstack 0
  8211  00363C                     _isdigit:
  8212                           	callstack 25
  8213                           
  8214                           ;incstack = 0
  8215                           ;isdigit@c stored from wreg
  8216  00363C  6E05               	movwf	isdigit@c^0,c
  8217  00363E  0E00               	movlw	0
  8218  003640  6E04               	movwf	_isdigit$2041^0,c
  8219  003642  0E3A               	movlw	58
  8220  003644  6005               	cpfslt	isdigit@c^0,c
  8221  003646  EF27  F01B         	goto	u2321
  8222  00364A  EF29  F01B         	goto	u2320
  8223  00364E                     u2321:
  8224  00364E  EF33  F01B         	goto	l3195
  8225  003652                     u2320:
  8226  003652  0E2F               	movlw	47
  8227  003654  6405               	cpfsgt	isdigit@c^0,c
  8228  003656  EF2F  F01B         	goto	u2331
  8229  00365A  EF31  F01B         	goto	u2330
  8230  00365E                     u2331:
  8231  00365E  EF33  F01B         	goto	l3195
  8232  003662                     u2330:
  8233  003662  0E01               	movlw	1
  8234  003664  6E04               	movwf	_isdigit$2041^0,c
  8235  003666                     l3195:
  8236  003666  C004  F003         	movff	_isdigit$2041,??_isdigit
  8237  00366A  3003               	rrcf	??_isdigit^0,w,c
  8238  00366C  0012               	return		;funcret
  8239  00366E                     __end_of_isdigit:
  8240                           	callstack 0
  8241                           
  8242 ;; *************** function ___wmul *****************
  8243 ;; Defined at:
  8244 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;  multiplier      2    2[COMRAM] unsigned int 
  8247 ;;  multiplicand    2    4[COMRAM] unsigned int 
  8248 ;; Auto vars:     Size  Location     Type
  8249 ;;  product         2    6[COMRAM] unsigned int 
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  2    2[COMRAM] unsigned int 
  8252 ;; Registers used:
  8253 ;;		wreg, status,2, status,0, prodl, prodh
  8254 ;; Tracked objects:
  8255 ;;		On entry : 0/0
  8256 ;;		On exit  : 0/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8259 ;;      Params:         4       0       0       0       0       0       0
  8260 ;;      Locals:         2       0       0       0       0       0       0
  8261 ;;      Temps:          0       0       0       0       0       0       0
  8262 ;;      Totals:         6       0       0       0       0       0       0
  8263 ;;Total ram usage:        6 bytes
  8264 ;; Hardware stack levels used: 1
  8265 ;; Hardware stack levels required when called: 2
  8266 ;; This function calls:
  8267 ;;		Nothing
  8268 ;; This function is called by:
  8269 ;;		_sprintf
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text36
  8274  003778                     __ptext36:
  8275                           	callstack 0
  8276  003778                     ___wmul:
  8277                           	callstack 25
  8278  003778  5003               	movf	___wmul@multiplier^0,w,c
  8279  00377A  0205               	mulwf	___wmul@multiplicand^0,c
  8280  00377C  CFF3 F007          	movff	prodl,___wmul@product
  8281  003780  CFF4 F008          	movff	prodh,___wmul@product+1
  8282  003784  5003               	movf	___wmul@multiplier^0,w,c
  8283  003786  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  8284  003788  50F3               	movf	243,w,c
  8285  00378A  2608               	addwf	(___wmul@product+1)^0,f,c
  8286  00378C  5004               	movf	(___wmul@multiplier+1)^0,w,c
  8287  00378E  0205               	mulwf	___wmul@multiplicand^0,c
  8288  003790  50F3               	movf	243,w,c
  8289  003792  2608               	addwf	(___wmul@product+1)^0,f,c
  8290  003794  C007  F003         	movff	___wmul@product,?___wmul
  8291  003798  C008  F004         	movff	___wmul@product+1,?___wmul+1
  8292  00379C  0012               	return		;funcret
  8293  00379E                     __end_of___wmul:
  8294                           	callstack 0
  8295                           
  8296 ;; *************** function ___lwmod *****************
  8297 ;; Defined at:
  8298 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;  dividend        2    9[COMRAM] unsigned int 
  8301 ;;  divisor         2   11[COMRAM] unsigned int 
  8302 ;; Auto vars:     Size  Location     Type
  8303 ;;  counter         1   13[COMRAM] unsigned char 
  8304 ;; Return value:  Size  Location     Type
  8305 ;;                  2    9[COMRAM] unsigned int 
  8306 ;; Registers used:
  8307 ;;		wreg, status,2, status,0
  8308 ;; Tracked objects:
  8309 ;;		On entry : 0/0
  8310 ;;		On exit  : 0/0
  8311 ;;		Unchanged: 0/0
  8312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8313 ;;      Params:         4       0       0       0       0       0       0
  8314 ;;      Locals:         1       0       0       0       0       0       0
  8315 ;;      Temps:          0       0       0       0       0       0       0
  8316 ;;      Totals:         5       0       0       0       0       0       0
  8317 ;;Total ram usage:        5 bytes
  8318 ;; Hardware stack levels used: 1
  8319 ;; Hardware stack levels required when called: 2
  8320 ;; This function calls:
  8321 ;;		Nothing
  8322 ;; This function is called by:
  8323 ;;		_sprintf
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           	psect	text37
  8328  003412                     __ptext37:
  8329                           	callstack 0
  8330  003412                     ___lwmod:
  8331                           	callstack 25
  8332  003412  500C               	movf	___lwmod@divisor^0,w,c
  8333  003414  100D               	iorwf	(___lwmod@divisor+1)^0,w,c
  8334  003416  B4D8               	btfsc	status,2,c
  8335  003418  EF10  F01A         	goto	u2371
  8336  00341C  EF12  F01A         	goto	u2370
  8337  003420                     u2371:
  8338  003420  EF36  F01A         	goto	l1154
  8339  003424                     u2370:
  8340  003424  0E01               	movlw	1
  8341  003426  6E0E               	movwf	___lwmod@counter^0,c
  8342  003428  EF1A  F01A         	goto	l3233
  8343  00342C                     l3231:
  8344  00342C  90D8               	bcf	status,0,c
  8345  00342E  360C               	rlcf	___lwmod@divisor^0,f,c
  8346  003430  360D               	rlcf	(___lwmod@divisor+1)^0,f,c
  8347  003432  2A0E               	incf	___lwmod@counter^0,f,c
  8348  003434                     l3233:
  8349  003434  AE0D               	btfss	(___lwmod@divisor+1)^0,7,c
  8350  003436  EF1F  F01A         	goto	u2381
  8351  00343A  EF21  F01A         	goto	u2380
  8352  00343E                     u2381:
  8353  00343E  EF16  F01A         	goto	l3231
  8354  003442                     u2380:
  8355  003442                     l3235:
  8356  003442  500C               	movf	___lwmod@divisor^0,w,c
  8357  003444  5C0A               	subwf	___lwmod@dividend^0,w,c
  8358  003446  500D               	movf	(___lwmod@divisor+1)^0,w,c
  8359  003448  580B               	subwfb	(___lwmod@dividend+1)^0,w,c
  8360  00344A  A0D8               	btfss	status,0,c
  8361  00344C  EF2A  F01A         	goto	u2391
  8362  003450  EF2C  F01A         	goto	u2390
  8363  003454                     u2391:
  8364  003454  EF30  F01A         	goto	l3239
  8365  003458                     u2390:
  8366  003458  500C               	movf	___lwmod@divisor^0,w,c
  8367  00345A  5E0A               	subwf	___lwmod@dividend^0,f,c
  8368  00345C  500D               	movf	(___lwmod@divisor+1)^0,w,c
  8369  00345E  5A0B               	subwfb	(___lwmod@dividend+1)^0,f,c
  8370  003460                     l3239:
  8371  003460  90D8               	bcf	status,0,c
  8372  003462  320D               	rrcf	(___lwmod@divisor+1)^0,f,c
  8373  003464  320C               	rrcf	___lwmod@divisor^0,f,c
  8374  003466  2E0E               	decfsz	___lwmod@counter^0,f,c
  8375  003468  EF21  F01A         	goto	l3235
  8376  00346C                     l1154:
  8377  00346C  C00A  F00A         	movff	___lwmod@dividend,?___lwmod
  8378  003470  C00B  F00B         	movff	___lwmod@dividend+1,?___lwmod+1
  8379  003474  0012               	return		;funcret
  8380  003476                     __end_of___lwmod:
  8381                           	callstack 0
  8382                           
  8383 ;; *************** function ___lwdiv *****************
  8384 ;; Defined at:
  8385 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  8386 ;; Parameters:    Size  Location     Type
  8387 ;;  dividend        2    2[COMRAM] unsigned int 
  8388 ;;  divisor         2    4[COMRAM] unsigned int 
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;  quotient        2    6[COMRAM] unsigned int 
  8391 ;;  counter         1    8[COMRAM] unsigned char 
  8392 ;; Return value:  Size  Location     Type
  8393 ;;                  2    2[COMRAM] unsigned int 
  8394 ;; Registers used:
  8395 ;;		wreg, status,2, status,0
  8396 ;; Tracked objects:
  8397 ;;		On entry : 0/0
  8398 ;;		On exit  : 0/0
  8399 ;;		Unchanged: 0/0
  8400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8401 ;;      Params:         4       0       0       0       0       0       0
  8402 ;;      Locals:         3       0       0       0       0       0       0
  8403 ;;      Temps:          0       0       0       0       0       0       0
  8404 ;;      Totals:         7       0       0       0       0       0       0
  8405 ;;Total ram usage:        7 bytes
  8406 ;; Hardware stack levels used: 1
  8407 ;; Hardware stack levels required when called: 2
  8408 ;; This function calls:
  8409 ;;		Nothing
  8410 ;; This function is called by:
  8411 ;;		_sprintf
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           	psect	text38
  8416  003330                     __ptext38:
  8417                           	callstack 0
  8418  003330                     ___lwdiv:
  8419                           	callstack 25
  8420  003330  0E00               	movlw	0
  8421  003332  6E08               	movwf	(___lwdiv@quotient+1)^0,c
  8422  003334  0E00               	movlw	0
  8423  003336  6E07               	movwf	___lwdiv@quotient^0,c
  8424  003338  5005               	movf	___lwdiv@divisor^0,w,c
  8425  00333A  1006               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8426  00333C  B4D8               	btfsc	status,2,c
  8427  00333E  EFA3  F019         	goto	u2341
  8428  003342  EFA5  F019         	goto	u2340
  8429  003346                     u2341:
  8430  003346  EFCD  F019         	goto	l1144
  8431  00334A                     u2340:
  8432  00334A  0E01               	movlw	1
  8433  00334C  6E09               	movwf	___lwdiv@counter^0,c
  8434  00334E  EFAD  F019         	goto	l3213
  8435  003352                     l3211:
  8436  003352  90D8               	bcf	status,0,c
  8437  003354  3605               	rlcf	___lwdiv@divisor^0,f,c
  8438  003356  3606               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8439  003358  2A09               	incf	___lwdiv@counter^0,f,c
  8440  00335A                     l3213:
  8441  00335A  AE06               	btfss	(___lwdiv@divisor+1)^0,7,c
  8442  00335C  EFB2  F019         	goto	u2351
  8443  003360  EFB4  F019         	goto	u2350
  8444  003364                     u2351:
  8445  003364  EFA9  F019         	goto	l3211
  8446  003368                     u2350:
  8447  003368                     l3215:
  8448  003368  90D8               	bcf	status,0,c
  8449  00336A  3607               	rlcf	___lwdiv@quotient^0,f,c
  8450  00336C  3608               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8451  00336E  5005               	movf	___lwdiv@divisor^0,w,c
  8452  003370  5C03               	subwf	___lwdiv@dividend^0,w,c
  8453  003372  5006               	movf	(___lwdiv@divisor+1)^0,w,c
  8454  003374  5804               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8455  003376  A0D8               	btfss	status,0,c
  8456  003378  EFC0  F019         	goto	u2361
  8457  00337C  EFC2  F019         	goto	u2360
  8458  003380                     u2361:
  8459  003380  EFC7  F019         	goto	l3223
  8460  003384                     u2360:
  8461  003384  5005               	movf	___lwdiv@divisor^0,w,c
  8462  003386  5E03               	subwf	___lwdiv@dividend^0,f,c
  8463  003388  5006               	movf	(___lwdiv@divisor+1)^0,w,c
  8464  00338A  5A04               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8465  00338C  8007               	bsf	___lwdiv@quotient^0,0,c
  8466  00338E                     l3223:
  8467  00338E  90D8               	bcf	status,0,c
  8468  003390  3206               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8469  003392  3205               	rrcf	___lwdiv@divisor^0,f,c
  8470  003394  2E09               	decfsz	___lwdiv@counter^0,f,c
  8471  003396  EFB4  F019         	goto	l3215
  8472  00339A                     l1144:
  8473  00339A  C007  F003         	movff	___lwdiv@quotient,?___lwdiv
  8474  00339E  C008  F004         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8475  0033A2  0012               	return		;funcret
  8476  0033A4                     __end_of___lwdiv:
  8477                           	callstack 0
  8478                           
  8479 ;; *************** function ___fltol *****************
  8480 ;; Defined at:
  8481 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\fltol.c"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;  f1              4    2[COMRAM] unsigned int 
  8484 ;; Auto vars:     Size  Location     Type
  8485 ;;  exp1            1   11[COMRAM] unsigned char 
  8486 ;;  sign1           1   10[COMRAM] unsigned char 
  8487 ;; Return value:  Size  Location     Type
  8488 ;;                  4    2[COMRAM] long 
  8489 ;; Registers used:
  8490 ;;		wreg, status,2, status,0
  8491 ;; Tracked objects:
  8492 ;;		On entry : 0/0
  8493 ;;		On exit  : 0/0
  8494 ;;		Unchanged: 0/0
  8495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8496 ;;      Params:         4       0       0       0       0       0       0
  8497 ;;      Locals:         2       0       0       0       0       0       0
  8498 ;;      Temps:          4       0       0       0       0       0       0
  8499 ;;      Totals:        10       0       0       0       0       0       0
  8500 ;;Total ram usage:       10 bytes
  8501 ;; Hardware stack levels used: 1
  8502 ;; Hardware stack levels required when called: 2
  8503 ;; This function calls:
  8504 ;;		Nothing
  8505 ;; This function is called by:
  8506 ;;		_Min_Lv1_Incr
  8507 ;;		_Min_Lv2_Incr
  8508 ;;		_Read_Level
  8509 ;;		_Set_Display_Message
  8510 ;; This function uses a non-reentrant model
  8511 ;;
  8512                           
  8513                           	psect	text39
  8514  0027E4                     __ptext39:
  8515                           	callstack 0
  8516  0027E4                     ___fltol:
  8517                           	callstack 26
  8518  0027E4  3405               	rlcf	(___fltol@f1+2)^0,w,c
  8519  0027E6  3406               	rlcf	(___fltol@f1+3)^0,w,c
  8520  0027E8  6E0C               	movwf	___fltol@exp1^0,c
  8521  0027EA  500C               	movf	___fltol@exp1^0,w,c
  8522  0027EC  A4D8               	btfss	status,2,c
  8523  0027EE  EFFB  F013         	goto	u2661
  8524  0027F2  EFFD  F013         	goto	u2660
  8525  0027F6                     u2661:
  8526  0027F6  EF07  F014         	goto	l3447
  8527  0027FA                     u2660:
  8528  0027FA                     l3443:
  8529  0027FA  0E00               	movlw	0
  8530  0027FC  6E03               	movwf	?___fltol^0,c
  8531  0027FE  0E00               	movlw	0
  8532  002800  6E04               	movwf	(?___fltol+1)^0,c
  8533  002802  0E00               	movlw	0
  8534  002804  6E05               	movwf	(?___fltol+2)^0,c
  8535  002806  0E00               	movlw	0
  8536  002808  6E06               	movwf	(?___fltol+3)^0,c
  8537  00280A  EF74  F014         	goto	l954
  8538  00280E                     l3447:
  8539  00280E  C003  F007         	movff	___fltol@f1,??___fltol
  8540  002812  C004  F008         	movff	___fltol@f1+1,??___fltol+1
  8541  002816  C005  F009         	movff	___fltol@f1+2,??___fltol+2
  8542  00281A  C006  F00A         	movff	___fltol@f1+3,??___fltol+3
  8543  00281E  0E20               	movlw	32
  8544  002820  EF17  F014         	goto	u2670
  8545  002824                     u2675:
  8546  002824  90D8               	bcf	status,0,c
  8547  002826  320A               	rrcf	(??___fltol+3)^0,f,c
  8548  002828  3209               	rrcf	(??___fltol+2)^0,f,c
  8549  00282A  3208               	rrcf	(??___fltol+1)^0,f,c
  8550  00282C  3207               	rrcf	??___fltol^0,f,c
  8551  00282E                     u2670:
  8552  00282E  2EE8               	decfsz	wreg,f,c
  8553  002830  EF12  F014         	goto	u2675
  8554  002834  5007               	movf	??___fltol^0,w,c
  8555  002836  6E0B               	movwf	___fltol@sign1^0,c
  8556  002838  8E05               	bsf	(___fltol@f1+2)^0,7,c
  8557  00283A  0EFF               	movlw	255
  8558  00283C  1603               	andwf	___fltol@f1^0,f,c
  8559  00283E  0EFF               	movlw	255
  8560  002840  1604               	andwf	(___fltol@f1+1)^0,f,c
  8561  002842  0EFF               	movlw	255
  8562  002844  1605               	andwf	(___fltol@f1+2)^0,f,c
  8563  002846  0E00               	movlw	0
  8564  002848  1606               	andwf	(___fltol@f1+3)^0,f,c
  8565  00284A  0E96               	movlw	150
  8566  00284C  5E0C               	subwf	___fltol@exp1^0,f,c
  8567  00284E  BE0C               	btfsc	___fltol@exp1^0,7,c
  8568  002850  EF2E  F014         	goto	u2680
  8569  002854  EF2C  F014         	goto	u2681
  8570  002858                     u2681:
  8571  002858  EF44  F014         	goto	l3467
  8572  00285C                     u2680:
  8573  00285C  500C               	movf	___fltol@exp1^0,w,c
  8574  00285E  0A80               	xorlw	128
  8575  002860  0F97               	addlw	151
  8576  002862  B0D8               	btfsc	status,0,c
  8577  002864  EF36  F014         	goto	u2691
  8578  002868  EF38  F014         	goto	u2690
  8579  00286C                     u2691:
  8580  00286C  EF3A  F014         	goto	l3463
  8581  002870                     u2690:
  8582  002870  EFFD  F013         	goto	l3443
  8583  002874                     l3463:
  8584  002874  90D8               	bcf	status,0,c
  8585  002876  3206               	rrcf	(___fltol@f1+3)^0,f,c
  8586  002878  3205               	rrcf	(___fltol@f1+2)^0,f,c
  8587  00287A  3204               	rrcf	(___fltol@f1+1)^0,f,c
  8588  00287C  3203               	rrcf	___fltol@f1^0,f,c
  8589  00287E  3E0C               	incfsz	___fltol@exp1^0,f,c
  8590  002880  EF3A  F014         	goto	l3463
  8591  002884  EF5C  F014         	goto	l3477
  8592  002888                     l3467:
  8593  002888  0E1F               	movlw	31
  8594  00288A  640C               	cpfsgt	___fltol@exp1^0,c
  8595  00288C  EF4A  F014         	goto	u2701
  8596  002890  EF4C  F014         	goto	u2700
  8597  002894                     u2701:
  8598  002894  EF54  F014         	goto	l3475
  8599  002898                     u2700:
  8600  002898  EFFD  F013         	goto	l3443
  8601  00289C                     l3473:
  8602  00289C  90D8               	bcf	status,0,c
  8603  00289E  3603               	rlcf	___fltol@f1^0,f,c
  8604  0028A0  3604               	rlcf	(___fltol@f1+1)^0,f,c
  8605  0028A2  3605               	rlcf	(___fltol@f1+2)^0,f,c
  8606  0028A4  3606               	rlcf	(___fltol@f1+3)^0,f,c
  8607  0028A6  060C               	decf	___fltol@exp1^0,f,c
  8608  0028A8                     l3475:
  8609  0028A8  500C               	movf	___fltol@exp1^0,w,c
  8610  0028AA  A4D8               	btfss	status,2,c
  8611  0028AC  EF5A  F014         	goto	u2711
  8612  0028B0  EF5C  F014         	goto	u2710
  8613  0028B4                     u2711:
  8614  0028B4  EF4E  F014         	goto	l3473
  8615  0028B8                     u2710:
  8616  0028B8                     l3477:
  8617  0028B8  500B               	movf	___fltol@sign1^0,w,c
  8618  0028BA  B4D8               	btfsc	status,2,c
  8619  0028BC  EF62  F014         	goto	u2721
  8620  0028C0  EF64  F014         	goto	u2720
  8621  0028C4                     u2721:
  8622  0028C4  EF6C  F014         	goto	l3481
  8623  0028C8                     u2720:
  8624  0028C8  1E06               	comf	(___fltol@f1+3)^0,f,c
  8625  0028CA  1E05               	comf	(___fltol@f1+2)^0,f,c
  8626  0028CC  1E04               	comf	(___fltol@f1+1)^0,f,c
  8627  0028CE  6C03               	negf	___fltol@f1^0,c
  8628  0028D0  0E00               	movlw	0
  8629  0028D2  2204               	addwfc	(___fltol@f1+1)^0,f,c
  8630  0028D4  2205               	addwfc	(___fltol@f1+2)^0,f,c
  8631  0028D6  2206               	addwfc	(___fltol@f1+3)^0,f,c
  8632  0028D8                     l3481:
  8633  0028D8  C003  F003         	movff	___fltol@f1,?___fltol
  8634  0028DC  C004  F004         	movff	___fltol@f1+1,?___fltol+1
  8635  0028E0  C005  F005         	movff	___fltol@f1+2,?___fltol+2
  8636  0028E4  C006  F006         	movff	___fltol@f1+3,?___fltol+3
  8637  0028E8                     l954:
  8638  0028E8  0012               	return		;funcret
  8639  0028EA                     __end_of___fltol:
  8640                           	callstack 0
  8641                           
  8642 ;; *************** function _CheckBit *****************
  8643 ;; Defined at:
  8644 ;;		line 18 in file "regoperations.c"
  8645 ;; Parameters:    Size  Location     Type
  8646 ;;  port            2    2[COMRAM] unsigned int 
  8647 ;;  pin             2    4[COMRAM] unsigned int 
  8648 ;; Auto vars:     Size  Location     Type
  8649 ;;		None
  8650 ;; Return value:  Size  Location     Type
  8651 ;;                  2    2[COMRAM] int 
  8652 ;; Registers used:
  8653 ;;		wreg, status,2, status,0
  8654 ;; Tracked objects:
  8655 ;;		On entry : 0/0
  8656 ;;		On exit  : 0/0
  8657 ;;		Unchanged: 0/0
  8658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8659 ;;      Params:         4       0       0       0       0       0       0
  8660 ;;      Locals:         0       0       0       0       0       0       0
  8661 ;;      Temps:          3       0       0       0       0       0       0
  8662 ;;      Totals:         7       0       0       0       0       0       0
  8663 ;;Total ram usage:        7 bytes
  8664 ;; Hardware stack levels used: 1
  8665 ;; Hardware stack levels required when called: 2
  8666 ;; This function calls:
  8667 ;;		Nothing
  8668 ;; This function is called by:
  8669 ;;		_Sync_Registers
  8670 ;;		_Debounce
  8671 ;; This function uses a non-reentrant model
  8672 ;;
  8673                           
  8674                           	psect	text40
  8675  00372A                     __ptext40:
  8676                           	callstack 0
  8677  00372A                     _CheckBit:
  8678                           	callstack 26
  8679  00372A                     
  8680                           ;regoperations.c: 20: return ((port >> pin) & 1U);
  8681  00372A  C005  F007         	movff	CheckBit@pin,??_CheckBit
  8682  00372E  C003  F008         	movff	CheckBit@port,??_CheckBit+1
  8683  003732  C004  F009         	movff	CheckBit@port+1,??_CheckBit+2
  8684  003736  2A07               	incf	??_CheckBit^0,f,c
  8685  003738  EFA1  F01B         	goto	u3294
  8686  00373C                     u3295:
  8687  00373C  90D8               	bcf	status,0,c
  8688  00373E  3209               	rrcf	(??_CheckBit+2)^0,f,c
  8689  003740  3208               	rrcf	(??_CheckBit+1)^0,f,c
  8690  003742                     u3294:
  8691  003742  2E07               	decfsz	??_CheckBit^0,f,c
  8692  003744  EF9E  F01B         	goto	u3295
  8693  003748  0E01               	movlw	1
  8694  00374A  1408               	andwf	(??_CheckBit+1)^0,w,c
  8695  00374C  6E03               	movwf	?_CheckBit^0,c
  8696  00374E  6A04               	clrf	(?_CheckBit+1)^0,c
  8697  003750  0012               	return		;funcret
  8698  003752                     __end_of_CheckBit:
  8699                           	callstack 0
  8700                           
  8701 ;; *************** function _Lcd_Init *****************
  8702 ;; Defined at:
  8703 ;;		line 54 in file "flexlcd.h"
  8704 ;; Parameters:    Size  Location     Type
  8705 ;;		None
  8706 ;; Auto vars:     Size  Location     Type
  8707 ;;  data            1    6[COMRAM] unsigned char 
  8708 ;; Return value:  Size  Location     Type
  8709 ;;                  1    wreg      void 
  8710 ;; Registers used:
  8711 ;;		wreg, status,2, status,0, cstack
  8712 ;; Tracked objects:
  8713 ;;		On entry : 0/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8717 ;;      Params:         0       0       0       0       0       0       0
  8718 ;;      Locals:         1       0       0       0       0       0       0
  8719 ;;      Temps:          1       0       0       0       0       0       0
  8720 ;;      Totals:         2       0       0       0       0       0       0
  8721 ;;Total ram usage:        2 bytes
  8722 ;; Hardware stack levels used: 1
  8723 ;; Hardware stack levels required when called: 3
  8724 ;; This function calls:
  8725 ;;		_Lcd_Cmd
  8726 ;; This function is called by:
  8727 ;;		_main
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           	psect	text41
  8732  0025BC                     __ptext41:
  8733                           	callstack 0
  8734  0025BC                     _Lcd_Init:
  8735                           	callstack 27
  8736  0025BC                     
  8737                           ;flexlcd.h: 55: unsigned char data;;flexlcd.h: 56: TRISDbits.TRISD7 = 0;
  8738  0025BC  9E95               	bcf	149,7,c	;volatile
  8739                           
  8740                           ;flexlcd.h: 57: TRISDbits.TRISD6 = 0;
  8741  0025BE  9C95               	bcf	149,6,c	;volatile
  8742                           
  8743                           ;flexlcd.h: 58: TRISDbits.TRISD5 = 0;
  8744  0025C0  9A95               	bcf	149,5,c	;volatile
  8745                           
  8746                           ;flexlcd.h: 59: TRISDbits.TRISD4 = 0;
  8747  0025C2  9895               	bcf	149,4,c	;volatile
  8748                           
  8749                           ;flexlcd.h: 60: TRISEbits.TRISE2 = 0;
  8750  0025C4  9496               	bcf	150,2,c	;volatile
  8751                           
  8752                           ;flexlcd.h: 61: TRISEbits.TRISE1 = 0;
  8753  0025C6  9296               	bcf	150,1,c	;volatile
  8754                           
  8755                           ;flexlcd.h: 62: PORTDbits.RD7 = 0;
  8756  0025C8  9E83               	bcf	131,7,c	;volatile
  8757                           
  8758                           ;flexlcd.h: 63: PORTDbits.RD6 = 0;
  8759  0025CA  9C83               	bcf	131,6,c	;volatile
  8760                           
  8761                           ;flexlcd.h: 64: PORTDbits.RD5 = 0;
  8762  0025CC  9A83               	bcf	131,5,c	;volatile
  8763                           
  8764                           ;flexlcd.h: 65: PORTDbits.RD4 = 0;
  8765  0025CE  9883               	bcf	131,4,c	;volatile
  8766                           
  8767                           ;flexlcd.h: 66: PORTEbits.RE1 = 0;
  8768  0025D0  9284               	bcf	132,1,c	;volatile
  8769                           
  8770                           ;flexlcd.h: 67: PORTEbits.RE2 = 0;
  8771  0025D2  9484               	bcf	132,2,c	;volatile
  8772  0025D4                     
  8773                           ;flexlcd.h: 68: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8774  0025D4  0E12               	movlw	18
  8775  0025D6  6E06               	movwf	??_Lcd_Init^0,c
  8776  0025D8  0EDA               	movlw	218
  8777  0025DA                     u4577:
  8778  0025DA  2EE8               	decfsz	wreg,f,c
  8779  0025DC  D7FE               	bra	u4577
  8780  0025DE  2E06               	decfsz	??_Lcd_Init^0,f,c
  8781  0025E0  D7FC               	bra	u4577
  8782  0025E2  D000               	nop2	
  8783                           
  8784                           ;flexlcd.h: 69: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8785  0025E4  0E12               	movlw	18
  8786  0025E6  6E06               	movwf	??_Lcd_Init^0,c
  8787  0025E8  0EDA               	movlw	218
  8788  0025EA                     u4587:
  8789  0025EA  2EE8               	decfsz	wreg,f,c
  8790  0025EC  D7FE               	bra	u4587
  8791  0025EE  2E06               	decfsz	??_Lcd_Init^0,f,c
  8792  0025F0  D7FC               	bra	u4587
  8793  0025F2  D000               	nop2	
  8794                           
  8795                           ;flexlcd.h: 70: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8796  0025F4  0E12               	movlw	18
  8797  0025F6  6E06               	movwf	??_Lcd_Init^0,c
  8798  0025F8  0EDA               	movlw	218
  8799  0025FA                     u4597:
  8800  0025FA  2EE8               	decfsz	wreg,f,c
  8801  0025FC  D7FE               	bra	u4597
  8802  0025FE  2E06               	decfsz	??_Lcd_Init^0,f,c
  8803  002600  D7FC               	bra	u4597
  8804  002602  D000               	nop2	
  8805                           
  8806                           ;flexlcd.h: 71: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8807  002604  0E12               	movlw	18
  8808  002606  6E06               	movwf	??_Lcd_Init^0,c
  8809  002608  0EDA               	movlw	218
  8810  00260A                     u4607:
  8811  00260A  2EE8               	decfsz	wreg,f,c
  8812  00260C  D7FE               	bra	u4607
  8813  00260E  2E06               	decfsz	??_Lcd_Init^0,f,c
  8814  002610  D7FC               	bra	u4607
  8815  002612  D000               	nop2	
  8816                           
  8817                           ;flexlcd.h: 72: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8818  002614  0E12               	movlw	18
  8819  002616  6E06               	movwf	??_Lcd_Init^0,c
  8820  002618  0EDA               	movlw	218
  8821  00261A                     u4617:
  8822  00261A  2EE8               	decfsz	wreg,f,c
  8823  00261C  D7FE               	bra	u4617
  8824  00261E  2E06               	decfsz	??_Lcd_Init^0,f,c
  8825  002620  D7FC               	bra	u4617
  8826  002622  D000               	nop2	
  8827                           
  8828                           ;flexlcd.h: 73: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8829  002624  0E12               	movlw	18
  8830  002626  6E06               	movwf	??_Lcd_Init^0,c
  8831  002628  0EDA               	movlw	218
  8832  00262A                     u4627:
  8833  00262A  2EE8               	decfsz	wreg,f,c
  8834  00262C  D7FE               	bra	u4627
  8835  00262E  2E06               	decfsz	??_Lcd_Init^0,f,c
  8836  002630  D7FC               	bra	u4627
  8837  002632  D000               	nop2	
  8838  002634                     
  8839                           ;flexlcd.h: 74: for(data = 1; data < 4; data ++)
  8840  002634  0E01               	movlw	1
  8841  002636  6E07               	movwf	Lcd_Init@data^0,c
  8842  002638                     l117:
  8843                           
  8844                           ;flexlcd.h: 75: {;flexlcd.h: 76: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 1; PORTEbits.RE1 = 0;
  8845  002638  9E83               	bcf	131,7,c	;volatile
  8846  00263A  9C83               	bcf	131,6,c	;volatile
  8847  00263C  8A83               	bsf	131,5,c	;volatile
  8848  00263E  8883               	bsf	131,4,c	;volatile
  8849  002640  9284               	bcf	132,1,c	;volatile
  8850                           
  8851                           ;flexlcd.h: 77: PORTEbits.RE2 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 =
      +                           1; PORTDbits.RD4 = 1;
  8852  002642  9484               	bcf	132,2,c	;volatile
  8853  002644  9E83               	bcf	131,7,c	;volatile
  8854  002646  9C83               	bcf	131,6,c	;volatile
  8855  002648  8A83               	bsf	131,5,c	;volatile
  8856  00264A  8883               	bsf	131,4,c	;volatile
  8857                           
  8858                           ;flexlcd.h: 78: PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  8859  00264C  8284               	bsf	132,1,c	;volatile
  8860  00264E  9484               	bcf	132,2,c	;volatile
  8861  002650                     
  8862                           ;flexlcd.h: 79: _delay((unsigned long)((5)*(10000000/4000000.0)));
  8863  002650  0E04               	movlw	4
  8864  002652                     u4637:
  8865  002652  2EE8               	decfsz	wreg,f,c
  8866  002654  D7FE               	bra	u4637
  8867  002656                     
  8868                           ;flexlcd.h: 80: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           1; PORTEbits.RE1 = 0;
  8869  002656  9E83               	bcf	131,7,c	;volatile
  8870  002658  9C83               	bcf	131,6,c	;volatile
  8871  00265A  8A83               	bsf	131,5,c	;volatile
  8872  00265C  8883               	bsf	131,4,c	;volatile
  8873  00265E  9284               	bcf	132,1,c	;volatile
  8874  002660                     
  8875                           ;flexlcd.h: 81: PORTEbits.RE2 = 0;
  8876  002660  9484               	bcf	132,2,c	;volatile
  8877                           
  8878                           ;flexlcd.h: 82: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8879  002662  0E12               	movlw	18
  8880  002664  6E06               	movwf	??_Lcd_Init^0,c
  8881  002666  0EDA               	movlw	218
  8882  002668                     u4647:
  8883  002668  2EE8               	decfsz	wreg,f,c
  8884  00266A  D7FE               	bra	u4647
  8885  00266C  2E06               	decfsz	??_Lcd_Init^0,f,c
  8886  00266E  D7FC               	bra	u4647
  8887  002670  D000               	nop2	
  8888  002672  2A07               	incf	Lcd_Init@data^0,f,c
  8889  002674  0E03               	movlw	3
  8890  002676  6407               	cpfsgt	Lcd_Init@data^0,c
  8891  002678  EF40  F013         	goto	u4191
  8892  00267C  EF42  F013         	goto	u4190
  8893  002680                     u4191:
  8894  002680  EF1C  F013         	goto	l117
  8895  002684                     u4190:
  8896  002684                     
  8897                           ;flexlcd.h: 83: };flexlcd.h: 84: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  8898  002684  9E83               	bcf	131,7,c	;volatile
  8899  002686  9C83               	bcf	131,6,c	;volatile
  8900  002688  8A83               	bsf	131,5,c	;volatile
  8901  00268A  9883               	bcf	131,4,c	;volatile
  8902  00268C  9284               	bcf	132,1,c	;volatile
  8903  00268E  9484               	bcf	132,2,c	;volatile
  8904                           
  8905                           ;flexlcd.h: 85: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  8906  002690  9E83               	bcf	131,7,c	;volatile
  8907  002692  9C83               	bcf	131,6,c	;volatile
  8908  002694  8A83               	bsf	131,5,c	;volatile
  8909  002696  9883               	bcf	131,4,c	;volatile
  8910  002698  8284               	bsf	132,1,c	;volatile
  8911  00269A  9484               	bcf	132,2,c	;volatile
  8912  00269C                     
  8913                           ;flexlcd.h: 86: _delay((unsigned long)((5)*(10000000/4000000.0)));
  8914  00269C  0E04               	movlw	4
  8915  00269E                     u4657:
  8916  00269E  2EE8               	decfsz	wreg,f,c
  8917  0026A0  D7FE               	bra	u4657
  8918  0026A2                     
  8919                           ;flexlcd.h: 87: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  8920  0026A2  9E83               	bcf	131,7,c	;volatile
  8921  0026A4  9C83               	bcf	131,6,c	;volatile
  8922  0026A6  8A83               	bsf	131,5,c	;volatile
  8923  0026A8  9883               	bcf	131,4,c	;volatile
  8924  0026AA  9284               	bcf	132,1,c	;volatile
  8925  0026AC  9484               	bcf	132,2,c	;volatile
  8926                           
  8927                           ;flexlcd.h: 88: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  8928  0026AE  0E12               	movlw	18
  8929  0026B0  6E06               	movwf	??_Lcd_Init^0,c
  8930  0026B2  0EDA               	movlw	218
  8931  0026B4                     u4667:
  8932  0026B4  2EE8               	decfsz	wreg,f,c
  8933  0026B6  D7FE               	bra	u4667
  8934  0026B8  2E06               	decfsz	??_Lcd_Init^0,f,c
  8935  0026BA  D7FC               	bra	u4667
  8936  0026BC  D000               	nop2	
  8937  0026BE  0E28               	movlw	40
  8938  0026C0  ECB9  F011         	call	_Lcd_Cmd
  8939  0026C4  0E10               	movlw	16
  8940  0026C6  ECB9  F011         	call	_Lcd_Cmd
  8941  0026CA  0E01               	movlw	1
  8942  0026CC  ECB9  F011         	call	_Lcd_Cmd
  8943  0026D0  0E0F               	movlw	15
  8944  0026D2  ECB9  F011         	call	_Lcd_Cmd
  8945  0026D6  0012               	return		;funcret
  8946  0026D8                     __end_of_Lcd_Init:
  8947                           	callstack 0
  8948                           
  8949 ;; *************** function _Lcd_Cmd *****************
  8950 ;; Defined at:
  8951 ;;		line 131 in file "flexlcd.h"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;  data            1    wreg     unsigned char 
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;  data            1    4[COMRAM] unsigned char 
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      void 
  8958 ;; Registers used:
  8959 ;;		wreg, status,2, status,0
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8965 ;;      Params:         0       0       0       0       0       0       0
  8966 ;;      Locals:         1       0       0       0       0       0       0
  8967 ;;      Temps:          2       0       0       0       0       0       0
  8968 ;;      Totals:         3       0       0       0       0       0       0
  8969 ;;Total ram usage:        3 bytes
  8970 ;; Hardware stack levels used: 1
  8971 ;; Hardware stack levels required when called: 2
  8972 ;; This function calls:
  8973 ;;		Nothing
  8974 ;; This function is called by:
  8975 ;;		_Lcd_Init
  8976 ;;		_Lcd_Out
  8977 ;;		_main
  8978 ;; This function uses a non-reentrant model
  8979 ;;
  8980                           
  8981                           	psect	text42
  8982  002372                     __ptext42:
  8983                           	callstack 0
  8984  002372                     _Lcd_Cmd:
  8985                           	callstack 25
  8986                           
  8987                           ;incstack = 0
  8988                           ;Lcd_Cmd@data stored from wreg
  8989  002372  6E05               	movwf	Lcd_Cmd@data^0,c
  8990  002374                     
  8991                           ;flexlcd.h: 132: PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  8992  002374  9284               	bcf	132,1,c	;volatile
  8993  002376  9484               	bcf	132,2,c	;volatile
  8994  002378                     
  8995                           ;flexlcd.h: 133: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  8996  002378  6A03               	clrf	??_Lcd_Cmd^0,c
  8997  00237A  AE05               	btfss	Lcd_Cmd@data^0,7,c
  8998  00237C  D001               	bra	u2265
  8999  00237E  2A03               	incf	??_Lcd_Cmd^0,f,c
  9000  002380                     u2265:
  9001  002380  0E01               	movlw	1
  9002  002382  1603               	andwf	??_Lcd_Cmd^0,f,c
  9003  002384  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9004  002386  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9005  002388  5083               	movf	131,w,c	;volatile
  9006  00238A  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9007  00238C  0B7F               	andlw	-129
  9008  00238E  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9009  002390  6E83               	movwf	131,c	;volatile
  9010  002392  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  9011  002396  0E06               	movlw	6
  9012  002398  6E04               	movwf	(??_Lcd_Cmd+1)^0,c
  9013  00239A                     u2275:
  9014  00239A  90D8               	bcf	status,0,c
  9015  00239C  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9016  00239E  2E04               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  9017  0023A0  EFCD  F011         	goto	u2275
  9018  0023A4  0E01               	movlw	1
  9019  0023A6  1603               	andwf	??_Lcd_Cmd^0,f,c
  9020  0023A8  3A03               	swapf	??_Lcd_Cmd^0,f,c
  9021  0023AA  4603               	rlncf	??_Lcd_Cmd^0,f,c
  9022  0023AC  4603               	rlncf	??_Lcd_Cmd^0,f,c
  9023  0023AE  5083               	movf	131,w,c	;volatile
  9024  0023B0  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9025  0023B2  0BBF               	andlw	-65
  9026  0023B4  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9027  0023B6  6E83               	movwf	131,c	;volatile
  9028                           
  9029                           ;flexlcd.h: 134: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  9030  0023B8  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  9031  0023BC  0E05               	movlw	5
  9032  0023BE  6E04               	movwf	(??_Lcd_Cmd+1)^0,c
  9033  0023C0                     u2285:
  9034  0023C0  90D8               	bcf	status,0,c
  9035  0023C2  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9036  0023C4  2E04               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  9037  0023C6  EFE0  F011         	goto	u2285
  9038  0023CA  0E01               	movlw	1
  9039  0023CC  1603               	andwf	??_Lcd_Cmd^0,f,c
  9040  0023CE  3A03               	swapf	??_Lcd_Cmd^0,f,c
  9041  0023D0  4603               	rlncf	??_Lcd_Cmd^0,f,c
  9042  0023D2  5083               	movf	131,w,c	;volatile
  9043  0023D4  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9044  0023D6  0BDF               	andlw	-33
  9045  0023D8  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9046  0023DA  6E83               	movwf	131,c	;volatile
  9047  0023DC  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  9048  0023E0  3A03               	swapf	??_Lcd_Cmd^0,f,c
  9049  0023E2  0E0F               	movlw	15
  9050  0023E4  1603               	andwf	??_Lcd_Cmd^0,f,c
  9051  0023E6  0E01               	movlw	1
  9052  0023E8  1603               	andwf	??_Lcd_Cmd^0,f,c
  9053  0023EA  3A03               	swapf	??_Lcd_Cmd^0,f,c
  9054  0023EC  5083               	movf	131,w,c	;volatile
  9055  0023EE  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9056  0023F0  0BEF               	andlw	-17
  9057  0023F2  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9058  0023F4  6E83               	movwf	131,c	;volatile
  9059  0023F6                     
  9060                           ;flexlcd.h: 135: _delay(10);
  9061  0023F6  0E03               	movlw	3
  9062  0023F8                     u4677:
  9063  0023F8  2EE8               	decfsz	wreg,f,c
  9064  0023FA  D7FE               	bra	u4677
  9065  0023FC  F000               	nop	
  9066  0023FE                     
  9067                           ;flexlcd.h: 136: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  9068  0023FE  8284               	bsf	132,1,c	;volatile
  9069  002400  0E04               	movlw	4
  9070  002402                     u4687:
  9071  002402  2EE8               	decfsz	wreg,f,c
  9072  002404  D7FE               	bra	u4687
  9073  002406  9284               	bcf	132,1,c	;volatile
  9074                           
  9075                           ;flexlcd.h: 137: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  9076  002408  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  9077  00240C  90D8               	bcf	status,0,c
  9078  00240E  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9079  002410  90D8               	bcf	status,0,c
  9080  002412  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9081  002414  90D8               	bcf	status,0,c
  9082  002416  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9083  002418  0E01               	movlw	1
  9084  00241A  1603               	andwf	??_Lcd_Cmd^0,f,c
  9085  00241C  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9086  00241E  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9087  002420  5083               	movf	131,w,c	;volatile
  9088  002422  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9089  002424  0B7F               	andlw	-129
  9090  002426  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9091  002428  6E83               	movwf	131,c	;volatile
  9092  00242A  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  9093  00242E  90D8               	bcf	status,0,c
  9094  002430  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9095  002432  90D8               	bcf	status,0,c
  9096  002434  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9097  002436  0E01               	movlw	1
  9098  002438  1603               	andwf	??_Lcd_Cmd^0,f,c
  9099  00243A  3A03               	swapf	??_Lcd_Cmd^0,f,c
  9100  00243C  4603               	rlncf	??_Lcd_Cmd^0,f,c
  9101  00243E  4603               	rlncf	??_Lcd_Cmd^0,f,c
  9102  002440  5083               	movf	131,w,c	;volatile
  9103  002442  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9104  002444  0BBF               	andlw	-65
  9105  002446  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9106  002448  6E83               	movwf	131,c	;volatile
  9107                           
  9108                           ;flexlcd.h: 138: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  9109  00244A  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  9110  00244E  90D8               	bcf	status,0,c
  9111  002450  3203               	rrcf	??_Lcd_Cmd^0,f,c
  9112  002452  0E01               	movlw	1
  9113  002454  1603               	andwf	??_Lcd_Cmd^0,f,c
  9114  002456  3A03               	swapf	??_Lcd_Cmd^0,f,c
  9115  002458  4603               	rlncf	??_Lcd_Cmd^0,f,c
  9116  00245A  5083               	movf	131,w,c	;volatile
  9117  00245C  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9118  00245E  0BDF               	andlw	-33
  9119  002460  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9120  002462  6E83               	movwf	131,c	;volatile
  9121  002464  C005  F003         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  9122  002468  0E01               	movlw	1
  9123  00246A  1603               	andwf	??_Lcd_Cmd^0,f,c
  9124  00246C  3A03               	swapf	??_Lcd_Cmd^0,f,c
  9125  00246E  5083               	movf	131,w,c	;volatile
  9126  002470  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9127  002472  0BEF               	andlw	-17
  9128  002474  1803               	xorwf	??_Lcd_Cmd^0,w,c
  9129  002476  6E83               	movwf	131,c	;volatile
  9130  002478                     
  9131                           ;flexlcd.h: 139: _delay(10);
  9132  002478  0E03               	movlw	3
  9133  00247A                     u4697:
  9134  00247A  2EE8               	decfsz	wreg,f,c
  9135  00247C  D7FE               	bra	u4697
  9136  00247E  F000               	nop	
  9137  002480                     
  9138                           ;flexlcd.h: 140: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  9139  002480  8284               	bsf	132,1,c	;volatile
  9140  002482  0E04               	movlw	4
  9141  002484                     u4707:
  9142  002484  2EE8               	decfsz	wreg,f,c
  9143  002486  D7FE               	bra	u4707
  9144  002488  9284               	bcf	132,1,c	;volatile
  9145  00248A                     
  9146                           ;flexlcd.h: 141: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  9147  00248A  0E12               	movlw	18
  9148  00248C  6E03               	movwf	??_Lcd_Cmd^0,c
  9149  00248E  0EDA               	movlw	218
  9150  002490                     u4717:
  9151  002490  2EE8               	decfsz	wreg,f,c
  9152  002492  D7FE               	bra	u4717
  9153  002494  2E03               	decfsz	??_Lcd_Cmd^0,f,c
  9154  002496  D7FC               	bra	u4717
  9155  002498  D000               	nop2	
  9156  00249A  0012               	return		;funcret
  9157  00249C                     __end_of_Lcd_Cmd:
  9158                           	callstack 0
  9159                           
  9160 ;; *************** function _Initialize_Tanks *****************
  9161 ;; Defined at:
  9162 ;;		line 362 in file "main.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;		None
  9167 ;; Return value:  Size  Location     Type
  9168 ;;                  1    wreg      void 
  9169 ;; Registers used:
  9170 ;;		wreg, status,2
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9176 ;;      Params:         0       0       0       0       0       0       0
  9177 ;;      Locals:         0       0       0       0       0       0       0
  9178 ;;      Temps:          0       0       0       0       0       0       0
  9179 ;;      Totals:         0       0       0       0       0       0       0
  9180 ;;Total ram usage:        0 bytes
  9181 ;; Hardware stack levels used: 1
  9182 ;; Hardware stack levels required when called: 2
  9183 ;; This function calls:
  9184 ;;		Nothing
  9185 ;; This function is called by:
  9186 ;;		_main
  9187 ;; This function uses a non-reentrant model
  9188 ;;
  9189                           
  9190                           	psect	text43
  9191  003476                     __ptext43:
  9192                           	callstack 0
  9193  003476                     _Initialize_Tanks:
  9194                           	callstack 28
  9195  003476                     
  9196                           ;main.c: 365: tank1.level = 0;
  9197  003476  0E00               	movlw	0
  9198  003478  6E47               	movwf	_tank1^0,c	;volatile
  9199  00347A  0E00               	movlw	0
  9200  00347C  6E48               	movwf	(_tank1+1)^0,c	;volatile
  9201  00347E  0E00               	movlw	0
  9202  003480  6E49               	movwf	(_tank1+2)^0,c	;volatile
  9203  003482  0E00               	movlw	0
  9204  003484  6E4A               	movwf	(_tank1+3)^0,c	;volatile
  9205                           
  9206                           ;main.c: 366: tank1.min_level = 0;
  9207  003486  0E00               	movlw	0
  9208  003488  6E4B               	movwf	(_tank1+4)^0,c	;volatile
  9209  00348A  0E00               	movlw	0
  9210  00348C  6E4C               	movwf	(_tank1+5)^0,c	;volatile
  9211  00348E  0E00               	movlw	0
  9212  003490  6E4D               	movwf	(_tank1+6)^0,c	;volatile
  9213  003492  0E00               	movlw	0
  9214  003494  6E4E               	movwf	(_tank1+7)^0,c	;volatile
  9215                           
  9216                           ;main.c: 367: tank1.max_level = 100;
  9217  003496  0E00               	movlw	0
  9218  003498  6E4F               	movwf	(_tank1+8)^0,c	;volatile
  9219  00349A  0E00               	movlw	0
  9220  00349C  6E50               	movwf	(_tank1+9)^0,c	;volatile
  9221  00349E  0EC8               	movlw	200
  9222  0034A0  6E51               	movwf	(_tank1+10)^0,c	;volatile
  9223  0034A2  0E42               	movlw	66
  9224  0034A4  6E52               	movwf	(_tank1+11)^0,c	;volatile
  9225                           
  9226                           ;main.c: 369: tank2.level = 0;
  9227  0034A6  0E00               	movlw	0
  9228  0034A8  6E3B               	movwf	_tank2^0,c	;volatile
  9229  0034AA  0E00               	movlw	0
  9230  0034AC  6E3C               	movwf	(_tank2+1)^0,c	;volatile
  9231  0034AE  0E00               	movlw	0
  9232  0034B0  6E3D               	movwf	(_tank2+2)^0,c	;volatile
  9233  0034B2  0E00               	movlw	0
  9234  0034B4  6E3E               	movwf	(_tank2+3)^0,c	;volatile
  9235                           
  9236                           ;main.c: 370: tank2.min_level = 0;
  9237  0034B6  0E00               	movlw	0
  9238  0034B8  6E3F               	movwf	(_tank2+4)^0,c	;volatile
  9239  0034BA  0E00               	movlw	0
  9240  0034BC  6E40               	movwf	(_tank2+5)^0,c	;volatile
  9241  0034BE  0E00               	movlw	0
  9242  0034C0  6E41               	movwf	(_tank2+6)^0,c	;volatile
  9243  0034C2  0E00               	movlw	0
  9244  0034C4  6E42               	movwf	(_tank2+7)^0,c	;volatile
  9245                           
  9246                           ;main.c: 371: tank2.max_level = 90;
  9247  0034C6  0E00               	movlw	0
  9248  0034C8  6E43               	movwf	(_tank2+8)^0,c	;volatile
  9249  0034CA  0E00               	movlw	0
  9250  0034CC  6E44               	movwf	(_tank2+9)^0,c	;volatile
  9251  0034CE  0EB4               	movlw	180
  9252  0034D0  6E45               	movwf	(_tank2+10)^0,c	;volatile
  9253  0034D2  0E42               	movlw	66
  9254  0034D4  6E46               	movwf	(_tank2+11)^0,c	;volatile
  9255  0034D6  0012               	return		;funcret
  9256  0034D8                     __end_of_Initialize_Tanks:
  9257                           	callstack 0
  9258                           
  9259 ;; *************** function _Configure_Registers *****************
  9260 ;; Defined at:
  9261 ;;		line 390 in file "main.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;		None
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;		None
  9266 ;; Return value:  Size  Location     Type
  9267 ;;                  1    wreg      void 
  9268 ;; Registers used:
  9269 ;;		wreg, status,2, cstack
  9270 ;; Tracked objects:
  9271 ;;		On entry : 0/0
  9272 ;;		On exit  : 0/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9275 ;;      Params:         0       0       0       0       0       0       0
  9276 ;;      Locals:         0       0       0       0       0       0       0
  9277 ;;      Temps:          0       0       0       0       0       0       0
  9278 ;;      Totals:         0       0       0       0       0       0       0
  9279 ;;Total ram usage:        0 bytes
  9280 ;; Hardware stack levels used: 1
  9281 ;; Hardware stack levels required when called: 3
  9282 ;; This function calls:
  9283 ;;		_Configure_External_Interrupt
  9284 ;;		_Configure_Timer_Interrupt
  9285 ;; This function is called by:
  9286 ;;		_main
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           	psect	text44
  9291  003538                     __ptext44:
  9292                           	callstack 0
  9293  003538                     _Configure_Registers:
  9294                           	callstack 27
  9295  003538                     
  9296                           ;main.c: 392: INTCON2bits.RBPU = 0;
  9297  003538  9EF1               	bcf	241,7,c	;volatile
  9298                           
  9299                           ;main.c: 395: TRISA = 0xff;
  9300  00353A  6892               	setf	146,c	;volatile
  9301  00353C                     
  9302                           ;main.c: 396: TRISB = 0x3f;
  9303  00353C  0E3F               	movlw	63
  9304  00353E  6E93               	movwf	147,c	;volatile
  9305                           
  9306                           ;main.c: 397: TRISC = 0x00;
  9307  003540  0E00               	movlw	0
  9308  003542  6E94               	movwf	148,c	;volatile
  9309                           
  9310                           ;main.c: 398: TRISD = 0x00;
  9311  003544  0E00               	movlw	0
  9312  003546  6E95               	movwf	149,c	;volatile
  9313                           
  9314                           ;main.c: 399: TRISE = 0x00;
  9315  003548  0E00               	movlw	0
  9316  00354A  6E96               	movwf	150,c	;volatile
  9317                           
  9318                           ;main.c: 401: PORTA = 0; LATA = 0;
  9319  00354C  0E00               	movlw	0
  9320  00354E  6E80               	movwf	128,c	;volatile
  9321  003550  0E00               	movlw	0
  9322  003552  6E89               	movwf	137,c	;volatile
  9323                           
  9324                           ;main.c: 402: PORTB = 0; LATB = 0;
  9325  003554  0E00               	movlw	0
  9326  003556  6E81               	movwf	129,c	;volatile
  9327  003558  0E00               	movlw	0
  9328  00355A  6E8A               	movwf	138,c	;volatile
  9329                           
  9330                           ;main.c: 403: PORTC = 0; LATC = 0;
  9331  00355C  0E00               	movlw	0
  9332  00355E  6E82               	movwf	130,c	;volatile
  9333  003560  0E00               	movlw	0
  9334  003562  6E8B               	movwf	139,c	;volatile
  9335                           
  9336                           ;main.c: 404: PORTD = 0; LATD = 0;
  9337  003564  0E00               	movlw	0
  9338  003566  6E83               	movwf	131,c	;volatile
  9339  003568  0E00               	movlw	0
  9340  00356A  6E8C               	movwf	140,c	;volatile
  9341                           
  9342                           ;main.c: 405: PORTE = 0; LATE = 0;
  9343  00356C  0E00               	movlw	0
  9344  00356E  6E84               	movwf	132,c	;volatile
  9345  003570  0E00               	movlw	0
  9346  003572  6E8D               	movwf	141,c	;volatile
  9347  003574                     
  9348                           ;main.c: 407: PEIE = 1;
  9349  003574  8CF2               	bsf	4082,6,c	;volatile
  9350  003576                     
  9351                           ;main.c: 408: (INTCONbits.GIE = 1);
  9352  003576  8EF2               	bsf	242,7,c	;volatile
  9353  003578                     
  9354                           ;main.c: 409: Configure_External_Interrupt();
  9355  003578  EC1B  F01C         	call	_Configure_External_Interrupt	;wreg free
  9356                           
  9357                           ;main.c: 410: Configure_Timer_Interrupt();
  9358  00357C  ECF5  F01B         	call	_Configure_Timer_Interrupt	;wreg free
  9359  003580  0012               	return		;funcret
  9360  003582                     __end_of_Configure_Registers:
  9361                           	callstack 0
  9362                           
  9363 ;; *************** function _Configure_Timer_Interrupt *****************
  9364 ;; Defined at:
  9365 ;;		line 381 in file "main.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;		None
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;		None
  9370 ;; Return value:  Size  Location     Type
  9371 ;;                  1    wreg      void 
  9372 ;; Registers used:
  9373 ;;		wreg, status,2
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9379 ;;      Params:         0       0       0       0       0       0       0
  9380 ;;      Locals:         0       0       0       0       0       0       0
  9381 ;;      Temps:          0       0       0       0       0       0       0
  9382 ;;      Totals:         0       0       0       0       0       0       0
  9383 ;;Total ram usage:        0 bytes
  9384 ;; Hardware stack levels used: 1
  9385 ;; Hardware stack levels required when called: 2
  9386 ;; This function calls:
  9387 ;;		Nothing
  9388 ;; This function is called by:
  9389 ;;		_Configure_Registers
  9390 ;; This function uses a non-reentrant model
  9391 ;;
  9392                           
  9393                           	psect	text45
  9394  0037EA                     __ptext45:
  9395                           	callstack 0
  9396  0037EA                     _Configure_Timer_Interrupt:
  9397                           	callstack 27
  9398  0037EA                     
  9399                           ;main.c: 383: PIE1bits.TMR1IE = 1;
  9400  0037EA  809D               	bsf	157,0,c	;volatile
  9401                           
  9402                           ;main.c: 384: PIR1bits.TMR1IF = 0;
  9403  0037EC  909E               	bcf	158,0,c	;volatile
  9404  0037EE                     
  9405                           ;main.c: 385: TMR1L = 0x2C;
  9406  0037EE  0E2C               	movlw	44
  9407  0037F0  6ECE               	movwf	206,c	;volatile
  9408                           
  9409                           ;main.c: 386: TMR1H = 0xCF;
  9410  0037F2  0ECF               	movlw	207
  9411  0037F4  6ECF               	movwf	207,c	;volatile
  9412                           
  9413                           ;main.c: 387: T1CON = 0b00100001;
  9414  0037F6  0E21               	movlw	33
  9415  0037F8  6ECD               	movwf	205,c	;volatile
  9416  0037FA  0012               	return		;funcret
  9417  0037FC                     __end_of_Configure_Timer_Interrupt:
  9418                           	callstack 0
  9419                           
  9420 ;; *************** function _Configure_External_Interrupt *****************
  9421 ;; Defined at:
  9422 ;;		line 374 in file "main.c"
  9423 ;; Parameters:    Size  Location     Type
  9424 ;;		None
  9425 ;; Auto vars:     Size  Location     Type
  9426 ;;		None
  9427 ;; Return value:  Size  Location     Type
  9428 ;;                  1    wreg      void 
  9429 ;; Registers used:
  9430 ;;		None
  9431 ;; Tracked objects:
  9432 ;;		On entry : 0/0
  9433 ;;		On exit  : 0/0
  9434 ;;		Unchanged: 0/0
  9435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9436 ;;      Params:         0       0       0       0       0       0       0
  9437 ;;      Locals:         0       0       0       0       0       0       0
  9438 ;;      Temps:          0       0       0       0       0       0       0
  9439 ;;      Totals:         0       0       0       0       0       0       0
  9440 ;;Total ram usage:        0 bytes
  9441 ;; Hardware stack levels used: 1
  9442 ;; Hardware stack levels required when called: 2
  9443 ;; This function calls:
  9444 ;;		Nothing
  9445 ;; This function is called by:
  9446 ;;		_Configure_Registers
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           	psect	text46
  9451  003836                     __ptext46:
  9452                           	callstack 0
  9453  003836                     _Configure_External_Interrupt:
  9454                           	callstack 27
  9455  003836  0012               	return		;funcret
  9456  003838                     __end_of_Configure_External_Interrupt:
  9457                           	callstack 0
  9458                           
  9459 ;; *************** function _ConfigInterrupts *****************
  9460 ;; Defined at:
  9461 ;;		line 94 in file "system.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      void 
  9468 ;; Registers used:
  9469 ;;		None
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9475 ;;      Params:         0       0       0       0       0       0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0
  9478 ;;      Totals:         0       0       0       0       0       0       0
  9479 ;;Total ram usage:        0 bytes
  9480 ;; Hardware stack levels used: 1
  9481 ;; Hardware stack levels required when called: 2
  9482 ;; This function calls:
  9483 ;;		Nothing
  9484 ;; This function is called by:
  9485 ;;		_main
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           	psect	text47
  9490  003816                     __ptext47:
  9491                           	callstack 0
  9492  003816                     _ConfigInterrupts:
  9493                           	callstack 28
  9494  003816                     
  9495                           ;system.c: 96: RCONbits.IPEN = 0;
  9496  003816  9ED0               	bcf	208,7,c	;volatile
  9497                           
  9498                           ;system.c: 97: PIR1bits.RCIF = 0;
  9499  003818  9A9E               	bcf	158,5,c	;volatile
  9500                           
  9501                           ;system.c: 98: INTCONbits.TMR0IF = 0;
  9502  00381A  94F2               	bcf	242,2,c	;volatile
  9503                           
  9504                           ;system.c: 99: INTCONbits.PEIE = 1;
  9505  00381C  8CF2               	bsf	242,6,c	;volatile
  9506                           
  9507                           ;system.c: 100: INTCONbits.GIE = 1;
  9508  00381E  8EF2               	bsf	242,7,c	;volatile
  9509  003820  0012               	return		;funcret
  9510  003822                     __end_of_ConfigInterrupts:
  9511                           	callstack 0
  9512                           
  9513 ;; *************** function _Automatic_Mode *****************
  9514 ;; Defined at:
  9515 ;;		line 237 in file "main.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;		None
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;  isFull          1   30[COMRAM] unsigned char 
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  1    wreg      void 
  9522 ;; Registers used:
  9523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9529 ;;      Params:         0       0       0       0       0       0       0
  9530 ;;      Locals:         1       0       0       0       0       0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0
  9532 ;;      Totals:         1       0       0       0       0       0       0
  9533 ;;Total ram usage:        1 bytes
  9534 ;; Hardware stack levels used: 1
  9535 ;; Hardware stack levels required when called: 3
  9536 ;; This function calls:
  9537 ;;		_ClearBit
  9538 ;;		_SetBit
  9539 ;;		___flge
  9540 ;; This function is called by:
  9541 ;;		_main
  9542 ;; This function uses a non-reentrant model
  9543 ;;
  9544                           
  9545                           	psect	text48
  9546  0026D8                     __ptext48:
  9547                           	callstack 0
  9548  0026D8                     _Automatic_Mode:
  9549                           	callstack 27
  9550  0026D8                     
  9551                           ;main.c: 239: bool isFull = tank2.level >= tank2.max_level ? 1 : 0;
  9552  0026D8  C03B  F013         	movff	_tank2,___flge@ff1	;volatile
  9553  0026DC  C03C  F014         	movff	_tank2+1,___flge@ff1+1	;volatile
  9554  0026E0  C03D  F015         	movff	_tank2+2,___flge@ff1+2	;volatile
  9555  0026E4  C03E  F016         	movff	_tank2+3,___flge@ff1+3	;volatile
  9556  0026E8  C043  F017         	movff	_tank2+8,___flge@ff2	;volatile
  9557  0026EC  C044  F018         	movff	_tank2+9,___flge@ff2+1	;volatile
  9558  0026F0  C045  F019         	movff	_tank2+10,___flge@ff2+2	;volatile
  9559  0026F4  C046  F01A         	movff	_tank2+11,___flge@ff2+3	;volatile
  9560  0026F8  ECF7  F014         	call	___flge	;wreg free
  9561  0026FC  B0D8               	btfsc	status,0,c
  9562  0026FE  EF83  F013         	goto	u4291
  9563  002702  EF86  F013         	goto	u4290
  9564  002706                     u4291:
  9565  002706  0E01               	movlw	1
  9566  002708  EF87  F013         	goto	u4300
  9567  00270C                     u4290:
  9568  00270C  0E00               	movlw	0
  9569  00270E                     u4300:
  9570  00270E  6E1F               	movwf	Automatic_Mode@isFull^0,c
  9571                           
  9572                           ;main.c: 240: if ((tank1.level > tank1.min_level) && (tank2.level < tank2.min_level))
  9573  002710  C04B  F013         	movff	_tank1+4,___flge@ff1	;volatile
  9574  002714  C04C  F014         	movff	_tank1+5,___flge@ff1+1	;volatile
  9575  002718  C04D  F015         	movff	_tank1+6,___flge@ff1+2	;volatile
  9576  00271C  C04E  F016         	movff	_tank1+7,___flge@ff1+3	;volatile
  9577  002720  C047  F017         	movff	_tank1,___flge@ff2	;volatile
  9578  002724  C048  F018         	movff	_tank1+1,___flge@ff2+1	;volatile
  9579  002728  C049  F019         	movff	_tank1+2,___flge@ff2+2	;volatile
  9580  00272C  C04A  F01A         	movff	_tank1+3,___flge@ff2+3	;volatile
  9581  002730  ECF7  F014         	call	___flge	;wreg free
  9582  002734  B0D8               	btfsc	status,0,c
  9583  002736  EF9F  F013         	goto	u4311
  9584  00273A  EFA1  F013         	goto	u4310
  9585  00273E                     u4311:
  9586  00273E  EFC6  F013         	goto	l4705
  9587  002742                     u4310:
  9588  002742  C03B  F013         	movff	_tank2,___flge@ff1	;volatile
  9589  002746  C03C  F014         	movff	_tank2+1,___flge@ff1+1	;volatile
  9590  00274A  C03D  F015         	movff	_tank2+2,___flge@ff1+2	;volatile
  9591  00274E  C03E  F016         	movff	_tank2+3,___flge@ff1+3	;volatile
  9592  002752  C03F  F017         	movff	_tank2+4,___flge@ff2	;volatile
  9593  002756  C040  F018         	movff	_tank2+5,___flge@ff2+1	;volatile
  9594  00275A  C041  F019         	movff	_tank2+6,___flge@ff2+2	;volatile
  9595  00275E  C042  F01A         	movff	_tank2+7,___flge@ff2+3	;volatile
  9596  002762  ECF7  F014         	call	___flge	;wreg free
  9597  002766  B0D8               	btfsc	status,0,c
  9598  002768  EFB8  F013         	goto	u4321
  9599  00276C  EFBA  F013         	goto	u4320
  9600  002770                     u4321:
  9601  002770  EFC6  F013         	goto	l4705
  9602  002774                     u4320:
  9603  002774                     
  9604                           ;main.c: 241: {;main.c: 242: SetBit(&LATC, 0);
  9605  002774  0E8B               	movlw	139
  9606  002776  6E03               	movwf	SetBit@port^0,c
  9607  002778  0E0F               	movlw	15
  9608  00277A  6E04               	movwf	(SetBit@port+1)^0,c
  9609  00277C  0E00               	movlw	0
  9610  00277E  6E06               	movwf	(SetBit@pin+1)^0,c
  9611  002780  0E00               	movlw	0
  9612  002782  6E05               	movwf	SetBit@pin^0,c
  9613  002784  EC67  F01B         	call	_SetBit	;wreg free
  9614                           
  9615                           ;main.c: 243: }
  9616  002788  EFF1  F013         	goto	l238
  9617  00278C                     l4705:
  9618                           
  9619                           ;main.c: 244: else if (tank1.level <= tank1.min_level || isFull)
  9620  00278C  C04B  F013         	movff	_tank1+4,___flge@ff1	;volatile
  9621  002790  C04C  F014         	movff	_tank1+5,___flge@ff1+1	;volatile
  9622  002794  C04D  F015         	movff	_tank1+6,___flge@ff1+2	;volatile
  9623  002798  C04E  F016         	movff	_tank1+7,___flge@ff1+3	;volatile
  9624  00279C  C047  F017         	movff	_tank1,___flge@ff2	;volatile
  9625  0027A0  C048  F018         	movff	_tank1+1,___flge@ff2+1	;volatile
  9626  0027A4  C049  F019         	movff	_tank1+2,___flge@ff2+2	;volatile
  9627  0027A8  C04A  F01A         	movff	_tank1+3,___flge@ff2+3	;volatile
  9628  0027AC  ECF7  F014         	call	___flge	;wreg free
  9629  0027B0  B0D8               	btfsc	status,0,c
  9630  0027B2  EFDD  F013         	goto	u4331
  9631  0027B6  EFDF  F013         	goto	u4330
  9632  0027BA                     u4331:
  9633  0027BA  EFE7  F013         	goto	l4709
  9634  0027BE                     u4330:
  9635  0027BE  501F               	movf	Automatic_Mode@isFull^0,w,c
  9636  0027C0  B4D8               	btfsc	status,2,c
  9637  0027C2  EFE5  F013         	goto	u4341
  9638  0027C6  EFE7  F013         	goto	u4340
  9639  0027CA                     u4341:
  9640  0027CA  EFF1  F013         	goto	l238
  9641  0027CE                     u4340:
  9642  0027CE                     l4709:
  9643                           
  9644                           ;main.c: 245: {;main.c: 246: ClearBit(&LATC, 0);
  9645  0027CE  0E8B               	movlw	139
  9646  0027D0  6E03               	movwf	ClearBit@port^0,c
  9647  0027D2  0E0F               	movlw	15
  9648  0027D4  6E04               	movwf	(ClearBit@port+1)^0,c
  9649  0027D6  0E00               	movlw	0
  9650  0027D8  6E06               	movwf	(ClearBit@pin+1)^0,c
  9651  0027DA  0E00               	movlw	0
  9652  0027DC  6E05               	movwf	ClearBit@pin^0,c
  9653  0027DE  EC02  F01B         	call	_ClearBit	;wreg free
  9654  0027E2                     l238:
  9655  0027E2  0012               	return		;funcret
  9656  0027E4                     __end_of_Automatic_Mode:
  9657                           	callstack 0
  9658                           
  9659 ;; *************** function ___flge *****************
  9660 ;; Defined at:
  9661 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\flge.c"
  9662 ;; Parameters:    Size  Location     Type
  9663 ;;  ff1             4   18[COMRAM] void 
  9664 ;;  ff2             4   22[COMRAM] void 
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;		None
  9667 ;; Return value:  Size  Location     Type
  9668 ;;		None               void
  9669 ;; Registers used:
  9670 ;;		wreg, status,2, status,0
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9676 ;;      Params:         8       0       0       0       0       0       0
  9677 ;;      Locals:         0       0       0       0       0       0       0
  9678 ;;      Temps:          4       0       0       0       0       0       0
  9679 ;;      Totals:        12       0       0       0       0       0       0
  9680 ;;Total ram usage:       12 bytes
  9681 ;; Hardware stack levels used: 1
  9682 ;; Hardware stack levels required when called: 2
  9683 ;; This function calls:
  9684 ;;		Nothing
  9685 ;; This function is called by:
  9686 ;;		_Automatic_Mode
  9687 ;;		_Min_Lv1_Incr
  9688 ;;		_Min_Lv2_Incr
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           	psect	text49
  9693  0029EE                     __ptext49:
  9694                           	callstack 0
  9695  0029EE                     ___flge:
  9696                           	callstack 25
  9697  0029EE  0E00               	movlw	0
  9698  0029F0  1413               	andwf	___flge@ff1^0,w,c
  9699  0029F2  6E1B               	movwf	??___flge^0,c
  9700  0029F4  0E00               	movlw	0
  9701  0029F6  1414               	andwf	(___flge@ff1+1)^0,w,c
  9702  0029F8  6E1C               	movwf	(??___flge+1)^0,c
  9703  0029FA  0E80               	movlw	128
  9704  0029FC  1415               	andwf	(___flge@ff1+2)^0,w,c
  9705  0029FE  6E1D               	movwf	(??___flge+2)^0,c
  9706  002A00  0E7F               	movlw	127
  9707  002A02  1416               	andwf	(___flge@ff1+3)^0,w,c
  9708  002A04  6E1E               	movwf	(??___flge+3)^0,c
  9709  002A06  501B               	movf	??___flge^0,w,c
  9710  002A08  101C               	iorwf	(??___flge+1)^0,w,c
  9711  002A0A  101D               	iorwf	(??___flge+2)^0,w,c
  9712  002A0C  101E               	iorwf	(??___flge+3)^0,w,c
  9713  002A0E  A4D8               	btfss	status,2,c
  9714  002A10  EF0C  F015         	goto	u3201
  9715  002A14  EF0E  F015         	goto	u3200
  9716  002A18                     u3201:
  9717  002A18  EF16  F015         	goto	l3775
  9718  002A1C                     u3200:
  9719  002A1C  0E00               	movlw	0
  9720  002A1E  6E13               	movwf	___flge@ff1^0,c
  9721  002A20  0E00               	movlw	0
  9722  002A22  6E14               	movwf	(___flge@ff1+1)^0,c
  9723  002A24  0E00               	movlw	0
  9724  002A26  6E15               	movwf	(___flge@ff1+2)^0,c
  9725  002A28  0E00               	movlw	0
  9726  002A2A  6E16               	movwf	(___flge@ff1+3)^0,c
  9727  002A2C                     l3775:
  9728  002A2C  0E00               	movlw	0
  9729  002A2E  1417               	andwf	___flge@ff2^0,w,c
  9730  002A30  6E1B               	movwf	??___flge^0,c
  9731  002A32  0E00               	movlw	0
  9732  002A34  1418               	andwf	(___flge@ff2+1)^0,w,c
  9733  002A36  6E1C               	movwf	(??___flge+1)^0,c
  9734  002A38  0E80               	movlw	128
  9735  002A3A  1419               	andwf	(___flge@ff2+2)^0,w,c
  9736  002A3C  6E1D               	movwf	(??___flge+2)^0,c
  9737  002A3E  0E7F               	movlw	127
  9738  002A40  141A               	andwf	(___flge@ff2+3)^0,w,c
  9739  002A42  6E1E               	movwf	(??___flge+3)^0,c
  9740  002A44  501B               	movf	??___flge^0,w,c
  9741  002A46  101C               	iorwf	(??___flge+1)^0,w,c
  9742  002A48  101D               	iorwf	(??___flge+2)^0,w,c
  9743  002A4A  101E               	iorwf	(??___flge+3)^0,w,c
  9744  002A4C  A4D8               	btfss	status,2,c
  9745  002A4E  EF2B  F015         	goto	u3211
  9746  002A52  EF2D  F015         	goto	u3210
  9747  002A56                     u3211:
  9748  002A56  EF35  F015         	goto	l3779
  9749  002A5A                     u3210:
  9750  002A5A  0E00               	movlw	0
  9751  002A5C  6E17               	movwf	___flge@ff2^0,c
  9752  002A5E  0E00               	movlw	0
  9753  002A60  6E18               	movwf	(___flge@ff2+1)^0,c
  9754  002A62  0E00               	movlw	0
  9755  002A64  6E19               	movwf	(___flge@ff2+2)^0,c
  9756  002A66  0E00               	movlw	0
  9757  002A68  6E1A               	movwf	(___flge@ff2+3)^0,c
  9758  002A6A                     l3779:
  9759  002A6A  AE16               	btfss	(___flge@ff1+3)^0,7,c
  9760  002A6C  EF3A  F015         	goto	u3221
  9761  002A70  EF3C  F015         	goto	u3220
  9762  002A74                     u3221:
  9763  002A74  EF45  F015         	goto	l3783
  9764  002A78                     u3220:
  9765  002A78  6C13               	negf	___flge@ff1^0,c
  9766  002A7A  1E14               	comf	(___flge@ff1+1)^0,f,c
  9767  002A7C  B0D8               	btfsc	status,0,c
  9768  002A7E  2A14               	incf	(___flge@ff1+1)^0,f,c
  9769  002A80  1E15               	comf	(___flge@ff1+2)^0,f,c
  9770  002A82  B0D8               	btfsc	status,0,c
  9771  002A84  2A15               	incf	(___flge@ff1+2)^0,f,c
  9772  002A86  0E80               	movlw	128
  9773  002A88  5616               	subfwb	(___flge@ff1+3)^0,f,c
  9774  002A8A                     l3783:
  9775  002A8A  AE1A               	btfss	(___flge@ff2+3)^0,7,c
  9776  002A8C  EF4A  F015         	goto	u3231
  9777  002A90  EF4C  F015         	goto	u3230
  9778  002A94                     u3231:
  9779  002A94  EF55  F015         	goto	l926
  9780  002A98                     u3230:
  9781  002A98  6C17               	negf	___flge@ff2^0,c
  9782  002A9A  1E18               	comf	(___flge@ff2+1)^0,f,c
  9783  002A9C  B0D8               	btfsc	status,0,c
  9784  002A9E  2A18               	incf	(___flge@ff2+1)^0,f,c
  9785  002AA0  1E19               	comf	(___flge@ff2+2)^0,f,c
  9786  002AA2  B0D8               	btfsc	status,0,c
  9787  002AA4  2A19               	incf	(___flge@ff2+2)^0,f,c
  9788  002AA6  0E80               	movlw	128
  9789  002AA8  561A               	subfwb	(___flge@ff2+3)^0,f,c
  9790  002AAA                     l926:
  9791  002AAA  0E00               	movlw	0
  9792  002AAC  1A13               	xorwf	___flge@ff1^0,f,c
  9793  002AAE  0E00               	movlw	0
  9794  002AB0  1A14               	xorwf	(___flge@ff1+1)^0,f,c
  9795  002AB2  0E00               	movlw	0
  9796  002AB4  1A15               	xorwf	(___flge@ff1+2)^0,f,c
  9797  002AB6  0E80               	movlw	128
  9798  002AB8  1A16               	xorwf	(___flge@ff1+3)^0,f,c
  9799  002ABA  0E00               	movlw	0
  9800  002ABC  1A17               	xorwf	___flge@ff2^0,f,c
  9801  002ABE  0E00               	movlw	0
  9802  002AC0  1A18               	xorwf	(___flge@ff2+1)^0,f,c
  9803  002AC2  0E00               	movlw	0
  9804  002AC4  1A19               	xorwf	(___flge@ff2+2)^0,f,c
  9805  002AC6  0E80               	movlw	128
  9806  002AC8  1A1A               	xorwf	(___flge@ff2+3)^0,f,c
  9807  002ACA  5017               	movf	___flge@ff2^0,w,c
  9808  002ACC  5C13               	subwf	___flge@ff1^0,w,c
  9809  002ACE  5018               	movf	(___flge@ff2+1)^0,w,c
  9810  002AD0  5814               	subwfb	(___flge@ff1+1)^0,w,c
  9811  002AD2  5019               	movf	(___flge@ff2+2)^0,w,c
  9812  002AD4  5815               	subwfb	(___flge@ff1+2)^0,w,c
  9813  002AD6  501A               	movf	(___flge@ff2+3)^0,w,c
  9814  002AD8  5816               	subwfb	(___flge@ff1+3)^0,w,c
  9815  002ADA  B0D8               	btfsc	status,0,c
  9816  002ADC  EF72  F015         	goto	u3241
  9817  002AE0  EF74  F015         	goto	u3240
  9818  002AE4                     u3241:
  9819  002AE4  EF77  F015         	goto	l3789
  9820  002AE8                     u3240:
  9821  002AE8  90D8               	bcf	status,0,c
  9822  002AEA  EF78  F015         	goto	l927
  9823  002AEE                     l3789:
  9824  002AEE  80D8               	bsf	status,0,c
  9825  002AF0                     l927:
  9826  002AF0  0012               	return		;funcret
  9827  002AF2                     __end_of___flge:
  9828                           	callstack 0
  9829                           
  9830 ;; *************** function _SetBit *****************
  9831 ;; Defined at:
  9832 ;;		line 3 in file "regoperations.c"
  9833 ;; Parameters:    Size  Location     Type
  9834 ;;  port            2    2[COMRAM] PTR unsigned int 
  9835 ;;		 -> LATC(1), 
  9836 ;;  pin             2    4[COMRAM] unsigned int 
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;		None
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  1    wreg      void 
  9841 ;; Registers used:
  9842 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9848 ;;      Params:         4       0       0       0       0       0       0
  9849 ;;      Locals:         0       0       0       0       0       0       0
  9850 ;;      Temps:          3       0       0       0       0       0       0
  9851 ;;      Totals:         7       0       0       0       0       0       0
  9852 ;;Total ram usage:        7 bytes
  9853 ;; Hardware stack levels used: 1
  9854 ;; Hardware stack levels required when called: 2
  9855 ;; This function calls:
  9856 ;;		Nothing
  9857 ;; This function is called by:
  9858 ;;		_Automatic_Mode
  9859 ;;		_Receive_Message
  9860 ;; This function uses a non-reentrant model
  9861 ;;
  9862                           
  9863                           	psect	text50
  9864  0036CE                     __ptext50:
  9865                           	callstack 0
  9866  0036CE                     _SetBit:
  9867                           	callstack 27
  9868  0036CE                     
  9869                           ;regoperations.c: 5: (*port) |= (1UL << pin);
  9870  0036CE  C005  F007         	movff	SetBit@pin,??_SetBit
  9871  0036D2  0E01               	movlw	1
  9872  0036D4  6E08               	movwf	(??_SetBit+1)^0,c
  9873  0036D6  0E00               	movlw	0
  9874  0036D8  6E09               	movwf	(??_SetBit+2)^0,c
  9875  0036DA  2A07               	incf	??_SetBit^0,f,c
  9876  0036DC  EF73  F01B         	goto	u3384
  9877  0036E0                     u3385:
  9878  0036E0  90D8               	bcf	status,0,c
  9879  0036E2  3608               	rlcf	(??_SetBit+1)^0,f,c
  9880  0036E4  3609               	rlcf	(??_SetBit+2)^0,f,c
  9881  0036E6                     u3384:
  9882  0036E6  2E07               	decfsz	??_SetBit^0,f,c
  9883  0036E8  EF70  F01B         	goto	u3385
  9884  0036EC  C003  FFD9         	movff	SetBit@port,fsr2l
  9885  0036F0  C004  FFDA         	movff	SetBit@port+1,fsr2h
  9886  0036F4  5008               	movf	(??_SetBit+1)^0,w,c
  9887  0036F6  12DE               	iorwf	postinc2,f,c
  9888  0036F8  5009               	movf	(??_SetBit+2)^0,w,c
  9889  0036FA  12DD               	iorwf	postdec2,f,c
  9890  0036FC  0012               	return		;funcret
  9891  0036FE                     __end_of_SetBit:
  9892                           	callstack 0
  9893                           
  9894 ;; *************** function _ClearBit *****************
  9895 ;; Defined at:
  9896 ;;		line 8 in file "regoperations.c"
  9897 ;; Parameters:    Size  Location     Type
  9898 ;;  port            2    2[COMRAM] PTR unsigned int 
  9899 ;;		 -> LATC(1), 
  9900 ;;  pin             2    4[COMRAM] unsigned int 
  9901 ;; Auto vars:     Size  Location     Type
  9902 ;;		None
  9903 ;; Return value:  Size  Location     Type
  9904 ;;                  1    wreg      void 
  9905 ;; Registers used:
  9906 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9907 ;; Tracked objects:
  9908 ;;		On entry : 0/0
  9909 ;;		On exit  : 0/0
  9910 ;;		Unchanged: 0/0
  9911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9912 ;;      Params:         4       0       0       0       0       0       0
  9913 ;;      Locals:         0       0       0       0       0       0       0
  9914 ;;      Temps:          5       0       0       0       0       0       0
  9915 ;;      Totals:         9       0       0       0       0       0       0
  9916 ;;Total ram usage:        9 bytes
  9917 ;; Hardware stack levels used: 1
  9918 ;; Hardware stack levels required when called: 2
  9919 ;; This function calls:
  9920 ;;		Nothing
  9921 ;; This function is called by:
  9922 ;;		_Automatic_Mode
  9923 ;;		_Receive_Message
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           	psect	text51
  9928  003604                     __ptext51:
  9929                           	callstack 0
  9930  003604                     _ClearBit:
  9931                           	callstack 27
  9932  003604                     
  9933                           ;regoperations.c: 10: (*port) &= ~(1UL << pin);
  9934  003604  C005  F007         	movff	ClearBit@pin,??_ClearBit
  9935  003608  0E01               	movlw	1
  9936  00360A  6E08               	movwf	(??_ClearBit+1)^0,c
  9937  00360C  0E00               	movlw	0
  9938  00360E  6E09               	movwf	(??_ClearBit+2)^0,c
  9939  003610  2A07               	incf	??_ClearBit^0,f,c
  9940  003612  EF0E  F01B         	goto	u3394
  9941  003616                     u3395:
  9942  003616  90D8               	bcf	status,0,c
  9943  003618  3608               	rlcf	(??_ClearBit+1)^0,f,c
  9944  00361A  3609               	rlcf	(??_ClearBit+2)^0,f,c
  9945  00361C                     u3394:
  9946  00361C  2E07               	decfsz	??_ClearBit^0,f,c
  9947  00361E  EF0B  F01B         	goto	u3395
  9948  003622  1C08               	comf	(??_ClearBit+1)^0,w,c
  9949  003624  6E0A               	movwf	(??_ClearBit+3)^0,c
  9950  003626  1C09               	comf	(??_ClearBit+2)^0,w,c
  9951  003628  6E0B               	movwf	(??_ClearBit+4)^0,c
  9952  00362A  C003  FFD9         	movff	ClearBit@port,fsr2l
  9953  00362E  C004  FFDA         	movff	ClearBit@port+1,fsr2h
  9954  003632  500A               	movf	(??_ClearBit+3)^0,w,c
  9955  003634  16DE               	andwf	postinc2,f,c
  9956  003636  500B               	movf	(??_ClearBit+4)^0,w,c
  9957  003638  16DD               	andwf	postdec2,f,c
  9958  00363A  0012               	return		;funcret
  9959  00363C                     __end_of_ClearBit:
  9960                           	callstack 0
  9961                           
  9962 ;; *************** function _isr *****************
  9963 ;; Defined at:
  9964 ;;		line 147 in file "main.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;		None
  9967 ;; Auto vars:     Size  Location     Type
  9968 ;;		None
  9969 ;; Return value:  Size  Location     Type
  9970 ;;                  1    wreg      void 
  9971 ;; Registers used:
  9972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9973 ;; Tracked objects:
  9974 ;;		On entry : 0/0
  9975 ;;		On exit  : 0/0
  9976 ;;		Unchanged: 0/0
  9977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9978 ;;      Params:         0       0       0       0       0       0       0
  9979 ;;      Locals:         0       0       0       0       0       0       0
  9980 ;;      Temps:          2       0       0       0       0       0       0
  9981 ;;      Totals:         2       0       0       0       0       0       0
  9982 ;;Total ram usage:        2 bytes
  9983 ;; Hardware stack levels used: 1
  9984 ;; Hardware stack levels required when called: 1
  9985 ;; This function calls:
  9986 ;;		_OpenTmr0
  9987 ;;		_modbusDelay
  9988 ;; This function is called by:
  9989 ;;		Interrupt level 2
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           	psect	intcode
  9994  000008                     __pintcode:
  9995                           	callstack 0
  9996  000008                     _isr:
  9997                           	callstack 22
  9998                           
  9999                           ;incstack = 0
 10000  000008  8275               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 10001  00000A  EDC2  F00F         	call	int_func,f	;refresh shadow registers
 10002                           
 10003                           	psect	intcode_body
 10004  001F84                     __pintcode_body:
 10005                           	callstack 22
 10006  001F84                     int_func:
 10007                           	callstack 22
 10008  001F84  0006               	pop		; remove dummy address from shadow register refresh
 10009  001F86  CFD9 F001          	movff	fsr2l,??_isr
 10010  001F8A  CFDA F002          	movff	fsr2h,??_isr+1
 10011  001F8E                     
 10012                           ;main.c: 150: if (PIR1bits.TMR1IF == 1)
 10013  001F8E  A09E               	btfss	158,0,c	;volatile
 10014  001F90  EFCC  F00F         	goto	i2u438_41
 10015  001F94  EFCE  F00F         	goto	i2u438_40
 10016  001F98                     i2u438_41:
 10017  001F98  EF00  F010         	goto	i2l4785
 10018  001F9C                     i2u438_40:
 10019  001F9C                     
 10020                           ;main.c: 151: {;main.c: 152: PIR1bits.TMR1IF = 0;
 10021  001F9C  909E               	bcf	158,0,c	;volatile
 10022  001F9E                     
 10023                           ;main.c: 153: TMR1L = 0x2C;
 10024  001F9E  0E2C               	movlw	44
 10025  001FA0  6ECE               	movwf	206,c	;volatile
 10026                           
 10027                           ;main.c: 154: TMR1H = 0xCF;
 10028  001FA2  0ECF               	movlw	207
 10029  001FA4  6ECF               	movwf	207,c	;volatile
 10030  001FA6                     
 10031                           ;main.c: 155: count_screen++;
 10032  001FA6  4A59               	infsnz	_count_screen^0,f,c	;volatile
 10033  001FA8  2A5A               	incf	(_count_screen+1)^0,f,c	;volatile
 10034  001FAA                     
 10035                           ;main.c: 156: count_refresh_display++;
 10036  001FAA  4A57               	infsnz	_count_refresh_display^0,f,c	;volatile
 10037  001FAC  2A58               	incf	(_count_refresh_display+1)^0,f,c	;volatile
 10038  001FAE                     
 10039                           ;main.c: 159: if (count_screen == 100)
 10040  001FAE  0E64               	movlw	100
 10041  001FB0  1859               	xorwf	_count_screen^0,w,c	;volatile
 10042  001FB2  105A               	iorwf	(_count_screen+1)^0,w,c	;volatile
 10043  001FB4  A4D8               	btfss	status,2,c
 10044  001FB6  EFDF  F00F         	goto	i2u439_41
 10045  001FBA  EFE1  F00F         	goto	i2u439_40
 10046  001FBE                     i2u439_41:
 10047  001FBE  EFF1  F00F         	goto	i2l4779
 10048  001FC2                     i2u439_40:
 10049  001FC2                     
 10050                           ;main.c: 160: {;main.c: 161: count_screen = 0;
 10051  001FC2  0E00               	movlw	0
 10052  001FC4  6E5A               	movwf	(_count_screen+1)^0,c	;volatile
 10053  001FC6  0E00               	movlw	0
 10054  001FC8  6E59               	movwf	_count_screen^0,c	;volatile
 10055  001FCA                     
 10056                           ;main.c: 162: ++screen;
 10057  001FCA  2A5B               	incf	_screen^0,f,c	;volatile
 10058  001FCC                     
 10059                           ;main.c: 163: if (screen == 4) screen = 0;
 10060  001FCC  0E04               	movlw	4
 10061  001FCE  185B               	xorwf	_screen^0,w,c	;volatile
 10062  001FD0  A4D8               	btfss	status,2,c
 10063  001FD2  EFED  F00F         	goto	i2u440_41
 10064  001FD6  EFEF  F00F         	goto	i2u440_40
 10065  001FDA                     i2u440_41:
 10066  001FDA  EFF1  F00F         	goto	i2l4779
 10067  001FDE                     i2u440_40:
 10068  001FDE  0E00               	movlw	0
 10069  001FE0  6E5B               	movwf	_screen^0,c	;volatile
 10070  001FE2                     i2l4779:
 10071                           
 10072                           ;main.c: 164: };main.c: 167: if (count_refresh_display == 25)
 10073  001FE2  0E19               	movlw	25
 10074  001FE4  1857               	xorwf	_count_refresh_display^0,w,c	;volatile
 10075  001FE6  1058               	iorwf	(_count_refresh_display+1)^0,w,c	;volatile
 10076  001FE8  A4D8               	btfss	status,2,c
 10077  001FEA  EFF9  F00F         	goto	i2u441_41
 10078  001FEE  EFFB  F00F         	goto	i2u441_40
 10079  001FF2                     i2u441_41:
 10080  001FF2  EF00  F010         	goto	i2l4785
 10081  001FF6                     i2u441_40:
 10082  001FF6                     
 10083                           ;main.c: 168: {;main.c: 169: count_refresh_display = 0;
 10084  001FF6  0E00               	movlw	0
 10085  001FF8  6E58               	movwf	(_count_refresh_display+1)^0,c	;volatile
 10086  001FFA  0E00               	movlw	0
 10087  001FFC  6E57               	movwf	_count_refresh_display^0,c	;volatile
 10088  001FFE                     
 10089                           ;main.c: 170: refresh_display = 1;
 10090  001FFE  8074               	bsf	(_refresh_display/(0+8))^0,_refresh_display& (0+7),c	;volatile
 10091  002000                     i2l4785:
 10092                           
 10093                           ;main.c: 171: };main.c: 172: };main.c: 175: if (PIR1bits.RCIF)
 10094  002000  AA9E               	btfss	158,5,c	;volatile
 10095  002002  EF05  F010         	goto	i2u442_41
 10096  002006  EF07  F010         	goto	i2u442_40
 10097  00200A                     i2u442_41:
 10098  00200A  EF50  F010         	goto	i2l217
 10099  00200E                     i2u442_40:
 10100  00200E                     
 10101                           ;main.c: 176: {;main.c: 177: if ((!endOfMessage) && (!newMessage))
 10102  00200E  5061               	movf	_endOfMessage^0,w,c	;volatile
 10103  002010  A4D8               	btfss	status,2,c
 10104  002012  EF0D  F010         	goto	i2u443_41
 10105  002016  EF0F  F010         	goto	i2u443_40
 10106  00201A                     i2u443_41:
 10107  00201A  EF29  F010         	goto	i2l4799
 10108  00201E                     i2u443_40:
 10109  00201E  506B               	movf	_newMessage^0,w,c	;volatile
 10110  002020  A4D8               	btfss	status,2,c
 10111  002022  EF15  F010         	goto	i2u444_41
 10112  002026  EF17  F010         	goto	i2u444_40
 10113  00202A                     i2u444_41:
 10114  00202A  EF29  F010         	goto	i2l4799
 10115  00202E                     i2u444_40:
 10116  00202E                     
 10117                           ;main.c: 178: {;main.c: 179: if (PIR1bits.TXIF)
 10118  00202E  A89E               	btfss	158,4,c	;volatile
 10119  002030  EF1C  F010         	goto	i2u445_41
 10120  002034  EF1E  F010         	goto	i2u445_40
 10121  002038                     i2u445_41:
 10122  002038  EF29  F010         	goto	i2l4799
 10123  00203C                     i2u445_40:
 10124  00203C                     
 10125                           ;main.c: 180: {;main.c: 181: received[z] = RCREG;
 10126  00203C  0E00               	movlw	low _received
 10127  00203E  245D               	addwf	_z^0,w,c	;volatile
 10128  002040  6ED9               	movwf	fsr2l,c
 10129  002042  6ADA               	clrf	fsr2h,c
 10130  002044  0E01               	movlw	high _received
 10131  002046  22DA               	addwfc	fsr2h,f,c
 10132  002048  CFAE FFDF          	movff	4014,indf2	;volatile
 10133  00204C                     
 10134                           ;main.c: 182: z++;
 10135  00204C  2A5D               	incf	_z^0,f,c	;volatile
 10136  00204E                     
 10137                           ;main.c: 183: timerCount = 0;
 10138  00204E  0E00               	movlw	0
 10139  002050  6E60               	movwf	_timerCount^0,c	;volatile
 10140  002052                     i2l4799:
 10141                           
 10142                           ;main.c: 184: };main.c: 185: };main.c: 187: if (newMessage)
 10143  002052  506B               	movf	_newMessage^0,w,c	;volatile
 10144  002054  B4D8               	btfsc	status,2,c
 10145  002056  EF2F  F010         	goto	i2u446_41
 10146  00205A  EF31  F010         	goto	i2u446_40
 10147  00205E                     i2u446_41:
 10148  00205E  EF4F  F010         	goto	i2l220
 10149  002062                     i2u446_40:
 10150  002062                     
 10151                           ;main.c: 188: {;main.c: 189: OpenTmr0();
 10152  002062  ECDE  F01B         	call	_OpenTmr0	;wreg free
 10153  002066                     
 10154                           ;main.c: 190: if (PIR1bits.TXIF)
 10155  002066  A89E               	btfss	158,4,c	;volatile
 10156  002068  EF38  F010         	goto	i2u447_41
 10157  00206C  EF3A  F010         	goto	i2u447_40
 10158  002070                     i2u447_41:
 10159  002070  EF4F  F010         	goto	i2l220
 10160  002074                     i2u447_40:
 10161  002074                     
 10162                           ;main.c: 191: {;main.c: 192: received[z] = RCREG;
 10163  002074  0E00               	movlw	low _received
 10164  002076  245D               	addwf	_z^0,w,c	;volatile
 10165  002078  6ED9               	movwf	fsr2l,c
 10166  00207A  6ADA               	clrf	fsr2h,c
 10167  00207C  0E01               	movlw	high _received
 10168  00207E  22DA               	addwfc	fsr2h,f,c
 10169  002080  CFAE FFDF          	movff	4014,indf2	;volatile
 10170  002084                     
 10171                           ;main.c: 193: z++;
 10172  002084  2A5D               	incf	_z^0,f,c	;volatile
 10173  002086                     
 10174                           ;main.c: 194: newMessage = 0;
 10175  002086  0E00               	movlw	0
 10176  002088  6E6B               	movwf	_newMessage^0,c	;volatile
 10177  00208A                     
 10178                           ;main.c: 195: endOfMessage = 0;
 10179  00208A  0E00               	movlw	0
 10180  00208C  6E61               	movwf	_endOfMessage^0,c	;volatile
 10181  00208E                     
 10182                           ;main.c: 196: messageLength = 0;
 10183  00208E  0E00               	movlw	0
 10184  002090  6E5F               	movwf	_messageLength^0,c	;volatile
 10185  002092                     
 10186                           ;main.c: 197: modbusMessage = 0;
 10187  002092  0E00               	movlw	0
 10188  002094  6E5E               	movwf	_modbusMessage^0,c	;volatile
 10189  002096                     
 10190                           ;main.c: 198: timerCount = 0;
 10191  002096  0E00               	movlw	0
 10192  002098  6E60               	movwf	_timerCount^0,c	;volatile
 10193  00209A  EF86  F010         	goto	i2l222
 10194  00209E                     i2l220:
 10195                           
 10196                           ;main.c: 200: };main.c: 201: };main.c: 202: PIR1bits.RCIF = 0;
 10197  00209E  9A9E               	bcf	158,5,c	;volatile
 10198  0020A0                     i2l217:
 10199                           
 10200                           ;main.c: 203: };main.c: 206: if (INTCONbits.TMR0IF)
 10201  0020A0  A4F2               	btfss	242,2,c	;volatile
 10202  0020A2  EF55  F010         	goto	i2u448_41
 10203  0020A6  EF57  F010         	goto	i2u448_40
 10204  0020AA                     i2u448_41:
 10205  0020AA  EF86  F010         	goto	i2l222
 10206  0020AE                     i2u448_40:
 10207  0020AE                     
 10208                           ;main.c: 207: {;main.c: 208: modbusDelay();
 10209  0020AE  EC16  F01C         	call	_modbusDelay	;wreg free
 10210  0020B2                     
 10211                           ;main.c: 209: timerCount++;
 10212  0020B2  2A60               	incf	_timerCount^0,f,c	;volatile
 10213  0020B4                     
 10214                           ;main.c: 210: if (timerCount > 4)
 10215  0020B4  0E04               	movlw	4
 10216  0020B6  6460               	cpfsgt	_timerCount^0,c	;volatile
 10217  0020B8  EF60  F010         	goto	i2u449_41
 10218  0020BC  EF62  F010         	goto	i2u449_40
 10219  0020C0                     i2u449_41:
 10220  0020C0  EF85  F010         	goto	i2l4843
 10221  0020C4                     i2u449_40:
 10222  0020C4                     
 10223                           ;main.c: 211: {;main.c: 212: endOfMessage = 1;
 10224  0020C4  0E01               	movlw	1
 10225  0020C6  6E61               	movwf	_endOfMessage^0,c	;volatile
 10226                           
 10227                           ;main.c: 213: newMessage = 1;
 10228  0020C8  0E01               	movlw	1
 10229  0020CA  6E6B               	movwf	_newMessage^0,c	;volatile
 10230  0020CC                     
 10231                           ;main.c: 214: messageLength = z;
 10232  0020CC  C05D  F05F         	movff	_z,_messageLength	;volatile
 10233                           
 10234                           ;main.c: 215: modbusMessage = 1;
 10235  0020D0  0E01               	movlw	1
 10236  0020D2  6E5E               	movwf	_modbusMessage^0,c	;volatile
 10237  0020D4                     
 10238                           ;main.c: 216: for (z = (messageLength); z != 125; z++)
 10239  0020D4  C05F  F05D         	movff	_messageLength,_z	;volatile
 10240  0020D8  EF77  F010         	goto	i2l4837
 10241  0020DC                     i2l4833:
 10242                           
 10243                           ;main.c: 217: {;main.c: 218: received[z] = 0;
 10244  0020DC  0E00               	movlw	low _received
 10245  0020DE  245D               	addwf	_z^0,w,c	;volatile
 10246  0020E0  6ED9               	movwf	fsr2l,c
 10247  0020E2  6ADA               	clrf	fsr2h,c
 10248  0020E4  0E01               	movlw	high _received
 10249  0020E6  22DA               	addwfc	fsr2h,f,c
 10250  0020E8  0E00               	movlw	0
 10251  0020EA  6EDF               	movwf	indf2,c
 10252  0020EC  2A5D               	incf	_z^0,f,c	;volatile
 10253  0020EE                     i2l4837:
 10254  0020EE  0E7D               	movlw	125
 10255  0020F0  185D               	xorwf	_z^0,w,c	;volatile
 10256  0020F2  A4D8               	btfss	status,2,c
 10257  0020F4  EF7E  F010         	goto	i2u450_41
 10258  0020F8  EF80  F010         	goto	i2u450_40
 10259  0020FC                     i2u450_41:
 10260  0020FC  EF6E  F010         	goto	i2l4833
 10261  002100                     i2u450_40:
 10262  002100                     
 10263                           ;main.c: 219: };main.c: 220: z = 0;
 10264  002100  0E00               	movlw	0
 10265  002102  6E5D               	movwf	_z^0,c	;volatile
 10266  002104                     
 10267                           ;main.c: 221: T0CONbits.TMR0ON = 0;
 10268  002104  9ED5               	bcf	213,7,c	;volatile
 10269                           
 10270                           ;main.c: 222: timerCount = 0;
 10271  002106  0E00               	movlw	0
 10272  002108  6E60               	movwf	_timerCount^0,c	;volatile
 10273  00210A                     i2l4843:
 10274                           
 10275                           ;main.c: 223: };main.c: 224: INTCONbits.TMR0IF = 0;
 10276  00210A  94F2               	bcf	242,2,c	;volatile
 10277  00210C                     i2l222:
 10278  00210C  C002  FFDA         	movff	??_isr+1,fsr2h
 10279  002110  C001  FFD9         	movff	??_isr,fsr2l
 10280  002114  9275               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 10281  002116  0011               	retfie		f
 10282  002118                     __end_of_isr:
 10283                           	callstack 0
 10284                           
 10285 ;; *************** function _modbusDelay *****************
 10286 ;; Defined at:
 10287 ;;		line 30 in file "modbus.c"
 10288 ;; Parameters:    Size  Location     Type
 10289 ;;		None
 10290 ;; Auto vars:     Size  Location     Type
 10291 ;;		None
 10292 ;; Return value:  Size  Location     Type
 10293 ;;                  1    wreg      void 
 10294 ;; Registers used:
 10295 ;;		wreg, status,2
 10296 ;; Tracked objects:
 10297 ;;		On entry : 0/0
 10298 ;;		On exit  : 0/0
 10299 ;;		Unchanged: 0/0
 10300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10301 ;;      Params:         0       0       0       0       0       0       0
 10302 ;;      Locals:         0       0       0       0       0       0       0
 10303 ;;      Temps:          0       0       0       0       0       0       0
 10304 ;;      Totals:         0       0       0       0       0       0       0
 10305 ;;Total ram usage:        0 bytes
 10306 ;; Hardware stack levels used: 1
 10307 ;; This function calls:
 10308 ;;		Nothing
 10309 ;; This function is called by:
 10310 ;;		_isr
 10311 ;; This function uses a non-reentrant model
 10312 ;;
 10313                           
 10314                           	psect	text53
 10315  00382C                     __ptext53:
 10316                           	callstack 0
 10317  00382C                     _modbusDelay:
 10318                           	callstack 22
 10319  00382C                     
 10320                           ;modbus.c: 33: TMR0H = 0xF5;
 10321  00382C  0EF5               	movlw	245
 10322  00382E  6ED7               	movwf	215,c	;volatile
 10323                           
 10324                           ;modbus.c: 34: TMR0L = 0xD7;
 10325  003830  0ED7               	movlw	215
 10326  003832  6ED6               	movwf	214,c	;volatile
 10327  003834  0012               	return		;funcret
 10328  003836                     __end_of_modbusDelay:
 10329                           	callstack 0
 10330                           
 10331 ;; *************** function _OpenTmr0 *****************
 10332 ;; Defined at:
 10333 ;;		line 76 in file "system.c"
 10334 ;; Parameters:    Size  Location     Type
 10335 ;;		None
 10336 ;; Auto vars:     Size  Location     Type
 10337 ;;		None
 10338 ;; Return value:  Size  Location     Type
 10339 ;;                  1    wreg      void 
 10340 ;; Registers used:
 10341 ;;		wreg, status,2
 10342 ;; Tracked objects:
 10343 ;;		On entry : 0/0
 10344 ;;		On exit  : 0/0
 10345 ;;		Unchanged: 0/0
 10346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10347 ;;      Params:         0       0       0       0       0       0       0
 10348 ;;      Locals:         0       0       0       0       0       0       0
 10349 ;;      Temps:          0       0       0       0       0       0       0
 10350 ;;      Totals:         0       0       0       0       0       0       0
 10351 ;;Total ram usage:        0 bytes
 10352 ;; Hardware stack levels used: 1
 10353 ;; This function calls:
 10354 ;;		Nothing
 10355 ;; This function is called by:
 10356 ;;		_isr
 10357 ;; This function uses a non-reentrant model
 10358 ;;
 10359                           
 10360                           	psect	text54
 10361  0037BC                     __ptext54:
 10362                           	callstack 0
 10363  0037BC                     _OpenTmr0:
 10364                           	callstack 22
 10365  0037BC                     
 10366                           ;system.c: 78: T0CONbits.TMR0ON = 0;
 10367  0037BC  9ED5               	bcf	213,7,c	;volatile
 10368                           
 10369                           ;system.c: 79: T0CONbits.T08BIT = 0;
 10370  0037BE  9CD5               	bcf	213,6,c	;volatile
 10371                           
 10372                           ;system.c: 80: T0CONbits.T0CS = 0;
 10373  0037C0  9AD5               	bcf	213,5,c	;volatile
 10374                           
 10375                           ;system.c: 81: T0CONbits.PSA = 1;
 10376  0037C2  86D5               	bsf	213,3,c	;volatile
 10377  0037C4                     
 10378                           ;system.c: 83: TMR0H = 0xF5;
 10379  0037C4  0EF5               	movlw	245
 10380  0037C6  6ED7               	movwf	215,c	;volatile
 10381                           
 10382                           ;system.c: 84: TMR0L = 0xD7;
 10383  0037C8  0ED7               	movlw	215
 10384  0037CA  6ED6               	movwf	214,c	;volatile
 10385  0037CC                     
 10386                           ;system.c: 86: T0CONbits.TMR0ON = 1;
 10387  0037CC  8ED5               	bsf	213,7,c	;volatile
 10388  0037CE                     
 10389                           ;system.c: 88: INTCONbits.TMR0IF = 0;
 10390  0037CE  94F2               	bcf	242,2,c	;volatile
 10391  0037D0                     
 10392                           ;system.c: 89: INTCONbits.TMR0IE = 1;
 10393  0037D0  8AF2               	bsf	242,5,c	;volatile
 10394  0037D2  0012               	return		;funcret
 10395  0037D4                     __end_of_OpenTmr0:
 10396                           	callstack 0
 10397                           
 10398                           	psect	text55
 10399  000000                     __ptext55:
 10400                           	callstack 0
 10401  000000                     
 10402                           	psect	rparam
 10403  0000                     
 10404                           	psect	temp
 10405  000075                     btemp:
 10406                           	callstack 0
 10407  000075                     	ds	1
 10408  0000                     int$flags	set	btemp
 10409  0000                     wtemp8	set	btemp+1
 10410  0000                     ttemp5	set	btemp+1
 10411  0000                     ttemp6	set	btemp+4
 10412  0000                     ttemp7	set	btemp+8
 10413                           
 10414                           	psect	idloc
 10415                           
 10416                           ;Config register IDLOC0 @ 0x200000
 10417                           ;	unspecified, using default values
 10418  200000                     	org	2097152
 10419  200000  FF                 	db	255
 10420                           
 10421                           ;Config register IDLOC1 @ 0x200001
 10422                           ;	unspecified, using default values
 10423  200001                     	org	2097153
 10424  200001  FF                 	db	255
 10425                           
 10426                           ;Config register IDLOC2 @ 0x200002
 10427                           ;	unspecified, using default values
 10428  200002                     	org	2097154
 10429  200002  FF                 	db	255
 10430                           
 10431                           ;Config register IDLOC3 @ 0x200003
 10432                           ;	unspecified, using default values
 10433  200003                     	org	2097155
 10434  200003  FF                 	db	255
 10435                           
 10436                           ;Config register IDLOC4 @ 0x200004
 10437                           ;	unspecified, using default values
 10438  200004                     	org	2097156
 10439  200004  FF                 	db	255
 10440                           
 10441                           ;Config register IDLOC5 @ 0x200005
 10442                           ;	unspecified, using default values
 10443  200005                     	org	2097157
 10444  200005  FF                 	db	255
 10445                           
 10446                           ;Config register IDLOC6 @ 0x200006
 10447                           ;	unspecified, using default values
 10448  200006                     	org	2097158
 10449  200006  FF                 	db	255
 10450                           
 10451                           ;Config register IDLOC7 @ 0x200007
 10452                           ;	unspecified, using default values
 10453  200007                     	org	2097159
 10454  200007  FF                 	db	255
 10455                           
 10456                           	psect	config
 10457                           
 10458                           ; Padding undefined space
 10459  300000                     	org	3145728
 10460  300000  FF                 	db	255
 10461                           
 10462                           ;Config register CONFIG1H @ 0x300001
 10463                           ;	Oscillator Selection bits
 10464                           ;	OSC = HS, HS oscillator
 10465                           ;	Fail-Safe Clock Monitor Enable bit
 10466                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 10467                           ;	Internal/External Oscillator Switchover bit
 10468                           ;	IESO = OFF, Oscillator Switchover mode disabled
 10469  300001                     	org	3145729
 10470  300001  02                 	db	2
 10471                           
 10472                           ;Config register CONFIG2L @ 0x300002
 10473                           ;	Power-up Timer Enable bit
 10474                           ;	PWRT = OFF, PWRT disabled
 10475                           ;	Brown-out Reset Enable bits
 10476                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 10477                           ;	Brown Out Reset Voltage bits
 10478                           ;	BORV = 3, Minimum setting
 10479  300002                     	org	3145730
 10480  300002  1F                 	db	31
 10481                           
 10482                           ;Config register CONFIG2H @ 0x300003
 10483                           ;	Watchdog Timer Enable bit
 10484                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10485                           ;	Watchdog Timer Postscale Select bits
 10486                           ;	WDTPS = 32768, 1:32768
 10487  300003                     	org	3145731
 10488  300003  1E                 	db	30
 10489                           
 10490                           ; Padding undefined space
 10491  300004                     	org	3145732
 10492  300004  FF                 	db	255
 10493                           
 10494                           ;Config register CONFIG3H @ 0x300005
 10495                           ;	CCP2 MUX bit
 10496                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
 10497                           ;	PORTB A/D Enable bit
 10498                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 10499                           ;	Low-Power Timer1 Oscillator Enable bit
 10500                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 10501                           ;	MCLR Pin Enable bit
 10502                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10503  300005                     	org	3145733
 10504  300005  81                 	db	129
 10505                           
 10506                           ;Config register CONFIG4L @ 0x300006
 10507                           ;	Stack Full/Underflow Reset Enable bit
 10508                           ;	STVREN = ON, Stack full/underflow will cause Reset
 10509                           ;	Single-Supply ICSP Enable bit
 10510                           ;	LVP = ON, Single-Supply ICSP enabled
 10511                           ;	Extended Instruction Set Enable bit
 10512                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 10513                           ;	Background Debugger Enable bit
 10514                           ;	DEBUG = 0x1, unprogrammed default
 10515  300006                     	org	3145734
 10516  300006  85                 	db	133
 10517                           
 10518                           ; Padding undefined space
 10519  300007                     	org	3145735
 10520  300007  FF                 	db	255
 10521                           
 10522                           ;Config register CONFIG5L @ 0x300008
 10523                           ;	Code Protection bit
 10524                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
 10525                           ;	Code Protection bit
 10526                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
 10527                           ;	Code Protection bit
 10528                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
 10529                           ;	Code Protection bit
 10530                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
 10531  300008                     	org	3145736
 10532  300008  0F                 	db	15
 10533                           
 10534                           ;Config register CONFIG5H @ 0x300009
 10535                           ;	Boot Block Code Protection bit
 10536                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 10537                           ;	Data EEPROM Code Protection bit
 10538                           ;	CPD = OFF, Data EEPROM not code-protected
 10539  300009                     	org	3145737
 10540  300009  C0                 	db	192
 10541                           
 10542                           ;Config register CONFIG6L @ 0x30000A
 10543                           ;	Write Protection bit
 10544                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 10545                           ;	Write Protection bit
 10546                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 10547                           ;	Write Protection bit
 10548                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 10549                           ;	Write Protection bit
 10550                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 10551  30000A                     	org	3145738
 10552  30000A  0F                 	db	15
 10553                           
 10554                           ;Config register CONFIG6H @ 0x30000B
 10555                           ;	Configuration Register Write Protection bit
 10556                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 10557                           ;	Boot Block Write Protection bit
 10558                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
 10559                           ;	Data EEPROM Write Protection bit
 10560                           ;	WRTD = OFF, Data EEPROM not write-protected
 10561  30000B                     	org	3145739
 10562  30000B  E0                 	db	224
 10563                           
 10564                           ;Config register CONFIG7L @ 0x30000C
 10565                           ;	Table Read Protection bit
 10566                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 10567                           ;	Table Read Protection bit
 10568                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 10569                           ;	Table Read Protection bit
 10570                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 10571                           ;	Table Read Protection bit
 10572                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 10573  30000C                     	org	3145740
 10574  30000C  0F                 	db	15
 10575                           
 10576                           ;Config register CONFIG7H @ 0x30000D
 10577                           ;	Boot Block Table Read Protection bit
 10578                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 10579  30000D                     	org	3145741
 10580  30000D  40                 	db	64
 10581                           tosu	equ	0xFFF
 10582                           tosh	equ	0xFFE
 10583                           tosl	equ	0xFFD
 10584                           stkptr	equ	0xFFC
 10585                           pclatu	equ	0xFFB
 10586                           pclath	equ	0xFFA
 10587                           pcl	equ	0xFF9
 10588                           tblptru	equ	0xFF8
 10589                           tblptrh	equ	0xFF7
 10590                           tblptrl	equ	0xFF6
 10591                           tablat	equ	0xFF5
 10592                           prodh	equ	0xFF4
 10593                           prodl	equ	0xFF3
 10594                           indf0	equ	0xFEF
 10595                           postinc0	equ	0xFEE
 10596                           postdec0	equ	0xFED
 10597                           preinc0	equ	0xFEC
 10598                           plusw0	equ	0xFEB
 10599                           fsr0h	equ	0xFEA
 10600                           fsr0l	equ	0xFE9
 10601                           wreg	equ	0xFE8
 10602                           indf1	equ	0xFE7
 10603                           postinc1	equ	0xFE6
 10604                           postdec1	equ	0xFE5
 10605                           preinc1	equ	0xFE4
 10606                           plusw1	equ	0xFE3
 10607                           fsr1h	equ	0xFE2
 10608                           fsr1l	equ	0xFE1
 10609                           bsr	equ	0xFE0
 10610                           indf2	equ	0xFDF
 10611                           postinc2	equ	0xFDE
 10612                           postdec2	equ	0xFDD
 10613                           preinc2	equ	0xFDC
 10614                           plusw2	equ	0xFDB
 10615                           fsr2h	equ	0xFDA
 10616                           fsr2l	equ	0xFD9
 10617                           status	equ	0xFD8

Data Sizes:
    Strings     186
    Constant    18
    Data        10
    BSS         479
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58     116
    BANK0           128      0     100
    BANK1           256      0     250
    BANK2           256      0      82
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_8(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[17]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> display.line1(BANK2[16]), display.line0(BANK2[16]), display(BANK2[32]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> display.line1(BANK2[16]), display.line0(BANK2[16]), display(BANK2[32]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(COMRAM[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_9(CODE[25]), STR_7(CODE[18]), STR_6(CODE[18]), STR_2(CODE[20]), 
		 -> STR_1(CODE[20]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> display.line1(BANK2[16]), display.line0(BANK2[16]), display(BANK2[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Debounce@ptr_f	PTR FTN()void  size(2) Largest target is 1
		 -> Tougle_Pump(), Min_Lv2_Incr(), Min_Lv1_Incr(), Change_Mode(), 

    Debounce@filter	PTR unsigned int  size(2) Largest target is 2
		 -> filter_bt_on_off_pump(COMRAM[2]), filter_bt_min_lv2_incr(COMRAM[2]), filter_bt_min_lv1_incr(COMRAM[2]), filter_bt_operation_mode(COMRAM[2]), 

    Debounce@bt_press	PTR unsigned int  size(2) Largest target is 2
		 -> bt_on_off_pump_press(COMRAM[2]), bt_min_lv2_incr_press(COMRAM[2]), bt_min_lv1_incr_press(COMRAM[2]), bt_operation_mode_press(COMRAM[2]), 

    TougleBit@port	PTR unsigned int  size(2) Largest target is 1
		 -> LATC(SFR[1]), 

    ClearBit@port	PTR unsigned int  size(2) Largest target is 1
		 -> LATC(SFR[1]), 

    SetBit@port	PTR unsigned int  size(2) Largest target is 1
		 -> LATC(SFR[1]), 

    Set_Display_Message$768	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[17]), STR_4(CODE[17]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> display.line1(BANK2[16]), display.line0(BANK2[16]), display(BANK2[32]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 32
		 -> display.line1(COMRAM[16]), display.line0(COMRAM[16]), Show_Display@display(COMRAM[32]), 


Critical Paths under _main in COMRAM

    _main->_Debounce
    _decodeIt->_readCoil
    _decodeIt->_readInputCoil
    _writeReg->_generateCRC
    _writeCoil->_generateCRC
    _readReg->_generateCRC
    _readInputReg->_generateCRC
    _readInputCoil->_generateCRC
    _readCoil->_generateCRC
    _clearResponse->_OpnUSART
    _Receive_Message->___xxtofl
    _Sync_Registers->_CheckBit
    _Read_Level->___fldiv
    ___fldiv->___xxtofl
    _Manual_Mode->_Debounce
    _Tougle_Pump->_TougleBit
    _Refresh_Screen->_Set_Display_Message
    _Show_Display->_Lcd_Out
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Set_Display_Message->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Init->_Lcd_Cmd
    _Automatic_Mode->___flge
    ___flge->___fladd

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   65087
                     _Automatic_Mode
                   _ConfigInterrupts
                _Configure_Registers
                           _Debounce
                   _Initialize_Tanks
                            _Lcd_Cmd
                           _Lcd_Init
                        _Manual_Mode
                           _OpnUSART
                         _Read_Level
                    _Receive_Message
                     _Refresh_Screen
                           _adc_init
                           _decodeIt
 ---------------------------------------------------------------------------------
 (1) _decodeIt                                             0     0      0    5232
                           _checkCRC
                           _readCoil
                      _readInputCoil
                       _readInputReg
                            _readReg
                          _writeCoil
                           _writeReg
 ---------------------------------------------------------------------------------
 (2) _writeReg                                            16    16      0     615
                                             20 COMRAM    16    16      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _writeCoil                                           16    16      0     637
                                             20 COMRAM    16    16      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readReg                                             11    11      0     837
                                             20 COMRAM    11    11      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputReg                                        11    11      0     837
                                             20 COMRAM    11    11      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputCoil                                       17    17      0    1025
                                             20 COMRAM    17    17      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readCoil                                            17    17      0    1025
                                             20 COMRAM    17    17      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (3) _generateCRC                                         18    16      2     258
                                              2 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (3) _clearResponse                                        1     1      0      94
                                              7 COMRAM     1     1      0
                           _ClsUSART
                           _OpnUSART
 ---------------------------------------------------------------------------------
 (4) _OpnUSART                                             5     5      0      26
                                              2 COMRAM     5     5      0
                           _ClsUSART
 ---------------------------------------------------------------------------------
 (5) _ClsUSART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checkCRC                                            15    15      0     256
                                              2 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Receive_Message                                      0     0      0    2094
                           _ClearBit
                             _SetBit
                     _Sync_Registers
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _Sync_Registers                                       2     2      0     500
                                              9 COMRAM     2     2      0
                           _CheckBit
 ---------------------------------------------------------------------------------
 (1) _Read_Level                                           4     4      0    3354
                                             41 COMRAM     4     4      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                        _adc_amostra
 ---------------------------------------------------------------------------------
 (2) _adc_amostra                                          7     5      2      22
                                              2 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     898
                                              2 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    1551
                                             16 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _Manual_Mode                                          0     0      0   23224
                           _Debounce
 ---------------------------------------------------------------------------------
 (2) _Debounce                                            12     2     10   23224
                                             46 COMRAM    12     2     10
                        _Change_Mode *
                           _CheckBit
                       _Min_Lv1_Incr *
                       _Min_Lv2_Incr *
                        _Tougle_Pump *
 ---------------------------------------------------------------------------------
 (3) _Tougle_Pump                                          0     0      0     196
                          _TougleBit
 ---------------------------------------------------------------------------------
 (4) _TougleBit                                            7     3      4     196
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _Min_Lv2_Incr                                         0     0      0   10405
                     _Refresh_Screen
                            ___fladd
                             ___flge
                            ___fltol
 ---------------------------------------------------------------------------------
 (3) _Min_Lv1_Incr                                         0     0      0   10405
                     _Refresh_Screen
                            ___fladd
                             ___flge
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2844
                                              2 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (1) _Refresh_Screen                                       0     0      0    5630
                _Set_Display_Message
                       _Show_Display
 ---------------------------------------------------------------------------------
 (2) _Show_Display                                        32     0     32     959
                                             10 COMRAM    32     0     32
                            _Lcd_Out
 ---------------------------------------------------------------------------------
 (3) _Lcd_Out                                              5     2      3     837
                                              5 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Chr_CP                                           3     3      0     176
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Set_Display_Message                                  2     2      0    4671
                                             44 COMRAM     2     2      0
                            ___fltol
                            _sprintf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     531
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    22     12    3279
                                             14 COMRAM    30    18     12
                            ___fltol (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     311
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              9 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     466
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     837
                                              2 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (3) _CheckBit                                             7     3      4     500
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _Change_Mode                                          1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              5 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              3     3      0     176
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Tanks                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Configure_Registers                                  0     0      0       0
       _Configure_External_Interrupt
          _Configure_Timer_Interrupt
 ---------------------------------------------------------------------------------
 (2) _Configure_Timer_Interrupt                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Configure_External_Interrupt                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Automatic_Mode                                       1     1      0    1813
                                             30 COMRAM     1     1      0
                           _ClearBit
                             _SetBit
                             ___flge
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1094
                                             18 COMRAM    12     4      8
                            ___fladd (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetBit                                               7     3      4     348
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ClearBit                                             9     5      4     348
                                              2 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  2     2      0       0
                                              0 COMRAM     2     2      0
                           _OpenTmr0
                        _modbusDelay
 ---------------------------------------------------------------------------------
 (9) _modbusDelay                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _OpenTmr0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Automatic_Mode
     _ClearBit
     _SetBit
     ___flge
       ___fladd (ARG)
   _ConfigInterrupts
   _Configure_Registers
     _Configure_External_Interrupt
     _Configure_Timer_Interrupt
   _Debounce
     _Change_Mode *
     _CheckBit *
     _Min_Lv1_Incr *
       _Refresh_Screen
         _Set_Display_Message
           ___fltol
           _sprintf
             ___fltol (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
           _strcpy
         _Show_Display
           _Lcd_Out
             _Lcd_Chr_CP
             _Lcd_Cmd
       ___fladd
       ___flge
       ___fltol
     _Min_Lv2_Incr *
       _Refresh_Screen
       ___fladd
       ___flge
       ___fltol
     _Tougle_Pump *
       _TougleBit
   _Initialize_Tanks
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Manual_Mode
     _Debounce
   _OpnUSART
     _ClsUSART
   _Read_Level
     ___fldiv
       ___xxtofl (ARG)
     ___fltol
     ___xxtofl
     _adc_amostra
   _Receive_Message
     _ClearBit
     _SetBit
     _Sync_Registers
       _CheckBit
     ___xxtofl
   _Refresh_Screen
   _adc_init
   _decodeIt
     _checkCRC
     _readCoil
       _clearResponse
         _ClsUSART
         _OpnUSART
       _generateCRC
     _readInputCoil
       _clearResponse
       _generateCRC
     _readInputReg
       _clearResponse
       _generateCRC
     _readReg
       _clearResponse
       _generateCRC
     _writeCoil
       _clearResponse
       _generateCRC
     _writeReg
       _clearResponse
       _generateCRC

 _isr (ROOT)
   _OpenTmr0
   _modbusDelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      52       9       32.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FA       7       97.7%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      64       5       78.1%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     3A      74       1       92.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     224      15        0.0%
DATA                 0      0     224       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Apr 21 09:04:06 2021

                         ___fldiv@aexp 0029                           ___fldiv@bexp 0028  
                                    _z 005D                           ___fldiv@sign 0021  
                         generateCRC@i 000F                           generateCRC@j 0011  
                   writeReg@wr_Address 001D                    ___wmul@multiplicand 0005  
                 __size_of_adc_amostra 007C                                    l201 2B10  
                                  l132 32B2                                    l204 2B84  
                                  l301 3580                                    l117 2638  
                                  l118 2684                                    l310 36CC  
                                  l230 37E8                                    l119 26D6  
                                  l135 2246                                    l304 36FC  
                                  l313 3750                                    l241 3728  
                                  l138 249A                                    l307 363A  
                                  l251 2F76                                    l323 30FA  
                                  l501 1624                                    l238 27E2  
                                  l246 35C6                                    l343 32F0  
                                  l407 369C                                    l511 25B4  
                                  l423 303E                                    l256 2EA2  
                                  l264 319A                                    l520 2C30  
                                  l504 1670                                    l512 257E  
                                  l505 1676                                    l433 1A1C  
                                  l417 303A                                    l346 32F2  
                                  l338 3808                                    l530 2284  
                                  l450 1C1E                                    l283 1F82  
                                  l259 2DCE                                    l523 2C56  
                                  l451 1C24                                    l515 25BA  
                                  l292 34D6                                    l436 1A5C  
                                  l349 332E                                    l269 3228  
                                  l533 22AA                                    l525 2CE0  
                                  l437 1A62                                    l286 3776  
                                  l470 180E                                    l295 3836  
                                  l615 08AC                                    l279 1F82  
                                  l447 1BDE                                    l455 29E6  
                                  l536 2370                                    l456 29B0  
                                  l289 37BA                                    l481 189A  
                                  l298 37FA                                    l482 18A0  
                                  l459 29EC                                    l493 15E4  
                                  l662 0BF2                                    l478 184E  
                                  l576 3410                                    l585 3820  
                                  l665 379C                                    l579 3814  
                                  l926 2AAA                                    l927 2AF0  
                                  l954 28E8                                    _isr 0008  
                                  tosl 000FFD                                    wreg 000FE8  
                         ___fltol@exp1 000C                          ?_Min_Lv1_Incr 0001  
                        ?_Min_Lv2_Incr 0001                                   l1151 33A2  
                                 l1207 0FCC                                   l1311 1DD8  
                                 l1144 339A                                   l1208 0FBA  
                                 l1240 1270                                   l1161 3474  
                                 l1154 346C                                   l1322 1D70  
                                 l1235 144C                                   l1315 1D14  
                                 l1308 1C7C                                   l1181 0DE2  
                                 l1237 12AC                                   l1190 10B2  
                                 l1182 0DD0                                   l1246 12F2  
                                 l1335 3602                                   l1183 0D96  
                                 l1248 136A                                   l3201 3794  
                                 l1329 366C                                   l1249 1358  
                                 l4001 16F8                                   l3211 3352  
                                 l4003 16FC                                   l3141 2374  
                                 l3221 338C                                   l3213 335A  
                                 l3205 3330                                   l3301 07F0  
                                 l4021 1730                                   l4013 171C  
                                 l4005 1700                                   l4101 14DE  
                                 l1198 0EFC                                   l3151 2406  
                                 l3143 2378                                   l3223 338E  
                                 l3215 3368                                   l3207 3338  
                                 l3231 342C                                   l3311 0836  
                                 l3303 07FC                                   l4031 1782  
                                 l4023 174C                                   l4015 172C  
                                 l4007 1704                                   l3161 248A  
                                 l3153 2478                                   l3145 23F6  
                                 l3225 3394                                   l3217 336E  
                                 l3209 334A                                   l3241 3466  
                                 l3233 3434                                   l3401 0AB6  
                                 l3313 083A                                   l3305 0800  
                                 l3321 086C                                   l4041 17C0  
                                 l4033 1784                                   l4025 1754  
                                 l4009 1708                                   l4121 1556  
                                 l4113 1506                                   l4105 14F2  
                                 l4201 19B6                                   l3155 2480  
                                 l3147 23FE                                   l3219 3384  
                                 l3235 3442                                   l3227 3412  
                                 l3403 0ABA                                   l3411 0AF8  
                                 l3331 08E4                                   l3323 08BA  
                                 l3315 0858                                   l3307 081E  
                                 l3171 21A6                                   l3163 211A  
                                 l3251 324E                                   l3243 322C  
                                 l4043 17C8                                   l4051 17F8  
                                 l4035 1796                                   l4027 1758  
                                 l4131 157A                                   l4123 1558  
                                 l4115 1522                                   l4107 1502  
                                 l4211 1A0A                                   l4203 19D8  
                                 l3157 2482                                   l3149 2400  
                                 l3237 3458                                   l3229 3424  
                                 l3421 0B8A                                   l3413 0B00  
                                 l3405 0AD2                                   l3325 08CA  
                                 l3333 08F0                                   l3317 0860  
                                 l3309 0832                                   l3501 1EAE  
                                 l3181 222E                                   l3173 21AC  
                                 l3165 211E                                   l3261 3296  
                                 l3245 3230                                   l4061 1834  
                                 l4045 17CC                                   l4029 1780  
                                 l4037 179C                                   l4141 15CC  
                                 l4133 1596                                   l4125 155A  
                                 l4117 152A                                   l4221 1A3E  
                                 l4213 1A0E                                   l4205 19E8  
                                 l4301 2502                                   l3159 2488  
                                 l3239 3460                                   l3191 3652  
                                 l3415 0B46                                   l3423 0BA2  
                                 l3407 0AE8                                   l3351 095A  
                                 l3343 0926                                   l3335 0900  
                                 l3327 08D2                                   l3431 0BE6  
                                 l3271 06F8                                   l3503 1EC0  
                                 l3183 2230                                   l3175 221E  
                                 l3167 219C                                   l3263 329A  
                                 l3247 323A                                   l3255 3258  
                                 l3511 3752                                   l4071 186E  
                                 l4063 1844                                   l4047 17F4  
                                 l4039 17A4                                   l4151 15FA  
                                 l4135 159E                                   l4143 15CE  
                                 l4127 156C                                   l4119 152E  
                                 l4231 1A8C                                   l4223 1A5E  
                                 l4215 1A10                                   l4207 19F8  
                                 l4311 2548                                   l4303 2508  
                                 l3441 27E4                                   l3193 3662  
                                 l3425 0BAE                                   l3417 0B74  
                                 l3409 0AF4                                   l3361 09A2  
                                 l3353 095E                                   l3337 090C  
                                 l3329 08E0                                   l3281 072E  
                                 l3273 0700                                   l3265 06CE  
                                 l3505 1F24                                   l3185 2236  
                                 l3177 2226                                   l3169 21A4  
                                 l3249 3244                                   l3257 327E  
                                 l3601 0C9A                                   l4401 10CE  
                                 l3513 380A                                   l3521 33D8  
                                 l4073 189C                                   l4065 1846  
                                 l4049 17F6                                   l4057 1814  
                                 l4161 1642                                   l4153 160A  
                                 l4137 15A2                                   l4129 1572  
                                 l4081 1480                                   l4241 1AB0  
                                 l4233 1A92                                   l4225 1A5E  
                                 l4217 1A2A                                   l4209 19FA  
                                 l4321 255C                                   l4313 254C  
                                 l4305 2520                                   l3451 283A  
                                 l3443 27FA                                   l3195 3666  
                                 l3187 363E                                   l3427 0BB2  
                                 l3371 09D2                                   l3347 0954  
                                 l3339 0910                                   l3291 079C  
                                 l3283 074C                                   l3275 0710  
                                 l3267 06DA                                   l3435 35C8  
                                 l3507 1F36                                   l3179 2228  
                                 l3259 3288                                   l3611 0CD4  
                                 l3603 0CAA                                   l4411 1102  
                                 l4403 10D0                                   l3515 380E  
                                 l3531 33EE                                   l3523 33E2  
                                 l4067 185C                                   l4059 1824  
                                 l4163 1644                                   l4155 161A  
                                 l4139 15CA                                   l4091 14CC  
                                 l4083 1486                                   l4075 144E  
                                 l4251 1B3E                                   l4243 1ABC  
                                 l4235 1A98                                   l4227 1A64  
                                 l4219 1A3A                                   l4171 18CA  
                                 l4323 256A                                   l4315 2550  
                                 l4307 2534                                   l3453 284A  
                                 l3189 3642                                   l3381 0A26  
                                 l3373 09E8                                   l3357 0974  
                                 l3293 07BE                                   l3285 0754  
                                 l3269 06EC                                   l3429 0BC4  
                                 l3437 35D4                                   l3509 1F4A  
                                 l3701 0EDC                                   l3621 0D00  
                                 l3613 0CE6                                   l3605 0CBA  
                                 l4421 1134                                   l4405 10E0  
                                 l4413 110A                                   l3541 33FA  
                                 l3533 33F2                                   l3525 33E6  
                                 l3517 33A4                                   l4069 186C  
                                 l4165 1672                                   l4157 161C  
                                 l4149 15EA                                   l4093 14CE  
                                 l4085 1490                                   l4077 146E  
                                 l4253 1B4E                                   l4245 1AE4  
                                 l4261 1B78                                   l4237 1AA2  
                                 l4229 1A80                                   l4181 18EE  
                                 l4173 18D0                                   l4341 25B6  
                                 l4325 2570                                   l4317 2554  
                                 l4309 2544                                   l3463 2874  
                                 l3455 284E                                   l3447 280E  
                                 l3199 3778                                   l3391 0A6C  
                                 l3383 0A34                                   l3375 09EE  
                                 l3367 09A8                                   l3295 07C4  
                                 l3287 0770                                   l3279 0716  
                                 l3439 35DC                                   l3711 0F36  
                                 l3703 0EEC                                   l3631 0D14  
                                 l3623 0D04                                   l3615 0CF4  
                                 l3607 0CBC                                   l4503 137A  
                                 l4511 13C2                                   l4431 1168  
                                 l4423 1136                                   l4415 111A  
                                 l4407 10F0                                   l3551 3404  
                                 l3543 33FC                                   l3535 33F4  
                                 l3527 33E8                                   l3519 33C4  
                                 l4159 1632                                   l4095 14D2  
                                 l4087 1494                                   l4079 147A  
                                 l4271 1BCC                                   l4263 1B9A  
                                 l4255 1B50                                   l4247 1B14  
                                 l4239 1AA6                                   l4191 197C  
                                 l4183 18FA                                   l4175 18D6  
                                 l4167 18A2                                   l4335 258C  
                                 l4327 2574                                   l4319 2558  
                                 l4351 293A                                   l4343 28EA  
                                 l4601 265E                                   l3481 28D8  
                                 l3473 289C                                   l3465 287E  
                                 l3457 285C                                   l3449 2838  
                                 l3393 0A78                                   l3385 0A4A  
                                 l3377 0A12                                   l3369 09C0  
                                 l3297 07DA                                   l3289 0798  
                                 l3561 379E                                   l3721 0F66  
                                 l3713 0F40                                   l3705 0F12  
                                 l3641 0D28                                   l3633 0D18  
                                 l3625 0D08                                   l3617 0CF8  
                                 l3609 0CC4                                   l3801 35BA  
                                 l4521 142C                                   l4513 13DC  
                                 l4505 1386                                   l4441 11AE  
                                 l4425 1146                                   l4433 1170  
                                 l4417 1120                                   l4409 1100  
                                 l3553 3406                                   l3545 33FE  
                                 l3537 33F6                                   l3529 33EA  
                                 l4097 14D6                                   l4089 14BC  
                                 l4281 1C00                                   l4273 1BD0  
                                 l4265 1BAA                                   l4257 1B72  
                                 l4249 1B16                                   l4193 198C  
                                 l4185 1922                                   l4177 18E0  
                                 l4169 18BE                                   l4337 259C  
                                 l4329 2576                                   l4361 295C  
                                 l4353 2940                                   l4345 2922  
                                 l4611 26A4                                   l4603 2660  
                                 l3475 28A8                                   l3467 2888  
                                 l3395 0A7C                                   l3387 0A56  
                                 l3379 0A1E                                   l3299 07E4  
                                 l3491 1E5E                                   l3563 37A2  
                                 l3731 0F8E                                   l3723 0F6A  
                                 l3715 0F4E                                   l3707 0F22  
                                 l3651 0D62                                   l3643 0D2C  
                                 l3635 0D1C                                   l3627 0D0C  
                                 l3619 0CFC                                   l3571 0C00  
                                 l3803 35BE                                   l3811 2EB0  
                                 l4523 143A                                   l4515 13F2  
                                 l4507 1394                                   l4451 11D6  
                                 l4443 11B2                                   l4435 1180  
                                 l4427 1156                                   l4419 1126  
                                 l3555 3408                                   l3547 3400  
                                 l3539 33F8                                   l4099 14DA  
                                 l4283 1C20                                   l4275 1BD2  
                                 l4267 1BBA                                   l4259 1B74  
                                 l4195 198E                                   l4187 1952  
                                 l4179 18E4                                   l4339 25A0  
                                 l4291 24E0                                   l4371 2986  
                                 l4363 2976                                   l4355 2946  
                                 l4347 292E                                   l4701 2742  
                                 l4621 26BE                                   l4613 26A6  
                                 l4605 2672                                   l3477 28B8  
                                 l3389 0A5A                                   l3397 0A98  
                                 l3493 1E72                                   l3485 1DDA  
                                 l3565 37B8                                   l3741 0FE8  
                                 l3733 0F9C                                   l3725 0F7A  
                                 l3717 0F50                                   l3661 0DB4  
                                 l3653 0D7E                                   l3645 0D30  
                                 l3637 0D20                                   l3629 0D10  
                                 l3581 0C40                                   l3573 0C0E  
                                 l3821 2F5A                                   l3813 2EB4  
                                 l3805 2EA4                                   l3901 30AC  
                                 l4525 1440                                   l4517 140C  
                                 l4509 13BE                                   l4461 1224  
                                 l4437 1196                                   l4429 1166  
                                 l4541 1C8C                                   l3557 340C  
                                 l3549 3402                                   l4285 1C20  
                                 l4277 1BEC                                   l4269 1BBC  
                                 l4197 19B0                                   l4189 1954  
                                 l4293 24E6                                   l4381 29A6  
                                 l4373 298A                                   l4365 297A  
                                 l4357 2950                                   l4349 2934  
                                 l4703 2774                                   l4631 26CA  
                                 l4623 26BE                                   l4615 26A8  
                                 l4607 269C                                   l3479 28C8  
                                 l3399 0AAA                                   l3495 1E82  
                                 l3487 1DEA                                   l3751 1052  
                                 l3743 0FF6                                   l3735 0FB2  
                                 l3719 0F5E                                   l3727 0F7C  
                                 l3671 0E00                                   l3663 0DC2  
                                 l3655 0D8E                                   l3639 0D24  
                                 l3647 0D34                                   l3591 0C72  
                                 l3583 0C42                                   l3575 0C10  
                                 l3567 369E                                   l3815 2EBC  
                                 l3807 2EA8                                   l3831 2DE0  
                                 l3823 2DD0                                   l3903 30BC  
                                 l4711 36FE                                   l4527 1442  
                                 l4519 1428                                   l4471 126E  
                                 l4463 1234                                   l4455 11EA  
                                 l4439 11A6                                   l4447 11C6  
                                 l4551 1CCA                                   l4543 1CA2  
                                 l4535 1C28                                   l3911 32B6  
                                 l3559 340E                                   l4279 1BFC  
                                 l4199 19B2                                   l4295 24EC  
                                 l4287 249C                                   l4391 29CE  
                                 l4383 29A8                                   l4375 298E  
                                 l4367 297E                                   l4359 2956  
                                 l4705 278C                                   l4641 3574  
                                 l4633 26D0                                   l4625 26C4  
                                 l4617 26AA                                   l4609 26A2  
                                 l3841 372A                                   l3497 1E8E  
                                 l3489 1E4E                                   l3761 108C  
                                 l3753 1072                                   l3745 1030  
                                 l3681 0E40                                   l3729 0F8A  
                                 l3665 0DC4                                   l3657 0DA4  
                                 l3649 0D38                                   l3593 0C74  
                                 l3577 0C20                                   l3585 0C4A  
                                 l3569 0BF4                                   l3817 2F12  
                                 l3809 2EAC                                   l3833 2DE8  
                                 l3825 2DD4                                   l3905 30DA  
                                 l4481 12BC                                   l4473 127A  
                                 l4465 123C                                   l4457 1204  
                                 l4449 11D6                                   l4561 1D52  
                                 l4553 1CFC                                   l4537 1C38  
                                 l3913 32BA                                   l3921 32D2  
                                 l4297 24F2                                   l4289 24D4  
                                 l4393 29D2                                   l4377 299C  
                                 l4369 2982                                   l3907 36CE  
                                 l3771 29EE                                   l4707 27BE  
                                 l4651 3816                                   l4643 3576  
                                 l4635 26D0                                   l4627 26C4  
                                 l4619 26AC                                   l3499 1E96  
                                 l3763 1092                                   l3755 1076  
                                 l3739 0FDC                                   l3747 1032  
                                 l3691 0E6A                                   l3683 0E4C  
                                 l3675 0E14                                   l3667 0DCE  
                                 l3659 0DB0                                   l3595 0C7A  
                                 l3587 0C5A                                   l3579 0C30  
                                 l3819 2F4A                                   l3835 2E3E  
                                 l3827 2DD8                                   l4483 12D2  
                                 l4491 1302                                   l4475 1298  
                                 l4467 124C                                   l4459 1214  
                                 l4571 1DA8                                   l4563 1D60  
                                 l4555 1CFE                                   l4547 1CB6  
                                 l4539 1C46                                   l3923 3300  
                                 l3915 32C2                                   l3931 3142  
                                 l3851 3672                                   l4299 24F8  
                                 l4395 29E8                                   l4379 29A2  
                                 l4731 2B08                                   l3909 3604  
                                 l3781 2A78                                   l3773 2A1C  
                                 l4709 27CE                                   l3941 37EE  
                                 l4645 3578                                   l4637 3538  
                                 l4629 26CA                                   l4581 25BC  
                                 l3765 10A0                                   l3757 1084  
                                 l3749 1042                                   l3685 0E50  
                                 l3677 0E24                                   l3669 0DF0  
                                 l3693 0E70                                   l3597 0C88  
                                 l3589 0C60                                   l3837 2E76  
                                 l3829 2DDC                                   l4493 1310  
                                 l4485 12D8                                   l4477 129A  
                                 l4469 1260                                   l4397 10B4  
                                 l4573 1DB8                                   l4565 1D7E  
                                 l4557 1D0A                                   l4549 1CBE  
                                 l3917 32CA                                   l3933 315C  
                                 l3853 3682                                   l3845 366E  
                                 l3861 2BF8                                   l4389 29BE  
                                 l4661 2FB8                                   l4653 2F78  
                                 l4741 2B32                                   l4733 2B0C  
                                 l4725 2AF2                                   l3783 2A8A  
                                 l3775 2A2C                                   l4639 353C  
                                 l4591 2650                                   l4583 25D4  
                                 l3767 10A2                                   l3759 108A  
                                 l3695 0E96                                   l3687 0E5E  
                                 l3679 0E32                                   l3599 0C8A  
                                 l3839 2E86                                   l4495 1314  
                                 l4487 12E2                                   l4479 12AA  
                                 l4399 10C0                                   l4575 1DC6  
                                 l4567 1D80                                   l4559 1D46  
                                 l3935 3176                                   l3927 30FC  
                                 l4647 37FC                                   l3943 2248  
                                 l3855 3684                                   l3871 2C3E  
                                 l3863 2C14                                   l4671 2FFE  
                                 l4663 2FCA                                   l4655 2F8A  
                                 l4751 2B78                                   l4743 2B36  
                                 l4735 2B12                                   l4727 2AFA  
                                 l3785 2A98                                   l3777 2A5A  
                                 l4649 3476                                   l4593 2656  
                                 l4585 2634                                   l3697 0ECA  
                                 l3689 0E60                                   l3793 37D4  
                                 l4497 1322                                   l4489 12F0  
                                 l4577 1DC8                                   l4569 1D84  
                                 l3937 3194                                   l3929 3116  
                                 l3961 22B0                                   l3945 224C  
                                 l3857 3694                                   l3873 2C44  
                                 l3865 2C28                                   l3881 2C72  
                                 l4673 3006                                   l4665 2FD2  
                                 l4657 2F9E                                   l4681 303A  
                                 l4753 2B80                                   l4745 2B3A  
                                 l4737 2B1A                                   l4729 2AFE  
                                 l3787 2AE8                                   l3779 2A6A  
                                 l3939 37EA                                   l4595 2658  
                                 l3699 0ECC                                   l3795 3582  
                                 l4499 1350                                   l4691 31E0  
                                 l4683 319C                                   l3971 233E  
                                 l3963 22C2                                   l3955 2292  
                                 l3947 2268                                   l3883 2CA6  
                                 l3875 2C50                                   l3859 2BF4  
                                 l4675 3018                                   l4667 2FE4  
                                 l4659 2FB0                                   l4755 2BD8  
                                 l4747 2B3E                                   l4739 2B22  
                                 l3789 2AEE                                   l4597 265A  
                                 l3797 35A2                                   l3893 3040  
                                 l4693 31E4                                   l4685 31A0  
                                 l3973 2368                                   l3957 2298  
                                 l3949 227C                                   l3965 22C6  
                                 l3885 2CC8                                   l3877 2C5C  
                                 l4677 3020                                   l4669 2FEC  
                                 l4757 2BE6                                   l4749 2B68  
                                 l4599 265C                                   l3799 35B2  
                                 l3895 3066                                   l4695 3206  
                                 l4687 31B4                                   l3967 22FA  
                                 l3959 22A4                                   l3887 2CD0  
                                 l3879 2C6E                                   l3991 16B0  
                                 l3983 1678                                   l4679 3032  
                                 l3897 3080                                   l4697 2CE2  
                                 l4689 31CC                                   l3969 2314  
                                 l3889 2CD8                                   l3993 16BA  
                                 l3985 1698                                   l4699 26D8  
                                 l3899 309A                                   l3979 236E  
                                 l3995 16BE                                   l3987 16A4  
                                 ?_isr 0001                                   l3997 16E6  
                                 l3989 16AA                                   l3999 16F6  
                                 STR_1 062C                                   STR_2 0640  
                                 STR_3 06BC                                   STR_4 06AB  
                                 STR_5 0689                                   STR_6 0654  
                                 STR_7 0666                                   STR_8 069A  
                                 STR_9 0613                                   u3000 0E5E  
                                 u3001 0E5A                                   u3010 0E96  
                                 u3011 0E92                                   u3100 0FB2  
                                 u3020 0EDC                                   u3101 0FAE  
                                 u3021 0ED8                                   _LATA 000F89  
                                 u3110 0FC8                                   u3030 0F12  
                                 _LATB 000F8A                                   u3111 0FC4  
                                 u3031 0F0E                                   _LATC 000F8B  
                                 u3200 2A1C                                   u2320 3652  
                                 u2400 32B2                                   u3120 0FDC  
                                 u3040 0F22                                   u4000 1310  
                                 _LATD 000F8C                                   u3201 2A18  
                                 u2321 364E                                   u2305 2140  
                                 u2401 32AE                                   u3121 0FD8  
                                 u3041 0F1E                                   u4001 130C  
                                 _LATE 000F8D                                   u3210 2A5A  
                                 u2330 3662                                   u2410 06EC  
                                 u3130 0FF6                                   u3050 0F4E  
                                 u4010 1322                                   u3211 2A56  
                                 u2331 365E                                   u2411 06E8  
                                 u2315 2166                                   u3131 0FF2  
                                 u3051 0F4A                                   u4011 131E  
                                 u3220 2A78                                   u2340 334A  
                                 u2500 0950                                   u2420 074C  
                                 u3140 1030                                   u3060 0F5E  
                                 u4020 1350                                   u4100 1C46  
                                 u3300 3694                                   u3221 2A74  
                                 u2341 3346                                   u2501 094C  
                                 u2421 0748                                   u3141 102C  
                                 u3061 0F5A                                   u4021 134C  
                                 u4101 1C42                                   u3301 3690  
                                 u3230 2A98                                   u2350 3368  
                                 u2510 0970                                   u2430 07BA  
                                 u3150 1042                                   u3070 0F7A  
                                 u4030 1366                                   u4110 1CA2  
                                 u3310 2C3E                                   u3231 2A94  
                                 u2351 3364                                   u2511 096C  
                                 u2431 07B6                                   u3151 103E  
                                 u3071 0F76                                   u4031 1362  
                                 u4111 1C9E                                   u3311 2C3A  
                                 u3240 2AE8                                   u2360 3384  
                                 u2600 0AAA                                   u2520 099E  
                                 u2440 07DA                                   u3160 1052  
                                 u3080 0F8A                                   u4040 137A  
                                 u4120 1CF8                                   u3400 3300  
                                 u3320 2C6E                                   u4200 2F8A  
                                 u3241 2AE4                                   u2265 2380  
                                 u2361 3380                                   u2601 0AA6  
                                 u2521 099A                                   u2441 07D6  
                                 u3161 104E                                   u3081 0F86  
                                 u4041 1376                                   u4121 1CF4  
                                 u3401 32FC                                   u3321 2C6A  
                                 u4201 2F86                                   u2370 3424  
                                 u2610 0AD2                                   u2530 09D2  
                                 u2450 081A                                   u3170 1072  
                                 u3090 0F9C                                   u3250 3592  
                                 u4050 1394                                   u4130 1D42  
                                 u3330 2CA6                                   u4210 2F9E  
                                 u2275 239A                                   u2371 3420  
                                 u2611 0ACE                                   u2531 09CE  
                                 u2451 0816                                   u3171 106E  
                                 u3091 0F98                                   u3251 358C  
                                 u4051 1390                                   u4131 1D3E  
                                 u3331 2CA2                                   u4211 2F9A  
                                 u4300 270E                                   u2700 2898  
                                 u2380 3442                                   u2620 0AE8  
                                 u2540 09E8                                   u2460 0854  
                                 u3180 1084                                   u3260 35B2  
                                 u3340 3066                                   u4060 13DC  
                                 u4140 1D60                                   u3420 3116  
                                 u3500 2368                                   u4220 2FB0  
                                 u2285 23C0                                   u2701 2894  
                                 u2381 343E                                   u2621 0AE4  
                                 u2541 09E4                                   u2461 0850  
                                 u3181 1080                                   u3261 35AE  
                                 u3341 3062                                   u4061 13D8  
                                 u4141 1D5C                                   u3421 3112  
                                 u3501 2364                                   u4221 2FAC  
                                 u4310 2742                                   u2710 28B8  
                                 u2390 3458                                   u2630 0BC4  
                                 u2550 0A12                                   u2470 08BA  
                                 u3190 10A0                                   u3270 2F12  
                                 u3350 3080                                   u4070 140C  
                                 u4150 1D70                                   u3430 3142  
                                 u3510 16F6                                   u4230 2FCA  
                                 u4311 273E                                   u2711 28B4  
                                 u2391 3454                                   u2631 0BC0  
                                 u2551 0A0E                                   u2471 08B6  
                                 u2295 2126                                   u3191 109C  
                                 u3271 2F0E                                   u3351 307C  
                                 u4071 1408                                   u4151 1D6C  
                                 u3415 3308                                   u3431 313E  
                                 u3511 16F2                                   u4231 2FC6  
                                 _PIE1 000F9D                                   u4320 2774  
                                 u2720 28C8                                   u2640 0BE6  
                                 u2560 0A34                                   u2480 08E0  
                                 u3256 3594                                   u3280 2E3E  
                                 u3360 309A                                   u4080 143A  
                                 u4160 1D7E                                   u3440 3176  
                                 u3600 185C                                   u3520 1718  
                                 u4240 2FE4                                   u4321 2770  
                                 u2721 28C4                                   u2641 0BE2  
                                 u2561 0A30                                   u2481 08DC  
                                 u3281 2E3A                                   u3361 3096  
                                 u4081 1436                                   u4161 1D7A  
                                 u3441 3172                                   u3601 1858  
                                 u3521 1714                                   u4241 2FE0  
                                 u4330 27BE                                   u2570 0A4A  
                                 u2490 0922                                   u2650 3602  
                                 u2730 1DEA                                   u2810 0C0E  
                                 u4170 1DB8                                   u4090 1C38  
                                 u3450 3194                                   u3610 189A  
                                 u3530 172C                                   u4250 2FFE  
                                 u4331 27BA                                   u2571 0A46  
                                 u2491 091E                                   u2651 35FE  
                                 u2731 1DE6                                   u2811 0C0A  
                                 u4171 1DB4                                   u4091 1C34  
                                 u3451 3190                                   u3611 1896  
                                 u3531 1728                                   u4251 2FFA  
                                 u4340 27CE                                   u2660 27FA  
                                 u2580 0A6C                                   u2740 1E5E  
                                 u2900 0D62                                   u2820 0C20  
                                 u2804 36B6                                   u4180 1DC6  
                                 u3460 2292                                   u3540 174C  
                                 u3700 15E0                                   u3620 14CC  
                                 u4260 3018                                   u4341 27CA  
                                 u2661 27F6                                   u2581 0A68  
                                 u2741 1E5A                                   u2901 0D5E  
                                 u2821 0C1C                                   u2805 36B0  
                                 u4181 1DC2                                   u3461 228E  
                                 u3541 1748                                   u3701 15DC  
                                 u3621 14C8                                   u4261 3014  
                                 u4190 2684                                   u3294 3742  
                                 u2670 282E                                   u2590 0A94  
                                 u2750 1E82                                   u2910 0D7A  
                                 u2830 0C30                                   u3470 22C2  
                                 u3710 1632                                   u3630 14EE  
                                 u4270 3032                                   u4350 2B32  
                                 u4191 2680                                   u3295 373C  
                                 u2591 0A90                                   u2751 1E7E  
                                 u2911 0D74                                   u2831 0C2C  
                                 u3471 22BE                                   u3711 162E  
                                 u3631 14EA                                   u4271 302E  
                                 u4351 2B2E                                   u3384 36E6  
                                 u2680 285C                                   u2760 1EC0  
                                 u2920 0D7C                                   u2840 0C72  
                                 u4280 31B4                                   u3480 22FA  
                                 u3560 1796                                   u3720 1670  
                                 u3640 1502                                   u3800 1C1E  
                                 u4360 2B78                                   u3385 36E0  
                                 u2681 2858                                   u2761 1EBC  
                                 u2841 0C6E                                   u4281 31B0  
                                 u3481 22F6                                   u3561 1792  
                                 u3721 166C                                   u3641 14FE  
                                 u3801 1C1A                                   u4361 2B74  
                                 u3394 361C                                   u4290 270C  
                                 u2690 2870                                   u2770 1F36  
                                 u2930 0DA4                                   u2850 0C88  
                                 u3378 30C2                                   u3490 233E  
                                 u3570 17C0                                   u3554 176A  
                                 u3650 1522                                   u3730 1922  
                                 u3810 2520                                   u4370 2BE6  
                                 u3395 3616                                   u4291 2706  
                                 u2691 286C                                   u2675 2824  
                                 u2771 1F32                                   u2931 0DA0  
                                 u2851 0C84                                   u3379 30D6  
                                 u3491 233A                                   u3571 17BC  
                                 u3555 1766                                   u3651 151E  
                                 u3731 191E                                   u3811 251C  
                                 u4371 2BE2                                   _PEIE 007F96  
                                 u2940 0DC2                                   u2860 0C9A  
                                 u3900 1146                                   u3740 19D8  
                                 u3820 258C                                   u4517 219E  
                                 u2941 0DBE                                   u2861 0C96  
                                 u3901 1142                                   u3741 19D4  
                                 u3821 2588                                   u2950 0DE2  
                                 u2870 0CAA                                   u3910 1156  
                                 u3590 180A                                   u3670 156C  
                                 u3750 1A2A                                   u3830 25B4  
                                 u4607 260A                                   u4527 21A8  
                                 u2791 37AC                                   u2951 0DDE  
                                 u2871 0CA6                                   u3911 1152  
                                 u3591 1806                                   u3671 1568  
                                 u3751 1A26                                   u3831 25B0  
                                 u2960 0DF0                                   u2880 0CE6  
                                 u3920 1196                                   u3584 17DE  
                                 u3680 1596                                   u3664 1540  
                                 u3760 1A5C                                   u3840 29BE  
                                 u4617 261A                                   u4537 2220  
                                 u2961 0DEC                                   u2881 0CE2  
                                 u3921 1192                                   u2785 33C8  
                                 u3585 17DA                                   u3681 1592  
                                 u3665 153C                                   u3761 1A58  
                                 u3841 29BA                                   u2970 0E00  
                                 u2890 0CF4                                   u3930 11D6  
                                 u3770 1AE4                                   u3850 29E6  
                                 u4707 2484                                   u4627 262A  
                                 u4547 222A                                   u2971 0DFC  
                                 u2891 0CF0                                   u3931 11D2  
                                 u3771 1AE0                                   u3851 29E2  
                                 u2980 0E32                                   u3940 124C  
                                 u3860 10CE                                   u3780 1B9A  
                                 u4717 2490                                   u4637 2652  
                                 u4557 2232                                   u2981 0E2E  
                                 u3941 1248                                   u3861 10CA  
                                 u3781 1B96                                   u2990 0E40  
                                 u3950 126E                                   u3870 10E0  
                                 u3694 15B4                                   u3790 1BEC  
                                 u4647 2668                                   u4567 223C  
                                 u2991 0E3C                                   u3951 126A  
                                 u3871 10DC                                   u3695 15B0  
                                 u3791 1BE8                                   u3960 1298  
                                 u3880 10F0                                   u4657 269E  
                                 u4577 25DA                                   u3961 1294  
                                 u3881 10EC                                   u3970 12BC  
                                 u3890 1134                                   u4667 26B4  
                                 u4587 25EA                                   u3971 12B8  
                                 u3891 1130                                   u3980 12D2  
                                 u4677 23F8                                   u4597 25FA  
                                 u3981 12CE                                   u3990 12F0  
                                 u4687 2402                                   u3991 12EC  
                                 u4697 247A                         generateCRC@crc 0013  
                       _Automatic_Mode 26D8                                   _main 2AF2  
                                 fsr1h 000FE2                                   fsr2h 000FDA  
                                 indf1 000FE7                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 btemp 0075                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        ??_Manual_Mode 003B                        ___fldiv@new_exp 0022  
                 _bt_on_off_pump_press 0066                        __end_of_Lcd_Cmd 249C  
                      __end_of_Lcd_Out 32B4                        _Receive_Message 319C  
                         ___param_bank 000000                             _Lcd_Chr_CP 2118  
                                ??_isr 0001                          ___fltol@sign1 000B  
                          _Change_Mode 3582                        __end_of___fladd 10B4  
                                ?_main 0001                        __end_of___fldiv 144E  
                                STR_10 0678                        __end_of___fltol 28EA  
                                _T1CON 000FCD                         clearResponse@i 0008  
                      __end_of___lwdiv 33A4                        __end_of___lwmod 3476  
                                i2l220 209E                                  i2l222 210C  
                                i2l217 20A0                                  i2l402 3834  
                                i2l582 37D2                                  _RCREG 000FAE  
                                _RCSTA 000FAB              writeReg@wr_valToWriteHigh 001B  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR1L 000FCE  
                                _SPBRG 000FAF                                  _PORTA 000F80  
                                _PORTB 000F81                                  _PORTC 000F82  
                                _PORTD 000F83                                  _PORTE 000F84  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                                  _TXREG 000FAD  
                  _Configure_Registers 3538                                  _TXSTA 000FAC  
                  writeCoil@wc_Address 0021                         ??_Min_Lv1_Incr 002F  
                _bt_min_lv1_incr_press 0064                                  _coils 0200  
                       ??_Min_Lv2_Incr 002F                        __end_of_dpowers 060B  
                      __end_of_readReg 1A64                                  _tank1 0047  
                                _tank2 003B                        __end_of_isdigit 366E  
                        Debounce@ptr_f 0037                             SetBit@port 0003  
               __end_of_Automatic_Mode 27E4                  writeReg@wr_AddressLow 0015  
                       __pbitbssCOMRAM 03A0                                  pclath 000FFA  
                                tablat 000FF5                                  plusw0 000FEB  
                                plusw2 000FDB                                  ttemp5 0076  
                                ttemp6 0079                                  ttemp7 007D  
                     __end_of_CheckBit 3752                                  status 000FD8  
                                wtemp8 0076                        __end_of_sprintf 0BF4  
                     __end_of_ClsUSART 3816                       __end_of_Debounce 30FC  
                     __end_of_ClearBit 363C                   ?_Configure_Registers 0001  
                         ?_modbusDelay 0001                       __end_of_Lcd_Init 26D8  
                       checkCRC@crcLow 000A              writeCoil@wc_valToWriteLow 0019  
                      __initialization 34D8                           __end_of_main 2BF2  
                _bt_min_lv2_incr_press 0062                             _Read_Level 2CE2  
                  __end_of_Manual_Mode 372A                           TougleBit@pin 0005  
            __size_of_Initialize_Tanks 0062                       __end_of_OpnUSART 3412  
                       _Sync_Registers 30FC                                 ??_main 003B  
                     __end_of_OpenTmr0 37D4                          __activetblptr 000002  
                 Automatic_Mode@isFull 001F                          ?_readInputReg 0001  
                __end_of_clearResponse 369E               __end_of_ConfigInterrupts 3822  
               __size_of_readInputCoil 022A                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                                 _ADCON2 000FC0  
                               _ADRESH 000FC4                                 _ADRESL 000FC3  
                      ?_Automatic_Mode 0001                            readCoil@crc 001B  
                     __end_of_adc_init 380A                            readCoil@lsb 0022  
                               i2l4721 37D0                                 i2l4713 37BC  
                               i2l4801 2062                                 i2l4715 37C4  
                               i2l4723 382C                                 i2l4811 208A  
                               i2l4803 2066                                 i2l4717 37CC  
                               i2l4821 20AE                                 i2l4813 208E  
                               i2l4805 2074                                 i2l4719 37CE  
                               i2l4831 20D4                                 i2l4823 20B2  
                               i2l4815 2092                                 i2l4807 2084  
                               i2l4841 2104                                 i2l4833 20DC  
                               i2l4825 20B4                                 i2l4817 2096  
                               i2l4809 2086                                 i2l4761 1F9C  
                               i2l4835 20EC                                 i2l4827 20C4  
                               i2l4843 210A                                 i2l4771 1FC2  
                               i2l4763 1F9E                                 i2l4837 20EE  
                               i2l4829 20CC                                 i2l4781 1FF6  
                               i2l4773 1FCA                                 i2l4765 1FA6  
                               i2l4839 2100                                 i2l4791 202E  
                               i2l4783 1FFE                                 i2l4775 1FCC  
                               i2l4767 1FAA                                 i2l4759 1F8E  
                               i2l4793 203C                                 i2l4777 1FDE  
                               i2l4769 1FAE                                 i2l4785 2000  
                               i2l4795 204C                                 i2l4787 200E  
                               i2l4779 1FE2                                 i2l4797 204E  
                               i2l4789 201E                                 i2l4799 2052  
                            ??_Lcd_Cmd 0003                __end_of_Receive_Message 322A  
                            ??_Lcd_Out 0009                       __end_of_checkCRC 2372  
                     __end_of_decodeIt 3040                       __end_of___xxtofl 1DDA  
          __end_of_Set_Display_Message 1F84                  ??_Configure_Registers 0003  
               writeCoil@wc_valToWrite 001D                       ??_Refresh_Screen 002F  
                 __size_of_generateCRC 00F0                                 _SetBit 36CE  
                               ___flge 29EE                            ?_Lcd_Chr_CP 0001  
                            ??___fladd 000B                                 ___wmul 3778  
                            ??___fldiv 0019                              ??___fltol 0007  
                            ??___lwdiv 0007                              ??___lwmod 000E  
               __end_of_Sync_Registers 319C                         Debounce@filter 0035  
                     __end_of_readCoil 18A2                                 clear_0 34FE  
                               clear_1 350A                                 clear_2 3516  
                               clear_3 3524                                 _screen 005B  
                               isa$std 000001                 writeReg@wr_AddressHigh 0017  
                               _strcpy 35C8                        readInputReg@crc 0017  
                            ??_readReg 0015                           __pdataCOMRAM 006A  
                            ??_isdigit 0003                         ??_readInputReg 0015  
                         __mediumconst 0000                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                            ??_sprintf 001B                     __size_of_TougleBit 0030  
                     __end_of_writeReg 29EE                             ___flge@ff1 0013  
                           ___flge@ff2 0017                           ___xxtofl@arg 000D  
                         ___xxtofl@exp 000C                           ___xxtofl@val 0003  
                           __accesstop 0080                __end_of__initialization 352A  
             writeReg@wr_valToWriteLow 0019                          ___rparam_used 000001  
                      checkCRC@crcHigh 0008                             ___fltol@f1 0003  
                          _Manual_Mode 36FE                          _readInputCoil 144E  
                       __pcstackCOMRAM 0001                            ?_Read_Level 0001  
                 __end_of_Min_Lv1_Incr 2F78                   __end_of_Min_Lv2_Incr 2EA4  
                      ?_Sync_Registers 0001                              ?_CheckBit 0003  
                            ?_ClsUSART 0001                          TougleBit@port 0003  
                            ?_Debounce 002F                              ?_ClearBit 0003  
                            ?_Lcd_Init 0001                           _endOfMessage 0061  
                        ??_Tougle_Pump 000A                           sprintf@width 002A  
                  __size_of_Lcd_Chr_CP 0130                         fp__Change_Mode 0000  
            readInputCoil@howManyBytes 0020                             __pbssBANK0 0080  
                           __pbssBANK1 0100                             __pbssBANK2 0200  
              _bt_operation_mode_press 0068                       ?_Receive_Message 0001  
                            ?_OpnUSART 0001                        _refresh_display 03A0  
                            ?_OpenTmr0 0001                         ?_readInputCoil 0001  
                              ?_SetBit 0003                                ?___flge 0013  
                 __size_of_modbusDelay 000A                                ?___wmul 0003  
                        ??_adc_amostra 0005                      __end_of_TougleBit 36CE  
           ?_Configure_Timer_Interrupt 0001                       _Initialize_Tanks 3476  
                         ?_Change_Mode 0001                              ?_adc_init 0001  
                              ?_strcpy 0003                              ?_checkCRC 0001  
                           ??_CheckBit 0007                              ?_decodeIt 0001  
                            ?___xxtofl 0003                             ??_ClsUSART 0003  
                           ??_Debounce 0039                             ??_ClearBit 0007  
                        ?_Show_Display 000B                             ??_Lcd_Init 0006  
                  __size_of_Read_Level 00EE                                _Lcd_Cmd 2372  
                            ?_readCoil 0001                                _Lcd_Out 322A  
                           ??_OpnUSART 0003                     __size_of_writeCoil 0120  
              _Set_Display_Message$768 002D                    __end_of_Tougle_Pump 37EA  
                    readReg@rr_Address 0019                             ??_OpenTmr0 0001  
                              __Hparam 0000                                __Lparam 0000  
                 __end_of_readInputReg 1C26                        __size_of_SetBit 0030  
                           _holdingReg 0080                        __size_of___flge 0104  
                              ___fladd 0BF4                                ___fldiv 10B4  
                    generateCRC@crcLow 000B                                ___fltol 27E4  
                      __size_of___wmul 0026                                ___lwdiv 3330  
                              ___lwmod 3412                           __psmallconst 0600  
                           _newMessage 006B                                __pcinit 34D8  
                        _messageLength 005F                           CheckBit@port 0003  
                              __ramtop 0600                             ??_adc_init 0003  
    __end_of_Configure_Timer_Interrupt 37FC                                __ptext0 2AF2  
                              __ptext1 2F78                                __ptext2 28EA  
                              __ptext3 249C                                __ptext4 18A2  
                              __ptext5 1A64                                __ptext6 144E  
                              __ptext7 1678                                __ptext8 2BF2  
                              __ptext9 366E                              ?_writeReg 0001  
                              _display 0232                              _T0CONbits 000FD5  
                      __size_of_strcpy 003C                      __end_of_hexpowers 0613  
                           ??_checkCRC 0003                                _dpowers 0601  
                              _readReg 18A2                    __end_of_adc_amostra 3330  
                              _isdigit 363C                           __size_of_isr 2110  
                           ??_decodeIt 0026                             ??___xxtofl 0007  
                       ??_Show_Display 002B                       ??_Automatic_Mode 001F  
                            _INCREMENT 006A                       readInputCoil@crc 001B  
                     readInputCoil@lsb 0022                      ?_ConfigInterrupts 0001  
                              _sprintf 06CE                         __pintcode_body 1F84  
                 end_of_initialization 352A                 _filter_bt_min_lv1_incr 006E  
               _filter_bt_min_lv2_incr 006C                     ??_ConfigInterrupts 0003  
                    readReg@rr_numRegs 001B                             ??_readCoil 0015  
                        __Lmediumconst 0000                                int_func 1F84  
                      ??_readInputCoil 0015                          _modbusMessage 005E  
                __size_of_Min_Lv1_Incr 00D4                  __size_of_Min_Lv2_Incr 00D4  
                         writeCoil@crc 001F                              _RCSTAbits 000FAB  
                         ??_Lcd_Chr_CP 0003                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc1 000FE6                                postinc2 000FDE  
                           _timerCount 0060                             ??_writeReg 0015  
                            _PORTDbits 000F83                              _PORTEbits 000F84  
                    readCoil@remainder 001D                      __end_of_writeCoil 25BC  
                          ___fladd@grs 0012                          ___xxtofl@sign 000B  
                            _TRISBbits 000F93                              _TRISCbits 000F94  
                            _TRISDbits 000F95                              _TRISEbits 000F96  
                          ___fldiv@grs 0024                            ___fldiv@rem 001D  
                          _Tougle_Pump 37D4   __end_of_Configure_External_Interrupt 3838  
__size_of_Configure_External_Interrupt 0002           _Configure_External_Interrupt 3836  
          __end_of_Configure_Registers 3582                           _Min_Lv1_Incr 2EA4  
                         _Min_Lv2_Incr 2DD0                     __end_of_Lcd_Chr_CP 2248  
                        ??_generateCRC 0005                              _TXSTAbits 000FAC  
                         ?_Manual_Mode 0001                       ??_Sync_Registers 000A  
                writeReg@wr_valToWrite 001F                           ??_Read_Level 002A  
                       __end_of_SetBit 36FE                 __size_of_clearResponse 0030  
         __size_of_Set_Display_Message 01AA                writeCoil@wc_AddressHigh 0017  
                       __end_of___flge 2AF2                            _adc_amostra 32B4  
                       __end_of___wmul 379E                            _BAUDCONbits 000FB8  
                        __pidataCOMRAM 3822                              SetBit@pin 0005  
                         Debounce@port 002F                   __size_of_Change_Mode 0046  
                       __end_of_strcpy 3604                    start_initialization 34D8  
                         ClearBit@port 0003                      __size_of_CheckBit 0028  
                          __end_of_isr 2118                      __size_of_ClsUSART 000C  
                    __size_of_Debounce 00BC                      __size_of_ClearBit 0038  
             _filter_bt_operation_mode 0072                          Lcd_Out@buffer 0007  
                    __size_of_Lcd_Init 011C                     __end_of_Read_Level 2DD0  
                         _count_screen 0059               __end_of_Initialize_Tanks 34D8  
        ?_Configure_External_Interrupt 0001                  __size_of_readInputReg 01C2  
                           readReg@crc 0017                               ??_SetBit 0007  
                 __end_of_Show_Display 3778                      __size_of_OpnUSART 006E  
                   Read_Level@adcTank1 002A                     Read_Level@adcTank2 002C  
                  __end_of_generateCRC 2CE2                               ??___flge 001B  
                    __size_of_OpenTmr0 0018                               ??___wmul 0007  
                       readInputCoil@i 0023                         readInputCoil@j 0024  
                       readInputCoil@k 0025                         readInputCoil@l 0021  
          ??_Configure_Timer_Interrupt 0003                __size_of_Refresh_Screen 001E  
                             ??_strcpy 0007                              ___fladd@a 0007  
                            ___fladd@b 0003                              ___fldiv@a 0015  
                            ___fldiv@b 0011                              _TougleBit 369E  
                    __size_of_adc_init 000E                            __pbssCOMRAM 003B  
                         _readInputReg 1A64                      __size_of_checkCRC 012A  
                    __size_of_decodeIt 00C8                          _clearResponse 366E  
                    __size_of___xxtofl 01B4                           _isdigit$2041 0004  
                             ?_Lcd_Cmd 0001                            sprintf@flag 0029  
                             ?_Lcd_Out 0006                    Show_Display@display 000B  
                          sprintf@prec 0026                          ??_modbusDelay 0001  
                    __size_of_readCoil 022A                       ___lwdiv@dividend 0003  
                            __pintcode 0008               __size_of_Receive_Message 008E  
                             ?___fladd 0003                               ?___fldiv 0011  
                             ?___fltol 0003                               ?___lwdiv 0003  
                             ?___lwmod 000A                            __smallconst 0600  
                            checkCRC@i 0010                              checkCRC@j 000C  
                           ?_TougleBit 0003                               ?_readReg 0001  
                             ?_isdigit 0001                      __size_of_writeReg 0104  
                       ?_clearResponse 0001                              _hexpowers 060B  
                     ___lwdiv@quotient 0007                               ?_sprintf 000F  
                          CheckBit@pin 0005                   readCoil@howManyBytes 0020  
            _Configure_Timer_Interrupt 37EA                            _generateCRC 2BF2  
                       ___wmul@product 0007                               _LATBbits 000F8A  
                             _LATDbits 000F8C                               _PIE1bits 000F9D  
       ??_Configure_External_Interrupt 0003                               i2u440_40 1FDE  
                             i2u440_41 1FDA                               i2u441_40 1FF6  
                             i2u441_41 1FF2                               _PIR1bits 000F9E  
                             i2u450_40 2100                               i2u442_40 200E  
                             i2u450_41 20FC                               i2u442_41 200A  
                             i2u443_40 201E                               i2u443_41 201A  
                             i2u444_40 202E                               i2u444_41 202A  
                             i2u445_40 203C                               i2u445_41 2038  
                             i2u446_40 2062                               i2u438_40 1F9C  
                             i2u446_41 205E                               i2u438_41 1F98  
                             i2u447_40 2074                               i2u439_40 1FC2  
                             i2u447_41 2070                               i2u439_41 1FBE  
                            _operation 005C                               i2u448_40 20AE  
                             i2u448_41 20AA                               i2u449_40 20C4  
                             i2u449_41 20C0              __size_of_ConfigInterrupts 000C  
                       fp__Tougle_Pump 0000                               _RCONbits 000FD0  
                             Lcd_Out@x 0006                               Lcd_Out@y 0009  
                 __size_of_Manual_Mode 002C                            writeReg@crc 0021  
                  __end_of_modbusDelay 3836                           Lcd_Init@data 0007  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0003  
                             _CheckBit 372A                               _ClsUSART 380A  
                             _Debounce 3040                               _ClearBit 3604  
                          checkCRC@crc 000E                  _filter_bt_on_off_pump 0070  
                             _Lcd_Init 25BC                              _writeCoil 249C  
               writeCoil@wc_AddressLow 0015                           ?_Tougle_Pump 0001  
                          _INTCON2bits 000FF1                    _Set_Display_Message 1DDA  
                            copy_data0 34EC                            Debounce@pin 0031  
                        OpnUSART@spbrg 0004                            ClearBit@pin 0005  
                __size_of_Show_Display 0026                       __size_of_Lcd_Cmd 012A  
                             _OpnUSART 33A4                       __size_of_Lcd_Out 008A  
                            readCoil@i 0023                              readCoil@j 0024  
                            readCoil@k 0025                              readCoil@l 0021  
                             _OpenTmr0 37BC                               __Hrparam 0000  
                __end_of_readInputCoil 1678                               __Lrparam 0000  
                        readInputReg@i 001D                          readInputReg@j 001F  
                 ?_Set_Display_Message 0001                           ?_adc_amostra 0003  
                     __size_of___fladd 04C0                       __size_of___fldiv 039A  
                     __size_of___fltol 0106                     generateCRC@crcHigh 000D  
                     __size_of___lwdiv 0074                       __size_of___lwmod 0064  
                       _Refresh_Screen 379E                               _adc_init 37FC  
                    ??_Receive_Message 0011                               _checkCRC 2248  
                          ??_TougleBit 0007                             sprintf@idx 0021  
                           sprintf@len 0024                        ??_clearResponse 0008  
                           sprintf@val 0027                               _decodeIt 2F78  
                             ___xxtofl 1C26                       __size_of_readReg 01C2  
                     __size_of_isdigit 0032                         Lcd_Chr_CP@data 0005  
                      ___lwdiv@divisor 0005                           _Show_Display 3752  
                      ___lwdiv@counter 0009                               __ptext10 33A4  
                             __ptext11 380A                               __ptext20 36FE  
                             __ptext12 2248                               __ptext21 3040  
                             __ptext13 37FC                               __ptext30 322A  
                             __ptext22 2DD0                               __ptext14 319C  
                             __ptext31 2118                               __ptext23 2EA4  
                             __ptext15 30FC                               __ptext40 372A  
                             __ptext32 1DDA                               __ptext24 3582  
                             __ptext16 2CE2                               __ptext41 25BC  
                             __ptext33 35C8                               __ptext25 37D4  
                             __ptext17 32B4                               __ptext50 36CE  
                             __ptext42 2372                               __ptext34 06CE  
                             __ptext26 369E                               __ptext18 1C26  
                             __ptext51 3604                               __ptext43 3476  
                             __ptext35 363C                               __ptext27 0BF4  
                             __ptext19 10B4                               __ptext44 3538  
                             __ptext36 3778                               __ptext28 379E  
                             __ptext53 382C                               __ptext45 37EA  
                             __ptext37 3412                               __ptext29 3752  
                             __ptext54 37BC                               __ptext46 3836  
                             __ptext38 3330                               __ptext55 0000  
                             __ptext47 3816                               __ptext39 27E4  
                             __ptext48 26D8                               __ptext49 29EE  
                           ?_writeCoil 0001                       Debounce@bt_press 0033  
                     __size_of_sprintf 0526                             strcpy@from 0005  
           writeCoil@wc_valToWriteHigh 001B                            Lcd_Cmd@data 0005  
                             _readCoil 1678                      ?_Initialize_Tanks 0001  
                        __size_of_main 0100                __size_of_Automatic_Mode 010C  
                _count_refresh_display 0057                               _received 0100  
                   ??_Initialize_Tanks 0003                            _modbusDelay 382C  
         __size_of_Configure_Registers 004A                             writeCoil@i 0023  
                             isa$xinst 000000                               _response 017D  
                ??_Set_Display_Message 002D                               int$flags 0075  
             generateCRC@messageLength 000A                 __end_of_Refresh_Screen 37BC  
                        ??_Change_Mode 0003                               _writeReg 28EA  
                          Lcd_Out@data 000A                             _INTCONbits 000FF2  
               readInputReg@rr_Address 0019                     readCoil@rc_Address 0019  
                             readReg@i 001D                               readReg@j 001F  
              readInputCoil@rc_Address 0019                    readCoil@rc_numCoils 001E  
                             isdigit@c 0005               readInputCoil@rc_numCoils 001E  
                             intlevel2 0000                              sprintf@ap 0022  
                            sprintf@cp 001F                              sprintf@sp 000F  
                     ___lwmod@dividend 000A                       _ConfigInterrupts 3816  
                            writeReg@i 0023     __size_of_Configure_Timer_Interrupt 0012  
                      ?_Refresh_Screen 0001           _last_operation_mode_received 0053  
               readInputReg@rr_numRegs 001B                __size_of_Sync_Registers 00A0  
                             sprintf@c 002C                               sprintf@f 0011  
                      ___lwmod@divisor 000C                        fp__Min_Lv1_Incr 0000  
                      fp__Min_Lv2_Incr 0000                               strcpy@cp 0007  
                             strcpy@to 0003                        ___lwmod@counter 000E  
                     adc_amostra@canal 0009                    __end_of_Change_Mode 35C8  
                          ??_writeCoil 0015                          ___fladd@signs 000F  
            _last_pump_status_received 0055                   __size_of_Tougle_Pump 0016  
                         ___fladd@aexp 0010                           ___fladd@bexp 0011  
                         ?_generateCRC 0003                 readInputCoil@remainder 001D  
